[
    {
        "id": "bfffca06cd507a7e",
        "type": "tab",
        "label": "Definitions",
        "disabled": false,
        "info": "Definicio de variables globales y constantes",
        "env": []
    },
    {
        "id": "dac92ca23c599b5f",
        "type": "tab",
        "label": "SROS/CROS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08d4b7fc21a7a783",
        "type": "tab",
        "label": "SSTS/CSTS",
        "disabled": false,
        "info": "Actualización \r\nde estaciones",
        "env": []
    },
    {
        "id": "83ce3d0ba7d79dba",
        "type": "tab",
        "label": "ClienteTCP_Silo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80dba39c1a7f3e3e",
        "type": "tab",
        "label": "Tareas",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1a915f5a51627b4",
        "type": "tab",
        "label": "TareasPIE1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a4cf0f9e02a0773d",
        "type": "tab",
        "label": "TareaTLV1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1e64cec7f3d8de56",
        "type": "tab",
        "label": "TareaTLV2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3f5b05842fb56c90",
        "type": "tab",
        "label": "TareaPSP1-3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "183127036e7cddc7",
        "type": "tab",
        "label": "TareaPSP5-7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1373e2c202c57aa8",
        "type": "tab",
        "label": "TareaPSP9-11",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7fb99878331dcff5",
        "type": "tab",
        "label": "tareaPSP2-4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6a4583e29f652d9b",
        "type": "tab",
        "label": "TareaPSP6-8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e675624204e9941",
        "type": "tab",
        "label": "TareaPSP10-12",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cdbaef789409ba8a",
        "type": "tab",
        "label": "busquedaTareaPSPs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "079543c895cc9aec",
        "type": "tab",
        "label": "eventoFinOrdenes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "85cd6b9fa59e1a60",
        "type": "tab",
        "label": "FSM-Gen",
        "disabled": false,
        "info": ""
    },
    {
        "id": "10c270ce21d875c2",
        "type": "tab",
        "label": "SALI/CALI",
        "disabled": false,
        "info": "Registro del \r\nsistema TMS en WMS",
        "env": []
    },
    {
        "id": "282eecaa43c8d12e",
        "type": "tab",
        "label": "busquedaAutoTraslos",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b285dd85d74c1d1a",
        "type": "tab",
        "label": "SIMO/CIMO",
        "disabled": false,
        "info": "Intercambio \r\nde movimientos",
        "env": []
    },
    {
        "id": "0c63b7609023e589",
        "type": "tab",
        "label": "Evento+BusquedaPIE1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8c5ac7120ee50dac",
        "type": "tab",
        "label": "finOrdenPIS1_PIS2_PIS3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "345b91c6976c416d",
        "type": "tab",
        "label": "MariaDB",
        "disabled": false,
        "info": "# 1. Actualizar los repositorios\r\n# Esto asegura que el sistema esté al día con los paquetes más recientes.\r\nsudo apt-get update\r\n\r\n# 2. Instalar MariaDB\r\n# Este comando instala el servidor MariaDB.\r\nsudo apt-get install mariadb-server\r\n\r\n# 3. Iniciar el servicio de MariaDB\r\n# Inicia el servicio de MariaDB después de la instalación.\r\nsudo systemctl start mariadb\r\n\r\n# 4. Verificar el estado del servicio\r\n# Esto permite verificar si el servicio está corriendo correctamente.\r\nsudo systemctl status mariadb\r\n\r\n# 5. Configurar la seguridad inicial de MariaDB\r\n# El script mysql_secure_installation ayuda a asegurar la instalación de MariaDB,\r\n# configurando una contraseña de root y eliminando configuraciones inseguras.\r\nsudo mysql_secure_installation\r\n\r\n# 6. Editar el archivo de configuración de MariaDB para optimizar el consumo de recursos\r\n# Abre el archivo de configuración principal de MariaDB.\r\n# Nota: Si este archivo no existe, intenta usar /etc/mysql/my.cnf.\r\nsudo nano /etc/mysql/mariadb.conf.d/50-server.cnf\r\n\r\n# Añade o modifica las siguientes líneas en la sección [mysqld] del archivo:\r\n# Estas configuraciones limitan el uso de memoria y otros recursos en MariaDB.\r\n# Si no existe la sección [mysqld], agrégala al final del archivo.\r\n\r\n[mysqld]\r\nmax_connections = 10                # Limita las conexiones simultáneas a 10\r\nkey_buffer_size = 16K                # Reduce el tamaño del buffer de claves a 16KB\r\nquery_cache_size = 0                 # Desactiva la caché de consultas\r\ninnodb_buffer_pool_size = 5M         # Limita el pool de buffers de InnoDB a 5MB\r\ninnodb_log_buffer_size = 256K        # Limita el buffer de logs de InnoDB a 256KB\r\nmax_allowed_packet = 1M              # Tamaño máximo permitido de paquete es 1MB\r\nthread_stack = 128K                  # Tamaño de pila de hilos reducido a 128KB\r\n\r\n# Guarda los cambios en nano:\r\n# Presiona Ctrl+O para guardar, luego Enter para confirmar y Ctrl+X para salir.\r\n\r\n# 7. Reiniciar el servicio de MariaDB para aplicar los cambios\r\n# Esto reinicia MariaDB con la nueva configuración aplicada.\r\nsudo systemctl restart mariadb\r\n\r\n# 8. Verificar el estado del servicio después de la optimización\r\n# Verifica nuevamente que el servicio esté corriendo después de los cambios.\r\nsudo systemctl status mariadb\r\n\r\n# 9. Conectarse a MariaDB para verificar la configuración\r\n# Ingresa a la consola de MariaDB para realizar consultas o pruebas adicionales.\r\nsudo mysql -u root -p\r\n\r\n# 10. Crear una base de datos de prueba y un usuario\r\n# Una vez dentro de MariaDB, puedes crear una base de datos de prueba.\r\nCREATE DATABASE iotdb;\r\nCREATE USER 'iotuser'@'localhost' IDENTIFIED BY 'password';\r\nGRANT ALL PRIVILEGES ON iotdb.* TO 'iotuser'@'localhost';\r\nFLUSH PRIVILEGES;\r\n\r\n# 11. Verificar que los cambios en la configuración se hayan aplicado correctamente\r\n# Puedes verificar los valores actuales de los parámetros optimizados.\r\nSHOW VARIABLES LIKE 'max_connections';\r\nSHOW VARIABLES LIKE 'innodb_buffer_pool_size';\r\nSHOW VARIABLES LIKE 'innodb_log_buffer_size';\r\n\r\n# Esto te mostrará los valores actuales de las configuraciones que has cambiado.\r\n",
        "env": []
    },
    {
        "id": "5f07b2ace243eb3a",
        "type": "tab",
        "label": "S7 Gestion",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "db33502388dab964",
        "type": "tab",
        "label": "Tablas_Scada",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b4cd349f4176f6d7",
        "type": "subflow",
        "name": "Clock´s 10Hz 3Hz 1Hz 0.5Hz  (3) (3) (4) (2)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 680,
                "y": 260,
                "wires": [
                    {
                        "id": "bc65aacc3f50e20a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1160,
                "y": 260,
                "wires": [
                    {
                        "id": "21ebc4dc31d2a5bc",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 520,
                "wires": [
                    {
                        "id": "6cc9154844a53ef9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1160,
                "y": 520,
                "wires": [
                    {
                        "id": "f7fc3a6c8910455e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "10Hz",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "3Hz",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "1Hz",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "0.5Hz",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/serial.svg",
        "status": {
            "x": 1060,
            "y": 480,
            "wires": [
                {
                    "id": "f7fc3a6c8910455e",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "089ccca9a0181c12",
        "type": "group",
        "z": "b4cd349f4176f6d7",
        "name": "Clock 0.3 Hz",
        "style": {
            "label": true
        },
        "nodes": [
            "21ebc4dc31d2a5bc",
            "04567bd103d350f8",
            "daf2bda870f8ad97",
            "8da50c5b7acc508c",
            "bd2e1e0a1f32f876",
            "07da3958d1c64faa",
            "51db95d1e0b9a4c4",
            "ad562afee7db6e82"
        ],
        "x": 854,
        "y": 179,
        "w": 452,
        "h": 242
    },
    {
        "id": "0b66a4af96644ef3",
        "type": "group",
        "z": "b4cd349f4176f6d7",
        "name": "Clock 0.5 Hz",
        "style": {
            "label": true
        },
        "nodes": [
            "6cc9154844a53ef9",
            "9c0eba4c00fdda3d",
            "f14ee4c345ad7728",
            "a2dffa1bde8feca2",
            "54606491f50eec65",
            "a5e83f58ec10409b",
            "3b8ad00b75512663",
            "60ec0bd09d74340a"
        ],
        "x": 374,
        "y": 439,
        "w": 472,
        "h": 262
    },
    {
        "id": "3b22cf7219cb697a",
        "type": "group",
        "z": "b4cd349f4176f6d7",
        "name": "Clock 1 Hz",
        "style": {
            "label": true
        },
        "nodes": [
            "f7fc3a6c8910455e",
            "0cfebaa7bd426e0a",
            "8609be2411f2e668",
            "66058a0fae9f2e68",
            "ba5b15b368af0a5d",
            "08dbb4f86a20c6bd",
            "a2f985bc61cfd510",
            "5f633ac6507c620b"
        ],
        "x": 854,
        "y": 439,
        "w": 452,
        "h": 262
    },
    {
        "id": "0118b18c9a2630b1",
        "type": "group",
        "z": "b4cd349f4176f6d7",
        "name": "Clock 0.1 Hz",
        "style": {
            "label": true
        },
        "nodes": [
            "bc65aacc3f50e20a",
            "4ee345a8107f4408",
            "1326df983b30b393",
            "a64063d1bef88590",
            "046234ac3421a890",
            "d10116835931796e",
            "31a164c4fad4f1d7",
            "58ccd8215628cc12"
        ],
        "x": 374,
        "y": 179,
        "w": 432,
        "h": 242
    },
    {
        "id": "e9191d82beea3b97",
        "type": "group",
        "z": "b285dd85d74c1d1a",
        "name": "SIMO_Event(1)",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "ef22a84f2b5204c6",
            "5869b0ce1058f802",
            "877727982784be48",
            "9c809ef069f337fa",
            "60656ca6d4413ecd",
            "7ed2cf725ae39203",
            "e3623dd90d0f5161",
            "d4503e9b869e2326",
            "61044664b949e6c1",
            "767edb207210a950",
            "079ce06a454ad8b0",
            "c3e2dbdc518a9486",
            "5f14aee18a3f1f2f",
            "451f224be3acb151",
            "2183bfe5139f7566",
            "769edaab104d90fe",
            "77174f2f5f5b4beb",
            "db1b762fdbe1dd51",
            "ae3e4c5ba4bc78a6",
            "6c24821f0f2677b1"
        ],
        "x": 34,
        "y": 39,
        "w": 1022,
        "h": 482
    },
    {
        "id": "12850eccce220e12",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "name": "SALI/CALI",
        "style": {
            "label": true
        },
        "nodes": [
            "7f935eb6f0d4ab45",
            "36b6aa6f2eeb66a8",
            "58ab9e5ffc5432d6"
        ],
        "x": 414,
        "y": 319,
        "w": 432,
        "h": 102
    },
    {
        "id": "f8b9f88b30f86451",
        "type": "group",
        "z": "10c270ce21d875c2",
        "name": "SALI",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "9a0f81534dde114e",
            "326702b40731a84a",
            "8bf1d71a3e8519a3",
            "b40ee75550fa9610",
            "6550a293ca8bef8f",
            "1781e394292fe6ff",
            "a515340fef15a873",
            "76e74a37dcbe73e7",
            "1432f015f1ce34d5",
            "c1862bbde47bb43b",
            "9791a13a266cf8aa",
            "5b7d705d7e4bb239",
            "d26efa556434d7be",
            "1155a809949cc5a6"
        ],
        "x": 14,
        "y": 139,
        "w": 902,
        "h": 402
    },
    {
        "id": "3b894cebda7ce3c5",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "name": "SSTS/CSTS",
        "style": {
            "label": true
        },
        "nodes": [
            "4fd649ab1a44f7da",
            "303bd9eb4e5ce897",
            "4ae7c2343f66186d",
            "4116cebd12f9f41c",
            "95bb512a35517b29",
            "d6a9fbe25594566b",
            "27fb69cfedae6f4d",
            "ad6c426a4073acdb",
            "1ad5e59aa6aa52ed",
            "e27b67d5d9c7889b",
            "335edacc99ab3fc2",
            "1bd1af0f4613b779",
            "7431e1e7c17e434c"
        ],
        "x": 854,
        "y": 339,
        "w": 352,
        "h": 562
    },
    {
        "id": "c53b5e46694862ab",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": "SSTS_All",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "364e2c2dd50d5935",
            "07e434e84dc0ade7",
            "d7818bafe150c3f9",
            "6d9c6f85519a482e",
            "4bd633d91a78a80d",
            "18913ce1449bb514",
            "886373c0020e6a06",
            "4043d3a30de43f1a",
            "be42bcee176a15e7",
            "37d0957556353ab5",
            "2447a1cb399bf6d7",
            "b95b292a2289e0b9"
        ],
        "x": 54,
        "y": 39,
        "w": 812,
        "h": 222
    },
    {
        "id": "01032a639992497d",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "name": "Stations",
        "style": {
            "label": true
        },
        "nodes": [
            "62604654143b362f",
            "de1abbaf9246a102",
            "0c917786ce74e4c4",
            "bfa32806f427b244",
            "8dd2f29409055486",
            "37b57e58917b0c2b",
            "83c3b522070ca4f2",
            "acad1a8c30bb41b5",
            "9bd68f7b266e15dd",
            "163485087781e321",
            "28266f7d6daf3efc",
            "bc6d8bc92ad7f148",
            "62eb66a7f42ca368",
            "e29bc601fde317bc"
        ],
        "x": 48,
        "y": 1053,
        "w": 904,
        "h": 434
    },
    {
        "id": "a4483f8ddd4066dc",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "name": "SROS/CROS",
        "style": {
            "label": true
        },
        "nodes": [
            "d44fbf9a2276cadd",
            "91c7f930af6eb602",
            "ad39259c5b8d9cb4",
            "9c0190e79c14df99",
            "7fb73c9032df82fe",
            "6d629257dc683866",
            "b69078f83894acb4",
            "23f24dbe724c66ac",
            "488876b46086075c",
            "d7cbf9c88477d597"
        ],
        "x": 414,
        "y": 439,
        "w": 432,
        "h": 362
    },
    {
        "id": "0604e56ff02b4b65",
        "type": "group",
        "z": "dac92ca23c599b5f",
        "name": "SROS",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "b1a1bda0f662aba9",
            "2c0bf208a595787e",
            "6ef965eabd6c2366",
            "d42288917450e867",
            "1ead23ab86b84fc1",
            "8f0b06067a4cc45e",
            "f3cb6428c5f7f91c",
            "70d1052e847a2183",
            "27208a353aa3fbfd",
            "277d5ce4dac605cd",
            "f9fc947198fb608a",
            "aee96f11e187ae22",
            "17b35082ac0d0a22",
            "af7d0db9d521262c",
            "ad90dee8ebfe7dbd",
            "0246fa181d3b8ff0",
            "2122c9e67f6c41af",
            "cc04bb434dadb427",
            "1c707359a0af7de2",
            "29ed2ec2ebd399a8"
        ],
        "x": 64,
        "y": 19,
        "w": 1182,
        "h": 442
    },
    {
        "id": "43f04748f1a41265",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "name": "Client 1",
        "style": {
            "label": true
        },
        "nodes": [
            "3d51858420098e1e",
            "3630a8e88ea93ddf",
            "41b688acbad39e5e",
            "eea1a0be66913f53",
            "62f4d07c7aba3ca5",
            "11af00d3466f1aa4",
            "19b54e36e2b31bd9",
            "df1d8a5ab5af1218",
            "60fadd9148039509",
            "63a05477e79fb7fc",
            "041eb148e43a4587",
            "80ef6dbea5ba0cbc",
            "a5d83cdd9c654f63",
            "ec832a50a78a7f26",
            "13d3a2d2756f14cf",
            "a0b07fcaa3af2fa0",
            "d9e4d1c16f58456a",
            "54ec15cb7cc66875",
            "3c71807a917a36d9",
            "6c931d1a909a4f27",
            "5067dce0410ed9e2",
            "42039d988f4a306a",
            "8f86673cf3558945",
            "6205b192816bede5",
            "ff323584884cf403",
            "bd5bb17156ed4f2b",
            "b2f325ac0ae949f3",
            "02e629533a9462b9",
            "07c256ed646dd87c",
            "bb06484c77b46218",
            "7d3b67f5ff7f743f",
            "f83e351843b8f4f9",
            "7821e3747982da7d",
            "2ac539194590a727",
            "619a8571d5735d02",
            "d357c0efa64c3328",
            "09db6a7fc5cc8b4a",
            "42476009560b29c9",
            "a4f7b228a14958e1"
        ],
        "x": 208,
        "y": -21,
        "w": 2758,
        "h": 908
    },
    {
        "id": "6f362c6cd96a870b",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": "SSTS_St",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "91db07ba067c3df3",
            "080bc3e83136875e",
            "c38230b24fdfd233",
            "9236d03fb2d8607b",
            "01c5255169bc8359",
            "2d071656b303efa0",
            "461e9c081b41e00a",
            "b7f47d808dc53ea5",
            "989731d30de60f3b",
            "1630bd12e0cff0c0",
            "a438495e805ee9fc",
            "c508a64717b769bb"
        ],
        "x": 854,
        "y": 79,
        "w": 1032,
        "h": 177
    },
    {
        "id": "aae02e05eb0a41c4",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "Clock",
        "style": {
            "label": true
        },
        "nodes": [
            "bf2ddf54f488b0b6",
            "4e94d3411c4b83f2",
            "ec5277f2b59d6b1e"
        ],
        "x": 14,
        "y": 59,
        "w": 332,
        "h": 142
    },
    {
        "id": "1edb6d4e9d4c82e9",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "CicloGen",
        "style": {
            "label": true
        },
        "nodes": [
            "8c9d8314800e30f2",
            "d87a7d38579b0a0c",
            "243d302ae591350b",
            "d90521c49340b1c8"
        ],
        "x": 874,
        "y": 19,
        "w": 392,
        "h": 182
    },
    {
        "id": "cb43d7a03fccc528",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "ResetGen",
        "style": {
            "label": true
        },
        "nodes": [
            "0b630e39bd3e8fc9",
            "7f2f1faca1e03495",
            "9ec12143b69e6d33",
            "da088436e048cd67"
        ],
        "x": 394,
        "y": 19,
        "w": 452,
        "h": 182
    },
    {
        "id": "ce5bdbab0a0fd95f",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "Scan",
        "style": {
            "label": true
        },
        "nodes": [
            "73eccedc965af1b0",
            "63e72b906806df62",
            "65ac0a1d2b42e4d8",
            "13f21355ab578c86",
            "b256639f1e2a8b3f"
        ],
        "x": 28,
        "y": 213,
        "w": 1244,
        "h": 374
    },
    {
        "id": "ec3a2628e8eec90e",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "name": "SIMO/CIMO",
        "style": {
            "label": true
        },
        "nodes": [
            "ab7590359dce2d49",
            "d80274bb761d1e9f",
            "3712ce954216e35e",
            "3f386e1e6ba4ee88",
            "55179f34d19f3113",
            "4ca89e3ce2b6adac",
            "eb5e770b96305feb",
            "042ad5ba7b142f1f",
            "c8a083b9ca100b21",
            "5f5b6c7bfb124336",
            "8bedbfb3691d280a",
            "e0c2c9ca9bee04de",
            "a79c9e7dbf3d24bc"
        ],
        "x": 54,
        "y": 339,
        "w": 332,
        "h": 562
    },
    {
        "id": "315b4881c2c86424",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "name": "Tareas",
        "style": {
            "label": true
        },
        "nodes": [
            "260f6999113e723a",
            "7ad74580372dfc4b",
            "41aea0a6353bf813"
        ],
        "x": 414,
        "y": 839,
        "w": 432,
        "h": 142
    },
    {
        "id": "4828742620e5c3ef",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": "Deteccion de cambios de estados estaciones",
        "style": {
            "label": true
        },
        "nodes": [
            "7eed7e8b520920a9",
            "6c75ba1697d3feb5",
            "004f32f1f2d94b82",
            "059b9c8807e7375d",
            "a1d13578cb7c4bc3",
            "885a256a1b12a5e9",
            "9402d3484c4ad92c",
            "d9577576f6d1d102",
            "94ad54c038fdfbe7",
            "66c2ab2d09abd784",
            "cc637912f1c88272",
            "30459ef60e88e4a3",
            "ed3fcddd7157ad59",
            "db60865c83c008fd",
            "5ac7c5cf94fa331b",
            "a82b3270d3d0bcd8",
            "28a985268abe7b45",
            "058159e4f974f49b",
            "9d52f86219780937"
        ],
        "x": 68,
        "y": 287,
        "w": 1170,
        "h": 4186
    },
    {
        "id": "b35292d9872d730f",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": "PSP1",
        "style": {
            "label": true
        },
        "nodes": [
            "901ed9d60bc888cf",
            "81fa9bb85ef6d867",
            "9a4062af1a8109d7"
        ],
        "x": 1354,
        "y": 1813,
        "w": 1138,
        "h": 188
    },
    {
        "id": "d9edcc78d0f97bdb",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP2",
        "style": {
            "label": true
        },
        "nodes": [
            "77914056e7a3cceb",
            "1a6b4f431651b5cf",
            "9e590a66b9f1005c"
        ],
        "x": 1354,
        "y": 2033,
        "w": 1138,
        "h": 188
    },
    {
        "id": "e08f1bf68270a79f",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP3",
        "style": {
            "label": true
        },
        "nodes": [
            "15d98fd4f769ce69",
            "8376423bb11be713",
            "8aafeecdc9d62274"
        ],
        "x": 1354,
        "y": 2253,
        "w": 1138,
        "h": 188
    },
    {
        "id": "d3ef5eddefc80948",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP4",
        "style": {
            "label": true
        },
        "nodes": [
            "3821acc7cb85eeb4",
            "988cfe85526ee4c4",
            "297e9f84a6cfcc8e"
        ],
        "x": 1354,
        "y": 2473,
        "w": 1138,
        "h": 188
    },
    {
        "id": "8688d38cc539602f",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP5",
        "style": {
            "label": true
        },
        "nodes": [
            "730de4bc1500780a",
            "40ea496ecf40f4d0",
            "a48599a291757ded"
        ],
        "x": 1354,
        "y": 2693,
        "w": 1138,
        "h": 188
    },
    {
        "id": "3c770f1fd93916b1",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP6",
        "style": {
            "label": true
        },
        "nodes": [
            "563bc7df798a4523",
            "cd6257a95ea19103",
            "745d7bf095efdc97"
        ],
        "x": 1354,
        "y": 2913,
        "w": 1138,
        "h": 188
    },
    {
        "id": "cd1d972e2c43fcb3",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP7",
        "style": {
            "label": true
        },
        "nodes": [
            "84f7e0fb91bf2625",
            "efeffb83c925602d",
            "74222dc67b06cbe9"
        ],
        "x": 1354,
        "y": 3133,
        "w": 1138,
        "h": 188
    },
    {
        "id": "e6448ee13cee832c",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP8",
        "style": {
            "label": true
        },
        "nodes": [
            "e369f9d0a1afe724",
            "b58bcca42e593365",
            "9a9fa7ee2b9c6409"
        ],
        "x": 1354,
        "y": 3353,
        "w": 1138,
        "h": 188
    },
    {
        "id": "3b3146c3cff18580",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP9",
        "style": {
            "label": true
        },
        "nodes": [
            "0b36b12cbf344e38",
            "cfa29a50cdbb6993",
            "c0bdd7108ca8a8de"
        ],
        "x": 1354,
        "y": 3573,
        "w": 1138,
        "h": 188
    },
    {
        "id": "50ad1466a01a29b7",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP10",
        "style": {
            "label": true
        },
        "nodes": [
            "1a8debc89acfe840",
            "157f1f9d196bf5fc",
            "80f3510b5fc41c08"
        ],
        "x": 1354,
        "y": 3793,
        "w": 1138,
        "h": 188
    },
    {
        "id": "541f3bb90995b384",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP11",
        "style": {
            "label": true
        },
        "nodes": [
            "d8378b5f042b7bff",
            "73230e2c64169b38",
            "8dfb7fe1af22d00a"
        ],
        "x": 1354,
        "y": 4013,
        "w": 1138,
        "h": 188
    },
    {
        "id": "bf9d7226c7f674e9",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": " PSP12",
        "style": {
            "label": true
        },
        "nodes": [
            "ceec618be4df21f4",
            "70698d54da31374d",
            "e7f584debc8acf8e"
        ],
        "x": 1354,
        "y": 4233,
        "w": 1138,
        "h": 188
    },
    {
        "id": "2c0210b39fe6451a",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "name": "REJ 1",
        "style": {
            "label": true
        },
        "nodes": [
            "6744d4d992b89368",
            "cc73fe0e91f6abc6",
            "7d9d3af7fdea810e"
        ],
        "x": 1354,
        "y": 1573,
        "w": 1098,
        "h": 194
    },
    {
        "id": "94a7c3547484f718",
        "type": "group",
        "z": "282eecaa43c8d12e",
        "name": "busquedaTLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "c7ad6ddc686b4fe1",
            "6f245f9a292c17fb",
            "8752967574f76149",
            "d74d35e60d26f4c5",
            "ac7789cf59bf642d",
            "732c79eba989fdac"
        ],
        "x": 114,
        "y": 119,
        "w": 892,
        "h": 182
    },
    {
        "id": "0114f79ffdd0a5c8",
        "type": "group",
        "z": "282eecaa43c8d12e",
        "name": "busquedaTLV2",
        "style": {
            "label": true,
            "stroke": "#0070c0"
        },
        "nodes": [
            "8362270293b7b13f",
            "ca8a19775fc15b16",
            "5af873651d42b57f",
            "e2a35da0b36d7966",
            "c7be950ef8d523fc",
            "aec92170c758a545"
        ],
        "x": 114,
        "y": 339,
        "w": 892,
        "h": 217
    },
    {
        "id": "9d484b3eab3adfe9",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada1",
        "style": {
            "label": true
        },
        "nodes": [
            "5636afb75a5b32ca",
            "cd2cfc43650fcd2d",
            "d0380e223ed3b779"
        ],
        "x": 514,
        "y": 19,
        "w": 632,
        "h": 102
    },
    {
        "id": "9368d9260edec0c8",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "name": "EjecutarTarePIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "c7dc416b521083e3",
            "aac8a039242c66a3",
            "5d659c68d0fe582e",
            "10101a045aad6182",
            "ae5c0ca0afefba39",
            "9197ee5d1d276c32",
            "51194275bbfe0668",
            "6b164df79a01dcc0",
            "1cae78ded33ffe29",
            "fc40834fea2f03df",
            "85bbd0b9aa9ce6ed",
            "5c3f7a0a75a6e181",
            "8dd96615117d9d7b",
            "207d5e8e311ca512",
            "eeb77bb44dac533f",
            "76a8b861314342bb",
            "4e7ddcee7a5abf15",
            "d95ee1eba04eb547",
            "0cd6e3cb0cceace4",
            "11f4c5eab8932461",
            "190cea74184b510c",
            "fdfee1897e8c6fa4",
            "692162e6d978cfe9",
            "41863bc08d38a6ef",
            "7b33d04ad22c31c7",
            "d8ab265d95321108",
            "1d0e10020c815dfc",
            "7c4d9d0f0805676a",
            "e4a247813e14d66b",
            "4aa80a8748e0e6dc",
            "fb59c7e8d70a82b4",
            "5ff2708edd29d67b",
            "c716b7df23d8e2bd",
            "eb7b8cda57d88235"
        ],
        "x": 4,
        "y": 93,
        "w": 1748,
        "h": 1634
    },
    {
        "id": "cf9dcb75b66bba25",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "EjecutarTarea_PIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "25283a81d8bb8901",
            "eb3100c851a6a5b3",
            "026c440ac387bc23",
            "df5f74eecefef591"
        ],
        "x": 14,
        "y": 264,
        "w": 352,
        "h": 177
    },
    {
        "id": "329140f15b6a1004",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada2",
        "style": {
            "label": true
        },
        "nodes": [
            "d204987c4f2e1992",
            "d78a793eba1e2d8d",
            "1ab0f97b46b7971e"
        ],
        "x": 514,
        "y": 179,
        "w": 632,
        "h": 102
    },
    {
        "id": "138c36abd43ab40d",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada3",
        "style": {
            "label": true
        },
        "nodes": [
            "2017e38b04d548e6",
            "ac26eb19b6817b97",
            "3e5927ba8d1734f1"
        ],
        "x": 514,
        "y": 319,
        "w": 632,
        "h": 102
    },
    {
        "id": "ef5547fe5fb846c3",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada4",
        "style": {
            "label": true
        },
        "nodes": [
            "d55ee063e7834a32",
            "9068563f7854f58e",
            "13680137f4e62ee1"
        ],
        "x": 514,
        "y": 459,
        "w": 632,
        "h": 102
    },
    {
        "id": "1a65f7edf4d7659a",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada5",
        "style": {
            "label": true
        },
        "nodes": [
            "d8026d139c92f2f5",
            "b534b8408ce0f836",
            "af3293a935250d0a"
        ],
        "x": 514,
        "y": 599,
        "w": 632,
        "h": 102
    },
    {
        "id": "5b054d75830dfae9",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada6",
        "style": {
            "label": true
        },
        "nodes": [
            "a2cd6c6cea1c4bb5",
            "0e0fe736acd3e31a",
            "274f2e0a8c4a4540"
        ],
        "x": 514,
        "y": 739,
        "w": 632,
        "h": 102
    },
    {
        "id": "35d3e8b4a2d034fd",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada7",
        "style": {
            "label": true
        },
        "nodes": [
            "c81169a90a4be374",
            "8301e7f42bbf09a3",
            "04b3d9a5cc517af4"
        ],
        "x": 514,
        "y": 879,
        "w": 632,
        "h": 102
    },
    {
        "id": "3bbbd3ff32462ba6",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada8",
        "style": {
            "label": true
        },
        "nodes": [
            "d70578ffdf1f3dbb",
            "f8bcf8c120b55bbd",
            "767e8f3a8dbe762c"
        ],
        "x": 514,
        "y": 1019,
        "w": 632,
        "h": 102
    },
    {
        "id": "e0c347c2f029c108",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada9",
        "style": {
            "label": true
        },
        "nodes": [
            "96623d3249fe313b",
            "ce52eba0423bd9a2",
            "1db36d544381767b"
        ],
        "x": 514,
        "y": 1159,
        "w": 632,
        "h": 102
    },
    {
        "id": "70c7fd887fdbdd64",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada10",
        "style": {
            "label": true
        },
        "nodes": [
            "ef9465507aab9664",
            "2f1e6ffa3e95f5b3",
            "f1abda62fd96c736"
        ],
        "x": 514,
        "y": 1299,
        "w": 632,
        "h": 102
    },
    {
        "id": "e967a76b1ddaa588",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada11",
        "style": {
            "label": true
        },
        "nodes": [
            "f36c6e7c8a9deada",
            "107ce824ef35414a",
            "41e5b031df79019e"
        ],
        "x": 514,
        "y": 1439,
        "w": 632,
        "h": 102
    },
    {
        "id": "22a2f06d5eb18075",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "finOdenMesasEntrada12",
        "style": {
            "label": true
        },
        "nodes": [
            "bceca1853ce18729",
            "c0ea12613fca0285",
            "87fe40ee076a3dd3"
        ],
        "x": 514,
        "y": 1579,
        "w": 632,
        "h": 102
    },
    {
        "id": "5c84368d9a919f87",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP11",
        "style": {
            "label": true
        },
        "nodes": [
            "2d8dcd5e9d9dfce8",
            "054f2a88598d1809",
            "6631b8564d3866cf",
            "ec5908715a7afa9c",
            "59f1427b9d44730e",
            "097e76b833e3427a",
            "73e00650be77482f",
            "0c8857fafd9d16e5",
            "4f7a52df5a255680",
            "24943b2967c55daa",
            "5fc3626c4c05b9bf",
            "c6dbafb0a663caaa",
            "a30cb9c84ca03bd4",
            "3565494c2b03dd66"
        ],
        "x": 4,
        "y": 3959,
        "w": 1002,
        "h": 382
    },
    {
        "id": "4974ffee0926ae72",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP5",
        "style": {
            "label": true
        },
        "nodes": [
            "4b245ddd49308bce",
            "093727852c149960",
            "61e04de0bf1bf040",
            "246d1bad4149583f",
            "75b22e059aa6e9f8",
            "90dfc0b69a0817d9",
            "6af758a3fa3057fe",
            "67846ac55ae60f18",
            "77dd8c0dbf3cd77e",
            "eaeb739f92f1e643",
            "96e239a5f8842d5f",
            "0019d25fb51f568c",
            "65329b20268a4991",
            "5ab917c88f4b0e27"
        ],
        "x": 14,
        "y": 1619,
        "w": 992,
        "h": 362
    },
    {
        "id": "fdc1506b94898d22",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "name": "PSP1",
        "style": {
            "label": true
        },
        "nodes": [
            "91c4c6490c63a7ec",
            "f9e6acaba3340566",
            "02e742e3fd9b7bb4",
            "6ed37191e4ea4b42",
            "69bfed3e29726c9c"
        ],
        "x": 8,
        "y": 13,
        "w": 1664,
        "h": 1534
    },
    {
        "id": "d6c4b358d69c82ec",
        "type": "group",
        "z": "7fb99878331dcff5",
        "name": "PSP2",
        "style": {
            "label": true
        },
        "nodes": [
            "a186c4ac5193be64",
            "9a5342aff6b85257",
            "dc3eb14b99fb7288",
            "bf3163ed112798e1",
            "d9a6966f5c6dfec6"
        ],
        "x": 28,
        "y": 53,
        "w": 1684,
        "h": 1494
    },
    {
        "id": "32932b4401b7031b",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP2",
        "style": {
            "label": true
        },
        "nodes": [
            "af194c8fe33a5225",
            "13c24ae6fe61d602",
            "945f775ee87c9db5",
            "f7e93d2623c5f054",
            "f0eda99c0f56cb71",
            "95b66a776cf788b1",
            "c7be3aeaf6af3150",
            "2a0e4088bd4c8945",
            "708f912409aa85dd",
            "7956bd42f95e5ace",
            "89771c0b6ccb9537",
            "7a807fdbfd0e9e15",
            "eccd18eda337f72e",
            "c6588eaa8615de62"
        ],
        "x": 14,
        "y": 419,
        "w": 992,
        "h": 362
    },
    {
        "id": "d2f302f22cfc8616",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP1",
        "style": {
            "label": true
        },
        "nodes": [
            "1b4e3d5b7f9fd18a",
            "bdbe3bb9c64e06bc",
            "ac31fe0a6d3a63b6",
            "6edb518a37e4214b",
            "30f59557730b5763",
            "5cb96ff3a608698a",
            "ced72fee35351ba5",
            "fc1584496ed1fb76",
            "5630e05348bc357d",
            "9c3880b0205043d7",
            "0cedd08e2e901432",
            "fe7c040df1c67dd9",
            "a71b2f611165c7e9",
            "7da2df1c50278ba6"
        ],
        "x": 14,
        "y": 19,
        "w": 992,
        "h": 362
    },
    {
        "id": "a70ffa723cb2968b",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "name": "TareaTLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "08ec2a52aacfad48",
            "1ff4e2051745a149",
            "1ad145d6d5714295",
            "ff142eb083d3cb23",
            "f824536a3d1b7df5",
            "a6183c145cd5939c",
            "82364dfbfe7f54d3",
            "93464a7c50a6b904",
            "44a6e8bbe08e328f",
            "ffe763d14afc31c1",
            "b27831a2e0db70d3",
            "bda59e17f9ed1598",
            "feede933715da93a",
            "349ba449c8363e4c",
            "3ae61cd0f6bf304b",
            "757b4525deb96bbd",
            "679e0180085d8d2a",
            "987c08d55d704fb9",
            "923536b458f31b4a",
            "dffb0c6f297467d1",
            "8c88e721d6ebf2c1",
            "f869e52e721cc58d",
            "5d990bad1cc4483f",
            "b84a6ce43391d3d3",
            "cf7e2e28436242f3",
            "98c651150fce45a2",
            "2bdab132f1dadf9a",
            "94b3b6c049cdfad7",
            "8b80df459039f2cd",
            "49152ec24b47685f",
            "f07b5ce64686c7c6",
            "125244da6abe9731",
            "12a0ef1926fc4816",
            "0124a297efefa9ba",
            "02299d2b58578052",
            "f541ac6e36356d65",
            "a070d1a16d0f381d",
            "0a6d5a44c1d6b6e1",
            "4c018e43d1d8ab4e",
            "d0603838c5d0839d",
            "4702713ce0cc8134",
            "44acbfcd2aaae346",
            "c37f0f188cb647e7",
            "f4ce41bf5d663296",
            "4b93634ce343ad63",
            "22bbbba092d0bd95",
            "e5e391d578dc47bd",
            "da2482f6bc6c9e50",
            "c79daa9e355f0941",
            "356a7a7c8875936c",
            "654365d20111389b",
            "aaad1a1145c56974",
            "d91dad70589682f7",
            "57ad313093cf850f",
            "bb43cf10019f6ed8",
            "6a3b1932cf833e0d",
            "5f3dcb69ef85bb46",
            "bd753a7603497845",
            "18c9ea24defe0ecb"
        ],
        "x": 8,
        "y": 199,
        "w": 2064,
        "h": 5048
    },
    {
        "id": "a168636adae803a5",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "name": "TareaTLV2",
        "style": {
            "label": true
        },
        "nodes": [
            "dea2dfbea43f08ec",
            "490e1fb725c014a4",
            "b831a91a719d9604",
            "7c867d76266369ac",
            "dabd3f6ce1b061f2",
            "8a01ca803b3863f7",
            "fc80279080e6ab78",
            "abb732e5d8d3bf4c",
            "b6d949fc714f99e4",
            "49b16d3bf363f667",
            "475e54caa7745954",
            "158e6454a761d6b4",
            "558c24565e31c763",
            "4faced8c733b2d1b",
            "285ec8a0e890d94a",
            "cbffa0df87a3f333",
            "7ecdd1c44413b458",
            "d22f72f712b6b3b9",
            "81e6fbc566b0b92d",
            "a8c8d769ef4473c2",
            "7a869463678005a3",
            "94c8cae535749cb1",
            "8ef9e0694ae2833d",
            "85bc7b08b17742cb",
            "5ea914341709e6ad",
            "1bcf2cb1b0a42810",
            "36465cac5e18f83e",
            "3c5def14bd172264",
            "e245e19170e3c274",
            "ca5c597380302641",
            "48ff8069408aa495",
            "5bba435ad44c6a54",
            "0bb3e29d582ab885",
            "d36f313e7d511c76",
            "78f53fc2b0ab41f3",
            "950ec591b7c34e74",
            "77d22cc2510905ed",
            "8303682babaf1e54",
            "7fd795bb6a18e461",
            "d6c4eb345182fc79",
            "195df12e2c781ddf",
            "eef2fa8b99fbec28",
            "68cd2cb6fc53cf1a",
            "f0740e22245f0b31",
            "96f3502fe1245243"
        ],
        "x": 4,
        "y": 79,
        "w": 1928,
        "h": 4308
    },
    {
        "id": "af0425c692f43625",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP3",
        "style": {
            "label": true
        },
        "nodes": [
            "e756ea2280c69c48",
            "a00256e2a4eeed5f",
            "96b6dcbc1ff4fb0c",
            "5d725afdc874741f",
            "79589cc790299ee0",
            "b8db447299f21f24",
            "56be62c165f170a9",
            "532d1d884e63d930",
            "dab6d5269784d24b",
            "f07abd94df5e37d8",
            "dd6559469fdbf245",
            "73e07565742d46bd",
            "83f86ce7a6c131fd",
            "44e2979370b7edc7"
        ],
        "x": 14,
        "y": 819,
        "w": 992,
        "h": 362
    },
    {
        "id": "f50ae5fac643193f",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP4",
        "style": {
            "label": true
        },
        "nodes": [
            "0fa103d7bc4fd6ca",
            "b7a8c8a9fa8c7257",
            "07763cb7c025a508",
            "50f538579d973b45",
            "6284516e0793aedf",
            "f1f39776e9df9cdc",
            "675c47e31309cc1f",
            "4f59f6449d45c38b",
            "2338ae89cfa25a80",
            "a25dc557678e7280",
            "48ed79c3de2ab7cd",
            "802301fc2d9b6d60",
            "c6864828496d551e",
            "861fb1b05bbe6d3f"
        ],
        "x": 14,
        "y": 1219,
        "w": 992,
        "h": 362
    },
    {
        "id": "208adb638e3bd7a3",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP6",
        "style": {
            "label": true
        },
        "nodes": [
            "08fa6008e5e58d97",
            "46d71d4f597a0f3d",
            "f54f48498a336e30",
            "144c3e4496178811",
            "8a52f81f1c87f3e6",
            "7a4f59152de822e8",
            "db3754a235f23b14",
            "6a692c9f54287ef6",
            "1fad702c654fe05f",
            "b9e4ea21c1d1d539",
            "d9dc8391bcb145e0",
            "71d14cdace122a59",
            "3a5dd8c00ac442ec"
        ],
        "x": 14,
        "y": 2019,
        "w": 992,
        "h": 362
    },
    {
        "id": "837f96f04319defe",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP7",
        "style": {
            "label": true
        },
        "nodes": [
            "2074df3dd556f370",
            "e9470d7a285f5ab5",
            "d8cd5392ea4b2e36",
            "fcac8557f9f99d83",
            "d53e3fe23640fb4a",
            "714d733d346a6aff",
            "bb2c29210a77df78",
            "d5f73db5a672cac7",
            "a5bfca7db3dfce08",
            "831b9eb01b14f0b8",
            "5071c270e56b0451",
            "1c6b9d3e4d0ae802",
            "559bddd432f128b2",
            "1756d5deb4f972da"
        ],
        "x": -6,
        "y": 2419,
        "w": 1012,
        "h": 362
    },
    {
        "id": "03b5932ae01d1d75",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP8",
        "style": {
            "label": true
        },
        "nodes": [
            "eea98515b10d1e01",
            "6c456e5936319995",
            "a0723bbcdb1c8f43",
            "bf79c45e6cad5a18",
            "d202c578a91ad384",
            "802190637681a825",
            "c73e06404d0a7451",
            "cea1b8f594b55d89",
            "01e4b7e92b62deab",
            "c544d6cbd6e46d74",
            "47eecc00b3af86cc",
            "5b441746e814c91d",
            "9ca139ab691f2c12",
            "ba3aa56b25c5d5ab"
        ],
        "x": 14,
        "y": 2799,
        "w": 992,
        "h": 362
    },
    {
        "id": "0e929f8e3fb0c66c",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP9",
        "style": {
            "label": true
        },
        "nodes": [
            "adea5aac0d4121a9",
            "9b764cc265f0eb0b",
            "5f1b2d0b19ecf429",
            "6e1b93178552ec49",
            "9f81673dadfd185f",
            "d935e53fe5baaf15",
            "f63f9f1101c756ce",
            "8a19ddb1f0419fb2",
            "98f8e03a3d1dbabd",
            "0ea6f0c6d8a6241d",
            "ab9af9c760c12793",
            "97b391d4450395c2",
            "23d0fb03f07a0df4",
            "147e127175f35be9"
        ],
        "x": 14,
        "y": 3199,
        "w": 992,
        "h": 362
    },
    {
        "id": "47495e066626cbe9",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP10",
        "style": {
            "label": true
        },
        "nodes": [
            "4015211767b41cb4",
            "6f19365a3a254076",
            "b379b428d6537839",
            "044dde31a1c2b008",
            "b1017d2d03f0ec27",
            "b31ddca7097bdb21",
            "f192be7abd2d27a7",
            "aa39dfaea25ced71",
            "01c7fd19a983366c",
            "be8a4f73d71b0c65",
            "e6eb855f34a6f52c",
            "1e0d760faecd9106",
            "197495869b35c8d1"
        ],
        "x": 14,
        "y": 3579,
        "w": 992,
        "h": 362
    },
    {
        "id": "b77f5ce407f7520b",
        "type": "group",
        "z": "cdbaef789409ba8a",
        "name": "busquedaPSP12",
        "style": {
            "label": true
        },
        "nodes": [
            "ed64cbf404faa1bf",
            "c7b97c0a652264fd",
            "a340cc98fa6ce67c",
            "04d2b7385022b1e6",
            "a6cf5684923122fb",
            "ce955b7d6cea90d6",
            "5daee391f0c4131f",
            "0e114574a07e3ec2",
            "e5c201d9a50008b2",
            "614bb16cc50789d7",
            "b1aa6d3ff60976bc",
            "5a9369dc1d675582",
            "3fd67d068f48ee0d",
            "7a2dc21dac5114f5"
        ],
        "x": 4,
        "y": 4379,
        "w": 1002,
        "h": 382
    },
    {
        "id": "f74720d46f95e418",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "name": "PSP3",
        "style": {
            "label": true
        },
        "nodes": [
            "7c0f3464b328bbf2",
            "20cfd5ee33bb88c2",
            "a540f56a6f48836c",
            "f63ed13ef3a5bf96",
            "369e46fa8f25be17"
        ],
        "x": 8,
        "y": 1573,
        "w": 1664,
        "h": 1434
    },
    {
        "id": "c1e010b81f9f5a5b",
        "type": "group",
        "z": "7fb99878331dcff5",
        "name": "PSP4",
        "style": {
            "label": true
        },
        "nodes": [
            "be551fd19e05c3bc",
            "1f767773e8e91daf",
            "d340762b0f93fa84",
            "d65bebade15b7b4b",
            "3e25caa400166874"
        ],
        "x": 28,
        "y": 1553,
        "w": 1664,
        "h": 1474
    },
    {
        "id": "abc039cbadf23293",
        "type": "group",
        "z": "183127036e7cddc7",
        "name": "PSP5",
        "style": {
            "label": true
        },
        "nodes": [
            "5520edbd3f5870dc",
            "bcae445a38804066",
            "ba0d7f2ea8130e48",
            "ef82c2fea16d5978",
            "cc8bbb3fe98bfc62"
        ],
        "x": 28,
        "y": 13,
        "w": 1684,
        "h": 1574
    },
    {
        "id": "1810271be2d4a941",
        "type": "group",
        "z": "183127036e7cddc7",
        "name": "PSP7",
        "style": {
            "label": true
        },
        "nodes": [
            "3fa57fbfb16a1cf3",
            "ac33974ca35e89d3",
            "50c8c6e4abfe8cd0",
            "fa81f2f669d055b2",
            "5d2677ee11fe8022"
        ],
        "x": 28,
        "y": 1613,
        "w": 1644,
        "h": 1394
    },
    {
        "id": "69e59dfefa75e858",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "name": "PSP6",
        "style": {
            "label": true
        },
        "nodes": [
            "41fc70f7c3d5cc88",
            "68c7d4ca89ec178d",
            "de0b235864398fdd",
            "e0506c014636185c",
            "61e11471d24e5acf"
        ],
        "x": 8,
        "y": 33,
        "w": 1664,
        "h": 1394
    },
    {
        "id": "e58dbaca2a12caca",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "name": "PSP8",
        "style": {
            "label": true
        },
        "nodes": [
            "2d208fae9c20d792",
            "96535d8ca902241b",
            "c54aa1f42c05d5fb",
            "084a8bbe4463d715",
            "7d45ac69153c7fa0"
        ],
        "x": 8,
        "y": 1913,
        "w": 1664,
        "h": 1454
    },
    {
        "id": "0e95ebe19daa9ea6",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "name": "PSP9",
        "style": {
            "label": true
        },
        "nodes": [
            "0c86f36287e2313f",
            "811df613b013231c",
            "3cdc9748647da7fd",
            "31c038a20e5bb68b",
            "6e27ade6f2345916"
        ],
        "x": 28,
        "y": 13,
        "w": 1684,
        "h": 1474
    },
    {
        "id": "47501cb2b64cf5da",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "name": "PSP11",
        "style": {
            "label": true
        },
        "nodes": [
            "904378873328d525",
            "03584b19a9ee9f70",
            "f6ff23f63e4166b7",
            "ca7ee928aec78ed6",
            "4c0387305bf45916"
        ],
        "x": 28,
        "y": 1793,
        "w": 1684,
        "h": 1414
    },
    {
        "id": "cb019f9ffe4ad74c",
        "type": "group",
        "z": "6e675624204e9941",
        "name": "PSP10",
        "style": {
            "label": true
        },
        "nodes": [
            "e8cb1161d9106dfe",
            "35535126cad29869",
            "33d35d24a5d4850a",
            "1f0f56dedd60df8a",
            "d520e8e146f126c3"
        ],
        "x": 28,
        "y": 33,
        "w": 1644,
        "h": 1634
    },
    {
        "id": "dfdaa146a5325e1e",
        "type": "group",
        "z": "6e675624204e9941",
        "name": "PSP12",
        "style": {
            "label": true
        },
        "nodes": [
            "bd0f546e9f819d95",
            "ed68071dbded8d91",
            "efac22bb0f9cc3da",
            "d9a7b89e0b340648",
            "eb84e41077a17994"
        ],
        "x": 28,
        "y": 1733,
        "w": 1664,
        "h": 1454
    },
    {
        "id": "02ae151c33ab2035",
        "type": "group",
        "z": "8c5ac7120ee50dac",
        "name": "PIS2",
        "style": {
            "label": true
        },
        "nodes": [
            "fe56a9c675d91b04",
            "c92b9079d03d7a12",
            "3e0d82457d9afba9",
            "3673bceacb238fa7",
            "d73465531c317ded",
            "37a6c45626488bef",
            "2b0358ec8baa5ca2",
            "9512c87c426c6808",
            "85a62c20b832fa66",
            "8ae03dd1858f9676",
            "9458b62c5de9c472",
            "83923398a89a5edd",
            "604cea4c5c7204ed",
            "8e8b86a9e01dbf03",
            "c53ce936cf741b92",
            "75ba28410a56839e",
            "529f836190012b63",
            "0b27d6f5ac3a3916"
        ],
        "x": 14,
        "y": 413,
        "w": 1352,
        "h": 488
    },
    {
        "id": "9f2d1da6a55ab1e4",
        "type": "group",
        "z": "8c5ac7120ee50dac",
        "name": "PIS3",
        "style": {
            "label": true
        },
        "nodes": [
            "b3ccef36647fa4de",
            "2d64fa553983b7d0",
            "d570a3f66c6ec22a",
            "0c689f2b8ff62c5e",
            "4b0a55d2f1337b4a",
            "94cb63fb25086f99",
            "f2478d3e69299d77",
            "176c98b01a1cabe3",
            "5cfbbbc5d122c8ea",
            "c35df15e61863a35",
            "f316f8e75d485617",
            "0d2e597fcba4baa5",
            "f7ef3d45555371ee",
            "a0c11b9cc4f8f675",
            "95a84a887a5f86aa"
        ],
        "x": 14,
        "y": 953,
        "w": 1332,
        "h": 388
    },
    {
        "id": "7a8636bdb5f73409",
        "type": "group",
        "z": "0c63b7609023e589",
        "name": "test",
        "style": {
            "label": true
        },
        "nodes": [
            "ef95b62072b5e334",
            "d127bdce49e94415",
            "7d027c9b35fb9aca",
            "34f6a782ca037926",
            "ce667b987d2a1272",
            "8d07ca0d60f0218b",
            "d003fa6851851753",
            "0dcbc00d0d0261e0",
            "c6b429ac75e001c4",
            "52e5cc298214acd7",
            "3341de14a6afb677",
            "b2f42dbd82d6730e",
            "f5978aa9a07b43a0",
            "89cec174843bf682",
            "3c63f4614d1eef1c",
            "abf17575d24304a6",
            "903b71d60ca8a381",
            "3fe5cb0310918132",
            "36ff33fb4d2df958",
            "ba9bc1e1b5060c16",
            "4b082780dc597367",
            "fbec43a6cb820aac",
            "1775055030d88646",
            "d9804c2b47e58ab6",
            "cefab690914a6f2a",
            "9602f3bcaefc3fc2",
            "66a4f4adf6f82a2b",
            "fd420e5b2359c405",
            "df30cbbd0cb144c0",
            "e083e0ab8b80f34f",
            "de93ee3d8cc885ee",
            "fc1ddcb16188e73c",
            "9c2f17f6ecaa1ee1",
            "bed63fb951fa3120",
            "6d79a49ab8118058",
            "5895df6abdf3c290"
        ],
        "x": -6,
        "y": 979,
        "w": 832,
        "h": 662
    },
    {
        "id": "09ca36b580effdd7",
        "type": "group",
        "z": "8c5ac7120ee50dac",
        "name": "PIS1",
        "style": {
            "label": true
        },
        "nodes": [
            "d6b4673213766b9d",
            "4fd7a7925257d733",
            "8227b9aa89bffbcf",
            "6bf2b17cfbfd461e",
            "38ae4f83a947cd2a",
            "7537c8dad57a15da",
            "a2ecda69d097479e",
            "1b692a6bf140fa17",
            "cf3ff5fa1d7e239c",
            "0b0e0804a919b066",
            "9d0ad58da648ddab",
            "d38bf22e76af33b5",
            "64a3d3f9c191555d",
            "439496b66cfb5497"
        ],
        "x": 14,
        "y": 13,
        "w": 1172,
        "h": 388
    },
    {
        "id": "2d41f37576661d3e",
        "type": "group",
        "z": "dac92ca23c599b5f",
        "name": "test",
        "style": {
            "label": true
        },
        "nodes": [
            "3a4492a7cb1650db",
            "557c82c9d1ef5157",
            "bd85397d5fc2380a",
            "05dbd5e82bb5d839",
            "5f88b41bff4593af",
            "de24b3d156c102de",
            "99864d882b19b2b5",
            "74480704f36ab607",
            "cb08c9ea8198e3dd",
            "c78b8fd91c927870",
            "9057048ce549d2a0",
            "32ee31996e368c4b",
            "fcbb5e75e2f0acd9",
            "10b37c26726edc94",
            "e2364c455c941b68",
            "a1c7449b4bac3bc5",
            "e99a86942e6d9b4f",
            "0e421a5dcb121438"
        ],
        "x": 14,
        "y": 1239,
        "w": 772,
        "h": 442
    },
    {
        "id": "6a0487b74f5175e1",
        "type": "group",
        "z": "dac92ca23c599b5f",
        "name": "actualizacionRutas",
        "style": {
            "label": true
        },
        "nodes": [
            "b293c0378ca940f9",
            "ca71dfb2a6882f73",
            "793b3247e4c093b7",
            "078e3ed86a4912e2",
            "e98cbcc8e3daea04",
            "330b4228004ab4bd",
            "790edf56c1e3e980",
            "453c9ca71a0761d3"
        ],
        "x": 74,
        "y": 479,
        "w": 552,
        "h": 222
    },
    {
        "id": "cc13d33aa0b444ba",
        "type": "group",
        "z": "dac92ca23c599b5f",
        "name": "SROS_ALL",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "895f3221fdb7b08e",
            "41f70f7592ac8f05",
            "2e996f6889472bb5",
            "e5331abebd9da2df",
            "3e50956d8b3e84da",
            "d9cf5f8d9a642a80",
            "011b5074bf73ad27",
            "33e0cc12058049f4",
            "fbe9abbc4cf57d3d",
            "8dabf0a16ec6dea1"
        ],
        "x": 74,
        "y": 719,
        "w": 972,
        "h": 342
    },
    {
        "id": "b1551c1a080edf62",
        "type": "group",
        "z": "0c63b7609023e589",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "97c4cc61af9c9246",
            "2a5825454f4b7ae0",
            "b896456073243fef",
            "c2dc89ef122e2056"
        ],
        "x": -12,
        "y": 13,
        "w": 2130,
        "h": 854
    },
    {
        "id": "7dfb2be4aa6124f3",
        "type": "group",
        "z": "079543c895cc9aec",
        "name": "lanzarEventoMesas",
        "style": {
            "label": true
        },
        "nodes": [
            "792906ba1cf4ac7e",
            "037d3cc857ff6a7d",
            "5bd5bcf82aca0374",
            "d49dc022f431a4fd",
            "b92d574d2b622965",
            "715613af4f0496d6",
            "0d99e05c3ac408d0",
            "6fce27d2591b73e4",
            "80cd7c8debfc96d4"
        ],
        "x": 14,
        "y": 459,
        "w": 492,
        "h": 402
    },
    {
        "id": "16b564d4a60bad25",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "ScanSstsAllStation",
        "style": {
            "label": true
        },
        "nodes": [
            "0c69c0cbf8b01bc3"
        ],
        "x": 1034,
        "y": 639,
        "w": 212,
        "h": 82
    },
    {
        "id": "df6198fe3f33b755",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "ScanSimoAllStations",
        "style": {
            "label": true
        },
        "nodes": [
            "662f29b45f4e369b"
        ],
        "x": 1054,
        "y": 779,
        "w": 212,
        "h": 82
    },
    {
        "id": "6fb5b9d482491939",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "ScanTramas",
        "style": {
            "label": true
        },
        "nodes": [
            "dc2712ce6e04f5c0"
        ],
        "x": 1054,
        "y": 919,
        "w": 232,
        "h": 82
    },
    {
        "id": "c3e25cf59db9c237",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "CicloGen",
        "style": {
            "label": true
        },
        "nodes": [
            "d4a0cb64c0e4c2d0"
        ],
        "x": 1114,
        "y": 1039,
        "w": 172,
        "h": 82
    },
    {
        "id": "bea3ff2706ce1eac",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "name": "ScanSaliEvent",
        "style": {
            "label": true
        },
        "nodes": [
            "66c4b5de4864797b"
        ],
        "x": 834,
        "y": 639,
        "w": 192,
        "h": 82
    },
    {
        "id": "10a1b0c5b5686927",
        "type": "group",
        "z": "80dba39c1a7f3e3e",
        "name": "Maquinas de estado ejecutar tareas",
        "style": {
            "label": true
        },
        "nodes": [
            "2e96eeca1662ee5a",
            "f0c8d6637dd65dd0",
            "4b75e765ca4fd9ca"
        ],
        "x": 208,
        "y": 113,
        "w": 604,
        "h": 594
    },
    {
        "id": "5f01ef5b8d9e329d",
        "type": "group",
        "z": "db33502388dab964",
        "name": "Tareas en mesas de entrada",
        "style": {
            "label": true
        },
        "nodes": [
            "33430a0e8c25d239",
            "9ba2c8c6feb3c062",
            "76fa8235c9e29c16",
            "51ae45dcf78530fd",
            "d2a3bc1e9adcf4c1",
            "56edd66657bfe2c9",
            "319def3bdbbeb3b2",
            "6cb04c6697f41ee1",
            "eed19bdbfa23719b",
            "13121e7412a7ad3a",
            "807c3984ba84bfb2",
            "3483676fabe39b5e",
            "7b82c7491fd64c6d",
            "b8d794850c630e63",
            "75a9dadd711e3e83",
            "730ebd4f9c53f268",
            "fe9d7ded11d43eb9",
            "7195ec4ab9c53ad3",
            "249cfd78b6fa9bf8",
            "116d9196b05ced9f",
            "db1e11698cb13bfa",
            "5217a8df723460a1",
            "7e1cf608e468634f",
            "745e0a1c166d5f42",
            "7a13694874eab920",
            "f4af8a674ca45167",
            "b66ca6a41fba60ab",
            "2231b3db7a4e54cc",
            "49595fcccdf8c3cb",
            "a1806f632da1fb21",
            "7668d5d89ca04467",
            "d5484cce7d5eea83",
            "bf6865da1737bd86",
            "e83f687f3832f5f8",
            "fde998a4810f695b",
            "baa62faf60966648",
            "080ecf9c865e1e81",
            "733750c599e2cbc4",
            "99c438b2a14039e8",
            "aea20c5b3cb07fe6",
            "422a559bb8443735",
            "e3133cca5399fe07",
            "91dd1a949bfd3e82",
            "938f8846972722ed",
            "276b50eb2c87e3a4",
            "19659be69e5e8be9",
            "511c4c6cd78414a1",
            "fbb4fe37ebea38f4",
            "569ecaf16ad90c33",
            "ed566fa463339029",
            "03f33c94d2c0b4c6",
            "38c87d4b3d4dce09",
            "42df22b85968e370",
            "640a6eb19cbeee57",
            "cfe08f0d262a44d6",
            "bc5f156f987ebdb6",
            "8456e473e894afb7",
            "2d0e6870cf0c40c5",
            "498299f60f731713",
            "533cadf49f8e74f5",
            "ea7c897752a26362",
            "267446bbbef92162",
            "c0a9e131595ae259",
            "c2a9f2bf44a543c6",
            "c91bcc1bf08352d5",
            "2ffed0fec2a108d5",
            "6a30890407f19f27",
            "cfc227c753e487a3",
            "e00fe6fe3cc98586",
            "2c944e15bd6926a0",
            "3623ba1f82ac86d2",
            "79a0d3585258f820",
            "52b00ececad15a34",
            "6ee2e860f52bad87",
            "173e1b20c0e894c8",
            "b8a0d26e84b2fc23",
            "b46598b9bead61b0",
            "5fc9ae5fa9503e40",
            "3235ca24c98ce2e6",
            "2ff1d883ad3bf8db",
            "8b8da5520207c58c",
            "5438e7a34cb01bd0",
            "f028cf66e4dab436",
            "ef2cca30668055f9",
            "78bd298e2e32d760",
            "dcce70bf91e1dae5",
            "e0c9503bf7bbe32f",
            "143d41367c744516",
            "9d2f758c46c45416",
            "fac72d80df76971d",
            "f916c14945c78e76",
            "89614bbe3575866f",
            "037ff8288b3bb30a",
            "b09a367d5439523c",
            "1b43ea5a5b9da319",
            "500ed92f3c64c528",
            "6b93225b4e7b1e95",
            "59688df17eb3b72e",
            "88d1ea1705540711",
            "874cde744baa8a54",
            "6ef0a93df36d1c52",
            "1b1d84b33a2ccb0e",
            "2ae6bc054314ec48",
            "ea6ca40775cd6845",
            "83f66fcac88a5c18",
            "458634e0e2777a4f",
            "a7fa47a12c0cc787",
            "473b969f4a9b0c1a",
            "46e17882578fb215",
            "74e08b23fed7759e",
            "24b6aa0c91725a56",
            "66cf4547d692d113",
            "1004cf8f1e4af7c9",
            "63124cebabe15baf",
            "f8736f4533d94f7d",
            "981190096af30f79",
            "fb2a3d346a797da2",
            "7f15b5455de2cbea",
            "2b1b9c1484b0b82a",
            "78fcbcc01ccf802d",
            "c9d1c03ddf488e8e",
            "ab76a758a0ba02fa",
            "1b1b67ce08c5a4f9",
            "2fe12abfd471cecd",
            "0984c7d740186c01",
            "dac77bb9157fd379",
            "684c9a2db4afdb3d",
            "7bccfc4009b64a8c",
            "239f06e4c822cd09",
            "a87a92ab5085e82f",
            "70b3313b9e45f774",
            "c9cfb53085b0f321",
            "593364c3628bfe43",
            "0b911361ee14cbf3",
            "2f216805a8a0485e",
            "65ec8c333af4c98b",
            "20de23cf005228d5",
            "eeedac0f5e256b62",
            "656d5e7dddab8e7f",
            "668dd96a9b005026",
            "afc7361075ec1648",
            "fb08500f0de199cd",
            "03756416df1cc808",
            "60a1c6f9b238886c",
            "e6a9c20cc6d8691c",
            "f2c34263bf71dd63",
            "7ea1cee994450cf4",
            "84e64d499326e78c",
            "fbf8c8dd7701220b",
            "b88a0959ea1834d4",
            "74eec883ef4c97eb",
            "4d3e8cfb1462fae6",
            "bf41a3746a354b0f",
            "c25469b5c0b4d322",
            "143118d008aeb4f7",
            "c6b132ca5c716192",
            "332764a305f65b26",
            "405f9fa0c5e1a8b9",
            "666477417a9feeea",
            "69525e84e02be30e",
            "7011787eac35666a",
            "c42a146edaa649b8",
            "374eea9051faa41f",
            "0be7dce76f2aaf60",
            "83e8043ec7349516",
            "c3346dc7742ff968",
            "057877d71b157d20",
            "4d553a25369bfa30",
            "fc116e8fd2db119c",
            "1e15450b2114168f",
            "7aed169847f385bb",
            "df5ae275cd7fd70b",
            "81980b872a301982",
            "6745ad280dc23a66",
            "28256a5d42c55d20",
            "96178f5fecc8f0ad",
            "1ae1fd67b16bd727",
            "c6cd433e0de0bf52",
            "772fe745b7b3ac73",
            "6faac8bc072a0747",
            "dacd7b61ebb01eb0",
            "472a548656353d04",
            "f3d12034e640511c",
            "d1f50d2fe1aec879",
            "9738fbd7931f5491",
            "3076d3fe1fcb5809",
            "f91dd7cb2841f658",
            "e79bf0a08c4ad22c",
            "b6b44e49580fb7c9",
            "0bbd92247d3bb958",
            "a74b6bcec9af2e61",
            "4bb07a86d29271c6"
        ],
        "x": 34,
        "y": 819,
        "w": 4012,
        "h": 1242
    },
    {
        "id": "cb483c997eccedb1",
        "type": "group",
        "z": "db33502388dab964",
        "name": "Tareas en mesas de salida",
        "style": {
            "label": true
        },
        "nodes": [
            "f6f379aac7c9bc17",
            "4345ee3fb748500c",
            "a507b3bf3bb10286",
            "bc55bcb8807932b7",
            "6cc2593d35856247",
            "8390984ec7a55e31",
            "77544669e7234ab4",
            "f53b7c40b8248566",
            "974ee5fa6b099afb",
            "06124886e3042677",
            "bc3f2337876e25b9",
            "a9cb37be85dac098",
            "c9dad9776ffec690",
            "ca50f9d8aacb28d6",
            "8fb4f2d29a9bea7d",
            "a36c87a54022b749",
            "0b350a4f6541b61e",
            "e4b62a040ff460f1",
            "c21947b9cc0eedfe",
            "bde2840ea4d2781e",
            "56d3bb45531369d6",
            "1aa4925f989db694",
            "91ebbe49dfd48280",
            "4899ace06811ddf4",
            "0328a803523367be",
            "3a5f76f4bf6ac7e4",
            "9096d9b4b66604e1",
            "76c0463b7286bcc1",
            "733951f420df1dfe",
            "a02466c1bd2db78b",
            "05cb96be7b2d186c",
            "e8b2832f25368d90",
            "25c7d6ff0a889584",
            "cbef920607196cc0",
            "f276fcd0e9738b0e",
            "65f2f52200218aca",
            "733c2a3128603ed2",
            "2ac8bf5cd2059583",
            "5eb31dbe98cc5e61",
            "b9062397dc7fedf1",
            "3139530ec9819e92",
            "f09342e28353195e",
            "035086ac87583cf5",
            "28df5251efc7510c",
            "655c6399d38d8130",
            "4f3d63a78a0dd3f8",
            "6e7acf1039dce4cd",
            "e526a928381633ed",
            "366d92611659eaed",
            "d4a4b3e841bad384",
            "d69d5a9577722424",
            "a61da58208c124ac",
            "51df737295a503a5",
            "843caecdbf120558",
            "746961b27957f9ae",
            "ddaef77d2c1f284a",
            "2ad4d2e190f83e64",
            "dd716f791f4a2283",
            "a9042a28ef21050c",
            "146ffea65c49b46a",
            "3197bb306b0f3948",
            "b8ffd37b803f8e84",
            "8b08508838f10029",
            "199d032d0b2accbe",
            "a4b0751acb483446",
            "0a98188b96017757",
            "e71759fe09bc54e9",
            "c12834d7668b7311",
            "e41f7c69549133ad",
            "5af37f9c9c88e0c6",
            "3ccc843455d40e31",
            "365c2cfbb5a1ee6c",
            "b2d4f90aa036302b",
            "61e708828fbf58fc",
            "494d69dcbadd46ea",
            "bd7269de3ebe59ba",
            "224a18c8c5c62999",
            "4274a91e02338f31",
            "af63f146242163a3",
            "adcba62edf833e2f",
            "328d93d1e6c54db6",
            "218d8f19249c1e25",
            "607cbafb5d7b9102",
            "ae571f40bc2284c7",
            "04b6cd1620f3b0a2",
            "1bf8d5afe6f90f59",
            "23d3d65b2d4262fc",
            "f1942f3693576d93",
            "70f179cbd32aef1e",
            "96f3b639ecfd84cb",
            "e9149c53e2a7d81f",
            "2218d9fdae6937d2",
            "ef06291cdba5101c",
            "ad5aec601abf24ef",
            "82327bbc119c537f",
            "2821ae869587123d",
            "b6a164a4dc8556b9",
            "b2d6c7a7d7905923",
            "7850be1ea1b1fa15",
            "ba915ca6c8d23e20",
            "47f02dec0db62fdb",
            "abc42a645fb9804a",
            "65008bc101a55cc7",
            "364f98118dbba380",
            "f5c2c5a45c9873bd",
            "3f649fcb189a65a5",
            "c52ae431c5411f15",
            "48294aa0151f0333",
            "8d7edfe6bbc24733",
            "86d8e4250bac7ec7",
            "b20502597eaebea7",
            "397bc31b90ef5d16",
            "818d31c23ce5b922",
            "bc0e71651c52bd78",
            "98f4609c03adf499",
            "77b98edcf00c682b",
            "6ccb50c9374680c7",
            "6778f51c2096833d",
            "766fcf2cddbb05da",
            "5b59af41c3178546",
            "024aaf86fe08e9e5",
            "99e6e52726b90dd0",
            "c531ee0d6172ee22",
            "9ca5d2295a71f11e",
            "e9194fc4eb707de7",
            "85574e4bb998d994",
            "87cad84508e119f4",
            "2d0acb5e69277013",
            "16e49d53e87288f7",
            "7fba3760fe25fd10",
            "dd41c9e91fb4bc7d",
            "0952a7708a79833f",
            "2887f1399df7f265",
            "12cad257f004a0dc",
            "6413533b1bcff294",
            "24ccaeb9abe70f5a",
            "ea08c7560a915a90",
            "6fc1723231ebf552",
            "1e169343e220febc",
            "04563916d37ae2a0",
            "ec2887333733c58b",
            "fce8743f8d45f6e6",
            "9863a8446d3e1e06",
            "a1173b09ec7e45d4",
            "8a9667b3c6e79943",
            "0a414c269ffdd725",
            "bdb4a2c0a26806d7",
            "72a7d93f548c3752",
            "ac92e34708ea3b12",
            "ce995f4c9465072b",
            "2002260079960c55",
            "8b6f3ffd15119f7c",
            "0d188f9106873806",
            "32e3c5a705482d85",
            "fb94a095e5ea878a",
            "2343da133129cef7",
            "758b76b7bcc657be",
            "f4ce0909cb8d50a9",
            "c161b3ccfadaeff5",
            "3bdee8666f327bfa",
            "33d818997f7f42dc",
            "48c7823892c9dbc9",
            "e46a634d0f45eb89",
            "532cdd226e85a40b",
            "dd2040727ff779ec",
            "77f7be0980938860",
            "5bd6ef6255bf1725",
            "8bf3ceca6b2554fe",
            "247a503b84a2dbef",
            "c217deab844be1c8",
            "99943b6c5c948432",
            "07ceddcb119726e1",
            "604dcf974a8e5209",
            "6a15410c58243d8e",
            "caeee7b727573f9e",
            "0a8cdd066a95c4de",
            "9f6bf3d6e82070db",
            "3a6335b024bdf245",
            "25e7dfd3f1daa39c",
            "448552221258cb9d",
            "e2ed2664cfe6dfd4",
            "4f4a1bf4ec0aca43",
            "34d83b4f69367d35",
            "569a2090bd9a7ea4",
            "41979cdb143f6ae9",
            "eab59507e8fa4308",
            "49db4cae75d85d14",
            "f20a8762582265b4",
            "bbbc078a7ed279b0",
            "44a5affb3e32714e",
            "5daf4f2b6f54e4c9",
            "ad5ae7b4485843f1"
        ],
        "x": 54,
        "y": 2099,
        "w": 3932,
        "h": 1142
    },
    {
        "id": "cc14c13b78102911",
        "type": "group",
        "z": "5f07b2ace243eb3a",
        "name": "scada",
        "style": {
            "label": true
        },
        "nodes": [
            "36a73bb7c8a3cd87",
            "2944cf17cab4ed0d",
            "a866a4c6d9fd4362",
            "e6ab52b28e6f7036",
            "8695d19e392fb30c",
            "4a5152a8d1a0ca37",
            "012916af938f8367",
            "41fc0d5d9e08d1e5",
            "dad77b3b92ed70cf",
            "b7cd4d60c1753713",
            "4ee55933d4ec604a",
            "f45c6cc282679955",
            "f179e511dc546d01",
            "f8bf0a47dcd1d859",
            "f4881ac7005c970e",
            "eb73add1b4e38550"
        ],
        "x": 54,
        "y": 599,
        "w": 752,
        "h": 402
    },
    {
        "id": "97c4cc61af9c9246",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "b1551c1a080edf62",
        "name": "palletInPIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "99e6e81bb00214ae",
            "7587cceb496ff648",
            "03567257f7a36264",
            "49642e18f38e326e",
            "c5fbfaad3dde1a18",
            "556dc87bf8733bc1",
            "872439fa01ce5c4d"
        ],
        "x": 578,
        "y": 39,
        "w": 1514,
        "h": 788
    },
    {
        "id": "9458b62c5de9c472",
        "type": "group",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "finOdenPIS2",
        "style": {
            "label": true
        },
        "nodes": [
            "61ce5285657dcef0",
            "c56df627408c27ef"
        ],
        "x": 54,
        "y": 439,
        "w": 452,
        "h": 102
    },
    {
        "id": "f07b5ce64686c7c6",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "validarVariablesTLV1",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "a4abb8566250c82b",
            "0152cf43dc9de230"
        ],
        "x": 954,
        "y": 239,
        "w": 552,
        "h": 82
    },
    {
        "id": "125244da6abe9731",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "checkTipoTareaTLV1",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "ea425767eaf116e8",
            "2e465b4a51b1045f",
            "7bf22c6cb8d9d8d0",
            "dd9bb856ba87e8f8",
            "744efa68a39c62a8",
            "4427e417a795d0fb",
            "ab58cb6fcaf52060",
            "d9817943438c0a11",
            "81d759f7be262aec",
            "22db820fe2f5471b",
            "bf3779ce6ab23291",
            "8d4b4e2b606d5d2d",
            "5483e33155899d42",
            "1e5481fba0df9880",
            "9b05092235598dfb",
            "8b59eb15fdc6e2f9",
            "f51390a1667d5850",
            "878d6161a043b841",
            "246f1eb069331a4a",
            "aed3bbfbb58180ac",
            "6380e79094d86e31",
            "4c099ff7c6e1f5fe",
            "04af771f049584d4",
            "306058b9dc3d6aa4",
            "d93ff1a8aac9aa3a",
            "ccb6c10a1f99c9d0",
            "0d543ed990e42150",
            "fa06e2759a58f54e",
            "6270ef752e82240d",
            "80bc84b92494c3f2",
            "67aa4e138a0bcdf4",
            "45ce9ac1411fa402",
            "69f4d8a1ac32ae12",
            "98a3707a6b952afd",
            "ef5b5b916ac323fb",
            "7521e8d4e1397ac1",
            "6c7dbe742db94a2b",
            "3145fc1c2e7ed744",
            "34767641d5ff0051",
            "06dbcc7fd7c5dc6b",
            "4ceb02c87d43e0a0",
            "e5fbe9424eba984b",
            "4141f05dde2a069f",
            "dec1a917ea1b2806",
            "6e4a7cc95bafb4da",
            "eceb06f1dec2b7bd",
            "800e1f67c3e236f9",
            "bbd3ad34e6f958b5",
            "0423f8d4065ea597",
            "036bba304cfe8655",
            "539050d4084dbe34",
            "5de9b919dde0848f",
            "eac8c4a7943774c7",
            "49ba890f32aba50c",
            "fca51beeec475332",
            "4a089d3a231b84b5",
            "daa6095cb4f9ac5c",
            "f7edd162868376b9",
            "4d905987b9531e1e",
            "5b3505f0942deeb5",
            "79f8bacbc70c8f79",
            "d504c80c67854e47"
        ],
        "x": 794,
        "y": 699,
        "w": 1052,
        "h": 802
    },
    {
        "id": "12a0ef1926fc4816",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "247a471baf6e5bf7",
            "33ac86e728f80aac",
            "ce58781b30f9ba0b"
        ],
        "x": 774,
        "y": 1519,
        "w": 712,
        "h": 102
    },
    {
        "id": "0124a297efefa9ba",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "6118ad35b02eae56",
            "ac168c4535812393",
            "dee00d32b71fa946",
            "55a913532468a97d",
            "7b64a966e568f804",
            "7aa116ae9b80cb87",
            "14d0e370ea90e59d",
            "44bbecdd8e48a75d",
            "d9e94c4f8a492852",
            "157328d486a966bb",
            "1805ddcc6389213e",
            "9cada9720f1208cd",
            "638b5fc818751734",
            "ec16c2627c256aa1",
            "3375a8f8f175c409",
            "7d13877a8c80ddea",
            "c27d0bece9662e98",
            "895c52c132429a1a",
            "344e32d0185d05dd",
            "34dea23ab6f56a90",
            "3ee3ec96c7316819",
            "7b32fc4c42b888ae",
            "25da299cb425e251",
            "b6dbd5160f6208d5"
        ],
        "x": 774,
        "y": 1639,
        "w": 1132,
        "h": 562
    },
    {
        "id": "02299d2b58578052",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "Verify PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "0a8481b42f3703de",
            "ea2b2f9b6ff00510",
            "1ed346802357d57c",
            "f43c3c1d4068ef44",
            "fcb5085329a26484",
            "22ea6e7c3a52527a",
            "72479d5a0a104660",
            "bb83bc1ddd229c28"
        ],
        "x": 774,
        "y": 2239,
        "w": 992,
        "h": 202
    },
    {
        "id": "f541ac6e36356d65",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "ejecutar orden PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "5b673b273de67618",
            "783bedc9cf0db762",
            "38d035d3c49c48c6",
            "3ce47230632c9208",
            "cc86c4ddcf5e176c",
            "942b1b8c120c3a21",
            "a68caacada4d5e53",
            "dd1a4e0aea1f5734",
            "f796ad841b012458",
            "c1209f9401fbad4e",
            "bbb7526411d058b6",
            "884fcf9535a69035"
        ],
        "x": 774,
        "y": 2479,
        "w": 1072,
        "h": 382
    },
    {
        "id": "a070d1a16d0f381d",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "PosicionActualTLV1",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "12ee6733bd984652",
            "91fee6a22093aea3",
            "65726c14bf4218a3",
            "1baa534de96b8780",
            "74146e04f3f29540",
            "2aa17ffc8888317b",
            "a03103ef9ef3643c"
        ],
        "x": 734,
        "y": 3039,
        "w": 992,
        "h": 162
    },
    {
        "id": "0a6d5a44c1d6b6e1",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "PosicionPalasAfuera",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "9d25eda53d6c232e",
            "be47db80995f4403",
            "144e6bc7b4205da4",
            "a7b805f07a18d8ad",
            "5efe65d7abbf21ea",
            "f618b1ccc138b071",
            "e34c97130daa4357",
            "8a72e760dfd0f575"
        ],
        "x": 734,
        "y": 3439,
        "w": 992,
        "h": 202
    },
    {
        "id": "4c018e43d1d8ab4e",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "Fin de orden",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "ee5976b845fc53c6",
            "e8cbdf2e8ed42a3f",
            "b4d0e6d1c5c5ed86",
            "84891dbcb5f3e6ad",
            "d6d7af1721fca785",
            "0a836d6a3c8b53cc",
            "5cf3901f4d3dd3e7"
        ],
        "x": 734,
        "y": 4519,
        "w": 952,
        "h": 162
    },
    {
        "id": "d0603838c5d0839d",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "7d96cb4e0bb9e8f0",
            "cd1cb5ef08183db3",
            "2d8096aec8afe912",
            "aa4938d7578df492",
            "1c7a233ec7bca8b8",
            "f4b53144fad6a921",
            "01054a4f55db73be",
            "2a51090bef218906",
            "bfc34fd7c1b99739"
        ],
        "x": 734,
        "y": 4879,
        "w": 812,
        "h": 342
    },
    {
        "id": "4702713ce0cc8134",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "validarVariablesTLV1",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "3b1dc02df5b3204d",
            "7c9b08baa49b06ad"
        ],
        "x": 1534,
        "y": 239,
        "w": 512,
        "h": 82
    },
    {
        "id": "44acbfcd2aaae346",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "EjecutarTareaTLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "6c7cf121838175e8",
            "ec747ed1a617534a",
            "feef6b2ba2b95f73",
            "c9ee6dae3e2638ee",
            "f873f2fcacea0b0d",
            "e901de98c5d3c8aa",
            "b41fa79a2bbd8c6d",
            "212feb6ce863e8c6",
            "ef91555f14db3f14",
            "e37f30d7f45630a7",
            "8d1ecfea0ee88933",
            "ee35652db0666746",
            "ee2d7c67b2f6b303"
        ],
        "x": 34,
        "y": 339,
        "w": 532,
        "h": 482
    },
    {
        "id": "91c4c6490c63a7ec",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "fdc1506b94898d22",
        "name": "Tarea_PSP1",
        "style": {
            "label": true
        },
        "nodes": [
            "7328cc6b3e8b7720",
            "36d4041de20a6559",
            "da98132d7a95ad26",
            "545410c82db9a73d",
            "8e4b908c5dfb1ae8",
            "d43a5e97274d5d60",
            "326c69e4ea92eaec",
            "f04c69b1abad55cb"
        ],
        "x": 34,
        "y": 179,
        "w": 412,
        "h": 402
    },
    {
        "id": "02e742e3fd9b7bb4",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "fdc1506b94898d22",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "cd83e6509b003d5e",
            "63bd5ece79642717",
            "541360be5adbdf44",
            "c97d680f58fde684",
            "f26c7a969061cea7",
            "ceb8b433f6d29ccc",
            "3b5df8bccc8db3c3",
            "4e4e34390f9831d9"
        ],
        "x": 534,
        "y": 739,
        "w": 1052,
        "h": 342
    },
    {
        "id": "f9e6acaba3340566",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "fdc1506b94898d22",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "595ab54f270f0f09",
            "cc9b3705fd0a5164",
            "077b624834015732"
        ],
        "x": 534,
        "y": 39,
        "w": 852,
        "h": 122
    },
    {
        "id": "6ed37191e4ea4b42",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "fdc1506b94898d22",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "b05a7be686a3f7a8",
            "2a775d2df704492d",
            "2218f2f61c45dcf9",
            "68f6378ba5c93183",
            "443826e661986802",
            "2d177ae6f74668f4",
            "953f0621b55eb9c9",
            "71767363fbe7a5d7",
            "3a085428754432a5",
            "e1ba342dd91a5f19",
            "a9fa2ed4f6212a6c"
        ],
        "x": 534,
        "y": 1199,
        "w": 1112,
        "h": 322
    },
    {
        "id": "7eed7e8b520920a9",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": " PIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "87c219fe90d87cdb",
            "ffc737f11425615b",
            "c6c3e888bab12fb6"
        ],
        "x": 94,
        "y": 313,
        "w": 1118,
        "h": 214
    },
    {
        "id": "6c75ba1697d3feb5",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": " TLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "6af4c5ee294e3540",
            "1a43e1884ab802a5",
            "9db968d6847bd033"
        ],
        "x": 94,
        "y": 533,
        "w": 1118,
        "h": 194
    },
    {
        "id": "004f32f1f2d94b82",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": " TLV2",
        "style": {
            "label": true
        },
        "nodes": [
            "1ef664ed430ccd49",
            "8dd087fe4b1afadc",
            "36a63ddf87180a47"
        ],
        "x": 94,
        "y": 753,
        "w": 1118,
        "h": 194
    },
    {
        "id": "059b9c8807e7375d",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": " PTA1",
        "style": {
            "label": true
        },
        "nodes": [
            "1b80d223a37105c4",
            "3c79c6c0f2486565",
            "e63e1868f2a8870b"
        ],
        "x": 94,
        "y": 973,
        "w": 1118,
        "h": 194
    },
    {
        "id": "11af00d3466f1aa4",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Entrada de Telegramas",
        "style": {
            "label": true
        },
        "nodes": [
            "371010702919b0f9",
            "a862a21ff82b829d",
            "74d54e0a046552d3",
            "115476e9aae07689"
        ],
        "x": 334,
        "y": 599,
        "w": 153,
        "h": 262
    },
    {
        "id": "62604654143b362f",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "TLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "d1876c6ed8f936a6"
        ],
        "x": 74,
        "y": 1079,
        "w": 152,
        "h": 82
    },
    {
        "id": "de1abbaf9246a102",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "TLV2",
        "style": {
            "label": true
        },
        "nodes": [
            "37647388e0335493"
        ],
        "x": 254,
        "y": 1079,
        "w": 152,
        "h": 82
    },
    {
        "id": "0c917786ce74e4c4",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "Status Instalacion",
        "style": {
            "label": true
        },
        "nodes": [
            "d6034fe53c56ad74"
        ],
        "x": 454,
        "y": 1079,
        "w": 232,
        "h": 82
    },
    {
        "id": "bfa32806f427b244",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "Carro",
        "style": {
            "label": true
        },
        "nodes": [
            "9ebd81bc01a373db"
        ],
        "x": 734,
        "y": 1079,
        "w": 152,
        "h": 82
    },
    {
        "id": "8dd2f29409055486",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PEE",
        "style": {
            "label": true
        },
        "nodes": [
            "37a13258ae187907"
        ],
        "x": 74,
        "y": 1179,
        "w": 152,
        "h": 82
    },
    {
        "id": "37b57e58917b0c2b",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PEP",
        "style": {
            "label": true
        },
        "nodes": [
            "1e45ae6d3188d0b3"
        ],
        "x": 254,
        "y": 1179,
        "w": 152,
        "h": 82
    },
    {
        "id": "83c3b522070ca4f2",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PSP",
        "style": {
            "label": true
        },
        "nodes": [
            "dedbd49b0c8f5791"
        ],
        "x": 454,
        "y": 1179,
        "w": 152,
        "h": 82
    },
    {
        "id": "acad1a8c30bb41b5",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PES",
        "style": {
            "label": true
        },
        "nodes": [
            "dfe87c69c36861cb"
        ],
        "x": 734,
        "y": 1179,
        "w": 152,
        "h": 82
    },
    {
        "id": "9bd68f7b266e15dd",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PIE",
        "style": {
            "label": true
        },
        "nodes": [
            "42e70a8a2e5f7a79"
        ],
        "x": 74,
        "y": 1279,
        "w": 152,
        "h": 82
    },
    {
        "id": "163485087781e321",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PIS",
        "style": {
            "label": true
        },
        "nodes": [
            "11ed5fd8f8bd843f"
        ],
        "x": 254,
        "y": 1279,
        "w": 152,
        "h": 82
    },
    {
        "id": "28266f7d6daf3efc",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "PTA",
        "style": {
            "label": true
        },
        "nodes": [
            "ffa8d66268017977"
        ],
        "x": 454,
        "y": 1279,
        "w": 152,
        "h": 82
    },
    {
        "id": "bc6d8bc92ad7f148",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "ScannerPIE",
        "style": {
            "label": true
        },
        "nodes": [
            "aa421a0f4e27dc63"
        ],
        "x": 734,
        "y": 1279,
        "w": 192,
        "h": 82
    },
    {
        "id": "62eb66a7f42ca368",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "StatusGen",
        "style": {
            "label": true
        },
        "nodes": [
            "d094654b6f5afc90"
        ],
        "x": 74,
        "y": 1379,
        "w": 192,
        "h": 82
    },
    {
        "id": "e29bc601fde317bc",
        "type": "group",
        "z": "bfffca06cd507a7e",
        "g": "01032a639992497d",
        "name": "InterfaceData",
        "style": {
            "label": true
        },
        "nodes": [
            "9a114d05f399dda4"
        ],
        "x": 314,
        "y": 1379,
        "w": 212,
        "h": 82
    },
    {
        "id": "3d51858420098e1e",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Manuales",
        "style": {
            "label": true
        },
        "nodes": [
            "b4c93d45efd313d0",
            "1cecbdae149625d0",
            "f5a400cf77894c85",
            "21e0eacecc1000bd",
            "f0edd5338c768ba6",
            "b5df25e0f318c88c",
            "9fe6d2e14861eb05",
            "c09d281e55cf9b90",
            "889c27963e94d173"
        ],
        "x": 234,
        "y": 39,
        "w": 302,
        "h": 482
    },
    {
        "id": "3630a8e88ea93ddf",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Client",
        "style": {
            "label": true
        },
        "nodes": [
            "2e4668521f9bfb8d",
            "fc2b6b51d0fd01fb",
            "575fdbb4be35740b",
            "1a58e0cb8474bddb",
            "cc24df38b761f524",
            "783f74ba4966418a",
            "f598d78daadef1d4",
            "a0e657db7eb55fa6",
            "707c030e91ea3a2a",
            "8508c31a7d8c4be8",
            "d68c9abbebb48fde",
            "0276554b1d078ce3",
            "af6fe44b9f7780fe",
            "2cfa3e040251b7c6"
        ],
        "x": 1324,
        "y": 239,
        "w": 742,
        "h": 342
    },
    {
        "id": "41b688acbad39e5e",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "CommStatus",
        "style": {
            "label": true
        },
        "nodes": [
            "948f7a6b15db2a23",
            "438eeb5fc63132d2",
            "ad6ea4d059518c7f",
            "dab5e0ec9926a2f0",
            "24a1a12b900fb021",
            "c62d6f35082bef2e",
            "1551edf0d41bc526"
        ],
        "x": 1324,
        "y": 19,
        "w": 542,
        "h": 202
    },
    {
        "id": "eea1a0be66913f53",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Entradas",
        "style": {
            "label": true
        },
        "nodes": [
            "28b37ebb256d1110",
            "47b65f5c919e61bd",
            "a8331f017977e824",
            "a1717ecbe9d74320",
            "efaa4d74a5b93227",
            "05289a51466eaf25",
            "19872f1fcf65eb9c",
            "cbc9d29d2f9767e0",
            "f93b242eb9480bee",
            "0f6af8db2e13013d",
            "eec035d1b79f2eca"
        ],
        "x": 904,
        "y": 279,
        "w": 402,
        "h": 242
    },
    {
        "id": "62f4d07c7aba3ca5",
        "type": "group",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Auto",
        "style": {
            "label": true
        },
        "nodes": [
            "70a915de9a0d3670",
            "3ac27adfc8797873"
        ],
        "x": 554,
        "y": 359,
        "w": 332,
        "h": 157
    },
    {
        "id": "73eccedc965af1b0",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "g": "ce5bdbab0a0fd95f",
        "name": "ScanTramas",
        "style": {
            "label": true
        },
        "nodes": [
            "8a79d3b592ef9007",
            "7f2d694ee521ef14",
            "6030ecded9fad7dc",
            "b4958610d9d683bd",
            "9ba91c5801e1e63f"
        ],
        "x": 54,
        "y": 259,
        "w": 392,
        "h": 242
    },
    {
        "id": "a1d13578cb7c4bc3",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PIS1",
        "style": {
            "label": true
        },
        "nodes": [
            "de6fa14332c2ec16",
            "e85b35963aef282c",
            "064bb180e8fad20e"
        ],
        "x": 94,
        "y": 1193,
        "w": 1098,
        "h": 194
    },
    {
        "id": "885a256a1b12a5e9",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": " PIS2",
        "style": {
            "label": true
        },
        "nodes": [
            "a8614ed79592d391",
            "ca1cfc8a2bc7850b",
            "d12a49e29147e46a"
        ],
        "x": 94,
        "y": 1413,
        "w": 1118,
        "h": 194
    },
    {
        "id": "9402d3484c4ad92c",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PIS3",
        "style": {
            "label": true
        },
        "nodes": [
            "e9a2dd1bd54506ce",
            "1130859a0776e0c3",
            "6eeeac152ae6887f"
        ],
        "x": 94,
        "y": 1613,
        "w": 1118,
        "h": 174
    },
    {
        "id": "d9577576f6d1d102",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": " PEP1",
        "style": {
            "label": true
        },
        "nodes": [
            "16e64d1bb71c2d5a",
            "03344c966549c916",
            "ca43493bf3820331"
        ],
        "x": 94,
        "y": 1813,
        "w": 1118,
        "h": 194
    },
    {
        "id": "94ad54c038fdfbe7",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP2",
        "style": {
            "label": true
        },
        "nodes": [
            "21ebd7c99d33d6c1",
            "daa9314530bb6cb7",
            "bc14ecbe3fb578ea"
        ],
        "x": 94,
        "y": 2033,
        "w": 1118,
        "h": 194
    },
    {
        "id": "66c2ab2d09abd784",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP4",
        "style": {
            "label": true
        },
        "nodes": [
            "0f63cd8bfbe06e82",
            "595f7dc1b58d7763",
            "5338192c263b8924"
        ],
        "x": 94,
        "y": 2493,
        "w": 1118,
        "h": 194
    },
    {
        "id": "cc637912f1c88272",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP5",
        "style": {
            "label": true
        },
        "nodes": [
            "51ea4c9c089ab077",
            "1d2f40a68d6c5735",
            "3155849348c68797"
        ],
        "x": 94,
        "y": 2713,
        "w": 1118,
        "h": 194
    },
    {
        "id": "30459ef60e88e4a3",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP3",
        "style": {
            "label": true
        },
        "nodes": [
            "e17a602c06a0ab9d",
            "492b860fd6d5303a",
            "a8f6f424e95f486e"
        ],
        "x": 94,
        "y": 2253,
        "w": 1118,
        "h": 194
    },
    {
        "id": "ed3fcddd7157ad59",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP6",
        "style": {
            "label": true
        },
        "nodes": [
            "a11b932411ac94ac",
            "dfef1efca5def057",
            "a9a3b78f10494774"
        ],
        "x": 94,
        "y": 2933,
        "w": 1118,
        "h": 194
    },
    {
        "id": "db60865c83c008fd",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP7",
        "style": {
            "label": true
        },
        "nodes": [
            "6c5469fc42be030a",
            "5661050aa6900234",
            "a0efb77a7e98015c"
        ],
        "x": 94,
        "y": 3153,
        "w": 1118,
        "h": 194
    },
    {
        "id": "5ac7c5cf94fa331b",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP8",
        "style": {
            "label": true
        },
        "nodes": [
            "8233e3f81da227e0",
            "90b39c4e2e071357",
            "9207a3ebec47802b"
        ],
        "x": 94,
        "y": 3373,
        "w": 1118,
        "h": 194
    },
    {
        "id": "a82b3270d3d0bcd8",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP9",
        "style": {
            "label": true
        },
        "nodes": [
            "4a39d6d2712eab35",
            "310a360f78abb30d",
            "bcacdf71b16f4f2b"
        ],
        "x": 94,
        "y": 3593,
        "w": 1118,
        "h": 194
    },
    {
        "id": "28a985268abe7b45",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP10",
        "style": {
            "label": true
        },
        "nodes": [
            "be8eac3fccb93836",
            "9f039eb64ab8f34b",
            "c229793ee9e5ad4d"
        ],
        "x": 94,
        "y": 3813,
        "w": 1118,
        "h": 194
    },
    {
        "id": "058159e4f974f49b",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP11",
        "style": {
            "label": true
        },
        "nodes": [
            "43d070bd6b93b02a",
            "757358fd342469d5",
            "c330a89e132eb9f7"
        ],
        "x": 94,
        "y": 4033,
        "w": 1118,
        "h": 194
    },
    {
        "id": "9d52f86219780937",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "4828742620e5c3ef",
        "name": "PEP12",
        "style": {
            "label": true
        },
        "nodes": [
            "09327b22ed1181d1",
            "2c12f47d415a60e0",
            "713fcfee1bd2079d"
        ],
        "x": 94,
        "y": 4253,
        "w": 1118,
        "h": 194
    },
    {
        "id": "81fa9bb85ef6d867",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "b35292d9872d730f",
        "name": "cambio de estado ",
        "style": {
            "label": true
        },
        "nodes": [
            "a9bed921b2c3a3a5",
            "90babb77a199ef20",
            "dbe40d0b982fa1c3",
            "6b156e124a0a085c"
        ],
        "x": 1944,
        "y": 1839,
        "w": 522,
        "h": 122
    },
    {
        "id": "1a6b4f431651b5cf",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "d9edcc78d0f97bdb",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "3d653904363ce0ac",
            "bd6bb4dbcc209742",
            "7a2dae6a61c74ec0",
            "9a0848cfb76b0c35"
        ],
        "x": 1944,
        "y": 2059,
        "w": 522,
        "h": 122
    },
    {
        "id": "8376423bb11be713",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "e08f1bf68270a79f",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "860175c031429f3f",
            "45effb94b4b6c71a",
            "fb264e5e6a3e76eb",
            "4c49ce44f40ac5d8"
        ],
        "x": 1944,
        "y": 2279,
        "w": 522,
        "h": 122
    },
    {
        "id": "988cfe85526ee4c4",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "d3ef5eddefc80948",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "e95d9d7746bd7170",
            "113f6554e623c013",
            "9dac982ba7f02325",
            "8f04d9a9989e979a"
        ],
        "x": 1944,
        "y": 2499,
        "w": 522,
        "h": 122
    },
    {
        "id": "40ea496ecf40f4d0",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "8688d38cc539602f",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "4472859d68f6ff70",
            "f6a0927eabb608b7",
            "8206eab71abededc",
            "d23dc2248f48e3fd"
        ],
        "x": 1944,
        "y": 2719,
        "w": 522,
        "h": 122
    },
    {
        "id": "cd6257a95ea19103",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "3c770f1fd93916b1",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "6cc54afeb52564eb",
            "f8e41d414d59c1fb",
            "1124b22c204a0c1a",
            "a83a5d050ddb7c5c"
        ],
        "x": 1944,
        "y": 2939,
        "w": 522,
        "h": 122
    },
    {
        "id": "efeffb83c925602d",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "cd1d972e2c43fcb3",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "59ba2daaad32cd7b",
            "5a323fa04b318a72",
            "7afab1b880a69b58",
            "25a1c76fef39e261"
        ],
        "x": 1944,
        "y": 3159,
        "w": 522,
        "h": 122
    },
    {
        "id": "b58bcca42e593365",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "e6448ee13cee832c",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "8136cac475cf84dd",
            "b862ff6ab8d5522a",
            "aa810d476679878d",
            "9fc4358e8510bf83"
        ],
        "x": 1944,
        "y": 3379,
        "w": 522,
        "h": 122
    },
    {
        "id": "cfa29a50cdbb6993",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "3b3146c3cff18580",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "5e155e852ef4f6f4",
            "f7cd255c1c5a585b",
            "0cfed58f2a22c3c7",
            "b38076043375419f"
        ],
        "x": 1944,
        "y": 3599,
        "w": 522,
        "h": 122
    },
    {
        "id": "157f1f9d196bf5fc",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "50ad1466a01a29b7",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "f9c9ac66b3d135e6",
            "62f3c28a5585df3d",
            "204d3026e8f5160c",
            "8861d95b3195a62c"
        ],
        "x": 1944,
        "y": 3819,
        "w": 522,
        "h": 122
    },
    {
        "id": "73230e2c64169b38",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "541f3bb90995b384",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "cc9f028de59b25a5",
            "2be64d7f03cb5a10",
            "cc7e518b848bd0a4",
            "c46b38a3b099e248"
        ],
        "x": 1944,
        "y": 4039,
        "w": 522,
        "h": 122
    },
    {
        "id": "70698d54da31374d",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "bf9d7226c7f674e9",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "6d99f5dd8c061176",
            "0ef9c25be6874e3d",
            "28183fb0c3f04b61",
            "5b712691f3594337"
        ],
        "x": 1944,
        "y": 4259,
        "w": 522,
        "h": 122
    },
    {
        "id": "cc73fe0e91f6abc6",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "2c0210b39fe6451a",
        "name": "cambio de estado ",
        "style": {
            "label": true
        },
        "nodes": [
            "296d419ce42833b9",
            "210b407d17b7fe7d",
            "71acd54eec680a32",
            "f6d12abaa0b6bbcd"
        ],
        "x": 1924,
        "y": 1599,
        "w": 502,
        "h": 142
    },
    {
        "id": "c7dc416b521083e3",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "EjecutarTarea_PIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "1f2bad2eed8f551b",
            "220099ac653f7d23"
        ],
        "x": 94,
        "y": 284,
        "w": 352,
        "h": 112
    },
    {
        "id": "aac8a039242c66a3",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "validarVariablesPIE1",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "d6429bd91fd09d01",
            "d331e0537ee75e19",
            "790238fccf324b86",
            "9a1807fd631d48c4"
        ],
        "x": 574,
        "y": 119,
        "w": 992,
        "h": 122
    },
    {
        "id": "5d659c68d0fe582e",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "buscarID(paso 40)",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "71350d1559af13a6",
            "65c811ec0174c964",
            "2c8466fe4dd20e95"
        ],
        "x": 574,
        "y": 259,
        "w": 572,
        "h": 82
    },
    {
        "id": "10101a045aad6182",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "asignarUMA_ToID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "4852ec782da43717",
            "585411b9165d0c17",
            "878e267f217b835c",
            "917179fee3a4911e",
            "48ddf405259db2da",
            "d6bbcde1833c97c5",
            "8d6bb543efabe208",
            "57b8c787ac7e8149",
            "0690bbb0f82f3a04",
            "8c9c88bf40afc760",
            "f48bfe8e453ccbca",
            "aafe1bc5b239c9bd",
            "78e82eb3fb68745b",
            "abd5e1062f600a38",
            "9ccc2cb5a74cb000",
            "4e114826e44b1d42"
        ],
        "x": 574,
        "y": 399,
        "w": 1152,
        "h": 422
    },
    {
        "id": "ae5c0ca0afefba39",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "16dc478ac29a0aa3",
            "4c8f51af39f2c32a",
            "9830e305845d962c",
            "5d7c7d81f8507afe",
            "dfda7358066fb33a",
            "df51d9bf1da17287",
            "5efc969f6121911e",
            "d86805f397b52d9b",
            "1b0f8d15747c06e6",
            "9b6f3a1f21f784db",
            "1331c690eceac058",
            "179f04cc4bf48c8a",
            "3a568f4b1995a15c",
            "309f2b917e9a2a29",
            "f32e595ead227807",
            "043126cf377c2344",
            "9c1c3398f8f3eb21"
        ],
        "x": 564,
        "y": 879,
        "w": 1162,
        "h": 302
    },
    {
        "id": "9197ee5d1d276c32",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "Verify PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "f82f083cb70ba008",
            "09399701d2fe24c6",
            "020da7c50fbb8b7c",
            "9c2d520cb4f699c0",
            "f6865c8dcc18e054",
            "e1d1ca3f5b5bdc0d",
            "1c133404b17b0a25",
            "c6fe310e7532bc2e"
        ],
        "x": 574,
        "y": 1199,
        "w": 972,
        "h": 162
    },
    {
        "id": "51194275bbfe0668",
        "type": "group",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "ejecutar orden PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "e6a0a039476308a8",
            "f9cb7964e70e752c",
            "32de6ab80a8f05bb",
            "58e0fb0bbbf0f861",
            "06b5dbc35905c834",
            "299bd69fa8e96c23",
            "1c99f7fd5277aa80",
            "146288c2774f910e",
            "70551487adaea108",
            "7fafccbb0d457761",
            "1ae3bf7479c7fcf2",
            "761819455be022e8",
            "bb5a3ccc0ea90fae"
        ],
        "x": 574,
        "y": 1379,
        "w": 1152,
        "h": 322
    },
    {
        "id": "a186c4ac5193be64",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "d6c4b358d69c82ec",
        "name": "Tarea_PSP2",
        "style": {
            "label": true
        },
        "nodes": [
            "1e38fb9fde19060c",
            "1f8f1fe3c5bc252c",
            "fa05a6a2e791312f",
            "59132ef2e539f371",
            "e8ebd324af8383cd",
            "37f99081ec0eddb4",
            "257b118a11e70f63",
            "70e8f0c180e2590e",
            "0e96cba9100beac1",
            "1ebf4f9fa228cb8e"
        ],
        "x": 54,
        "y": 199,
        "w": 432,
        "h": 422
    },
    {
        "id": "9a5342aff6b85257",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "d6c4b358d69c82ec",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "7078c3c25b991764",
            "b0f8060b659e21c6",
            "659bdcf93b73bcd0"
        ],
        "x": 554,
        "y": 79,
        "w": 872,
        "h": 82
    },
    {
        "id": "dc3eb14b99fb7288",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "d6c4b358d69c82ec",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "5b78067f1e9b4fba",
            "8dbc87250c23e4cc",
            "73f48cb3abbcf6d4",
            "f5e7ef62a13da151",
            "b9d12b88ea0b14a2",
            "4f447897b5a74081",
            "b253ba66d9c6c452",
            "cc6c7e4fc90b499c",
            "bfc165bb2a8fcc6b"
        ],
        "x": 554,
        "y": 839,
        "w": 1072,
        "h": 342
    },
    {
        "id": "bf3163ed112798e1",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "d6c4b358d69c82ec",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "444111ca8a81d151",
            "003bcd66193d65e7",
            "6ee276e7adbb5896",
            "329983dc24cc276b",
            "840b535d9efe1d70",
            "b700637f8989c664",
            "3c5d92152be891bc",
            "8412bb5133f56146",
            "4859e4ca5dc394dd",
            "71729d722676a230",
            "d5faa6c137c7abfe"
        ],
        "x": 554,
        "y": 1219,
        "w": 1132,
        "h": 302
    },
    {
        "id": "5ea914341709e6ad",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "validarVariablesTLV2",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "32a67f7478ba30ee",
            "bbc0b5d2b66f4710"
        ],
        "x": 774,
        "y": 119,
        "w": 552,
        "h": 82
    },
    {
        "id": "1bcf2cb1b0a42810",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "checkTipoTareaTLV2",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "8d5bb641d09138df",
            "79a6863fad295f71",
            "ea1a8d54be09f315",
            "885e228b8275ff0a",
            "06726748ada48898",
            "1655202144555f0e",
            "943042f0d14d6970",
            "2adceef1879aee75",
            "14ebaffe7938c44f",
            "6cc86788e53975a9",
            "dc5f36d70ebb959d",
            "bd79e0bb531bb2e9",
            "5c384e42e96b28ec",
            "6de7e6528ffbfe1b",
            "5f59d18be6d00d97",
            "2ffb31e8766dedcf",
            "53f6190e09dc0c9d",
            "55a7b6b114b7368f",
            "693f647b8b75f53c",
            "9fbe6c300f8c0126",
            "90819666511bdc84",
            "e9f8526b6915e438",
            "92140d4588ce57c9",
            "5a5a522dd8d5123e",
            "fb52baf177d2997d",
            "c49514b0a7d4c1cc"
        ],
        "x": 754,
        "y": 639,
        "w": 992,
        "h": 602
    },
    {
        "id": "36465cac5e18f83e",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "c7eeff13580e91cf",
            "f20a84dbc59f012b",
            "6f30a3b09fce9691"
        ],
        "x": 754,
        "y": 1459,
        "w": 712,
        "h": 102
    },
    {
        "id": "3c5def14bd172264",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "308efea0509ef7f3",
            "0e1ddadd66b3a1be",
            "eee407ea594f845e",
            "4e0984d89a0faa83",
            "479c29050efeac7b",
            "babaf8da56832b50",
            "619410ab83e5cf19",
            "84a79f13f593674f",
            "2385def350540c86",
            "0ee8c863a2bc5c68",
            "e1c37cd8a71d5d68",
            "c7ecf0550fc4697c",
            "86f9702b9872998c",
            "9fab1ac820f11852",
            "3a0fee5e96d2f22f",
            "eecb91d3a0caa786",
            "e8860c8c1d9cbad5",
            "60af90e25fc911e1",
            "76eb30e8cfd0d057",
            "3441211f12e52e51",
            "646fd36341a3519d",
            "903982ffa41fc705",
            "3950d327e53dd624",
            "69360a621403e7e8"
        ],
        "x": 734,
        "y": 1639,
        "w": 1132,
        "h": 562
    },
    {
        "id": "e245e19170e3c274",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "Verify PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "265b5d6c8ce3f162",
            "b0dccfadec91ae71",
            "dbbc9a657c57a158",
            "0e5d3547941a8d9a",
            "de3131cbbf826f8d",
            "84713a822553e94e",
            "263a08859e97f433",
            "bc9b36958a5bcbb5"
        ],
        "x": 714,
        "y": 2259,
        "w": 992,
        "h": 202
    },
    {
        "id": "ca5c597380302641",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "ejecutar orden PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "bf6f168d93b09992",
            "86660feefd9f8803",
            "c5ee7d8a613e6610",
            "969b77e231042c8a",
            "833a9270f98d9ede",
            "9928a8099a407c09",
            "0f1360f95b32d74c",
            "ca0d3f49f0bfe60d",
            "6ff1b221bb5d6344",
            "5190fdff86050fec"
        ],
        "x": 714,
        "y": 2479,
        "w": 1072,
        "h": 382
    },
    {
        "id": "48ff8069408aa495",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "PosicionActualTLV2",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "77f31bfe32169290",
            "3237ba3fa6176ace",
            "e91f1f6df4fcd804",
            "2682633c132fbe79",
            "fb28c53aa8118dc9",
            "1846eb6d2d2928f1",
            "c1894c49e2173dcc"
        ],
        "x": 714,
        "y": 2939,
        "w": 992,
        "h": 162
    },
    {
        "id": "5bba435ad44c6a54",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "PosicionPalasAfuera",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "83a8f21c28159991",
            "c61468bb0ac7de55",
            "4e42699baea02063",
            "23209614625cb266",
            "8a08d3975eaeff8f",
            "fbebc098ece054ae",
            "d71ef268046addb7"
        ],
        "x": 734,
        "y": 3119,
        "w": 992,
        "h": 162
    },
    {
        "id": "0bb3e29d582ab885",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "PosicionPalasAdentro",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "4b5d039b1fe2460c",
            "264197998b3a136a",
            "7feb6f61239a6056",
            "dd7258c00f5bcedd",
            "c7aa340d5170e073",
            "032032a657ba0e1b",
            "b2b24f04193bb7be"
        ],
        "x": 734,
        "y": 3319,
        "w": 952,
        "h": 162
    },
    {
        "id": "d36f313e7d511c76",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "Fin de orden",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "4347b0d78027d106",
            "07b1659827862884",
            "fef48fe3055e79cd",
            "84423b89783bf4bb",
            "394960f56aacd44c",
            "aa029a6fd75d1de9",
            "b1df259b3921711d"
        ],
        "x": 734,
        "y": 3659,
        "w": 952,
        "h": 162
    },
    {
        "id": "78f53fc2b0ab41f3",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "fa924e2cd1cd83b3",
            "6f7dbb7c4cfed84c",
            "b77e26f207fb6638",
            "9ae039cd7bd493df",
            "eb237f2dd2233ff6",
            "a16dae354b447aab",
            "c41cb14583b12150",
            "4f2597436a19c275",
            "9235551353f05d0e",
            "bb5cbd47ef7223af"
        ],
        "x": 734,
        "y": 4019,
        "w": 812,
        "h": 342
    },
    {
        "id": "950ec591b7c34e74",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "validarVariablesTLV2",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "852ba9eb5c973a25",
            "aab938a824c84b77"
        ],
        "x": 1354,
        "y": 119,
        "w": 552,
        "h": 82
    },
    {
        "id": "77d22cc2510905ed",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "EjecutarTareaTLV2",
        "style": {
            "label": true
        },
        "nodes": [
            "2307adfb2879a76a",
            "7e42e21f29c51576",
            "2ae966d4985dd0dd",
            "f2a9e3723a190dfc",
            "3e191fe0a911ffb0",
            "7bf6671b5c9a122f",
            "91892589f9da38a1",
            "100ce1e3eff745fe",
            "0adc54d7671d15f9",
            "76a31c615e1c4e76",
            "a8dcb0b26b7d5802",
            "f2f6a37a67a91ea2",
            "6cb44562987b62b2"
        ],
        "x": 48,
        "y": 159,
        "w": 518,
        "h": 502
    },
    {
        "id": "7c0f3464b328bbf2",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "f74720d46f95e418",
        "name": "Tarea_PSP3",
        "style": {
            "label": true
        },
        "nodes": [
            "c446ea093eeacb75",
            "725e4189f41b81c8",
            "07bcc9e70909969d",
            "fc546e5ba0bcb1f7",
            "09f2af83fa7735fe",
            "33dec85144cbed5e",
            "d335dc4e0df7ada6",
            "f2426e9a5d72bf0a"
        ],
        "x": 34,
        "y": 1739,
        "w": 412,
        "h": 402
    },
    {
        "id": "20cfd5ee33bb88c2",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "f74720d46f95e418",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "3f30cce0a5f6080f",
            "36d0d327761c8019",
            "e24a2b1d1fb3a6d5"
        ],
        "x": 534,
        "y": 1599,
        "w": 872,
        "h": 102
    },
    {
        "id": "a540f56a6f48836c",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "f74720d46f95e418",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "6bca5e334837654a",
            "7a894a612013586a",
            "8217270303f25021",
            "b6e8062d64ac0f62",
            "5f6fa0a5b271c879",
            "9f516186bcfc4499",
            "c44e41c3d23cc728",
            "c7e8d68a879cd921",
            "ff8314c14fe18929"
        ],
        "x": 534,
        "y": 2299,
        "w": 1092,
        "h": 342
    },
    {
        "id": "f63ed13ef3a5bf96",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "f74720d46f95e418",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "986b2ce837d0ac13",
            "d0879bddda16f98e",
            "4d1bb31d4c197a9c",
            "9eba16525246f058",
            "e49c3e83c7c5d881",
            "99e3c9c0308f8d12",
            "81d6960b5e71130b",
            "11e001f618fab933",
            "e0bb66056053ba20",
            "c5cac29bdd54fccd",
            "3de83f1c2dd3b060"
        ],
        "x": 534,
        "y": 2679,
        "w": 1112,
        "h": 302
    },
    {
        "id": "be551fd19e05c3bc",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "c1e010b81f9f5a5b",
        "name": "Tarea_PSP4",
        "style": {
            "label": true
        },
        "nodes": [
            "48b7763c6cba9913",
            "4a01048fd065c987",
            "b413bd2048112e73",
            "b1d28768303f2e67",
            "6a24b7b4319f248a",
            "9cf9b9e857a66329",
            "c5996e724706a42c",
            "2f85162f2b553886",
            "a7995a0b5ae9d86a",
            "c431a0dbfaf7ff91"
        ],
        "x": 54,
        "y": 1699,
        "w": 432,
        "h": 422
    },
    {
        "id": "1f767773e8e91daf",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "c1e010b81f9f5a5b",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "68ca47d9a41f0648",
            "92bb34d9ecbd7511",
            "40fccbe2a718055c"
        ],
        "x": 554,
        "y": 1579,
        "w": 872,
        "h": 102
    },
    {
        "id": "d340762b0f93fa84",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "c1e010b81f9f5a5b",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "9158b0596dd796b3",
            "9a4533554c8d7e9b",
            "e16f12e9b6f21091",
            "03377541c972500c",
            "0d3b28b0ef2c8c65",
            "20ff8e59bf94ad81",
            "4e1a4b7b42ca22d8",
            "deb51d87878ad11b",
            "27fa1ba8a25f58c1"
        ],
        "x": 554,
        "y": 2339,
        "w": 1072,
        "h": 342
    },
    {
        "id": "d65bebade15b7b4b",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "c1e010b81f9f5a5b",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "51646704ed0701a9",
            "9e535c4b4942da11",
            "ece5674ee1ce4afc",
            "2848ff7e2cd05a36",
            "4b54592a7f2d3fd2",
            "7431ba7d03f85a14",
            "4b9c5a402db8b761",
            "5907e81fd733e8e0",
            "2415b6ebd8d6ad60",
            "7adcd018ecf5f8fd",
            "64c1b3e2773e36cb"
        ],
        "x": 554,
        "y": 2699,
        "w": 1112,
        "h": 302
    },
    {
        "id": "5520edbd3f5870dc",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "abc039cbadf23293",
        "name": "Tarea_PSP5",
        "style": {
            "label": true
        },
        "nodes": [
            "3b1d814c88a2437c",
            "bd69482a950af46a",
            "90c72b7d961f5653",
            "df7572995952c143",
            "c6909d486382b9b3",
            "86954211b102782c",
            "60c70461b8ddcc38",
            "2f9264a2f13fa879"
        ],
        "x": 54,
        "y": 179,
        "w": 412,
        "h": 402
    },
    {
        "id": "bcae445a38804066",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "abc039cbadf23293",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "158e4097c8d8f2c8",
            "866af4918c410e12",
            "ae2d155df2a233f1"
        ],
        "x": 554,
        "y": 39,
        "w": 872,
        "h": 122
    },
    {
        "id": "ba0d7f2ea8130e48",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "abc039cbadf23293",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "c1a9386dbafe2589",
            "e03b4af4ceb37f4f",
            "3d02edff7bb59a3d",
            "b4b194a81fcc9e95",
            "95d550ad14a00320",
            "b1063302f8b6bc07",
            "4bff04d7e0b26223",
            "8c80050cb26a9a15",
            "708c393dcf875894"
        ],
        "x": 554,
        "y": 879,
        "w": 1072,
        "h": 342
    },
    {
        "id": "ef82c2fea16d5978",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "abc039cbadf23293",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "a02dcb1fad894856",
            "a7962182969ab2c3",
            "6a2024c38364f167",
            "9e1755e6d82aa581",
            "aee81e34523658af",
            "8bbd1bbd6c4aa75e",
            "a348499db94853fd",
            "e845573c70ad144a",
            "bfada9808c8b8b4c",
            "76f10ed758db1811",
            "ed0ab53c8cc57e10"
        ],
        "x": 554,
        "y": 1259,
        "w": 1132,
        "h": 302
    },
    {
        "id": "3fa57fbfb16a1cf3",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "1810271be2d4a941",
        "name": "Tarea_PSP7",
        "style": {
            "label": true
        },
        "nodes": [
            "d6c8220ec05964d3",
            "f7c5de6eb3f4ba80",
            "cbb12a5ac18bdcb9",
            "da68b5ac3b70fca4",
            "423b8d1d1a2f64ab",
            "fc5a05bbbef18157",
            "ee2ca57ea1703772",
            "4c4d89e2b06b0fff"
        ],
        "x": 54,
        "y": 1779,
        "w": 412,
        "h": 402
    },
    {
        "id": "ac33974ca35e89d3",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "1810271be2d4a941",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "78323ab3fe7c9be8",
            "424b27d6f522c259",
            "3a07a9275b984578"
        ],
        "x": 554,
        "y": 1639,
        "w": 872,
        "h": 82
    },
    {
        "id": "50c8c6e4abfe8cd0",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "1810271be2d4a941",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "b37ee89cb3dd7822",
            "619f83f3dd7d88aa",
            "425204a1e8838f2f",
            "2f70b8354cbac2d0",
            "28b774ca3ecdc9be",
            "c9fb7b39cfd7e191",
            "b0169eca3bd474ca",
            "1fa99cd247c39f20",
            "74024d972e8d4cca"
        ],
        "x": 554,
        "y": 2319,
        "w": 1072,
        "h": 342
    },
    {
        "id": "fa81f2f669d055b2",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "1810271be2d4a941",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "e72c30283fa8f74c",
            "349f9b58228b265e",
            "a129fea1e8cc3c48",
            "408cc007a2b8b34b",
            "df9c68a37ebb7234",
            "d683555c5552bf7c",
            "6b5703ab82850cdc",
            "509aa8606bda998b",
            "0b940ae650b158b3",
            "0ce2ab96de627b70",
            "62f04d5ee739abf3"
        ],
        "x": 534,
        "y": 2679,
        "w": 1112,
        "h": 302
    },
    {
        "id": "41fc70f7c3d5cc88",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "69e59dfefa75e858",
        "name": "Tarea_PSP6",
        "style": {
            "label": true
        },
        "nodes": [
            "ea9d296fabeec309",
            "b4d64cf96cd5d372",
            "df9eb30ecb597384",
            "f827ba5c02a2bf44",
            "a912dbd4cf0d765d",
            "b68f2fb4ca09cae6",
            "71f5131b945de642",
            "76d7098ea8f3a030",
            "cea13dd5d73d9ec6",
            "96e44b46a2de7d41"
        ],
        "x": 34,
        "y": 179,
        "w": 432,
        "h": 422
    },
    {
        "id": "68c7d4ca89ec178d",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "69e59dfefa75e858",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "1bcdb1745157446f",
            "ba64e4ed2e7b8786",
            "a63863cf1bd06c0b"
        ],
        "x": 534,
        "y": 59,
        "w": 872,
        "h": 102
    },
    {
        "id": "de0b235864398fdd",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "69e59dfefa75e858",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "3ee6dc895da584ad",
            "bfebc050bc9a8430",
            "1137e914c1bf60bc",
            "f2c4edd1263353d2",
            "5dc87d6c16399a5e",
            "544bc8f1254b4ffb",
            "bb25050350d87866",
            "a186a9a11acfab69",
            "83fcb772e2307f77"
        ],
        "x": 534,
        "y": 759,
        "w": 1072,
        "h": 342
    },
    {
        "id": "e0506c014636185c",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "69e59dfefa75e858",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "092ff06fd78d796f",
            "90207c4097dfcd62",
            "4b75d017cffaa325",
            "0b65cf8dd2dec7d9",
            "c55d113fef49e318",
            "69ad15d59c7bd9f0",
            "3ec5533db40df141",
            "6360f1d99a093f68",
            "fedaa13668fdda0c",
            "90b3a5ecac34fe2f",
            "4d7f2bf3cab3b3e4"
        ],
        "x": 534,
        "y": 1119,
        "w": 1112,
        "h": 282
    },
    {
        "id": "2d208fae9c20d792",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "e58dbaca2a12caca",
        "name": "Tarea_PSP8",
        "style": {
            "label": true
        },
        "nodes": [
            "a4d997ae6d883a9b",
            "7e4dc20cdeaa8f74",
            "107ff0e8c4f49ad7",
            "08a77a3cb1ae6728",
            "942deb709b921346",
            "59f27f20c74e26eb",
            "9dc24992fcac31aa",
            "db8a7cc45143cba4",
            "7f46f81ca15ffbd3",
            "89fa7aa9ec3fa01e"
        ],
        "x": 34,
        "y": 2059,
        "w": 432,
        "h": 422
    },
    {
        "id": "96535d8ca902241b",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "e58dbaca2a12caca",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "50333afcd4e61dae",
            "6370bc9e5262e53f",
            "13651e72a89d87bf"
        ],
        "x": 534,
        "y": 1939,
        "w": 872,
        "h": 82
    },
    {
        "id": "c54aa1f42c05d5fb",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "e58dbaca2a12caca",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "4d7c84219abee233",
            "b90c6531ae989579",
            "05c008ec0f76bc8e",
            "6d40899f3ae3c63a",
            "95f4dcd634efbd21",
            "4a475d607a968cd2",
            "0cc5722f7b302a5f",
            "805090e0051eb51f"
        ],
        "x": 534,
        "y": 2659,
        "w": 1072,
        "h": 342
    },
    {
        "id": "084a8bbe4463d715",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "e58dbaca2a12caca",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "96d7ef1e2995225d",
            "9e9decd161f5708b",
            "610c63d1c74927e6",
            "5ee574963a0e2564",
            "d42fb8afb1a015aa",
            "b51ea0c62cc481c9",
            "f9e68e56bea57f57",
            "6a6c7fbb993beeb9",
            "7d4825f1f223ad28",
            "34b99a3a93c9fde9",
            "73d1e2df25a9d5d7"
        ],
        "x": 534,
        "y": 3039,
        "w": 1112,
        "h": 302
    },
    {
        "id": "0c86f36287e2313f",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "0e95ebe19daa9ea6",
        "name": "Tarea_PSP9",
        "style": {
            "label": true
        },
        "nodes": [
            "9fcdc6fc558b696b",
            "5ce16e09adcd5f2a",
            "777056b1f4ace48f",
            "e053301bacc4e548",
            "18efbc7f54254027",
            "00cbf0599a28ff78",
            "ad531e41a0305ccd",
            "4a289e6eb1013450"
        ],
        "x": 54,
        "y": 179,
        "w": 412,
        "h": 402
    },
    {
        "id": "811df613b013231c",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "0e95ebe19daa9ea6",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "bc25b867b941d5ea",
            "963139f6ebb011d8",
            "0ad0a7c07c12e272"
        ],
        "x": 554,
        "y": 39,
        "w": 872,
        "h": 82
    },
    {
        "id": "3cdc9748647da7fd",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "0e95ebe19daa9ea6",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "b3c44919f276a19c",
            "b691885ae0456278",
            "8c03ef6ead2deecc",
            "e06e2268817a32f1",
            "761c5f9036286893",
            "626d84a7c4009eab",
            "a8a80944e3988be4",
            "68fb9572526c80d9",
            "6d89bd939dc2008f"
        ],
        "x": 554,
        "y": 819,
        "w": 1072,
        "h": 342
    },
    {
        "id": "31c038a20e5bb68b",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "0e95ebe19daa9ea6",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "01f9c51b6201b802",
            "0589d2e4cc2fcd2c",
            "3653b8d8f2c9cbbf",
            "e92a5c716a307270",
            "fef8f56227d1afbf",
            "defc63b209a31ab1",
            "59a886e7347bfc86",
            "585abbc7aeafbc6b",
            "9aef246b61dfc20f",
            "fff13f5f95b2971d",
            "172598e3151dadad"
        ],
        "x": 554,
        "y": 1179,
        "w": 1132,
        "h": 282
    },
    {
        "id": "904378873328d525",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "47501cb2b64cf5da",
        "name": "Tarea_PSP11",
        "style": {
            "label": true
        },
        "nodes": [
            "b6f0f6df3cdfc109",
            "854da75e13d889e4",
            "113f9acacf3b557a",
            "ee221efb378cf088",
            "08b426e6a64d09e1",
            "d27418c5790ec305",
            "5f2345bf4a4784fe",
            "ab3f7349c3804316"
        ],
        "x": 54,
        "y": 1979,
        "w": 412,
        "h": 382
    },
    {
        "id": "03584b19a9ee9f70",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "47501cb2b64cf5da",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "d330b8ca28eb2ebc",
            "b67b19fa979bf57a",
            "f0b9d60fab93ae43"
        ],
        "x": 554,
        "y": 1819,
        "w": 872,
        "h": 102
    },
    {
        "id": "f6ff23f63e4166b7",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "47501cb2b64cf5da",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "7f6ac5a4a5c3a39c",
            "b661f114d751c4f0",
            "e684cb5e05d824f1",
            "b321910853bda327",
            "5028a9dd658fed94",
            "dc8acee5475f588f",
            "1f63b9dfd75b16a3",
            "6914182db8076041",
            "3016a0ea717106a3"
        ],
        "x": 554,
        "y": 2519,
        "w": 1092,
        "h": 342
    },
    {
        "id": "ca7ee928aec78ed6",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "47501cb2b64cf5da",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "c90dc026c407fd47",
            "e924726dd7fc9110",
            "200c175aaa8b9cdc",
            "535d016a11cd1413",
            "d3f141a80ef81d44",
            "433e55b1ca1b0e3f",
            "f9f73805da87a5c8",
            "61808ae634f4cb52",
            "bf8a19917dc48559",
            "c352ce6557a305e2",
            "e1e5ea7bbd7bc3fe"
        ],
        "x": 554,
        "y": 2879,
        "w": 1132,
        "h": 302
    },
    {
        "id": "e8cb1161d9106dfe",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "cb019f9ffe4ad74c",
        "name": "Tarea_PSP10",
        "style": {
            "label": true
        },
        "nodes": [
            "b66b874dd4a7995b",
            "94255fa1f8789794",
            "b029ac3d7125b2ba",
            "d53d41c074b5ca69",
            "8f05a34149ec8da5",
            "5007ea3f7592d9d4",
            "893cb7f9aad143ed",
            "634d990bc77e3276",
            "8cd0d28f5dfcb9b4",
            "1b768853a51aa52d"
        ],
        "x": 54,
        "y": 139,
        "w": 432,
        "h": 462
    },
    {
        "id": "35535126cad29869",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "cb019f9ffe4ad74c",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "c67085e07767b718",
            "b8ed8178a5217904",
            "269a20eb508cbdbd"
        ],
        "x": 554,
        "y": 59,
        "w": 872,
        "h": 102
    },
    {
        "id": "33d35d24a5d4850a",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "cb019f9ffe4ad74c",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "1eb7f9c212ccae2b",
            "8955b6c2df9c7f50",
            "0f1d47cf0a7ea55e",
            "5dc2f7022219726f",
            "0f4a9c056de1034f",
            "c7860c821add9efc",
            "0f327f5996b6b40a",
            "ebdf01d7aae737e8",
            "5954bd6708a67144"
        ],
        "x": 534,
        "y": 939,
        "w": 1092,
        "h": 342
    },
    {
        "id": "1f0f56dedd60df8a",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "cb019f9ffe4ad74c",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "954df9bac6fc37be",
            "7b9b0289ed07409e",
            "928242214df8edd1",
            "22d6ace7e75c6476",
            "b65b543c854b67c9",
            "cf52c3d0328e22a6",
            "83d94df3a2b4ac5b",
            "d84f6e76e5835cd4",
            "b1ad7012f44ed95c",
            "085b2039a47a34d6",
            "da8ebd620c5689f3"
        ],
        "x": 514,
        "y": 1359,
        "w": 1132,
        "h": 282
    },
    {
        "id": "bd0f546e9f819d95",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "dfdaa146a5325e1e",
        "name": "Tarea_PSP12",
        "style": {
            "label": true
        },
        "nodes": [
            "1c6305e8aab2471d",
            "db59b942fe8d8264",
            "9634c5f66a138b8a",
            "06e44aa03d360335",
            "fc93a023acfe7dac",
            "45317c16ec6fcce7",
            "01be317b120ee070",
            "e3711fc29ba14c22",
            "cba48a69963c798d",
            "6b974431ed1f67e4"
        ],
        "x": 54,
        "y": 1839,
        "w": 432,
        "h": 462
    },
    {
        "id": "ed68071dbded8d91",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "dfdaa146a5325e1e",
        "name": "asignarVariables",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "4c80bcf2a093c7fc",
            "97421ba9ad308016",
            "bcb61f681bfdf684"
        ],
        "x": 554,
        "y": 1759,
        "w": 872,
        "h": 102
    },
    {
        "id": "efac22bb0f9cc3da",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "dfdaa146a5325e1e",
        "name": "EscribirDatosPLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "25ee184887d5e1aa",
            "864af3eabc93721d",
            "f5f55c722fad4551",
            "5ad27975db28d101",
            "b1c9aa37192b1b95",
            "43ec6aff9c8347d1",
            "1f40089f821302df",
            "283e133d145de846",
            "695705cc67391dc4"
        ],
        "x": 534,
        "y": 2499,
        "w": 1092,
        "h": 342
    },
    {
        "id": "d9a7b89e0b340648",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "dfdaa146a5325e1e",
        "name": "orden_PLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "1ba773f772aa8ae2",
            "1cc9b8093e0e5223",
            "62d2dd2446d05f9d",
            "00a0d138203010d7",
            "cec72afb6fecc789",
            "72517f152de4db94",
            "4e1a6d4ff0377731",
            "b34c6c4cb6d48f3d",
            "dac9b7eace463ed2",
            "c34c562be1ea48d3",
            "613ab6f651a2f573"
        ],
        "x": 534,
        "y": 2879,
        "w": 1132,
        "h": 282
    },
    {
        "id": "f316f8e75d485617",
        "type": "group",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "finOdenPIS3",
        "style": {
            "label": true
        },
        "nodes": [
            "144cc2ed9550fbfe",
            "4083331f6e5fd44c"
        ],
        "x": 54,
        "y": 979,
        "w": 452,
        "h": 102
    },
    {
        "id": "1b692a6bf140fa17",
        "type": "group",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "finOdenPIS1",
        "style": {
            "label": true
        },
        "nodes": [
            "2caaa66b77bc7cb6",
            "872560ecaa5fcead"
        ],
        "x": 54,
        "y": 39,
        "w": 452,
        "h": 102
    },
    {
        "id": "2a5825454f4b7ae0",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "b1551c1a080edf62",
        "name": "PIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "9fcab2d2c5f396bf",
            "80d35406d4c2416a",
            "437856355c93cc94",
            "b60f62c8f0e369c2",
            "1f7ecab9bf24a759",
            "90fc7555591ddd44",
            "6ed19fe5f8095afc",
            "785702d316306783",
            "a5a80b7874fbf289",
            "8794a1ba6eedf3a0",
            "f5f6f801b267fb12",
            "4781b24c2ba6eba7",
            "14e5759d25e170f8",
            "b10923457a6d7ed5"
        ],
        "x": 14,
        "y": 153,
        "w": 572,
        "h": 688
    },
    {
        "id": "da2482f6bc6c9e50",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "Fin de orden",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "cbe622010c364e9e",
            "3ca6f04947e4d8ef",
            "d6cfc6c134840906",
            "ebea21677d319f63",
            "7efd0386468308a9",
            "8a1b940313059b79"
        ],
        "x": 734,
        "y": 4719,
        "w": 1012,
        "h": 142
    },
    {
        "id": "c79daa9e355f0941",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "PosicionPalasAdentro",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "aa993237c3f7b99b",
            "4493e1ecc1f3be75",
            "484f6d4d7a535018",
            "fe9eb71d6b24a9fc"
        ],
        "x": 734,
        "y": 3879,
        "w": 672,
        "h": 102
    },
    {
        "id": "7fd795bb6a18e461",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "PosicionPalasAdentro",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "586be23c09a08220",
            "564824ba43fd6b9f",
            "46971330cffa7aab",
            "cb2fbd2c0a87e89a"
        ],
        "x": 714,
        "y": 3499,
        "w": 992,
        "h": 122
    },
    {
        "id": "d6c4eb345182fc79",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "Fin de orden",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "413c4606763e232b",
            "b371593cf29a017e",
            "6adac14109063798",
            "20b3116b47019d51",
            "3b78f810a51c6cfc"
        ],
        "x": 734,
        "y": 3859,
        "w": 1012,
        "h": 142
    },
    {
        "id": "63e72b906806df62",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "g": "ce5bdbab0a0fd95f",
        "name": "ScanSaliEvent",
        "style": {
            "label": true
        },
        "nodes": [
            "580b20765fd2c190",
            "a0758c8e9672410e",
            "0906b1437ab95377",
            "d35cd7677bc409c8"
        ],
        "x": 894,
        "y": 419,
        "w": 352,
        "h": 122
    },
    {
        "id": "65ac0a1d2b42e4d8",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "g": "ce5bdbab0a0fd95f",
        "name": "ScanSstsAllStation",
        "style": {
            "label": true
        },
        "nodes": [
            "076fc74800e1f468",
            "fd572c54b697e3b1",
            "0c2302107f2ceb7d",
            "1d44594b3b56293f"
        ],
        "x": 874,
        "y": 239,
        "w": 372,
        "h": 142
    },
    {
        "id": "13f21355ab578c86",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "g": "ce5bdbab0a0fd95f",
        "name": "ScanSimoAllStations",
        "style": {
            "label": true
        },
        "nodes": [
            "503edb9ac93feab5",
            "e5450626da1cd426",
            "4dd1dc394b4bc617",
            "b9121c997fec9351"
        ],
        "x": 474,
        "y": 239,
        "w": 372,
        "h": 142
    },
    {
        "id": "b256639f1e2a8b3f",
        "type": "group",
        "z": "85cd6b9fa59e1a60",
        "g": "ce5bdbab0a0fd95f",
        "name": "ScanSrosAllRoutes",
        "style": {
            "label": true
        },
        "nodes": [
            "ccf67092ae6953bb",
            "2773206df4b2b42d",
            "70425c80278c87ac",
            "a73dd62534f46d38"
        ],
        "x": 474,
        "y": 419,
        "w": 372,
        "h": 142
    },
    {
        "id": "2e96eeca1662ee5a",
        "type": "group",
        "z": "80dba39c1a7f3e3e",
        "g": "10a1b0c5b5686927",
        "name": "Tarea_PIE1",
        "style": {
            "label": true
        },
        "nodes": [
            "28a2ed6ecae2bef2",
            "e145527c9f28ef94",
            "ac36e4806c631ba7",
            "2aba482fbeb73c8c",
            "73d757d57e62778e"
        ],
        "x": 234,
        "y": 139,
        "w": 552,
        "h": 162
    },
    {
        "id": "f0c8d6637dd65dd0",
        "type": "group",
        "z": "80dba39c1a7f3e3e",
        "g": "10a1b0c5b5686927",
        "name": "Tarea_TLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "9c40bf35a6b57292",
            "44dc2796b0a1939d",
            "404b516fc8fe277e",
            "89296c4621e4437e",
            "817f20e17e16175f"
        ],
        "x": 234,
        "y": 339,
        "w": 552,
        "h": 142
    },
    {
        "id": "4b75e765ca4fd9ca",
        "type": "group",
        "z": "80dba39c1a7f3e3e",
        "g": "10a1b0c5b5686927",
        "name": "Tarea_TLV2",
        "style": {
            "label": true
        },
        "nodes": [
            "3c5bbe7f3d595d98",
            "578d7631949f0356",
            "f746828a68f8fe44",
            "97495b2db0f6e0a1",
            "a2716756ca92e325"
        ],
        "x": 234,
        "y": 539,
        "w": 552,
        "h": 142
    },
    {
        "id": "69bfed3e29726c9c",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "fdc1506b94898d22",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "dcbcef8363afd94e",
            "2b6dc5a5d2bce919",
            "fad93cdf0ac34c91",
            "bd4bcabad528a559",
            "1759c181a040f9b7",
            "6c18208eee226158"
        ],
        "x": 534,
        "y": 219,
        "w": 872,
        "h": 382
    },
    {
        "id": "356a7a7c8875936c",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "PosicionPalasAdentro",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "15a09fa2f8c415ab",
            "c57e73dafea09b02",
            "85cc8f59dc254252",
            "b8845db7fdc1fd84",
            "cf4f287f6dbe446d",
            "5758966931a0dfdb",
            "962d8746e39aacdb"
        ],
        "x": 734,
        "y": 3659,
        "w": 932,
        "h": 202
    },
    {
        "id": "654365d20111389b",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "720c81f2c6ea2070",
            "1fd4f29eb34b5403",
            "9ed0b15fe8f17ed8",
            "3a65de5d4018f9f7",
            "b99e6df7b450c5a4",
            "8948f9be12c87476",
            "9d7f6801a0377b61",
            "a560c9cf648671db",
            "9a32b669a386fa52",
            "1fd2643ba856ecac"
        ],
        "x": 774,
        "y": 419,
        "w": 992,
        "h": 262
    },
    {
        "id": "195df12e2c781ddf",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "7c0c91e6d234fe90",
            "11b136652d3749f3",
            "3f626f6a8a7a411a",
            "e21bbe3a83d011b8",
            "b07ad136e7c59101",
            "fc18c107a726d2ed",
            "7c1aaac52c28b974",
            "7c964d417e3cbf24",
            "463362ca860ee3ea",
            "5d969f6518695407",
            "5d63a04374b1a5f6",
            "4c0bfd9dcc2741df",
            "77162a66555b91ab"
        ],
        "x": 774,
        "y": 219,
        "w": 952,
        "h": 402
    },
    {
        "id": "369e46fa8f25be17",
        "type": "group",
        "z": "3f5b05842fb56c90",
        "g": "f74720d46f95e418",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "32d3b680a0cca12a",
            "c4cdc8f8d0b3c2a5",
            "5c9558fc42b58029",
            "9ff8b007e91b185d",
            "9c811746b4dd0bdd",
            "9b960692451adcea"
        ],
        "x": 534,
        "y": 1779,
        "w": 872,
        "h": 382
    },
    {
        "id": "cc8bbb3fe98bfc62",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "abc039cbadf23293",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "caeb7cc3fdc4ac92",
            "e1a2b26e26733806",
            "42c72f305de2afca",
            "f8b7d7a3778273ce",
            "1ad7d520f7f14ded",
            "7c9bf0e833b82afe"
        ],
        "x": 554,
        "y": 299,
        "w": 872,
        "h": 382
    },
    {
        "id": "5d2677ee11fe8022",
        "type": "group",
        "z": "183127036e7cddc7",
        "g": "1810271be2d4a941",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "2a45ebbc31cc2332",
            "4805139499b753ca",
            "4bd13c6cf6621773",
            "819311a6e3914948",
            "8f2daae6e548dc42",
            "391c09a78d22a02d"
        ],
        "x": 554,
        "y": 1819,
        "w": 872,
        "h": 382
    },
    {
        "id": "6e27ade6f2345916",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "0e95ebe19daa9ea6",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "4c2e275edab753b7",
            "3f49251ad52ab5d1",
            "fc7e03642f1e3992",
            "2ac3555fb919e6dd",
            "e9eeb54d47e25888",
            "af876c9a47a6b5c6"
        ],
        "x": 554,
        "y": 219,
        "w": 872,
        "h": 382
    },
    {
        "id": "4c0387305bf45916",
        "type": "group",
        "z": "1373e2c202c57aa8",
        "g": "47501cb2b64cf5da",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "d0651ce182a6882b",
            "40d6d5552dcb93ad",
            "6f82cd968e9e2a07",
            "c7155521da2d4f9d",
            "519f53bb0f4caa1d",
            "ef955768db613b78"
        ],
        "x": 554,
        "y": 2019,
        "w": 872,
        "h": 382
    },
    {
        "id": "d9a6966f5c6dfec6",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "d6c4b358d69c82ec",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "e87dcfe0cee13699",
            "f0bea7414cdff564",
            "bd90439549be6e5f",
            "bf58254207abfe0f",
            "0ec78b7d685e2951",
            "926f4afcf05781b5"
        ],
        "x": 554,
        "y": 299,
        "w": 872,
        "h": 382
    },
    {
        "id": "3e25caa400166874",
        "type": "group",
        "z": "7fb99878331dcff5",
        "g": "c1e010b81f9f5a5b",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "071f5128826f26f5",
            "f39f8cfc7fcca8ad",
            "a17b8a7f7a3245ba",
            "5eeaf4f5733adb48",
            "a3241f88a78b5622",
            "59453ac9e24b7cfe"
        ],
        "x": 554,
        "y": 1779,
        "w": 872,
        "h": 382
    },
    {
        "id": "61e11471d24e5acf",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "69e59dfefa75e858",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "029458561e299bae",
            "aa0619374b3e7272",
            "f2a9ccc8fb4489d4",
            "cf89b5f87fed3657",
            "faa4c66e9a39ee19",
            "f8a3c59ae2e7545e"
        ],
        "x": 514,
        "y": 259,
        "w": 872,
        "h": 382
    },
    {
        "id": "7d45ac69153c7fa0",
        "type": "group",
        "z": "6a4583e29f652d9b",
        "g": "e58dbaca2a12caca",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "6329772e36992207",
            "0af77d120d604083",
            "9eed49fc3c0bec2f",
            "430d3226f95a8bb4",
            "efcccddc8c064560",
            "71fbc149c4dd4afc"
        ],
        "x": 534,
        "y": 2119,
        "w": 872,
        "h": 382
    },
    {
        "id": "d520e8e146f126c3",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "cb019f9ffe4ad74c",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "36583885f14b2cd1",
            "8a7de2ede083792f",
            "e9da14ab74d9f4e1",
            "eb9b3613a83d7640",
            "a7adc8b9e595f0bb",
            "81e5066cd279e986"
        ],
        "x": 554,
        "y": 259,
        "w": 872,
        "h": 382
    },
    {
        "id": "eb84e41077a17994",
        "type": "group",
        "z": "6e675624204e9941",
        "g": "dfdaa146a5325e1e",
        "name": "AsignarID",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "3b09969aaaf5c312",
            "8f2e79c2415df3fc",
            "c5c984393b57b081",
            "c0aa9965f04ec325",
            "06ac831a81a980d3",
            "8af2f1a8ae793aac"
        ],
        "x": 554,
        "y": 1959,
        "w": 872,
        "h": 382
    },
    {
        "id": "9fcab2d2c5f396bf",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "SIMO_PIE1(5)",
        "style": {
            "label": true
        },
        "nodes": [
            "1eee0e133f937bb9",
            "7c31a45f458a0508"
        ],
        "x": 54,
        "y": 179,
        "w": 412,
        "h": 102
    },
    {
        "id": "99e6e81bb00214ae",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "name": "EscribirDatosDesdePLC",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "460c82c9b1ab6134",
            "d5b2aae7c52359ae",
            "f964792597fa1059",
            "d6783071f70acabf"
        ],
        "x": 634,
        "y": 439,
        "w": 492,
        "h": 142
    },
    {
        "id": "7587cceb496ff648",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "name": "enviarToPES",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "c897e34602f910c4",
            "74cd66597bccdc08",
            "41384094a4510d74",
            "1eabc0bd830f5657",
            "eccc47c7e3b79389",
            "af74a171fce90f10"
        ],
        "x": 614,
        "y": 599,
        "w": 772,
        "h": 202
    },
    {
        "id": "6c7cf121838175e8",
        "type": "group",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "EjecutarTarea_TLV1",
        "style": {
            "label": true
        },
        "nodes": [
            "13178c97e779719d",
            "9c5535615d53c2fe",
            "1d6b4c93a8af137b",
            "d68279f6ed61f669"
        ],
        "x": 114,
        "y": 459,
        "w": 412,
        "h": 182
    },
    {
        "id": "1a43e1884ab802a5",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "6c75ba1697d3feb5",
        "name": "cambioEstado",
        "style": {
            "label": true
        },
        "nodes": [
            "29b2ccfdd5d93093",
            "b790e0303553572f",
            "649ac37ba75ba846",
            "072c91c870e09df4"
        ],
        "x": 664,
        "y": 559,
        "w": 522,
        "h": 142
    },
    {
        "id": "8dd087fe4b1afadc",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "004f32f1f2d94b82",
        "name": "cambioEstado",
        "style": {
            "label": true
        },
        "nodes": [
            "f382621f5461764d",
            "91d0d6423f4160df",
            "5b021c33f0ea3c49",
            "aca04322a9fa20e2"
        ],
        "x": 664,
        "y": 779,
        "w": 522,
        "h": 142
    },
    {
        "id": "3c79c6c0f2486565",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "059b9c8807e7375d",
        "name": "cambio de estado ",
        "style": {
            "label": true
        },
        "nodes": [
            "22baeab6c78722b8",
            "91b5962fa1fb8f16",
            "354a1ce8ef8a467b",
            "e6954246d5ddb8dd"
        ],
        "x": 664,
        "y": 999,
        "w": 522,
        "h": 142
    },
    {
        "id": "ffc737f11425615b",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "7eed7e8b520920a9",
        "name": "cambioEstado",
        "style": {
            "label": true
        },
        "nodes": [
            "dca401ad62738b94",
            "16d0abf55448528b",
            "9d46be3f78b5c57a",
            "ecd814750561f711"
        ],
        "x": 664,
        "y": 339,
        "w": 522,
        "h": 162
    },
    {
        "id": "e85b35963aef282c",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "a1d13578cb7c4bc3",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "152f536aad8f655e",
            "fafe175485631fd4",
            "ad2166224834465a",
            "a9520fcfa10d00de"
        ],
        "x": 664,
        "y": 1219,
        "w": 502,
        "h": 142
    },
    {
        "id": "ca1cfc8a2bc7850b",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "885a256a1b12a5e9",
        "name": "cambio de estado ",
        "style": {
            "label": true
        },
        "nodes": [
            "b9c2f13a5b3ccdfb",
            "18f29b322fd3ee90",
            "b2f6f37ea370b841",
            "4d07180b2a5687e9"
        ],
        "x": 664,
        "y": 1439,
        "w": 522,
        "h": 142
    },
    {
        "id": "1130859a0776e0c3",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "9402d3484c4ad92c",
        "name": "cambio de estado ",
        "style": {
            "label": true
        },
        "nodes": [
            "ece35acd38d010ca",
            "60e46caa22017502",
            "2d9018454a867fa8",
            "1d53c13ef848157a"
        ],
        "x": 664,
        "y": 1639,
        "w": 522,
        "h": 122
    },
    {
        "id": "03344c966549c916",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "d9577576f6d1d102",
        "name": "cambio de estado ",
        "style": {
            "label": true
        },
        "nodes": [
            "c8ddcbc05c1bd5b0",
            "8ca16342aa71b23f",
            "290eb4e13e159466",
            "4412bae75b1f8f90"
        ],
        "x": 664,
        "y": 1839,
        "w": 522,
        "h": 142
    },
    {
        "id": "daa9314530bb6cb7",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "94ad54c038fdfbe7",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "22c5f9027e07b764",
            "1f19d8762842547a",
            "7ba580c92f8b5f69",
            "2fb3de588b0fa348"
        ],
        "x": 664,
        "y": 2059,
        "w": 522,
        "h": 142
    },
    {
        "id": "595f7dc1b58d7763",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "66c2ab2d09abd784",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "e8710048858a78c7",
            "e4af56cf9b8b64cc",
            "535edcd944ab65c3",
            "c0725411db92b404"
        ],
        "x": 664,
        "y": 2519,
        "w": 522,
        "h": 142
    },
    {
        "id": "1d2f40a68d6c5735",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "cc637912f1c88272",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "b107df030b5c99d1",
            "ae923cc2ded897ce",
            "d6f67cda2c56357b",
            "8c0aa1ec11c80b33"
        ],
        "x": 664,
        "y": 2739,
        "w": 522,
        "h": 142
    },
    {
        "id": "492b860fd6d5303a",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "30459ef60e88e4a3",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "e32d0d3ad9e58362",
            "fffe66bd24724e3e",
            "fb82896624db7825",
            "22a16ee287d7ab92"
        ],
        "x": 664,
        "y": 2279,
        "w": 522,
        "h": 142
    },
    {
        "id": "dfef1efca5def057",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "ed3fcddd7157ad59",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "874a3fdcded825ac",
            "9a7b8395a8cdb313",
            "e1127a581167a38b",
            "707bd643996210c1"
        ],
        "x": 664,
        "y": 2959,
        "w": 522,
        "h": 142
    },
    {
        "id": "5661050aa6900234",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "db60865c83c008fd",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "c5d9ed74ed39b4cc",
            "904382cde0183c8e",
            "365ccf95b3af2172",
            "d3d431e93950bc89"
        ],
        "x": 664,
        "y": 3179,
        "w": 522,
        "h": 142
    },
    {
        "id": "90b39c4e2e071357",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "5ac7c5cf94fa331b",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "80f208312ebe2b71",
            "b16e53465bb1626f",
            "1f028294f68e01f2",
            "550ce0740fd159ea"
        ],
        "x": 664,
        "y": 3399,
        "w": 522,
        "h": 142
    },
    {
        "id": "310a360f78abb30d",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "a82b3270d3d0bcd8",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "5b306fb852f49015",
            "dba090928682a071",
            "a46ec3e98f640314",
            "c5822c16fee382ad"
        ],
        "x": 664,
        "y": 3619,
        "w": 522,
        "h": 142
    },
    {
        "id": "9f039eb64ab8f34b",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "28a985268abe7b45",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "b245682cdb594c0a",
            "bf24cc004d6ee1e0",
            "29bbe4caebcd1daf",
            "09409e8b0486a7a9"
        ],
        "x": 664,
        "y": 3839,
        "w": 522,
        "h": 142
    },
    {
        "id": "757358fd342469d5",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "058159e4f974f49b",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "1f9c48d9704a5311",
            "141a556bf6216588",
            "52542bc0d7b6a56a",
            "ff366de75ec0988e"
        ],
        "x": 664,
        "y": 4059,
        "w": 522,
        "h": 142
    },
    {
        "id": "2c12f47d415a60e0",
        "type": "group",
        "z": "08d4b7fc21a7a783",
        "g": "9d52f86219780937",
        "name": "cambio de estado",
        "style": {
            "label": true
        },
        "nodes": [
            "3999028d40f8d219",
            "131136f7b0a1786e",
            "d4ca04fca4d475ac",
            "c07a27638ff7e971"
        ],
        "x": 664,
        "y": 4279,
        "w": 522,
        "h": 142
    },
    {
        "id": "2307adfb2879a76a",
        "type": "group",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "EjecutarTarea_TLV2",
        "style": {
            "label": true
        },
        "nodes": [
            "4dcb425047dafa93",
            "69f1e64699951b20",
            "242271e7e3dbedd9",
            "7d785f64caa0b7dd"
        ],
        "x": 74,
        "y": 279,
        "w": 432,
        "h": 182
    },
    {
        "id": "03567257f7a36264",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "name": "variables",
        "style": {
            "label": true
        },
        "nodes": [
            "5ae954e99b59aace",
            "2e4e3f8d4a9d2dff",
            "9c20bab55ad04761",
            "2072de91a10cdb29",
            "06f63e4674901aae",
            "aeb7e0381e2809bb",
            "7311cea0d68c4710",
            "462b7c335ac64eef",
            "9737857877075969",
            "2d9ad0c454f26b48"
        ],
        "x": 604,
        "y": 139,
        "w": 682,
        "h": 282
    },
    {
        "id": "80d35406d4c2416a",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "reintentos",
        "style": {
            "label": true
        },
        "nodes": [
            "67f34c45eb37abc5",
            "fea0a4f7cad057b2"
        ],
        "x": 54,
        "y": 319,
        "w": 412,
        "h": 122
    },
    {
        "id": "872439fa01ce5c4d",
        "type": "group",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4b9ba87dd21be25a",
            "929a3f7c7828c49c",
            "5e77692cf1e9e7c4",
            "f293bc8914058900",
            "00c3fb636aa362a9",
            "3a9439dd23b181d3",
            "c34f1e2bfc458b44",
            "bcac06e2208692c9",
            "1d0ae65e99dc18d5"
        ],
        "x": 1414,
        "y": 79,
        "w": 652,
        "h": 302
    },
    {
        "id": "519a750abc1e67ac",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "almacenSilo",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d41610ee1fc6122f",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "carro_db112",
        "vartable": [
            {
                "addr": "DB112,X130.0",
                "name": "Status_Conectado"
            },
            {
                "addr": "DB112,X130.1",
                "name": "Status_Defecto"
            },
            {
                "addr": "DB112,X130.2",
                "name": "Status_Automatico"
            },
            {
                "addr": "DB112,X130.3",
                "name": "Status_Semiautomatico"
            },
            {
                "addr": "DB112,X130.4",
                "name": "Status_Manual"
            },
            {
                "addr": "DB112,X130.5",
                "name": "Status_Emergencia_puerta_armario"
            },
            {
                "addr": "DB112,X130.6",
                "name": "Status_Con_datos"
            },
            {
                "addr": "DB112,X131.2",
                "name": "Autorizacion_de_transferencia_desde_TC26"
            },
            {
                "addr": "DB112,X131.3",
                "name": "Fin_de_transferencia_desde_TC26"
            },
            {
                "addr": "DB112,X131.4",
                "name": "Peticion_de_transferencia_desde_TC30"
            },
            {
                "addr": "DB112,X131.7",
                "name": "Acuse_de_orden_recibida"
            },
            {
                "addr": "DB112,WORD132",
                "name": "Matricula_paleta_en_transportador_de_entrada"
            },
            {
                "addr": "DB112,WORD134",
                "name": "Matricula_paleta_en_transportador_de_salida"
            },
            {
                "addr": "DB112,BYTE136",
                "name": "Pasillo_destino"
            },
            {
                "addr": "DB112,BYTE137",
                "name": "Ciclo_de_trabajo"
            },
            {
                "addr": "DB112,BYTE140",
                "name": "Numero_de_pasillo_actual"
            },
            {
                "addr": "DB112,BYTE141",
                "name": "Estado_carro"
            },
            {
                "addr": "DB112,X142.0",
                "name": "Defecto_Error_de_comunicacion"
            },
            {
                "addr": "DB112,X142.1",
                "name": "Defecto_Emergencia_armario_carro"
            },
            {
                "addr": "DB112,X142.2",
                "name": "Defecto_Anomalia_variador"
            },
            {
                "addr": "DB112,X142.3",
                "name": "Defecto_Anomalia_motor_traslacion"
            },
            {
                "addr": "DB112,X142.4",
                "name": "Defecto_Anomalia_motor_entrada"
            },
            {
                "addr": "DB112,X142.5",
                "name": "Defecto_Anomalia_motor_salida"
            },
            {
                "addr": "DB112,X142.6",
                "name": "Defecto__Final_de_carrera_pasillo_1"
            },
            {
                "addr": "DB112,X142.7",
                "name": "Defecto__Final_de_carrera_pasillo_12"
            },
            {
                "addr": "DB112,X143.0",
                "name": "Defecto_Paleta_descentrada_en_transfer_de_entrada"
            },
            {
                "addr": "DB112,X143.1",
                "name": "Defecto__Paleta_descentrada_en_transfer_de_salida"
            },
            {
                "addr": "DB112,X144.0",
                "name": "Visualizacion_Centraje_traslacion_adelante"
            },
            {
                "addr": "DB112,X144.1",
                "name": "Visualizacion_Centraje_traslacion_atras"
            },
            {
                "addr": "DB112,X144.2",
                "name": "Visualizacion_Presencia_delantera_de_paleta_en_entrada"
            },
            {
                "addr": "DB112,X144.3",
                "name": "Visualizacion_Presencia_trasera_de_paleta_en_entrada"
            },
            {
                "addr": "DB112,X144.4",
                "name": "Visualizacion_Presencia_delantera_de_paleta_en_salida"
            },
            {
                "addr": "DB112,X144.5",
                "name": "Visualizacion_Presencia_trasera_de_paleta_en_salida"
            },
            {
                "addr": "DB112,X145.0",
                "name": "Visualizacion_Marcha_traslacion_adelante"
            },
            {
                "addr": "DB112,X145.1",
                "name": "Visualizacion_Marcha_traslacion_atras"
            },
            {
                "addr": "DB112,X145.2",
                "name": "Visualizacion_Motor_traslacion_parado"
            },
            {
                "addr": "DB112,X145.3",
                "name": "Visualizacion_Centraje_traslacion"
            },
            {
                "addr": "DB112,X145.4",
                "name": "Visualizacion_Marcha_transportador_entrada"
            },
            {
                "addr": "DB112,X145.5",
                "name": "Visualizacion_Marcha_transportador_salida"
            },
            {
                "addr": "DB112,X145.6",
                "name": "Visualizacion_Defecto_traslacion_"
            },
            {
                "addr": "DB112,X145.7",
                "name": "Visualizacion__Defecto_transportador"
            }
        ]
    },
    {
        "id": "fb206c814b3d2fe5",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "PES-PEE",
        "vartable": [
            {
                "addr": "M242.1",
                "name": "TL.2"
            },
            {
                "addr": "M24.7",
                "name": "PRES.PALET.SCAN.MR24"
            },
            {
                "addr": "M121.5",
                "name": "AUTORIZ.SCAN.24"
            },
            {
                "addr": "DB205,WORD64",
                "name": "F.SEMAFOROS.DATOS_PREPARADOS.PALETA_EN_PES"
            },
            {
                "addr": "DB211,WORD30",
                "name": "F.EM.SGA.LLEGADA_PES.DATOS_PREPARADOS"
            },
            {
                "addr": "M501.1",
                "name": "LLEGADA_PES_ENVIADA"
            },
            {
                "addr": "DB100,BYTE70",
                "name": "INTERFACE_DATOS.LLEGADA_PES.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,BYTE50",
                "name": "INTERFACE_DATOS.STATUS_CARRO.ESTADO"
            },
            {
                "addr": "DB100,BYTE80",
                "name": "INTERFACE_DATOS.PERMISO_SALIDA_PES.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD82",
                "name": "INTERFACE_DATOS.PERMISO_SALIDA_PES.MATRICULA_PALET"
            },
            {
                "addr": "DB210,WORD20",
                "name": "F.RE.SGA.PERMISO_SALIDA_PES.MATRICULA_PALETA"
            },
            {
                "addr": "DB100,BYTE84",
                "name": "INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO"
            },
            {
                "addr": "DB210,BYTE22",
                "name": "F.RE.SGA.PERMISO_SALIDA_PES.DESTINO"
            },
            {
                "addr": "DB970,X178.0",
                "name": "SGA_OK"
            },
            {
                "addr": "DB970,X178.1",
                "name": "DO_SGA"
            },
            {
                "addr": "DB970,X178.2",
                "name": "SGA_PROCESS"
            },
            {
                "addr": "DB970,X178.3",
                "name": "WaitForSndMR16"
            },
            {
                "addr": "DB970,X178.4",
                "name": "FinFeadback"
            },
            {
                "addr": "DB971,X84.4",
                "name": "DATO_A_SGA_MRE23_TR27"
            },
            {
                "addr": "DB100,BYTE182",
                "name": "LLEGADA_PEE_Flag_datos_prep_PLC"
            },
            {
                "addr": "DB100,BYTE183",
                "name": "LLEGADA_PEE_Flag_datos_prep_SGA"
            },
            {
                "addr": "DB100,WORD184",
                "name": "LLEGADA_PEE_Matricula_palet"
            },
            {
                "addr": "DB11,DINT0",
                "name": "TRACKING_ELEVADOR_TC1_MATRICULA"
            },
            {
                "addr": "DB11,BYTE4",
                "name": "TRACKING_ELEVADOR_TC1_DESTINO"
            },
            {
                "addr": "DB11,DINT8",
                "name": "TRACKING_ELEVADOR_EL1_MATRICULA"
            },
            {
                "addr": "DB11,BYTE12",
                "name": "TRACKING_ELEVADOR_EL1_DESTINO"
            },
            {
                "addr": "DB11,DINT16",
                "name": "TRACKING_ELEVADOR_TC2_MATRICULA"
            },
            {
                "addr": "DB11,BYTE20",
                "name": "TRACKING_ELEVADOR_TC2_DESTINO"
            },
            {
                "addr": "DB11,DINT24",
                "name": "TRACKING_ELEVADOR_TC3_MATRICULA"
            },
            {
                "addr": "DB11,BYTE28",
                "name": "TRACKING_ELEVADOR_TC3_DESTINO"
            },
            {
                "addr": "DB11,DINT32",
                "name": "TRACKING_ELEVADOR_TC4_MATRICULA"
            },
            {
                "addr": "DB11,BYTE36",
                "name": "TRACKING_ELEVADOR_TC4_DESTINO"
            },
            {
                "addr": "DB11,DINT40",
                "name": "TRACKING_ELEVADOR_TEC1_MATRICULA"
            },
            {
                "addr": "DB11,BYTE44",
                "name": "TRACKING_ELEVADOR_TEC1_DESTINO"
            },
            {
                "addr": "DB11,DINT48",
                "name": "TRACKING_ELEVADOR_TEC2_MATRICULA"
            },
            {
                "addr": "DB11,BYTE52",
                "name": "TRACKING_ELEVADOR_TEC2_DESTINO"
            },
            {
                "addr": "DB100,WORD0",
                "name": "INDICATIVO_VIDA_SGA"
            },
            {
                "addr": "DB100,WORD4",
                "name": "INDICATIVO_VIDA_PLC"
            },
            {
                "addr": "DB100,BYTE40",
                "name": "INTERFACE_DATOS_STATUS_PUENTE_OCUPACION"
            },
            {
                "addr": "DB100,BYTE41",
                "name": "INTERFACE_DATOS_STATUS_PUENTE_ESTADO"
            },
            {
                "addr": "DB100,BYTE42",
                "name": "INTERFACE_DATOS_STATUS_PUENTE_SITUACION"
            },
            {
                "addr": "DB100,BYTE43",
                "name": "INTERFACE_DATOS_STATUS_PUENTE_POSICION"
            },
            {
                "addr": "DB100,BYTE10",
                "name": "INTERFACE_DATOS_STATUS_INSTALACION_MARCHA"
            }
        ]
    },
    {
        "id": "cfe81a06cf24641b",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "Gen",
        "vartable": [
            {
                "addr": "I53.2",
                "name": "S.AUT.7MAN BM692"
            },
            {
                "addr": "DB110,BYTE50",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.UNO"
            },
            {
                "addr": "DB110,BYTE51",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.DOS"
            },
            {
                "addr": "DB110,BYTE52",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.TRES"
            },
            {
                "addr": "DB110,BYTE53",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.CUATRO"
            },
            {
                "addr": "DB110,BYTE54",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.CINCO"
            },
            {
                "addr": "DB110,BYTE55",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.SEIS"
            },
            {
                "addr": "DB110,BYTE56",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.SIETE"
            },
            {
                "addr": "DB110,BYTE57",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.OCHO"
            },
            {
                "addr": "DB110,BYTE58",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.NUEVE"
            },
            {
                "addr": "DB110,BYTE59",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.DIEZ"
            },
            {
                "addr": "DB110,BYTE60",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.ONCE"
            },
            {
                "addr": "DB110,BYTE61",
                "name": "INTERFACE_SCADA.STATUS_MESAS_ENTRADA.DOCE"
            },
            {
                "addr": "DB110,BYTE70",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.UNO"
            },
            {
                "addr": "DB110,BYTE71",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.DOS"
            },
            {
                "addr": "DB110,BYTE72",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.TRES"
            },
            {
                "addr": "DB110,BYTE73",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.CUATRO"
            },
            {
                "addr": "DB110,BYTE74",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.CINCO"
            },
            {
                "addr": "DB110,BYTE75",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.SEIS"
            },
            {
                "addr": "DB110,BYTE76",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.SIETE"
            },
            {
                "addr": "DB110,BYTE77",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.OCHO"
            },
            {
                "addr": "DB110,BYTE78",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.NUEVE"
            },
            {
                "addr": "DB110,BYTE79",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.DIEZ"
            },
            {
                "addr": "DB110,BYTE80",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.ONCE"
            },
            {
                "addr": "DB110,BYTE81",
                "name": "INTERFACE_SCADA.STATUS_MESAS_SALIDA.DOCE"
            },
            {
                "addr": "I38.7",
                "name": "FOT_PRES_TA29_PIS1_REJ1"
            },
            {
                "addr": "I39.0",
                "name": "FOT_FINAL_TA29_PIS1_REJ1"
            },
            {
                "addr": "I39.5",
                "name": "FOT_FINAL_TA34"
            },
            {
                "addr": "I39.6",
                "name": "FOT_PRES_TA35_PIS2"
            },
            {
                "addr": "I146.2",
                "name": "PUP1_S11_MAN"
            },
            {
                "addr": "I146.3",
                "name": "PUP1_S11_AUTO"
            },
            {
                "addr": "I148.0",
                "name": "PUP2_S11_MAN"
            },
            {
                "addr": "I148.1",
                "name": "PUP2_S11_AUTO"
            },
            {
                "addr": "I150.0",
                "name": "PUP3_S11_MAN"
            },
            {
                "addr": "I150.1",
                "name": "PUP3_S11_AUTO"
            },
            {
                "addr": "I145.3",
                "name": "FOT_FINAL_PIS3"
            },
            {
                "addr": "I51.3",
                "name": "AUT_MAN_BM692_PIS1_2"
            },
            {
                "addr": "DB100,WORD164",
                "name": "LLEGADA_PIS2_MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE162",
                "name": "LLEGADA_PIS2_DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD92",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_1.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE96",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_2.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD98",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_2.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE102",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_3.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,BYTE90",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_1.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD104",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_3.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE108",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_4.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD110",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_4.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE114",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_5.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD116",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_5.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE120",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_6.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD122",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_6.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE126",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_7.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD128",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_7.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE132",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_8.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD134",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_8.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE138",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_9.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD140",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_9.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE144",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_10.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD146",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_10.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE150",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_11.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD152",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_11.MATRICULA_PALET"
            },
            {
                "addr": "DB100,BYTE156",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_12.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD158",
                "name": "INTERFACE_DATOS.PALETA_PASILLO_12.MATRICULA_PALET"
            },
            {
                "addr": "DB10,WORD72",
                "name": "TC37"
            },
            {
                "addr": "DB10,WORD74",
                "name": "MesaEntrada_1_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD76",
                "name": "MesaSalida_1_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD78",
                "name": "MesaEntrada_2_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD80",
                "name": "MesaSalida_2_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD82",
                "name": "MesaEntrada_3_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD84",
                "name": "MesaSalida_3_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD86",
                "name": "MesaEntrada_4_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD88",
                "name": "MesaSalida_4_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD90",
                "name": "MesaEntrada_5_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD92",
                "name": "MesaSalida_5_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD94",
                "name": "MesaEntrada_6_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD96",
                "name": "MesaSalida_6_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD98",
                "name": "MesaEntrada_7_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD100",
                "name": "MesaSalida_7_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD102",
                "name": "MesaEntrada_8_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD104",
                "name": "MesaSalida_8_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD106",
                "name": "MesaEntrada_9_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD108",
                "name": "MesaSalida_9_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD110",
                "name": "MesaEntrada_10_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD112",
                "name": "MesaSalida_10_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD114",
                "name": "MesaEntrada_11_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD116",
                "name": "MesaSalida_11_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD118",
                "name": "MesaEntrada_12_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD120",
                "name": "MesaEntrada_12_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD340",
                "name": "MesaEntrada_1_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD344",
                "name": "MesaSalida_1_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD348",
                "name": "MesaEntrada_2_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD352",
                "name": "MesaSalida_2_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD356",
                "name": "MesaEntrada_3_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD360",
                "name": "MesaSalida_3_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD364",
                "name": "MesaEntrada_4_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD368",
                "name": "MesaSalida_4_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD372",
                "name": "MesaEntrada_5_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD376",
                "name": "MesaSalida_5_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD380",
                "name": "MesaEntrada_6_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD384",
                "name": "MesaSalida_6_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD388",
                "name": "MesaEntrada_7_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD392",
                "name": "MesaSalida_7_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD396",
                "name": "MesaEntrada_8_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD400",
                "name": "MesaSalida_8_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD404",
                "name": "MesaEntrada_9_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD408",
                "name": "MesaSalida_9_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD412",
                "name": "MesaEntrada_10_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD416",
                "name": "MesaSalida_10_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD420",
                "name": "MesaEntrada_11_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD424",
                "name": "MesaSalida_11_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD428",
                "name": "MesaEntrada_12_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD432",
                "name": "MesaSalida_12_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD436",
                "name": "CTF36"
            },
            {
                "addr": "I39.7",
                "name": "FOT_PRES_TC37"
            },
            {
                "addr": "I40.0",
                "name": "F_ACUM_LLE_TC37"
            },
            {
                "addr": "I60.0",
                "name": "FOT_PRES_TC38"
            },
            {
                "addr": "I40.3",
                "name": "F_FINAL_TC38"
            },
            {
                "addr": "I40.4",
                "name": "FOT_PRES_TC39"
            },
            {
                "addr": "I40.5",
                "name": "F_ACUM_LLE_TC39"
            },
            {
                "addr": "I60.1",
                "name": "FOT_PRES_TC40"
            },
            {
                "addr": "I41.0",
                "name": "F_FINAL_TC40"
            },
            {
                "addr": "I41.1",
                "name": "FOT_PRES_TC41"
            },
            {
                "addr": "I41.2",
                "name": "F_ACUM_LLE_TC41"
            },
            {
                "addr": "I60.2",
                "name": "FOT_PRES_TC42"
            },
            {
                "addr": "I41.5",
                "name": "F_FINAL_TC42"
            },
            {
                "addr": "I41.6",
                "name": "FOT_PRES_TC43"
            },
            {
                "addr": "I41.7",
                "name": "F_ACUM_LLE_TC43"
            },
            {
                "addr": "I60.3",
                "name": "FOT_PRES_TC44"
            },
            {
                "addr": "I42.2",
                "name": "F_FINAL_TC44"
            },
            {
                "addr": "I42.3",
                "name": "FOT_PRES_TC45"
            },
            {
                "addr": "I42.4",
                "name": "F_ACUM_LLE_TC45"
            },
            {
                "addr": "I60.4",
                "name": "FOT_PRES_TC46"
            },
            {
                "addr": "I42.7",
                "name": "F_FINAL_TC46"
            },
            {
                "addr": "I43.0",
                "name": "FOT_PRES_TC47"
            },
            {
                "addr": "I43.1",
                "name": "F_ACUM_LLE_TC47"
            },
            {
                "addr": "I60.5",
                "name": "FOT_PRES_TC48"
            },
            {
                "addr": "I43.4",
                "name": "F_FINAL_TC48"
            },
            {
                "addr": "I43.5",
                "name": "FOT_PRES_TC49"
            },
            {
                "addr": "I43.6",
                "name": "F_ACUM_LLE_TC49"
            },
            {
                "addr": "I60.6",
                "name": "FOT_PRES_TC50"
            },
            {
                "addr": "I44.1",
                "name": "F_FINAL_TC50"
            },
            {
                "addr": "I44.2",
                "name": "FOT_PRES_TC51"
            },
            {
                "addr": "I44.3",
                "name": "F_ACUM_LLE_TC51"
            },
            {
                "addr": "I60.7",
                "name": "FOT_PRES_TC52"
            },
            {
                "addr": "I44.6",
                "name": "F_FINAL_TC52"
            },
            {
                "addr": "I44.7",
                "name": "FOT_PRES_TC53"
            },
            {
                "addr": "I45.0",
                "name": "F_ACUM_LLE_TC53"
            },
            {
                "addr": "I61.0",
                "name": "FOT_PRES_TC54"
            },
            {
                "addr": "I45.3",
                "name": "F_FINAL_TC54"
            },
            {
                "addr": "I45.4",
                "name": "FOT_PRES_TC55"
            },
            {
                "addr": "I45.5",
                "name": "F_ACUM_LLE_TC55"
            },
            {
                "addr": "I61.1",
                "name": "FOT_PRES_TC56"
            },
            {
                "addr": "I46.0",
                "name": "F_FINAL_TC56"
            },
            {
                "addr": "I46.1",
                "name": "FOT_PRES_TC57"
            },
            {
                "addr": "I46.2",
                "name": "F_ACUM_LLE_TC57"
            },
            {
                "addr": "I61.2",
                "name": "FOT_PRES_TC58"
            },
            {
                "addr": "I46.5",
                "name": "F_FINAL_TC58"
            },
            {
                "addr": "I46.6",
                "name": "FOT_PRES_TC59"
            },
            {
                "addr": "I46.7",
                "name": "F_ACUM_LLE_TC59"
            },
            {
                "addr": "I61.3",
                "name": "FOT_PRES_TC60"
            },
            {
                "addr": "I47.2",
                "name": "F_FINAL_TC60"
            },
            {
                "addr": "DB10,WORD20",
                "name": "TRANS.DATOS.D_10"
            },
            {
                "addr": "DB10,WORD32",
                "name": "TRANS.DATOS.D_16"
            },
            {
                "addr": "DB10,BYTE33",
                "name": "DB10,BYTE33"
            },
            {
                "addr": "M121.4",
                "name": "AUTORIZ.SCAN.16"
            },
            {
                "addr": "DB205,WORD62",
                "name": "F.SEMAFOROS.DATOS_PREPARADOS.PALETA_EN_PIE"
            },
            {
                "addr": "DB211,WORD20",
                "name": "F.EM.SGA.LLEGADA_PIE.DATOS_PREPARADOS"
            },
            {
                "addr": "DB211,BYTE22",
                "name": "F.EM.SGA.LLEGADA_PIE.TIPO_PALETA"
            },
            {
                "addr": "DB100,BYTE60",
                "name": "INTERFACE_DATOS.LLEGADA_PIE.DATOS_PREPARADOS"
            },
            {
                "addr": "M501.0",
                "name": "LLEGADA_PIE_ENVIADA"
            },
            {
                "addr": "DB150,BYTE212",
                "name": "SCANNER_PIE.DATOS.LECTURA_OK_SGA"
            },
            {
                "addr": "DB100,BYTE61",
                "name": "INTERFACE_DATOS.LLEGADA_PIE.TIPO_PALETA"
            },
            {
                "addr": "DB100,WORD60",
                "name": "DB100,WORD60"
            },
            {
                "addr": "DB971,BYTE137",
                "name": "OCUPACION_PIE1"
            },
            {
                "addr": "DB971,BYTE138",
                "name": "ESTADO_PIE1"
            },
            {
                "addr": "DB971,CHAR100",
                "name": "COD13_C1"
            },
            {
                "addr": "DB971,CHAR101",
                "name": "COD13_C2"
            },
            {
                "addr": "DB971,CHAR102",
                "name": "COD13_C3"
            },
            {
                "addr": "DB971,CHAR103",
                "name": "COD13_C4"
            },
            {
                "addr": "DB971,CHAR104",
                "name": "COD13_C5"
            },
            {
                "addr": "DB971,CHAR105",
                "name": "COD13_C6"
            },
            {
                "addr": "DB971,CHAR106",
                "name": "COD13_C7"
            },
            {
                "addr": "DB971,CHAR107",
                "name": "COD13_C8"
            },
            {
                "addr": "DB971,CHAR108",
                "name": "COD13_C9"
            },
            {
                "addr": "DB971,CHAR109",
                "name": "COD13_C10"
            },
            {
                "addr": "DB971,CHAR110",
                "name": "COD13_C11"
            },
            {
                "addr": "DB971,CHAR111",
                "name": "COD13_C12"
            },
            {
                "addr": "DB971,CHAR112",
                "name": "COD13_C13"
            },
            {
                "addr": "DB971,CHAR113",
                "name": "COD13_CR"
            },
            {
                "addr": "DB971,CHAR114",
                "name": "COD6_C1"
            },
            {
                "addr": "DB971,CHAR115",
                "name": "COD6_C2"
            },
            {
                "addr": "DB971,CHAR116",
                "name": "COD6_C3"
            },
            {
                "addr": "DB971,CHAR117",
                "name": "COD6_C4"
            },
            {
                "addr": "DB971,CHAR118",
                "name": "COD6_C5"
            },
            {
                "addr": "DB971,CHAR119",
                "name": "COD6_C6"
            },
            {
                "addr": "DB971,CHAR120",
                "name": "COD3_C1"
            },
            {
                "addr": "DB971,CHAR121",
                "name": "COD3_C2"
            },
            {
                "addr": "DB971,CHAR122",
                "name": "COD3_C3"
            },
            {
                "addr": "DB971,CHAR123",
                "name": "COD3_C4"
            },
            {
                "addr": "DB971,CHAR124",
                "name": "COD2_C1"
            },
            {
                "addr": "DB971,CHAR125",
                "name": "COD2_C2"
            },
            {
                "addr": "DB971,BYTE126",
                "name": "ALTURA"
            },
            {
                "addr": "M242.1",
                "name": "TL.2"
            },
            {
                "addr": "M24.7",
                "name": "PRES.PALET.SCAN.MR24"
            },
            {
                "addr": "M121.5",
                "name": "AUTORIZ.SCAN.24"
            },
            {
                "addr": "DB205,WORD64",
                "name": "F.SEMAFOROS.DATOS_PREPARADOS.PALETA_EN_PES"
            },
            {
                "addr": "DB211,WORD30",
                "name": "F.EM.SGA.LLEGADA_PES.DATOS_PREPARADOS"
            },
            {
                "addr": "M501.1",
                "name": "LLEGADA_PES_ENVIADA"
            },
            {
                "addr": "DB100,BYTE70",
                "name": "INTERFACE_DATOS.LLEGADA_PES.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,BYTE50",
                "name": "INTERFACE_DATOS.STATUS_CARRO.ESTADO"
            },
            {
                "addr": "DB100,BYTE80",
                "name": "INTERFACE_DATOS.PERMISO_SALIDA_PES.DATOS_PREPARADOS"
            },
            {
                "addr": "DB100,WORD82",
                "name": "INTERFACE_DATOS.PERMISO_SALIDA_PES.MATRICULA_PALET"
            },
            {
                "addr": "DB210,WORD20",
                "name": "F.RE.SGA.PERMISO_SALIDA_PES.MATRICULA_PALETA"
            },
            {
                "addr": "DB100,BYTE84",
                "name": "INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO"
            },
            {
                "addr": "DB210,BYTE22",
                "name": "F.RE.SGA.PERMISO_SALIDA_PES.DESTINO"
            },
            {
                "addr": "DB970,X178.0",
                "name": "SGA_OK"
            },
            {
                "addr": "DB970,X178.1",
                "name": "DO_SGA"
            },
            {
                "addr": "DB970,X178.2",
                "name": "SGA_PROCESS"
            },
            {
                "addr": "DB970,X178.3",
                "name": "WaitForSndMR16"
            },
            {
                "addr": "DB970,X178.4",
                "name": "FinFeadback"
            },
            {
                "addr": "DB971,X84.4",
                "name": "DATO_A_SGA_MRE23_TR27"
            },
            {
                "addr": "I55.2",
                "name": "AUT_CARRO_BM693"
            },
            {
                "addr": "I55.1",
                "name": "MAN_CARRO_BM693"
            }
        ]
    },
    {
        "id": "d0328f3805f55057",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.111",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "PLC_1200",
        "vartable": [
            {
                "addr": "I11.0",
                "name": "CL_PIE"
            },
            {
                "addr": "DB169,X0.0",
                "name": "ACTIVAR-MECALUX"
            },
            {
                "addr": "DB169,X0.1",
                "name": "BIT_VIDA"
            },
            {
                "addr": "DB169,X2.0",
                "name": "FALLO_ESCANER"
            },
            {
                "addr": "DB169,X2.1",
                "name": "FALLO_GALIBO_TACO_D"
            },
            {
                "addr": "DB169,X2.2",
                "name": "FALLO_GALIBO_PALA_D"
            },
            {
                "addr": "DB169,X2.3",
                "name": "FALLO_GALIBO_TACO_C"
            },
            {
                "addr": "DB169,X2.4",
                "name": "FALLO_GALIBO_PALA_I"
            },
            {
                "addr": "DB169,X2.5",
                "name": "FALLO_GALIBO_TACO_I"
            },
            {
                "addr": "DB169,X2.6",
                "name": "FALLO_GALIBO_LATERAL_D"
            },
            {
                "addr": "DB169,X2.7",
                "name": "FALLO_GALIBO_LATERAL_I"
            },
            {
                "addr": "DB169,X3.0",
                "name": "FALLO_GALIBO_POSTERIOR"
            },
            {
                "addr": "DB169,X3.1",
                "name": "FALLO_GALIBO_FRONTAL"
            },
            {
                "addr": "DB169,X3.2",
                "name": "FALLO_GALIBO_PALLET_VACIO"
            },
            {
                "addr": "DB2000,X0.0",
                "name": "MEC_ACTIVADO"
            },
            {
                "addr": "DB2000,INT4",
                "name": "INDICATIVO_VIDA_1200"
            },
            {
                "addr": "DB2000,X0.1",
                "name": "PRODUCCION_MEC"
            },
            {
                "addr": "DB2010,X4.6",
                "name": "MESA24_RECHAZO"
            },
            {
                "addr": "DB2010,X2.2",
                "name": "RESET_MESA23"
            },
            {
                "addr": "DB2010,X4.5",
                "name": "MESA24_TO_SILO"
            },
            {
                "addr": "DB2010,X28.0",
                "name": "ReLANZAR_EVENTO_PIE1"
            }
        ]
    },
    {
        "id": "d99f0bd56be26201",
        "type": "s7comm",
        "ip": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "payload": [
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "80",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PERMISO_SALIDA_PES_DATOS_PREPARADOS"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "81",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Reserva81"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "W",
                "S7_Offset": "82",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PERMISO_SALIDA_PES_MATRICULA_PALET"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "84",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PERMISO_SALIDA_PES_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "85",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "reserva85"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "970",
                "S7_Datatype": "X",
                "S7_Offset": "178",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "SGA_OK_PES"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "20",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_TIPO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "22",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_PASILLO_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "23",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_X_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "24",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Y_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "25",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Z_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "27",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_PASILLO_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "28",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_X_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "29",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Y_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "30",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Z_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "I",
                "S7_Offset": "32",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_MATRICULA"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "40",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_FIN_ORDEN_ESTADO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "41",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_FIN_ORDEN_RESULTADO"
            }
        ]
    },
    {
        "id": "c6843d58d83dda13",
        "type": "s7comm",
        "ip": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "payload": [
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "80",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PERMISO_SALIDA_PES_DATOS_PREPARADOS"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "81",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Reserva81"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "W",
                "S7_Offset": "82",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PERMISO_SALIDA_PES_MATRICULA_PALET"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "84",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PERMISO_SALIDA_PES_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "85",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "reserva85"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "970",
                "S7_Datatype": "X",
                "S7_Offset": "178",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "SGA_OK_PES"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "20",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_TIPO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "22",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_PASILLO_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "23",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_X_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "24",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Y_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "25",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Z_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "27",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_PASILLO_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "28",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_X_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "29",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Y_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "30",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_Z_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "I",
                "S7_Offset": "32",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_ORDEN_MATRICULA"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "40",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_FIN_ORDEN_ESTADO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "101",
                "S7_Datatype": "B",
                "S7_Offset": "41",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV1_FIN_ORDEN_RESULTADO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "20",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_TIPO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "22",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_PASILLO_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "23",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_X_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "24",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_Y_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "25",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_Z_ORIGEN"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "27",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_PASILLO_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "28",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_X_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "29",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_Y_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "30",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_Z_DESTINO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "I",
                "S7_Offset": "32",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_ORDEN_MATRICULA"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "40",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_FIN_ORDEN_ESTADO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "102",
                "S7_Datatype": "B",
                "S7_Offset": "41",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "TLV2_FIN_ORDEN_RESULTADO"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "0",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP1"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "4",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP1"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "5",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP1"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "162",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "LLEGADA_PIS2_DATOS_PREPARADOS"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "8",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP2"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "12",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP2"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "13",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP2"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "16",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP3"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "20",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP3"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "21",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP3"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "24",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP4"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "28",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP4"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "29",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP4"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "32",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP5"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "36",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP5"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "37",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP5"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "40",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP6"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "44",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP6"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "45",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP6"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "48",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP7"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "52",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP7"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "53",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP7"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "56",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP8"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "60",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP8"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "61",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP8"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "64",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP9"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "68",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP9"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "69",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP9"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "72",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP10"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "76",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP10"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "77",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP10"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "80",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP11"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "84",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP11"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "85",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP11"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "88",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_datos_prep_PLC_PSP12"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "92",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Destino_salida_CT_PSP12"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "B",
                "S7_Offset": "93",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Flag_destino_prep_SGA_PSP12"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "182",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "LLEGADA_PEE_Flag_datos_prep_PLC"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "183",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "LLEGADA_PEE_Flag_datos_prep_SGA"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "10",
                "S7_Datatype": "I",
                "S7_Offset": "50",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_TR25"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "I",
                "S7_Offset": "164",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_PIS2"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "100",
                "S7_Datatype": "B",
                "S7_Offset": "156",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "DATOS_PREPARADOS_PEP12"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "2",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP1_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "10",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP2_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "18",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP3_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "26",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP4_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "34",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP5_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "42",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP6_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "50",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP7_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "58",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP8_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "66",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP9_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "74",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP10_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "82",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP11_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "90",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PSP12_Matricula_palet"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "2",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP1"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "10",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP2"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "18",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP3"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "26",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP4"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "34",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP5"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "42",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP6"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "50",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP7"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "58",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP8"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "66",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP9"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "74",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP10"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "82",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP11"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "117",
                "S7_Datatype": "W",
                "S7_Offset": "90",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "MAT_ENT_TRASLO_PSP12"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP1"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "1",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP2"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "2",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP3"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "3",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP4"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "4",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP5"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "5",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP6"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "6",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP7"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "2",
                "S7_BitOffset": "7",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP8"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "3",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP9"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "3",
                "S7_BitOffset": "1",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP10"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "3",
                "S7_BitOffset": "2",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP11"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "3",
                "S7_BitOffset": "3",
                "S7_Quantity": "1",
                "S7_Name": "PetAvancePEP12"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2000",
                "S7_Datatype": "X",
                "S7_Offset": "6",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Activar_Mecalux400"
            }
        ]
    },
    {
        "id": "13e7e4e191212b6f",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "PIE",
        "vartable": [
            {
                "addr": "DB10,WORD20",
                "name": "TRANS.DATOS.D_10"
            },
            {
                "addr": "DB10,WORD32",
                "name": "TRANS.DATOS.D_16"
            },
            {
                "addr": "DB10,BYTE33",
                "name": "DB10,BYTE33"
            },
            {
                "addr": "M121.4",
                "name": "AUTORIZ.SCAN.16"
            },
            {
                "addr": "DB205,WORD62",
                "name": "F.SEMAFOROS.DATOS_PREPARADOS.PALETA_EN_PIE"
            },
            {
                "addr": "DB211,WORD20",
                "name": "F.EM.SGA.LLEGADA_PIE.DATOS_PREPARADOS"
            },
            {
                "addr": "DB211,BYTE22",
                "name": "F.EM.SGA.LLEGADA_PIE.TIPO_PALETA"
            },
            {
                "addr": "DB100,BYTE60",
                "name": "INTERFACE_DATOS.LLEGADA_PIE.DATOS_PREPARADOS"
            },
            {
                "addr": "M501.0",
                "name": "LLEGADA_PIE_ENVIADA"
            },
            {
                "addr": "DB150,BYTE212",
                "name": "SCANNER_PIE.DATOS.LECTURA_OK_SGA"
            },
            {
                "addr": "DB100,BYTE61",
                "name": "INTERFACE_DATOS.LLEGADA_PIE.TIPO_PALETA"
            },
            {
                "addr": "DB100,WORD60",
                "name": "DB100,WORD60"
            },
            {
                "addr": "DB971,BYTE137",
                "name": "OCUPACION_PIE1"
            },
            {
                "addr": "DB971,BYTE138",
                "name": "ESTADO_PIE1"
            },
            {
                "addr": "DB971,CHAR100",
                "name": "COD13_C1"
            },
            {
                "addr": "DB971,CHAR101",
                "name": "COD13_C2"
            },
            {
                "addr": "DB971,CHAR102",
                "name": "COD13_C3"
            },
            {
                "addr": "DB971,CHAR103",
                "name": "COD13_C4"
            },
            {
                "addr": "DB971,CHAR104",
                "name": "COD13_C5"
            },
            {
                "addr": "DB971,CHAR105",
                "name": "COD13_C6"
            },
            {
                "addr": "DB971,CHAR106",
                "name": "COD13_C7"
            },
            {
                "addr": "DB971,CHAR107",
                "name": "COD13_C8"
            },
            {
                "addr": "DB971,CHAR108",
                "name": "COD13_C9"
            },
            {
                "addr": "DB971,CHAR109",
                "name": "COD13_C10"
            },
            {
                "addr": "DB971,CHAR110",
                "name": "COD13_C11"
            },
            {
                "addr": "DB971,CHAR111",
                "name": "COD13_C12"
            },
            {
                "addr": "DB971,CHAR112",
                "name": "COD13_C13"
            },
            {
                "addr": "DB971,CHAR113",
                "name": "COD13_CR"
            },
            {
                "addr": "DB971,CHAR114",
                "name": "COD6_C1"
            },
            {
                "addr": "DB971,CHAR115",
                "name": "COD6_C2"
            },
            {
                "addr": "DB971,CHAR116",
                "name": "COD6_C3"
            },
            {
                "addr": "DB971,CHAR117",
                "name": "COD6_C4"
            },
            {
                "addr": "DB971,CHAR118",
                "name": "COD6_C5"
            },
            {
                "addr": "DB971,CHAR119",
                "name": "COD6_C6"
            },
            {
                "addr": "DB971,CHAR120",
                "name": "COD3_C1"
            },
            {
                "addr": "DB971,CHAR121",
                "name": "COD3_C2"
            },
            {
                "addr": "DB971,CHAR122",
                "name": "COD3_C3"
            },
            {
                "addr": "DB971,CHAR123",
                "name": "COD3_C4"
            },
            {
                "addr": "DB971,CHAR124",
                "name": "COD2_C1"
            },
            {
                "addr": "DB971,CHAR125",
                "name": "COD2_C2"
            },
            {
                "addr": "DB971,BYTE126",
                "name": "ALTURA"
            },
            {
                "addr": "DB10,INT48",
                "name": "MAT_PES"
            },
            {
                "addr": "DB10,INT50",
                "name": "MAT_TR25"
            },
            {
                "addr": "DB971,CHAR128",
                "name": "COD_ULTIMO_DIG"
            }
        ]
    },
    {
        "id": "7592a6fd0d123d02",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "TrackMesas",
        "vartable": [
            {
                "addr": "DB10,WORD72",
                "name": "TC37"
            },
            {
                "addr": "DB10,WORD74",
                "name": "MesaEntrada_1_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD76",
                "name": "MesaSalida_1_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD78",
                "name": "MesaEntrada_2_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD80",
                "name": "MesaSalida_2_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD82",
                "name": "MesaEntrada_3_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD84",
                "name": "MesaSalida_3_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD86",
                "name": "MesaEntrada_4_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD88",
                "name": "MesaSalida_4_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD90",
                "name": "MesaEntrada_5_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD92",
                "name": "MesaSalida_5_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD94",
                "name": "MesaEntrada_6_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD96",
                "name": "MesaSalida_6_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD98",
                "name": "MesaEntrada_7_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD100",
                "name": "MesaSalida_7_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD102",
                "name": "MesaEntrada_8_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD104",
                "name": "MesaSalida_8_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD106",
                "name": "MesaEntrada_9_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD108",
                "name": "MesaSalida_9_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD110",
                "name": "MesaEntrada_10_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD112",
                "name": "MesaSalida_10_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD114",
                "name": "MesaEntrada_11_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD116",
                "name": "MesaSalida_11_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD118",
                "name": "MesaEntrada_12_Posición_1_Recogida_Traslo"
            },
            {
                "addr": "DB10,WORD120",
                "name": "MesaSalida_12_Posición_2_Entrega_Traslo"
            },
            {
                "addr": "DB10,WORD340",
                "name": "MesaEntrada_1_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD344",
                "name": "MesaSalida_1_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD348",
                "name": "MesaEntrada_2_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD352",
                "name": "MesaSalida_2_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD356",
                "name": "MesaEntrada_3_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD360",
                "name": "MesaSalida_3_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD364",
                "name": "MesaEntrada_4_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD368",
                "name": "MesaSalida_4_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD372",
                "name": "MesaEntrada_5_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD376",
                "name": "MesaSalida_5_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD380",
                "name": "MesaEntrada_6_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD384",
                "name": "MesaSalida_6_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD388",
                "name": "MesaEntrada_7_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD392",
                "name": "MesaSalida_7_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD396",
                "name": "MesaEntrada_8_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD400",
                "name": "MesaSalida_8_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD404",
                "name": "MesaEntrada_9_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD408",
                "name": "MesaSalida_9_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD412",
                "name": "MesaEntrada_10_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD416",
                "name": "MesaSalida_10_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD420",
                "name": "MesaEntrada_11_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD424",
                "name": "MesaSalida_11_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD428",
                "name": "MesaEntrada_12_Posición_2_Entrega_Carro"
            },
            {
                "addr": "DB10,WORD432",
                "name": "MesaSalida_12_Posición_1_Recogida_Carro"
            },
            {
                "addr": "DB10,WORD436",
                "name": "CTF36"
            },
            {
                "addr": "I39.7",
                "name": "FOT_PRES_TC37"
            },
            {
                "addr": "I40.0",
                "name": "F_ACUM_LLE_TC37"
            },
            {
                "addr": "I60.0",
                "name": "FOT_PRES_TC38"
            },
            {
                "addr": "I40.3",
                "name": "F_FINAL_TC38"
            },
            {
                "addr": "I40.4",
                "name": "FOT_PRES_TC39"
            },
            {
                "addr": "I40.5",
                "name": "F_ACUM_LLE_TC39"
            },
            {
                "addr": "I60.1",
                "name": "FOT_PRES_TC40"
            },
            {
                "addr": "I41.0",
                "name": "F_FINAL_TC40"
            },
            {
                "addr": "I41.1",
                "name": "FOT_PRES_TC41"
            },
            {
                "addr": "I41.2",
                "name": "F_ACUM_LLE_TC41"
            },
            {
                "addr": "I60.2",
                "name": "FOT_PRES_TC42"
            },
            {
                "addr": "I41.5",
                "name": "F_FINAL_TC42"
            },
            {
                "addr": "I41.6",
                "name": "FOT_PRES_TC43"
            },
            {
                "addr": "I41.7",
                "name": "F_ACUM_LLE_TC43"
            },
            {
                "addr": "I60.3",
                "name": "FOT_PRES_TC44"
            },
            {
                "addr": "I42.2",
                "name": "F_FINAL_TC44"
            },
            {
                "addr": "I42.3",
                "name": "FOT_PRES_TC45"
            },
            {
                "addr": "I42.4",
                "name": "F_ACUM_LLE_TC45"
            },
            {
                "addr": "I60.4",
                "name": "FOT_PRES_TC46"
            },
            {
                "addr": "I42.7",
                "name": "F_FINAL_TC46"
            },
            {
                "addr": "I43.0",
                "name": "FOT_PRES_TC47"
            },
            {
                "addr": "I43.1",
                "name": "F_ACUM_LLE_TC47"
            },
            {
                "addr": "I60.5",
                "name": "FOT_PRES_TC48"
            },
            {
                "addr": "I43.4",
                "name": "F_FINAL_TC48"
            },
            {
                "addr": "I43.5",
                "name": "FOT_PRES_TC49"
            },
            {
                "addr": "I43.6",
                "name": "F_ACUM_LLE_TC49"
            },
            {
                "addr": "I60.6",
                "name": "FOT_PRES_TC50"
            },
            {
                "addr": "I44.1",
                "name": "F_FINAL_TC50"
            },
            {
                "addr": "I44.2",
                "name": "FOT_PRES_TC51"
            },
            {
                "addr": "I44.3",
                "name": "F_ACUM_LLE_TC51"
            },
            {
                "addr": "I60.7",
                "name": "FOT_PRES_TC52"
            },
            {
                "addr": "I44.6",
                "name": "F_FINAL_TC52"
            },
            {
                "addr": "I44.7",
                "name": "FOT_PRES_TC53"
            },
            {
                "addr": "I45.0",
                "name": "F_ACUM_LLE_TC53"
            },
            {
                "addr": "I61.0",
                "name": "FOT_PRES_TC54"
            },
            {
                "addr": "I45.3",
                "name": "F_FINAL_TC54"
            },
            {
                "addr": "I45.4",
                "name": "FOT_PRES_TC55"
            },
            {
                "addr": "I45.5",
                "name": "F_ACUM_LLE_TC55"
            },
            {
                "addr": "I61.1",
                "name": "FOT_PRES_TC56"
            },
            {
                "addr": "I46.0",
                "name": "F_FINAL_TC56"
            },
            {
                "addr": "I46.1",
                "name": "FOT_PRES_TC57"
            },
            {
                "addr": "I46.2",
                "name": "F_ACUM_LLE_TC57"
            },
            {
                "addr": "I61.2",
                "name": "FOT_PRES_TC58"
            },
            {
                "addr": "I46.5",
                "name": "F_FINAL_TC58"
            },
            {
                "addr": "I46.6",
                "name": "FOT_PRES_TC59"
            },
            {
                "addr": "I46.7",
                "name": "F_ACUM_LLE_TC59"
            },
            {
                "addr": "I61.3",
                "name": "FOT_PRES_TC60"
            },
            {
                "addr": "I47.2",
                "name": "F_FINAL_TC60"
            }
        ]
    },
    {
        "id": "2f783281dc55418a",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "1000",
        "timeout": "5000",
        "name": "TLV1",
        "vartable": [
            {
                "addr": "DB101,BYTE0",
                "name": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO"
            },
            {
                "addr": "DB101,BYTE1",
                "name": "INTERFACE_TLV1.STATUS_TLV1.OCUPACION"
            },
            {
                "addr": "DB101,BYTE2",
                "name": "INTERFACE_TLV1.STATUS_TLV1.AVERIA"
            },
            {
                "addr": "DB101,WORD10",
                "name": "INTERFACE_TLV1.STATUS_TLV1.COORD_X_ACTUAL"
            },
            {
                "addr": "DB101,WORD12",
                "name": "INTERFACE_TLV1.STATUS_TLV1.COORD_Y_ACTUAL"
            },
            {
                "addr": "DB101,WORD14",
                "name": "INTERFACE_TLV1.STATUS_TLV1.COORD_Z_ACTUAL"
            },
            {
                "addr": "DB101,WORD16",
                "name": "INTERFACE_TLV1.STATUS_TLV1.MATRICULA_ACTUAL"
            },
            {
                "addr": "DB101,BYTE18",
                "name": "INTERFACE_TLV1.STATUS_TLV1.PASILLO_ACTUAL"
            },
            {
                "addr": "DB101,BYTE20",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.TIPO"
            },
            {
                "addr": "DB101,BYTE22",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.PASILLO_ORIGEN"
            },
            {
                "addr": "DB101,BYTE23",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.COORD_X_ORIGEN"
            },
            {
                "addr": "DB101,BYTE24",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.COORD_Y_ORIGEN"
            },
            {
                "addr": "DB101,BYTE25",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.COORD_Z_ORIGEN"
            },
            {
                "addr": "DB101,BYTE27",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.PASILLO_DESTINO"
            },
            {
                "addr": "DB101,BYTE28",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.COORD_X_DESTINO"
            },
            {
                "addr": "DB101,BYTE29",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.COORD_Y_DESTINO"
            },
            {
                "addr": "DB101,BYTE30",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.COORD_Z_DESTINO"
            },
            {
                "addr": "DB101,WORD32",
                "name": "INTERFACE_TLV1.ORDEN_TLV1.MATRICULA"
            },
            {
                "addr": "DB101,BYTE40",
                "name": "INTERFACE_TLV1.FIN_ORDEN_TLV1.ESTADO"
            },
            {
                "addr": "DB101,BYTE41",
                "name": "INTERFACE_TLV1.FIN_ORDEN_TLV1.RESULTADO"
            }
        ]
    },
    {
        "id": "a8633ef8f20683fc",
        "type": "s7comm",
        "ip": "10.21.178.111",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "payload": [
            {
                "S7_Type": "DB",
                "S7_DBnum": "169",
                "S7_Datatype": "X",
                "S7_Offset": "0",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "Activar_Mecalux"
            },
            {
                "S7_Type": "DB",
                "S7_DBnum": "2010",
                "S7_Datatype": "X",
                "S7_Offset": "8",
                "S7_BitOffset": "0",
                "S7_Quantity": "1",
                "S7_Name": "F_BACK_PALLET_IN_PIE"
            }
        ]
    },
    {
        "id": "5afd666420955419",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "26b08a2e8ae9afab",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "3b68bd34ade4e9c2",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "126460432b68ba3d",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": 1000,
        "timeout": "5000",
        "name": "TLV2",
        "vartable": [
            {
                "addr": "DB102,BYTE0",
                "name": "INTERFACE_TLV2.STATUS_TLV2.AUTOMATICO"
            },
            {
                "addr": "DB102,BYTE1",
                "name": "INTERFACE_TLV2.STATUS_TLV2.OCUPACION"
            },
            {
                "addr": "DB102,BYTE2",
                "name": "INTERFACE_TLV2.STATUS_TLV2.AVERIA"
            },
            {
                "addr": "DB102,WORD10",
                "name": "INTERFACE_TLV2.STATUS_TLV2.COORD_X_ACTUAL"
            },
            {
                "addr": "DB102,WORD12",
                "name": "INTERFACE_TLV2.STATUS_TLV2.COORD_Y_ACTUAL"
            },
            {
                "addr": "DB102,WORD14",
                "name": "INTERFACE_TLV2.STATUS_TLV2.COORD_Z_ACTUAL"
            },
            {
                "addr": "DB102,WORD16",
                "name": "INTERFACE_TLV2.STATUS_TLV2.MATRICULA_ACTUAL"
            },
            {
                "addr": "DB102,BYTE18",
                "name": "INTERFACE_TLV2.STATUS_TLV2.PASILLO_ACTUAL"
            },
            {
                "addr": "DB102,BYTE20",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.TIPO"
            },
            {
                "addr": "DB102,BYTE22",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.PASILLO_ORIGEN"
            },
            {
                "addr": "DB102,BYTE23",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.COORD_X_ORIGEN"
            },
            {
                "addr": "DB102,BYTE24",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.COORD_Y_ORIGEN"
            },
            {
                "addr": "DB102,BYTE25",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.COORD_Z_ORIGEN"
            },
            {
                "addr": "DB102,BYTE27",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.PASILLO_DESTINO"
            },
            {
                "addr": "DB102,BYTE28",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.COORD_X_DESTINO"
            },
            {
                "addr": "DB102,BYTE29",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.COORD_Y_DESTINO"
            },
            {
                "addr": "DB102,BYTE30",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.COORD_Z_DESTINO"
            },
            {
                "addr": "DB102,WORD32",
                "name": "INTERFACE_TLV2.ORDEN_TLV2.MATRICULA"
            },
            {
                "addr": "DB102,BYTE40",
                "name": "INTERFACE_TLV2.FIN_ORDEN_TLV2.ESTADO"
            },
            {
                "addr": "DB102,BYTE41",
                "name": "INTERFACE_TLV2.FIN_ORDEN_TLV2.RESULTADO"
            }
        ]
    },
    {
        "id": "b8e70c21ca6844bf",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": 1000,
        "timeout": "5000",
        "name": "db111_alarmas",
        "vartable": [
            {
                "addr": "DB111,X40.0",
                "name": "EMERGENCIA_GENERAL_TLV1"
            },
            {
                "addr": "DB111,X40.1",
                "name": "PUERTA_CABINA_ABIERTA_TLV1"
            },
            {
                "addr": "DB111,X40.2",
                "name": "EXCESO_RECORRIDO_ADELANTE_TLV1"
            },
            {
                "addr": "DB111,X40.3",
                "name": "EXCESO_RECORRIDO_ATRAS_TLV1"
            },
            {
                "addr": "DB111,X40.4",
                "name": "EXCESO_RECORRIDO_SUBIDA_TLV1"
            },
            {
                "addr": "DB111,X40.5",
                "name": "EXCESO_RECORRIDO_BAJADA_TLV1"
            },
            {
                "addr": "DB111,X40.6",
                "name": "PARACAIDAS_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X40.7",
                "name": "CABLES_FLOJOS_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X41.0",
                "name": "PROTECCION_CONVERTIDOR_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X41.1",
                "name": "PROTECCION_CONVERTIDOR_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X41.2",
                "name": "PROTECCION_CONVERTIDOR_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X41.3",
                "name": "PROTECCION_MOTOR_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X41.4",
                "name": "PROTECCION_MOTOR_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X41.5",
                "name": "PROTECCION_MOTOR_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X41.6",
                "name": "PROTECCION_CONVERTIDOR_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X42.0",
                "name": "DEFECTO_CONVERTIDOR_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X42.1",
                "name": "DEFECTO_CONVERTIDOR_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X42.2",
                "name": "EXCESO_VELOCIDAD_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X42.3",
                "name": "EXCESO_VELOCIDAD_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X42.4",
                "name": "DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X42.5",
                "name": "DEFECTO_GIRO_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X42.6",
                "name": "DEFECTO_GIRO_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X42.7",
                "name": "DEFECTO_GIRO_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X43.0",
                "name": "TIEMPO_CENTRAJE_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X43.1",
                "name": "TIEMPO_CENTRAJE_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X43.2",
                "name": "TIEMPO_CICLO_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X43.3",
                "name": "TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV1"
            },
            {
                "addr": "DB111,X43.4",
                "name": "DEFECTO_DETECTORES_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X43.5",
                "name": "DEFECTO_DETECTORES_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X43.6",
                "name": "DEFECTO_DETECTORES_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X43.7",
                "name": "DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV1"
            },
            {
                "addr": "DB111,X44.0",
                "name": "DEFECTO_IMPUL_ENCODER_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X44.1",
                "name": "DEFECTO_IMPUL_ENCODER_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X44.2",
                "name": "DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV1"
            },
            {
                "addr": "DB111,X44.3",
                "name": "CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV1"
            },
            {
                "addr": "DB111,X44.4",
                "name": "CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV1"
            },
            {
                "addr": "DB111,X44.5",
                "name": "DEFECTO_COMUNICACION_RED_NEC_L1_TLV1"
            },
            {
                "addr": "DB111,X44.6",
                "name": "DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV1"
            },
            {
                "addr": "DB111,X44.7",
                "name": "DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV1"
            },
            {
                "addr": "DB111,X45.0",
                "name": "DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV1"
            },
            {
                "addr": "DB111,X45.1",
                "name": "DEFECTO_DE_GALIBO_TLV1"
            },
            {
                "addr": "DB111,X45.2",
                "name": "DEFECTO_PRESENCIA_DE_PALETA_TLV1"
            },
            {
                "addr": "DB111,X45.3",
                "name": "DEF_FOTOCELULAS_PALPADORAS_TLV1"
            },
            {
                "addr": "DB111,X45.4",
                "name": "DEF_FOTOC_PUENTE_ENCARADO_TLV1"
            },
            {
                "addr": "DB111,X45.5",
                "name": "PASILLO_FUERA_DE_SERVICIO_TLV1"
            },
            {
                "addr": "DB111,X45.6",
                "name": "DEF_NR_DE_PASILLO_TLV1"
            },
            {
                "addr": "DB111,X45.7",
                "name": "DEFECTO_TENSION_24VCC_TLV1"
            },
            {
                "addr": "DB111,X46.0",
                "name": "DEFECTO_TENSION_FRENOS_(220_VCA)_TLV1"
            },
            {
                "addr": "DB111,X46.1",
                "name": "DEF_DESTINO_INCORRECTO_TLV1"
            },
            {
                "addr": "DB111,X46.2",
                "name": "PETICION_AYUDA_A_MANTENIMIENTO_TLV1"
            },
            {
                "addr": "DB111,X47.0",
                "name": "DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV1"
            },
            {
                "addr": "DB111,X47.1",
                "name": "DEFECTO_NUMERO_DE_ESCLAVO_TLV1"
            },
            {
                "addr": "DB111,X47.2",
                "name": "ERROR_DEPOSITO_TLV1"
            },
            {
                "addr": "DB111,X47.3",
                "name": "ERROR_EXTRACCION_TLV1"
            },
            {
                "addr": "DB111,X50.0",
                "name": "EMERGENCIA_GENERAL_TLV2"
            },
            {
                "addr": "DB111,X50.1",
                "name": "PUERTA_CABINA_ABIERTA_TLV2"
            },
            {
                "addr": "DB111,X50.2",
                "name": "EXCESO_RECORRIDO_ADELANTE_TLV2"
            },
            {
                "addr": "DB111,X50.3",
                "name": "EXCESO_RECORRIDO_ATRAS_TLV2"
            },
            {
                "addr": "DB111,X50.4",
                "name": "EXCESO_RECORRIDO_SUBIDA_TLV2"
            },
            {
                "addr": "DB111,X50.5",
                "name": "EXCESO_RECORRIDO_BAJADA_TLV2"
            },
            {
                "addr": "DB111,X50.6",
                "name": "PARACAIDAS_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X50.7",
                "name": "CABLES_FLOJOS_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X51.0",
                "name": "PROTECCION_CONVERTIDOR_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X51.1",
                "name": "PROTECCION_CONVERTIDOR_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X51.2",
                "name": "PROTECCION_CONVERTIDOR_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X51.3",
                "name": "PROTECCION_MOTOR_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X51.4",
                "name": "PROTECCION_MOTOR_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X51.5",
                "name": "PROTECCION_MOTOR_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X51.6",
                "name": "PROTECCION_CONVERTIDOR_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X52.0",
                "name": "DEFECTO_CONVERTIDOR_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X52.1",
                "name": "DEFECTO_CONVERTIDOR_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X52.2",
                "name": "EXCESO_VELOCIDAD_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X52.3",
                "name": "EXCESO_VELOCIDAD_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X52.4",
                "name": "DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X52.5",
                "name": "DEFECTO_GIRO_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X52.6",
                "name": "DEFECTO_GIRO_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X52.7",
                "name": "DEFECTO_GIRO_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X53.0",
                "name": "TIEMPO_CENTRAJE_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X53.1",
                "name": "TIEMPO_CENTRAJE_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X53.2",
                "name": "TIEMPO_CICLO_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X53.3",
                "name": "TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV2"
            },
            {
                "addr": "DB111,X53.4",
                "name": "DEFECTO_DETECTORES_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X53.5",
                "name": "DEFECTO_DETECTORES_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X53.6",
                "name": "DEFECTO_DETECTORES_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X53.7",
                "name": "DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV2"
            },
            {
                "addr": "DB111,X54.0",
                "name": "DEFECTO_IMPUL_ENCODER_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X54.1",
                "name": "DEFECTO_IMPUL_ENCODER_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X54.2",
                "name": "DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV2"
            },
            {
                "addr": "DB111,X54.3",
                "name": "CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV2"
            },
            {
                "addr": "DB111,X54.4",
                "name": "CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV2"
            },
            {
                "addr": "DB111,X54.5",
                "name": "DEFECTO_COMUNICACION_RED_NEC_L1_TLV2"
            },
            {
                "addr": "DB111,X54.6",
                "name": "DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV2"
            },
            {
                "addr": "DB111,X54.7",
                "name": "DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV2"
            },
            {
                "addr": "DB111,X55.0",
                "name": "DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV2"
            },
            {
                "addr": "DB111,X55.1",
                "name": "DEFECTO_DE_GALIBO_TLV2"
            },
            {
                "addr": "DB111,X55.2",
                "name": "DEFECTO_PRESENCIA_DE_PALETA_TLV2"
            },
            {
                "addr": "DB111,X55.3",
                "name": "DEF_FOTOCELULAS_PALPADORAS_TLV2"
            },
            {
                "addr": "DB111,X55.4",
                "name": "DEF_FOTOC_PUENTE_ENCARADO_TLV2"
            },
            {
                "addr": "DB111,X55.5",
                "name": "PASILLO_FUERA_DE_SERVICIO_TLV2"
            },
            {
                "addr": "DB111,X55.6",
                "name": "DEF_NR_DE_PASILLO_TLV2"
            },
            {
                "addr": "DB111,X55.7",
                "name": "DEFECTO_TENSION_24VCC_TLV2"
            },
            {
                "addr": "DB111,X56.0",
                "name": "DEFECTO_TENSION_FRENOS_(220_VCA)_TLV2"
            },
            {
                "addr": "DB111,X56.1",
                "name": "DEF_DESTINO_INCORRECTO_TLV2"
            },
            {
                "addr": "DB111,X56.2",
                "name": "PETICION_AYUDA_A_MANTENIMIENTO_TLV2"
            },
            {
                "addr": "DB111,X57.0",
                "name": "DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV2"
            },
            {
                "addr": "DB111,X57.1",
                "name": "DEFECTO_NUMERO_DE_ESCLAVO_TLV2"
            },
            {
                "addr": "DB111,X57.2",
                "name": "ERROR_DEPOSITO_TLV2"
            },
            {
                "addr": "DB111,X57.3",
                "name": "ERROR_EXTRACCION_TLV2"
            },
            {
                "addr": "DB111,X60.0",
                "name": "Defecto_Error_de_comunicacion_ct"
            },
            {
                "addr": "DB111,X60.1",
                "name": "Defecto_Emergencia_armario_carro_ct"
            },
            {
                "addr": "DB111,X60.2",
                "name": "Defecto_Anomalia_variador_ct"
            },
            {
                "addr": "DB111,X60.3",
                "name": "Defecto_Anomalia_motor_traslacion_ct"
            },
            {
                "addr": "DB111,X60.4",
                "name": "Defecto_Anomalia_motor_entrada_ct"
            },
            {
                "addr": "DB111,X60.5",
                "name": "Defecto_Anomalia_motor_salida_ct"
            },
            {
                "addr": "DB111,X60.6",
                "name": "Defecto__Final_de_carrera_pasillo_1_ct"
            },
            {
                "addr": "DB111,X60.7",
                "name": "Defecto__Final_de_carrera_pasillo_12_ct"
            },
            {
                "addr": "DB111,X61.0",
                "name": "Defecto_Paleta_descentrada_en_transfer_de_entrada_ct"
            },
            {
                "addr": "DB111,X61.1",
                "name": "Defecto__Paleta_descentrada_en_transfer_de_salida_ct"
            },
            {
                "addr": "DB111,X62.0",
                "name": "Defecto__Limite_inferior_lectura_encoder_ct"
            },
            {
                "addr": "DB111,X62.1",
                "name": "Defecto__Limite_superior_lectura_encoder_ct"
            },
            {
                "addr": "DB111,X62.2",
                "name": "Defecto__Tiempo_de_transferencia_de_mesa_de_salida_a_carro_ct"
            },
            {
                "addr": "DB111,X62.3",
                "name": "Defecto__Telemetro_ct"
            },
            {
                "addr": "DB111,X64.0",
                "name": "Defecto_Tiempo_de_entrada_ct"
            },
            {
                "addr": "DB111,X64.1",
                "name": "Defecto_Tiempo_de_salida_ct"
            },
            {
                "addr": "DB111,X64.2",
                "name": "Defecto_Paleta_en_entrada_sin_codigo_ct"
            },
            {
                "addr": "DB111,X64.3",
                "name": "Defecto_Paleta_en_salida_sin_codigo_ct"
            }
        ]
    },
    {
        "id": "42c2cf5947e34f32",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": 1000,
        "timeout": "5000",
        "name": "alarmasPT",
        "vartable": [
            {
                "addr": "M110.0",
                "name": "EMERGENCIA_PUENTE_DE_TRANSBORDO"
            },
            {
                "addr": "M110.1",
                "name": "EXCESO_DE_RECORRIDO_ADELANTE_PUENTE"
            },
            {
                "addr": "M110.2",
                "name": "EXCESO_DE_RECORRIDO_ATRAS_PUENTE"
            },
            {
                "addr": "M110.3",
                "name": "PROTECCION_VARIADOR_TRASLACION_PUENTE"
            },
            {
                "addr": "M110.4",
                "name": "PROTECCION_MOTOR_TRASLACION_PUENTE"
            },
            {
                "addr": "M110.5",
                "name": "PROTECCION_MOTOR_ENCLAVAMIENTO_PUENTE"
            },
            {
                "addr": "M110.6",
                "name": "PROTECCION_FRENOS"
            },
            {
                "addr": "M110.7",
                "name": "RESERVA"
            },
            {
                "addr": "M111.0",
                "name": "DEFECTO_VARIADOR_TRASLACION_PUENTE"
            },
            {
                "addr": "M111.1",
                "name": "EXCESO_DE_VELOCIDAD_PUENTE"
            },
            {
                "addr": "M111.2",
                "name": "DEFECTO_FOTOCELULA_GALIBO_PUENTE"
            },
            {
                "addr": "M111.3",
                "name": "TIEMPO_CICLO_TRASLACION_PUENTE"
            },
            {
                "addr": "M111.4",
                "name": "TIEMPO_CICLO_ENCLAVAMIENTO_PUENTE"
            },
            {
                "addr": "M111.5",
                "name": "DEFECTO_DETECTORES_TRASLACION_PUENTE"
            },
            {
                "addr": "M111.6",
                "name": "DEFECTO_DETECTORES_ENCLAVAMIENTO_PUENTE"
            },
            {
                "addr": "M111.7",
                "name": "RESERVA"
            }
        ]
    },
    {
        "id": "1696f0b4e417f1ed",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.21.178.100",
        "port": "102",
        "rack": "0",
        "slot": "3",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": 1000,
        "timeout": "5000",
        "name": "alarmasELV1",
        "vartable": [
            {
                "addr": "M270.0",
                "name": "TC1:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M270.1",
                "name": "TC1:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M270.2",
                "name": "TC1:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M270.3",
                "name": "TC1:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M270.4",
                "name": "TC1:_Defecto_Presencia_inesperada"
            },
            {
                "addr": "M270.5",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M270.6",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M270.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M271.0",
                "name": "EL1_1:_Defecto_Tiempo_de_Transferencia_entrada"
            },
            {
                "addr": "M271.1",
                "name": "EL1_1:_Defecto_Tiempo_de_Maniobra"
            },
            {
                "addr": "M271.2",
                "name": "EL1_1:_Defecto_de_Presencia_Inesperada"
            },
            {
                "addr": "M271.3",
                "name": "EL1_1:_Defecto_de_Falta_de_Presencia"
            },
            {
                "addr": "M271.4",
                "name": "EL1_1:_Defecto_Simultaneidad_de_Detectores"
            },
            {
                "addr": "M271.5",
                "name": "EL1_1:_Defecto_de_Guardamotor/Variador_transportador_cadenas"
            },
            {
                "addr": "M271.6",
                "name": "EL1_1:_Defecto_Tiempo_de_Transferencia_salida"
            },
            {
                "addr": "M271.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M272.0",
                "name": "EL1_2:_Defecto_sin_referencia_de_posicion"
            },
            {
                "addr": "M272.1",
                "name": "EL1_2:_Defecto_Tiempo_de_Maniobra"
            },
            {
                "addr": "M272.2",
                "name": "EL1_2:_Defecto_de_Variador"
            },
            {
                "addr": "M272.3",
                "name": "EL1_2:_Defecto_de_Falta_de_Presencia"
            },
            {
                "addr": "M272.4",
                "name": "EL1_2:_Defecto_Simultaneidad_de_Detectores"
            },
            {
                "addr": "M272.5",
                "name": "EL1_2:_Defecto_de_Guardamotor_elevacion"
            },
            {
                "addr": "M272.6",
                "name": "EL1_2:_Defecto_busqueda_de_posicion"
            },
            {
                "addr": "M272.7",
                "name": "EL1_2:_Defecto_puerta_abierta_arriba"
            },
            {
                "addr": "M273.0",
                "name": "EL1_3:_Defecto_puerta_abierta_abajo"
            },
            {
                "addr": "M273.1",
                "name": "EL1_3:_Defecto_Tiempo_de_Maniobra"
            },
            {
                "addr": "M273.2",
                "name": "EL1_3:_Defecto_de_Presencia_Inesperada"
            },
            {
                "addr": "M273.3",
                "name": "EL1_3:_Defecto_de_Falta_de_Presencia"
            },
            {
                "addr": "M273.4",
                "name": "EL1_3:_Defecto_Simultaneidad_de_Detectores"
            },
            {
                "addr": "M273.5",
                "name": "EL1_3:_Defecto_exceso_de_recorrido_arriba"
            },
            {
                "addr": "M273.6",
                "name": "EL1_3:_Defecto_exceso_de_recorrido_abajo"
            },
            {
                "addr": "M273.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M274.0",
                "name": "TC2:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M274.1",
                "name": "TC2:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M274.2",
                "name": "TC2:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M274.3",
                "name": "TC2:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M274.4",
                "name": "TC2:_Defecto_Presencia_inesperada"
            },
            {
                "addr": "M274.5",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M274.6",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M274.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M275.0",
                "name": "TC3:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M275.1",
                "name": "TC3:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M275.2",
                "name": "TC3:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M275.3",
                "name": "TC3:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M275.4",
                "name": "TC3:_Defecto_Presencia_inesperada"
            },
            {
                "addr": "M275.5",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M275.6",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M275.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M276.0",
                "name": "TC4:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M276.1",
                "name": "TC4:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M276.2",
                "name": "TC4:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M276.3",
                "name": "TC4:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M276.4",
                "name": "TC4:_Defecto_Presencia_inesperada"
            },
            {
                "addr": "M276.5",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M276.6",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M276.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M277.0",
                "name": "TEC1:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M277.1",
                "name": "TEC1:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M277.2",
                "name": "TEC1:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M277.3",
                "name": "TEC1:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M277.4",
                "name": "TEC1:_Defecto_Presencia_inesperada"
            },
            {
                "addr": "M277.5",
                "name": "TEC1:_Defecto_Simultaneidad_de_Detectores_elevacion"
            },
            {
                "addr": "M277.6",
                "name": "TEC1:_Defecto_Tiempo_de_Maniobra_elevacion"
            },
            {
                "addr": "M277.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M278.0",
                "name": "TEC2:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M278.1",
                "name": "TEC2:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M278.2",
                "name": "TEC2:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M278.3",
                "name": "TEC2:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M278.4",
                "name": "TEC2:_Defecto_Presencia_inesperada"
            },
            {
                "addr": "M278.5",
                "name": "TEC2:_Defecto_Simultaneidad_de_Detectores_elevacion"
            },
            {
                "addr": "M278.6",
                "name": "TEC2:_Defecto_Tiempo_de_Maniobra_elevacion"
            },
            {
                "addr": "M278.7",
                "name": "Reserva_Defecto"
            },
            {
                "addr": "M279.0",
                "name": "EL1-ENCL:_Defecto_de_Guardamotor/Variador"
            },
            {
                "addr": "M279.1",
                "name": "EL1-ENCL:_Defecto_Tiempo_de_Transferencia_Entrada"
            },
            {
                "addr": "M279.2",
                "name": "EL1-ENCL:_Defecto_Tiempo_de_Transferencia_sALIDA"
            },
            {
                "addr": "M279.3",
                "name": "EL1-ENCL:_Defecto_Falta_de_presencia"
            },
            {
                "addr": "M279.4",
                "name": "EL1-ENCL:_Defecto_Sin_posici�n_de_referencia"
            },
            {
                "addr": "M279.5",
                "name": "EL1-ENCL:_Defecto_Simultaneidad_de_Detectores"
            },
            {
                "addr": "M279.6",
                "name": "EL1-ENCL:_Defecto_Tiempo_de_Maniobra"
            },
            {
                "addr": "E43.3",
                "name": "TRANSFER_CADENA_ELEVADOR_OCUPADO"
            }
        ]
    },
    {
        "id": "21ebc4dc31d2a5bc",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "300",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "04567bd103d350f8",
                "07da3958d1c64faa",
                "ad562afee7db6e82"
            ]
        ]
    },
    {
        "id": "04567bd103d350f8",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "8da50c5b7acc508c"
            ]
        ]
    },
    {
        "id": "daf2bda870f8ad97",
        "type": "inject",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 970,
        "y": 260,
        "wires": [
            [
                "21ebc4dc31d2a5bc"
            ]
        ]
    },
    {
        "id": "8da50c5b7acc508c",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "str",
        "op2type": "str",
        "duration": "300",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "bd2e1e0a1f32f876"
            ]
        ]
    },
    {
        "id": "bd2e1e0a1f32f876",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 380,
        "wires": [
            [
                "21ebc4dc31d2a5bc"
            ]
        ]
    },
    {
        "id": "07da3958d1c64faa",
        "type": "debug",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "Clock 0.3 Hz",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "51db95d1e0b9a4c4",
        "type": "comment",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "Clock 0.3 Hz",
        "info": "",
        "x": 950,
        "y": 220,
        "wires": []
    },
    {
        "id": "ad562afee7db6e82",
        "type": "link out",
        "z": "b4cd349f4176f6d7",
        "g": "089ccca9a0181c12",
        "name": "Clock 0.3 Hz",
        "mode": "link",
        "links": [],
        "x": 1235,
        "y": 280,
        "wires": []
    },
    {
        "id": "6cc9154844a53ef9",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 600,
        "wires": [
            [
                "9c0eba4c00fdda3d",
                "a5e83f58ec10409b",
                "60ec0bd09d74340a"
            ]
        ]
    },
    {
        "id": "9c0eba4c00fdda3d",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 600,
        "wires": [
            [
                "a2dffa1bde8feca2"
            ]
        ]
    },
    {
        "id": "f14ee4c345ad7728",
        "type": "inject",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 540,
        "wires": [
            [
                "6cc9154844a53ef9"
            ]
        ]
    },
    {
        "id": "a2dffa1bde8feca2",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "str",
        "op2type": "str",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 660,
        "wires": [
            [
                "54606491f50eec65"
            ]
        ]
    },
    {
        "id": "54606491f50eec65",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 660,
        "wires": [
            [
                "6cc9154844a53ef9"
            ]
        ]
    },
    {
        "id": "a5e83f58ec10409b",
        "type": "debug",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "Clock 0.5 Hz",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 730,
        "y": 480,
        "wires": []
    },
    {
        "id": "3b8ad00b75512663",
        "type": "comment",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "Clock 0.5 Hz",
        "info": "",
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "60ec0bd09d74340a",
        "type": "link out",
        "z": "b4cd349f4176f6d7",
        "g": "0b66a4af96644ef3",
        "name": "Clock 0.5 Hz",
        "mode": "link",
        "links": [],
        "x": 755,
        "y": 560,
        "wires": []
    },
    {
        "id": "f7fc3a6c8910455e",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 980,
        "y": 600,
        "wires": [
            [
                "0cfebaa7bd426e0a",
                "08dbb4f86a20c6bd",
                "5f633ac6507c620b"
            ]
        ]
    },
    {
        "id": "0cfebaa7bd426e0a",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 600,
        "wires": [
            [
                "66058a0fae9f2e68"
            ]
        ]
    },
    {
        "id": "8609be2411f2e668",
        "type": "inject",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 540,
        "wires": [
            [
                "f7fc3a6c8910455e"
            ]
        ]
    },
    {
        "id": "66058a0fae9f2e68",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 980,
        "y": 660,
        "wires": [
            [
                "ba5b15b368af0a5d"
            ]
        ]
    },
    {
        "id": "ba5b15b368af0a5d",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 660,
        "wires": [
            [
                "f7fc3a6c8910455e"
            ]
        ]
    },
    {
        "id": "08dbb4f86a20c6bd",
        "type": "debug",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "Clock 1 Hz",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1190,
        "y": 480,
        "wires": []
    },
    {
        "id": "a2f985bc61cfd510",
        "type": "comment",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "Clock 1 Hz",
        "info": "",
        "x": 940,
        "y": 500,
        "wires": []
    },
    {
        "id": "5f633ac6507c620b",
        "type": "link out",
        "z": "b4cd349f4176f6d7",
        "g": "3b22cf7219cb697a",
        "name": "Clock 1 Hz",
        "mode": "link",
        "links": [],
        "x": 1235,
        "y": 560,
        "wires": []
    },
    {
        "id": "bc65aacc3f50e20a",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "100",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 320,
        "wires": [
            [
                "4ee345a8107f4408",
                "d10116835931796e",
                "58ccd8215628cc12"
            ]
        ]
    },
    {
        "id": "4ee345a8107f4408",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 320,
        "wires": [
            [
                "a64063d1bef88590"
            ]
        ]
    },
    {
        "id": "1326df983b30b393",
        "type": "inject",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "bc65aacc3f50e20a"
            ]
        ]
    },
    {
        "id": "a64063d1bef88590",
        "type": "trigger",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "str",
        "op2type": "str",
        "duration": "100",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "046234ac3421a890"
            ]
        ]
    },
    {
        "id": "046234ac3421a890",
        "type": "switch",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 380,
        "wires": [
            [
                "bc65aacc3f50e20a"
            ]
        ]
    },
    {
        "id": "d10116835931796e",
        "type": "debug",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "Clock 0.1 Hz",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 690,
        "y": 220,
        "wires": []
    },
    {
        "id": "31a164c4fad4f1d7",
        "type": "comment",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "Clock 0.1 Hz",
        "info": "",
        "x": 470,
        "y": 220,
        "wires": []
    },
    {
        "id": "58ccd8215628cc12",
        "type": "link out",
        "z": "b4cd349f4176f6d7",
        "g": "0118b18c9a2630b1",
        "name": "Clock 0.1 Hz",
        "mode": "link",
        "links": [],
        "x": 755,
        "y": 280,
        "wires": []
    },
    {
        "id": "a5a2a08cc1d60dc9",
        "type": "inject",
        "z": "bfffca06cd507a7e",
        "name": "Set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "iso",
        "payloadType": "date",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "efc9a8a9c405e65c",
                "09e9b31cfe381753"
            ]
        ]
    },
    {
        "id": "7f935eb6f0d4ab45",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "12850eccce220e12",
        "name": "SALI",
        "func": "// Globales SALI\nglobal.set('awaitingResponse_SALI', false);\nglobal.set(\"TimeOutSimo_SALI\", 3000);\nglobal.set('tcpPortSimo_SALI', 3000);\nglobal.set('lastCheckTime_SALI', Date.now());\nglobal.set('saliRespuesta', \"wait\");\nglobal.set('tcpSaliDisparado', false);\nglobal.set('saliDisparado', false);\n\nglobal.set(`SaliEvent`, false);\nnode.warn(`Variable SaliEvent inicializada en false`);\n\n \n// SALI - Inicializar variables globales\nglobal.set(\"NombreHost_SALI\", \"PLC_400_Silo\");  // Nombre del host (rellenar con espacios a la izquierda si es necesario)\nglobal.set(\"TmsServerPort_SALI\", 3000);  // Puerto del servidor TMS (5 dígitos)\nglobal.set(\"NumeroAlmacen_SALI\", 20001);  // Número de almacén (10 dígitos)\nglobal.set(\"Software_SALI\", \"GalileoSim\");  // Nombre del software (10 dígitos, rellenar con espacios a la izquierda)\nglobal.set(\"VersionSoftware_SALI\", 1.0);  // Versión del software (10 dígitos, rellenar con espacios a la izquierda)\nglobal.set(\"FechaHora_SALI\", \"20230814120000\");  // Fecha y hora (17 dígitos)\nglobal.set(\"Master_SALI\", 1);  // Indicador de si el TMS trabaja en modo Master (1 dígito)\nglobal.set(\"Period_SALI\", 45000);  // Periodo de reenvío en milisegundos (10 dígitos)\nglobal.set(\"TimeoutRemoto_SALI\", 45000);  // Timeout en milisegundos (10 dígitos)\nglobal.set(\"Cpu_SALI\", 10);  // Uso de CPU en porcentaje (3 dígitos)\nglobal.set(\"Memoria_SALI\", 20);  // Uso de memoria en porcentaje (3 dígitos)\nglobal.set(\"TiempoCiclo_SALI\", 50);  // Tiempo de ciclo en milisegundos (3 dígitos)\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "efc9a8a9c405e65c",
        "type": "link out",
        "z": "bfffca06cd507a7e",
        "name": "defVar",
        "mode": "link",
        "links": [
            "36b6aa6f2eeb66a8",
            "91c7f930af6eb602",
            "d80274bb761d1e9f",
            "7ad74580372dfc4b",
            "7431e1e7c17e434c"
        ],
        "x": 335,
        "y": 180,
        "wires": []
    },
    {
        "id": "36b6aa6f2eeb66a8",
        "type": "link in",
        "z": "bfffca06cd507a7e",
        "g": "12850eccce220e12",
        "name": "defVarSALI",
        "links": [
            "efc9a8a9c405e65c"
        ],
        "x": 455,
        "y": 380,
        "wires": [
            [
                "7f935eb6f0d4ab45"
            ]
        ]
    },
    {
        "id": "4fd649ab1a44f7da",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_Gen",
        "func": "// Globales SSTS\nglobal.set('awaitingResponse_SSTS', false);\nglobal.set(\"TimeOutSSTS\", 3000);\nglobal.set('tcpPortSSTS', 3000);\nglobal.set('lastCheckTime_SSTS', Date.now());\nglobal.set('connection_active_SSTS', false);\n\n//******************************************************************************************** */\n\n// SSTS - Inicializar variables globales\nglobal.set(\"NumeroAlmacen_SSTS\", \"20001\");  // Número de almacén (10 dígitos)\nglobal.set(\"OperacionesEncadenadas_SSTS\", 1);  // Cantidad de estaciones encadenadas (4 dígitos)\nglobal.set(\"sstsRespuesta\", \"wait\");\nglobal.set(\"tcpSstsDisparado\", false);\n\n// Lista de estaciones\nconst estaciones = [\n    'PIE1', 'PIE2',\n    'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n    'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n    'TLV1', 'TLV2',\n    'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n    'REJ1', 'REJ2', 'REJ3',\n     'PIS1', 'PIS2', 'PIS3',\n    'PTA1'\n];\n\n// Inicializar las variables globales relacionadas con SSTS Event a false\nestaciones.forEach(estacion => {\n    global.set(`${estacion}SstsEvent`, false);\n    node.warn(`Variable ${estacion}SstsEvent inicializada en false`);\n});\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "822791985a9a0213",
        "type": "exec",
        "z": "bfffca06cd507a7e",
        "command": "top -bn1 | grep \"Cpu(s)\" | awk '{print int($2 + $4)}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "CPU Usage",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "e28b659442d4c1ec"
            ],
            [],
            []
        ]
    },
    {
        "id": "2f88e3c6c12f171e",
        "type": "exec",
        "z": "bfffca06cd507a7e",
        "command": "free -m | awk 'NR==2{printf \"%d\", $3*100/$2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "RAM Usage",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "1cba8f49ebbd3cea"
            ],
            [],
            []
        ]
    },
    {
        "id": "e28b659442d4c1ec",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "name": "Set CPU Usage in Flow",
        "func": "// Remover cualquier carácter de nueva línea o espacio al final\nmsg.payload = msg.payload.trim();\n\n// Guardar el valor en la variable de flujo\nglobal.set(\"cpu_usage\", msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 20,
        "wires": [
            [
                "07000eb6800b92d4"
            ]
        ]
    },
    {
        "id": "1cba8f49ebbd3cea",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "name": "Set RAM Usage in Flow",
        "func": "global.set(\"ram_usage\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [
                "18c2bd59cf5fb953"
            ]
        ]
    },
    {
        "id": "07000eb6800b92d4",
        "type": "debug",
        "z": "bfffca06cd507a7e",
        "name": "CPU Usage Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 20,
        "wires": []
    },
    {
        "id": "18c2bd59cf5fb953",
        "type": "debug",
        "z": "bfffca06cd507a7e",
        "name": "RAM Usage Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 80,
        "wires": []
    },
    {
        "id": "d1876c6ed8f936a6",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "62604654143b362f",
        "name": "TLV1",
        "func": "\n// ==================== STATUS TLV1 ====================\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_AUTOMATICO\", 0);  // %DB101.DBB0 | 0=AUTOMÁTICO | 1=SEMI/AUTOMÁTICO | 2=MANUAL\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_OCUPACION\", 0);  // %DB101.DBB1 | 0=LIBRE | 1=OCUPADO\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_AVERIA\", 0);  // %DB101.DBB2 | 0=OK | 1=AVERÍA\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_COORD_X_ACTUAL\", 0);  // %DB101.DBW10 | X ACTUAL 1-59\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_COORD_Y_ACTUAL\", 0);  // %DB101.DBW12 | Y ACTUAL 1-12\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_COORD_Z_ACTUAL\", 0);  // %DB101.DBW14 | Z ACTUAL 1-2\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_MATRICULA_ACTUAL\", 0);  // %DB101.DBW16 | MATRÍCULA ACTUAL 1.30.000\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_PASILLO_ACTUAL\", 0);  // %DB101.DBB18 | NÚMERO PASILLO SITUACIÓN\n\n// ==================== ORDEN A TLV1 ====================\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_TIPO\", 0);  // %DB101.DBB20 | 0=SIN ORDEN | 1=DEPÓSITO | 2=EXTRACCIÓN | 3=CAMBIO PASILLO | 4=TRASVASE | 5=TEST\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_PASILLO_ORIGEN\", 0);  // %DB101.DBB22 | 1..12\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_COORD_X_ORIGEN\", 0);  // %DB101.DBB23 | 1..59\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_COORD_Y_ORIGEN\", 0);  // %DB101.DBB24 | 1..12\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_COORD_Z_ORIGEN\", 0);  // %DB101.DBB25 | 1=IZQUIERDA | 2=DERECHA\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_PASILLO_DESTINO\", 0);  // %DB101.DBB27 | 1..12\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_COORD_X_DESTINO\", 0);  // %DB101.DBB28 | 1..59\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_COORD_Y_DESTINO\", 0);  // %DB101.DBB29 | 1..12\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_COORD_Z_DESTINO\", 0);  // %DB101.DBB30 | 1=IZQUIERDA | 2=DERECHA\nglobal.set(\"INTERFACE_TLV1_ORDEN_TLV1_MATRICULA\", 0);  // %DB101.DBW32 | MATRÍCULA ASIGNADA A LA ORDEN\n\n// ==================== FIN DE ORDEN TLV1 ====================\nglobal.set(\"INTERFACE_TLV1_FIN_ORDEN_TLV1_ESTADO\", 0);  // %DB101.DBB40 | 0=SIN ORDEN | 1=EN CURSO | 2=FIN DE ORDEN\nglobal.set(\"INTERFACE_TLV1_FIN_ORDEN_TLV1_RESULTADO\", 0);  // %DB101.DBB41 | 1=OK DEPÓS\nglobal.set(\"INTERFACE_TLV1_FIN_ORDEN_TLV1_PASILLO_DESTINO\", 0);  // %DB101.DBB44: Pasillo destino final\nglobal.set(\"INTERFACE_TLV1_FIN_ORDEN_TLV1_COORD_X_DESTINO\", 0);  // %DB101.DBB46: Coordenada X destino final\nglobal.set(\"INTERFACE_TLV1_FIN_ORDEN_TLV1_COORD_Y_DESTINO\", 0);  // %DB101.DBB48: Coordenada Y destino final\nglobal.set(\"INTERFACE_TLV1_FIN_ORDEN_TLV1_COORD_Z_DESTINO\", 0);  // %DB101.DBB50: Coordenada Z destino final\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "37647388e0335493",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "de1abbaf9246a102",
        "name": "TLV2",
        "func": "\n// ==================== ORDEN A TLV2 ====================\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_TIPO\", 0);  // %DB102.DBB20 | 0=SIN ORDEN | 1=DEPÓSITO | 2=EXTRACCIÓN | 3=CAMBIO PASILLO | 4=TRASVASE | 5=TEST\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_PASILLO_ORIGEN\", 0);  // %DB102.DBB22 | 1..12\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_COORD_X_ORIGEN\", 0);  // %DB102.DBB23 | 1..59\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_COORD_Y_ORIGEN\", 0);  // %DB102.DBB24 | 1..12\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_COORD_Z_ORIGEN\", 0);  // %DB102.DBB25 | 1=IZQUIERDA | 2=DERECHA\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_PASILLO_DESTINO\", 0);  // %DB102.DBB27 | 1..12\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_COORD_X_DESTINO\", 0);  // %DB102.DBB28 | 1..59\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_COORD_Y_DESTINO\", 0);  // %DB102.DBB29 | 1..12\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_COORD_Z_DESTINO\", 0);  // %DB102.DBB30 | 1=IZQUIERDA | 2=DERECHA\nglobal.set(\"INTERFACE_TLV2_ORDEN_TLV2_MATRICULA\", 0);  // %DB102.DBW32 | MATRÍCULA ASIGNADA A LA ORDEN\n\n// ==================== FIN DE ORDEN TLV2 ====================\nglobal.set(\"INTERFACE_TLV2_FIN_ORDEN_TLV2_ESTADO\", 0);  // %DB102.DBB40 | 0=SIN ORDEN | 1=EN CURSO | 2=FIN DE ORDEN\nglobal.set(\"INTERFACE_TLV2_FIN_ORDEN_TLV2_RESULTADO\", 0);  // %DB102.DBB41 | 1=OK DEPÓSITO | 2=OK EXTRACCIÓN | 3=ERROR DEPÓSITO | 4=ERROR EXTRACCIÓN | 5=OK TRANSVASADO | 6=ABORTADO\nglobal.set(\"INTERFACE_TLV2_FIN_ORDEN_TLV2_PASILLO_DESTINO\", 0);  // %DB102.DBB42 | 1..12\nglobal.set(\"INTERFACE_TLV2_FIN_ORDEN_TLV2_COORD_X_DESTINO\", 0);  // %DB102.DBB43 | 1..59\nglobal.set(\"INTERFACE_TLV2_FIN_ORDEN_TLV2_COORD_Y_DESTINO\", 0);  // %DB102.DBB44 | 1..12\nglobal.set(\"INTERFACE_TLV2_FIN_ORDEN_TLV2_COORD_Z_DESTINO\", 0);  // %DB102.DBB45 | 1=IZQUIERDA | 2=DERECHA\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "d6034fe53c56ad74",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "0c917786ce74e4c4",
        "name": "StatusInstalacion",
        "func": "// ==================== STATUS INSTALACION ====================\nglobal.set(\"INTERFACE_DATOS_INDICATIVOS_VIDA_PLC\", 0);  // %DB100.DBW4 | INDICATIVO VIDA INSTALACION | 0..65.535\nglobal.set(\"INTERFACE_DATOS_STATUS_INSTALACION_MARCHA\", 0);  // %DB100.DBB10 | 0=PARADA | 1=EN MARCHA\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "9ebd81bc01a373db",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "bfa32806f427b244",
        "name": "Carro",
        "func": ";  // Si pasillo destino es 13, carga tarea 7 (DEC+/-)\n\n// Definir las variables globales para las tareas a carro\n\n// Desde gestión PES\nglobal.set(\"F_RE_SGA_PERMISO_SALIDA_PES_MATRICULA_PALETA\", 0);  // %DB210.DBW20: Permiso salida PES, Matrícula paleta (Hex)\nglobal.set(\"F_RE_SGA_PERMISO_SALIDA_PES_DESTINO\", 0);  // %DB210.DBW22: Permiso salida PES, Destino (Hex)\n\n// Tracking datos\nglobal.set(\"TRANS_DATOS_D_24\", 0);  // %DB10.DBW48: Datos tracking D_24 (DEC+/-)\nglobal.set(\"TRANS_DATOS_D_25\", 0);  // %DB10.DBW50: Datos tracking D_25 (DEC+/-)\nglobal.set(\"TRANS_DATOS_D_26\", 0);  // %DB10.DBW52: Datos tracking D_26 (DEC+/-)\nglobal.set(\"TRANS_DATOS_D_124\", 0);  // %DB10.DBW248: Datos tracking D_124 (Hex)\nglobal.set(\"TRANS_DATOS_D_125\", 0);  // %DB10.DBW250: Datos tracking D_125 (Hex)\nglobal.set(\"TRANS_DATOS_D_126\", 0);  // %DB10.DBW252: Datos tracking D_126 (Hex)\n\n// Envío de datos a esclavo (Carro)\nglobal.set(\"PLC_SLAVE_CTF_D_73_Matricula\", 0);  // %DB201.DBW146: Datos a carro, Matrícula (DEC+/-)\nglobal.set(\"PLC_SLAVE_CTF_D_75_PAS\", 0);  // %DB201.DBW150: Datos a carro, Pasillo destino (Hex)\nglobal.set(\"PLC_SLAVE_CTF_D_90_Tarea\", 0);  // %DB201.DBW180: Datos a carro, Tarea (DEC+/-)\n\n// Transferir matrícula a DB10.DBW72\nglobal.set(\"TRANS_DATOS_D_36\", 0);  // %DB10.DBW72: Transferencia de matrícula (DEC+/-)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "37a13258ae187907",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "8dd2f29409055486",
        "name": "PEE",
        "func": "// ==================== TRANSITO CON VIGILANCIA DE POSICION SIGUIENTE ====================\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PEE_FLAG_DATOS_PREP_PLC\", 0);  // %DB100.DBB182 | PLC >> SGA 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PEE_FLAG_DATOS_PREP_SGA\", 0);  // %DB100.DBB183 | SGA>>>PLC 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PEE_MATRICULA_PALET\", 0);  // %DB100.DBW184 | PLC >> SGA 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PEE_RESERVA1\", 0);  // %DB100.DBW186 | RESERVADO\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PEE_RESERVA11\", 0);  // %DB100.DBW188 | RESERVADO\n\n// ==================== TRACKING ====================\nglobal.set(\"TRACKING_ELEVADOR_TC1_MATRICULA\", 0);  // %DB11.DBD0 | Tracking del elevador TC1: Matrícula\nglobal.set(\"TRACKING_ELEVADOR_TC1_DESTINO\", 0);  // %DB11.DBD4 | Tracking del elevador TC1: Destino\nglobal.set(\"TRACKING_ELEVADOR_EL1_TRANS_MATRICULA\", 0);  // %DB11.DBD8 | Tracking del elevador EL1: Transacción de matrícula\nglobal.set(\"TRACKING_ELEVADOR_EL1_TRANS_DESTINO\", 0);  // %DB11.DBD12 | Tracking del elevador EL1: Transacción de destino\nglobal.set(\"TRACKING_ELEVADOR_TC2_MATRICULA\", 0);  // %DB11.DBD16 | Tracking del elevador TC2: Matrícula\nglobal.set(\"TRACKING_ELEVADOR_TC2_DESTINO\", 0);  // %DB11.DBD20 | Tracking del elevador TC2: Destino\nglobal.set(\"TRACKING_ELEVADOR_TC3_MATRICULA\", 0);  // %DB11.DBD24 | Tracking del elevador TC3: Matrícula\nglobal.set(\"TRACKING_ELEVADOR_TC3_DESTINO\", 0);  // %DB11.DBD28 | Tracking del elevador TC3: Destino\nglobal.set(\"TRACKING_ELEVADOR_TC4_MATRICULA\", 0);  // %DB11.DBD32 | Tracking del elevador TC4: Matrícula\nglobal.set(\"TRACKING_ELEVADOR_TC4_DESTINO\", 0);  // %DB11.DBD36 | Tracking del elevador TC4: Destino\nglobal.set(\"TRACKING_ELEVADOR_TEC1_MATRICULA\", 0);  // %DB11.DBD40 | Tracking del elevador TEC1: Matrícula\nglobal.set(\"TRACKING_ELEVADOR_TEC1_DESTINO\", 0);  // %DB11.DBD44 | Tracking del elevador TEC1: Destino\nglobal.set(\"TRACKING_ELEVADOR_TEC2_MATRICULA\", 0);  // %DB11.DBD48 | Tracking del elevador TEC2: Matrícula\nglobal.set(\"TRACKING_ELEVADOR_TEC2_DESTINO\", 0);  // %DB11.DBD52 | Tracking del elevador TEC2: Destino\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "1e45ae6d3188d0b3",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "37b57e58917b0c2b",
        "name": "PEP",
        "func": "global.set(\"INTERFACE_DATOS_PALETA_PASILLO_1_MATRICULA_PALET\", 0);  // Palet en PEP1 (%DB100.DBW92) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_2_DATOS_PREPARADOS\", 0);  // Matricula en PEP1 (%DB100.DBB96) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_2_MATRICULA_PALET\", 0);  // Palet en PEP2 (%DB100.DBW98) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_3_DATOS_PREPARADOS\", 0);  // Matricula en PEP2 (%DB100.DBB102) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_1_DATOS_PREPARADOS\", 0);  // Palet en PEP3 (%DB100.DBB90) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_3_MATRICULA_PALET\", 0);  // Matricula en PEP3 (%DB100.DBW104) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_4_DATOS_PREPARADOS\", 0);  // Palet en PEP4 (%DB100.DBB108) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_4_MATRICULA_PALET\", 0);  // Matricula en PEP4 (%DB100.DBW110) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_5_DATOS_PREPARADOS\", 0);  // Palet en PEP5 (%DB100.DBB114) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_5_MATRICULA_PALET\", 0);  // Matricula en PEP5 (%DB100.DBW116) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_6_DATOS_PREPARADOS\", 0);  // Palet en PEP6 (%DB100.DBB120) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_6_MATRICULA_PALET\", 0);  // Matricula en PEP6 (%DB100.DBW122) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_7_DATOS_PREPARADOS\", 0);  // Palet en PEP7 (%DB100.DBB126) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_7_MATRICULA_PALET\", 0);  // Matricula en PEP7 (%DB100.DBW128) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_8_DATOS_PREPARADOS\", 0);  // Palet en PEP8 (%DB100.DBB132) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_8_MATRICULA_PALET\", 0);  // Matricula en PEP8 (%DB100.DBW134) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_9_DATOS_PREPARADOS\", 0);  // Palet en PEP9 (%DB100.DBB138) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_9_MATRICULA_PALET\", 0);  // Matricula en PEP9 (%DB100.DBW140) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_10_DATOS_PREPARADOS\", 0);  // Palet en PEP10 (%DB100.DBB144) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_10_MATRICULA_PALET\", 0);  // Matricula en PEP10 (%DB100.DBW146) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_11_DATOS_PREPARADOS\", 0);  // Palet en PEP11 (%DB100.DBB150) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_11_MATRICULA_PALET\", 0);  // Matricula en PEP11 (%DB100.DBW152) - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_12_DATOS_PREPARADOS\", 0);  // Palet en PEP12 (%DB100.DBB156) - 0=SIN DATOS   1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_12_MATRICULA_PALET\", 0);  // Matricula en PEP12 (%DB100.DBW158) - 15.001..30.000\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "dedbd49b0c8f5791",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "83c3b522070ca4f2",
        "name": "PSP",
        "func": "// Variables globales para PSP según el archivo Excel\n\n// Palet en Mesas de Salida 1 (TC38)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC38_PASILLO_1_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB0 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC38_PASILLO_1_Matricula_palet\", 0);  // Dirección: %DB117.DBW2 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC38_PASILLO_1_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB4 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC38_PASILLO_1_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB5\n\n// Palet en Mesas de Salida 2 (TC40)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC40_PASILLO_2_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB8 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC40_PASILLO_2_Matricula_palet\", 0);  // Dirección: %DB117.DBW10 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC40_PASILLO_2_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB12 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC40_PASILLO_2_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB13\n\n// Palet en Mesas de Salida 3 (TC42)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC42_PASILLO_3_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB16 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC42_PASILLO_3_Matricula_palet\", 0);  // Dirección: %DB117.DBW18 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC42_PASILLO_3_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB20 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC42_PASILLO_3_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB21\n\n// Palet en Mesas de Salida 4 (TC44)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC44_PASILLO_4_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB24 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC44_PASILLO_4_Matricula_palet\", 0);  // Dirección: %DB117.DBW26 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC44_PASILLO_4_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB28 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC44_PASILLO_4_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB29\n\n// Palet en Mesas de Salida 5 (TC46)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC46_PASILLO_5_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB32 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC46_PASILLO_5_Matricula_palet\", 0);  // Dirección: %DB117.DBW34 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC46_PASILLO_5_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB36 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC46_PASILLO_5_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB37\n\n// Palet en Mesas de Salida 6 (TC48)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC48_PASILLO_6_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB40 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC48_PASILLO_6_Matricula_palet\", 0);  // Dirección: %DB117.DBW42 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC48_PASILLO_6_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB44 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC48_PASILLO_6_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB45\n\n// Palet en Mesas de Salida 7 (TC50)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC50_PASILLO_7_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB48 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC50_PASILLO_7_Matricula_palet\", 0);  // Dirección: %DB117.DBW50 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC50_PASILLO_7_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB52 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC50_PASILLO_7_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB53\n\n// Palet en Mesas de Salida 8 (TC52)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC52_PASILLO_8_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB56 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC52_PASILLO_8_Matricula_palet\", 0);  // Dirección: %DB117.DBW58 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC52_PASILLO_8_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB60 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC52_PASILLO_8_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB61\n\n// Palet en Mesas de Salida 9 (TC54)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC54_PASILLO_9_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB64 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC54_PASILLO_9_Matricula_palet\", 0);  // Dirección: %DB117.DBW66 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC54_PASILLO_9_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB68 - 1=Salida por PIS 2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC54_PASILLO_9_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB69\n\n// Palet en Mesas de Salida 10 (TC56)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC56_PASILLO_10_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB64 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC56_PASILLO_10_Matricula_palet\", 0);  // Dirección: %DB117.DBW66 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC56_PASILLO_10_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB68 - 1=Salida por PIS  2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC56_PASILLO_10_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB69\n\n// Palet en Mesas de Salida 11 (TC58)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC58_PASILLO_11_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB72 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC58_PASILLO_11_Matricula_palet\", 0);  // Dirección: %DB117.DBW74 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC58_PASILLO_11_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB76 - 1=Salida por PIS  2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC58_PASILLO_11_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB77\n\n// Palet en Mesas de Salida 12 (TC60)\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC60_PASILLO_12_Flag_datos_prep_PLC\", 0);  // Dirección: %DB117.DBB80 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC60_PASILLO_12_Matricula_palet\", 0);  // Dirección: %DB117.DBW82 - 15.001...30.000\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC60_PASILLO_12_Destino_salida_CT\", 0);  // Dirección: %DB117.DBB84 - 1=Salida por PIS  2=Salida por PEE\nglobal.set(\"GESTION_SALIDAS_SALIDA_TC60_PASILLO_12_Flag_destino_prep_SGA\", 0);  // Dirección: %DB117.DBB85\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "dfe87c69c36861cb",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "acad1a8c30bb41b5",
        "name": "PES",
        "func": "// ****** WATCH TELEGRAMA PALETA EN PES ---> FC122 ******\nglobal.set(\"TELEGRAMA_PALETA_EN_PES_F_SEMAFOROS_DATOS_PREPARADOS_PALETA_EN_PES\", 0);  // %DB205.DBW64 - F. SEMAFOROS. Datos preparados paleta en PES\nglobal.set(\"TELEGRAMA_PALETA_EN_PES_F_EM_SGA_LLEGADA_PES_DATOS_PREPARADOS\", 0);  // %DB211.DBW30 - F. EM SGA. Llegada PES datos preparados\nglobal.set(\"TELEGRAMA_PALETA_EN_PES_LLEGADA_PES_ENVIADA\", 0);  // %M501.1 - Llegada PES enviada\n\n// ****** LEER DESDE SGA ******\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PES_DATOS_PREPARADOS\", 0);  // %DB100.DBB70 - Telegrama de llegada al PES enviado al SGA\n\n// ****** STATUS PASILLOS PLC ---> SGA ******\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_UNO\", 0);  // %DB100.DBB20 - Estado del pasillo uno: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_DOS\", 0);  // %DB100.DBB21 - Estado del pasillo dos: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_TRES\", 0);  // %DB100.DBB22 - Estado del pasillo tres: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_CUATRO\", 0);  // %DB100.DBB23 - Estado del pasillo cuatro: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_CINCO\", 0);  // %DB100.DBB24 - Estado del pasillo cinco: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_SEIS\", 0);  // %DB100.DBB25 - Estado del pasillo seis: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_SIETE\", 0);  // %DB100.DBB26 - Estado del pasillo siete: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_OCHO\", 0);  // %DB100.DBB27 - Estado del pasillo ocho: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_NUEVE\", 0);  // %DB100.DBB28 - Estado del pasillo nueve: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_DIEZ\", 0);  // %DB100.DBB29 - Estado del pasillo diez: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_ONCE\", 0);  // %DB100.DBB30 - Estado del pasillo once: 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_DOCE\", 0);  // %DB100.DBB31 - Estado del pasillo doce: 0=EN SERVICIO 1=FUERA DE SERVICIO\n\n// ****** STATUS TLV1 ******\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_AUTOMATICO\", 0);  // %DB101.DBB0 - Estado TLV1: 0=AUTOMÁTICO 1=SEMIAUTOMÁTICO 2=MANUAL\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_OCUPACION\", 0);  // %DB101.DBB1 - Ocupación TLV1: 0=LIBRE 1=OCUPADO\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_AVERIA\", 0);  // %DB101.DBB2 - Avería TLV1: 0=OK 1=AVERIA\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_COORD_X_ACTUAL\", 0);  // %DB101.DBW10 - X ACTUAL 1-59\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_COORD_Y_ACTUAL\", 0);  // %DB101.DBW12 - Y ACTUAL 1-12\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_COORD_Z_ACTUAL\", 0);  // %DB101.DBW14 - Z ACTUAL 1-2\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_MATRICULA_ACTUAL\", 0);  // %DB101.DBW16 - Matrícula actual TLV1\nglobal.set(\"INTERFACE_TLV1_STATUS_TLV1_PASILLO_ACTUAL\", 0);  // %DB101.DBB18 - Nr. Pasillo situación 1-12\n\n// ****** STATUS TLV2 ******\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_AUTOMATICO\", 0);  // %DB102.DBB0 - Estado TLV2: 0=AUTOMÁTICO 1=SEMIAUTOMÁTICO 2=MANUAL\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_OCUPACION\", 0);  // %DB102.DBB1 - Ocupación TLV2: 0=LIBRE 1=OCUPADO\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_AVERIA\", 0);  // %DB102.DBB2 - Avería TLV2: 0=OK 1=AVERIA\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_COORD_X_ACTUAL\", 0);  // %DB102.DBW10 - X ACTUAL 1-59\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_COORD_Y_ACTUAL\", 0);  // %DB102.DBW12 - Y ACTUAL 1-12\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_COORD_Z_ACTUAL\", 0);  // %DB102.DBW14 - Z ACTUAL 1-2\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_MATRICULA_ACTUAL\", 0);  // %DB102.DBW16 - Matrícula actual TLV2\nglobal.set(\"INTERFACE_TLV2_STATUS_TLV2_PASILLO_ACTUAL\", 0);  // %DB102.DBB18 - Nr. Pasillo situación 1-12\n\n// ****** STATUS CARRO ******\nglobal.set(\"INTERFACE_DATOS_STATUS_CARRO_ESTADO\", 0);  // %DB100.DBB50 - Estado del carro: 0=ERROR ENT. 1=ERROR SAL. 2=CORREC. ENT. 3=CORREC. SAL. 4=CARRO OK\n\n// ****** FORCE DESDE SGA ---> AUT. SAL PES / MATRÍCULA / DESTINO ******\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_DATOS_PREPARADOS\", 0);  // %DB100.DBB80 - 1=AUTORIZA SALIDA\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_MATRICULA_PALET\", 0);  // %DB100.DBW82 - Matrícula palet en PES\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO\", 0);  // %DB100.DBW84 - 1-12=PASILLO 20=SALIDA DIRECTA 30=RECHAZO\nglobal.set(\"F_RE_SGA_PERMISO_SALIDA_PES_MATRICULA_PALETA\", 0);  // %DB210.DBW20 - Matrícula paleta\nglobal.set(\"F_RE_SGA_PERMISO_SALIDA_PES_DESTINO\", 0);  // %DB210.DBB22 - 1-12 PASILLOS 20=SALIDA 30=RECHAZO\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "42e70a8a2e5f7a79",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "9bd68f7b266e15dd",
        "name": "PIE",
        "func": "// ****** TRACKING DATOS ******\n\nglobal.set(\"TRANS_DATOS_D_10\", 0);    // %DB10.DBW20 - FROM MR10 TAMAÑO\nglobal.set(\"TRANS_DATOS_D_16\", 0);    // %DB10.DBW32 - TAMAÑO\nglobal.set(\"TRANS_DATOS_D_33\", 0);    // %DB10.DBB33 - TAMAÑO\nglobal.set(\"AUTORIZ_SCAN_16\", 0);     // %M121.4 - SCANNER AUTORIZA SALIDA DE MESA 16\nglobal.set(\"F_SEMAFOROS_PALETA_EN_PIE\", 0);   // %DB205.DBW62 - FLAG PALETA EN PIE\nglobal.set(\"F_EM_SGA_LLEGADA_PIE_DATOS_PREPARADOS\", 0);   // %DB211.DBW20 - TAMAÑO\nglobal.set(\"F_EM_SGA_LLEGADA_PIE_TIPO_PALETA\", 0);   // %DB211.DBB22 - TAMAÑO\n\n\n// ****** WATCH - COMUNICACION HACIA SGA *** COMPROBAR DATOS Y ESCANNER ******\n\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIE_DATOS_PREPARADOS\", 0);  // %DB100.DBB60 - DEBE ESTAR EN CERO AL COMENZAR CICLO\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIE_RESET\", 0);  // %M501.0 - RESET PARA NUEVO CICLO\nglobal.set(\"INTERFACE_DATOS_TIPO_PALETA\", 0);   // %DB150.DBB212 - TIPO DE PALETA \nglobal.set(\"SCANNER_PIE_DATOS_LECTURA_OK_SGA\", 0);   // %DB100.DBB61 - LECTURA NOK/OK\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIE_B60\", 0);    // %DB100.DBW60 - RESET PARA B60\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "11ed5fd8f8bd843f",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "163485087781e321",
        "name": "PIS",
        "func": "// ***** PIS - LISTADO DE VARIABLES CON SUS DIRECCIONES *****\n\n// VALORES QUE HAY QUE CONSULTAR 2022\nglobal.set(\"PRES_EN_PIS_MRE32\", 0); // %M32.7 - Indica presencia en PIS al SGA\n\n// PRESENCIA EN PIS AUTORIZA SCAN / PONE A 1 PALLET EN PIS\nglobal.set(\"AUTORIZ_SCAN_32\", 0); // %M121.6 - Scanner autoriza salida de mesa 32\nglobal.set(\"F_SEMAFOROS_DATOS_PREPARADOS_PALETA_EN_PIS\", 0); // %DB205.DBW74 - Ciclo de semáforo\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIS_DATOS_PREPARADOS\", 0); // %DB100.DBB162 - Estado de datos\n\n// TRACKING PIS\nglobal.set(\"TRANS_DATOS_TC31_DATOS\", 0); // %DB10.DBW64 - D_32 Datos del TC3X (Matrícula)\nglobal.set(\"F_EM_SGA_LLEGADA_PIS_MATRICULA_PALET\", 0); // %DB211.DBW80 - Ciclo de envío\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIS_MATRICULA_PALET\", 0); // %DB100.DBW164 - Matricula del pallet\n\n// FORCES SGA\nglobal.set(\"F_SEMAFOROS_DATOS_PREPARADOS_PALETA_EN_PIS_MR32\", 0); // %DB205.DBW74 - Ciclo de salida\nglobal.set(\"CIC_SAL1_MR32\", 0); // %M32.6 - Ciclo de salida 1 de MR32 a MR33\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "ffa8d66268017977",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "28266f7d6daf3efc",
        "name": "PTA",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "aa421a0f4e27dc63",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "bc6d8bc92ad7f148",
        "name": "ScannerPIE",
        "func": "// SCANNER PIE - DATOS LECTURA\n\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO0_LEC_SC\", 0); // DB150.DBB2  -> 0=Sin Datos, 1=Datos Preparados\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO1_LEC_SC\", 0); // DB150.DBB3\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO2_LEC_SC\", 0); // DB150.DBB4\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO3_LEC_SC\", 0); // DB150.DBB5\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO4_LEC_SC\", 0); // DB150.DBB6\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO5_LEC_SC\", 0); // DB150.DBB7\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO6_LEC_SC\", 0); // DB150.DBB8\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO7_LEC_SC\", 0); // DB150.DBB9\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO8_LEC_SC\", 0); // DB150.DBB10\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO9_LEC_SC\", 0); // DB150.DBB11\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO10_LEC_SC\", 0); // DB150.DBB12\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO11_LEC_SC\", 0); // DB150.DBB13\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO12_LEC_SC\", 0); // DB150.DBB14\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO13_LEC_SC\", 0); // DB150.DBB15\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO14_LEC_SC\", 0); // DB150.DBB16\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO15_LEC_SC\", 0); // DB150.DBB17\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO16_LEC_SC\", 0); // DB150.DBB18\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO17_LEC_SC\", 0); // DB150.DBB19\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO18_LEC_SC\", 0); // DB150.DBB20\nglobal.set(\"SCANNER_PE_INP_SCANNER_DATO19_LEC_SC\", 0); // DB150.DBB21\n\n// SCANNER PIE - DATOS ARTÍCULOS\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO1\", 0); // DB150.DBB140\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO2\", 0); // DB150.DBB141\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO3\", 0); // DB150.DBB142\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO4\", 0); // DB150.DBB143\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO5\", 0); // DB150.DBB144\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO6\", 0); // DB150.DBB145\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO7\", 0); // DB150.DBB146\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO8\", 0); // DB150.DBB147\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO9\", 0); // DB150.DBB148\nglobal.set(\"SCANNER_PE_DATOS_ARTICULO10\", 0); // DB150.DBB149\n\n// SCANNER PIE - DATOS CANTIDAD\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD1\", 0); // DB150.DBB150\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD2\", 0); // DB150.DBB151\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD3\", 0); // DB150.DBB152\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD4\", 0); // DB150.DBB153\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD5\", 0); // DB150.DBB154\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD6\", 0); // DB150.DBB155\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD7\", 0); // DB150.DBB156\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD8\", 0); // DB150.DBB157\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD9\", 0); // DB150.DBB158\nglobal.set(\"SCANNER_PE_DATOS_CANTIDAD10\", 0); // DB150.DBB159\n\n// Otros datos\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIE_DATOS_PREPARADOS\", 0); // DB100.DBB60  -> 0=Sin Datos, 1=Datos Preparados\nglobal.set(\"SCANNER_PE_MEMORIA_LECTURA_OK\", 0); // DB150.DBX106.1  -> Lectura Scanner OK\nglobal.set(\"SCANNER_PE_MEMORIA_LECTURA_NOK\", 0); // DB150.DBX106.2  -> Bit de avería Scanner\nglobal.set(\"SCANNER_PE_DATOS_LECTURA_OK_SGA\", 0); // DB150.DBB212  -> 0=Lectura NOK, 1=Lectura OK\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "d094654b6f5afc90",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "62eb66a7f42ca368",
        "name": "StatusGen",
        "func": "global.set(\"INTERFACE_SCADA_STATUS_INSTALACION_ESTADO\", 0); // %DB110.DBB0 - 0=PARADA 1=EN MARCHA\n\n// Status pasillos\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_UNO\", 0); // %DB110.DBB10 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_DOS\", 0); // %DB110.DBB11 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_TRES\", 0); // %DB110.DBB12 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_CUATRO\", 0); // %DB110.DBB13 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_CINCO\", 0); // %DB110.DBB14 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_SEIS\", 0); // %DB110.DBB15 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_SIETE\", 0); // %DB110.DBB16 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_OCHO\", 0); // %DB110.DBB17 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_NUEVE\", 0); // %DB110.DBB18 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_DIEZ\", 0); // %DB110.DBB19 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_ONCE\", 0); // %DB110.DBB20 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_SCADA_STATUS_PASILLOS_DOCE\", 0); // %DB110.DBB21 - 0=EN SERVICIO 1=FUERA DE SERVICIO\n\n// Status puente de transbordo\nglobal.set(\"INTERFACE_SCADA_STATUS_PUENTE_OCUPACION\", 0); // %DB110.DBB30 - 0=LIBRE 1=OCUPADO\nglobal.set(\"INTERFACE_SCADA_STATUS_PUENTE_ESTADO\", 0); // %DB110.DBB31 - 0=OK 1=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_PUENTE_POSICION\", 0); // %DB110.DBB32 - 0=PARADO 1=EN MOVIMIENTO\n\n// Status carro\nglobal.set(\"INTERFACE_SCADA_STATUS_CARRO_ESTADO\", 0); // %DB110.DBB40 - 0=ERROR ENT. 1=ERROR SAL. 2=CORREC. ENT. 3=CORREC. SAL. 4=CARRO OK\n\n// Status mesas de entrada\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_UNO\", 0); // %DB110.DBB50 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_DOS\", 0); // %DB110.DBB51 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_TRES\", 0); // %DB110.DBB52 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_CUATRO\", 0); // %DB110.DBB53 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_CINCO\", 0); // %DB110.DBB54 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_SEIS\", 0); // %DB110.DBB55 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_SIETE\", 0); // %DB110.DBB56 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_OCHO\", 0); // %DB110.DBB57 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_NUEVE\", 0); // %DB110.DBB58 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_DIEZ\", 0); // %DB110.DBB59 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_ONCE\", 0); // %DB110.DBB60 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_ENTRADA_DOCE\", 0); // %DB110.DBB61 - 0=LIBRE 1=OCUPADO 2=AVERÍA\n\n// Status mesas de salida\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_UNO\", 0); // %DB110.DBB70 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_DOS\", 0); // %DB110.DBB71 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_TRES\", 0); // %DB110.DBB72 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_CUATRO\", 0); // %DB110.DBB73 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_CINCO\", 0); // %DB110.DBB74 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_SEIS\", 0); // %DB110.DBB75 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_SIETE\", 0); // %DB110.DBB76 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_OCHO\", 0); // %DB110.DBB77 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_NUEVE\", 0); // %DB110.DBB78 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_DIEZ\", 0); // %DB110.DBB79 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_ONCE\", 0); // %DB110.DBB80 - 0=LIBRE 1=OCUPADO 2=AVERÍA\nglobal.set(\"INTERFACE_SCADA_STATUS_MESAS_SALIDA_DOCE\", 0); // %DB110.DBB81 - 0=LIBRE 1=OCUPADO 2=AVERÍA\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "9a114d05f399dda4",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "e29bc601fde317bc",
        "name": "InterfaceData",
        "func": "// Indicativos de Vida\nglobal.set(\"INTERFACE_DATOS_INDICATIVOS_VIDA_SGA\", 0);  // %DB100.DBW0 - 0..65.535\nglobal.set(\"INTERFACE_DATOS_INDICATIVOS_VIDA_PLC\", 0);  // %DB100.DBW4 - 0..65.535\n\n// Status Instalación\nglobal.set(\"INTERFACE_DATOS_STATUS_INSTALACION_MARCHA\", 0);  // %DB100.DBB10 - 0=PARADA 1=EN MARCHA\n\n// Status Pasillos\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_UNO\", 0);  // %DB100.DBB20 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_DOS\", 0);  // %DB100.DBB21 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_TRES\", 0);  // %DB100.DBB22 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_CUATRO\", 0);  // %DB100.DBB23 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_CINCO\", 0);  // %DB100.DBB24 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_SEIS\", 0);  // %DB100.DBB25 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_SIETE\", 0);  // %DB100.DBB26 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_OCHO\", 0);  // %DB100.DBB27 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_NUEVE\", 0);  // %DB100.DBB28 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_DIEZ\", 0);  // %DB100.DBB29 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_ONCE\", 0);  // %DB100.DBB30 - 0=EN SERVICIO 1=FUERA DE SERVICIO\nglobal.set(\"INTERFACE_DATOS_STATUS_PASILLOS_DOCE\", 0);  // %DB100.DBB31 - 0=EN SERVICIO 1=FUERA DE SERVICIO\n\n// Status Puente de Transbordo\nglobal.set(\"INTERFACE_DATOS_STATUS_PUENTE_OCUPACION\", 0);  // %DB100.DBB40 - 0=LIBRE 1=OCUPADO\nglobal.set(\"INTERFACE_DATOS_STATUS_PUENTE_ESTADO\", 0);  // %DB100.DBB41 - 0=OK 1=AVERÍA\nglobal.set(\"INTERFACE_DATOS_STATUS_PUENTE_SITUACION\", 0);  // %DB100.DBB42 - 0=PARADO 1=EN MOVIMIENTO\nglobal.set(\"INTERFACE_DATOS_STATUS_PUENTE_POSICION\", 0);  // %DB100.DBB43 - 1..12\n\n// Status Carro\nglobal.set(\"INTERFACE_DATOS_STATUS_CARRO_ESTADO\", 0);  // %DB100.DBB50 - 0=ERROR ENT. 1=ERROR SAL. 2=CORREC. ENT. 3=CORREC. SAL. 4=CARRO OK\n\n// Llegada Paleta a PIE\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIE_DATOS_PREPARADOS\", 0);  // %DB100.DBB60 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PIE_TIPO_PALETA\", 0);  // %DB100.DBB61 - 1=PALETA PEQUEÑA 2=PALETA GRANDE\n\n// Llegada Paleta a PES\nglobal.set(\"INTERFACE_DATOS_LLEGADA_PES_DATOS_PREPARADOS\", 0);  // %DB100.DBB70 - 0=SIN DATOS 1=DATOS PREPARADOS\n\n// Permiso de Salida en PES\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_DATOS_PREPARADOS\", 0);  // %DB100.DBB80 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_RESERVA\", 0);  // %DB100.DBB81 - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_MATRICULA_PALETA\", 0);  // %DB100.DBW82 - 15.001..30.000\nglobal.set(\"INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO\", 0);  // %DB100.DBB84 - 1..12=PASILLO 20=SALIDA DIRECTA 30=RECHAZO\n\n// Paleta en Mesa de Entrada Pasillo 1\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_1_DATOS_PREPARADOS\", 0);  // %DB100.DBB90 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_1_MATRICULA_PALET\", 0);  // %DB100.DBW92 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 2\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_2_DATOS_PREPARADOS\", 0);  // %DB100.DBB96 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_2_MATRICULA_PALET\", 0);  // %DB100.DBW98 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 3\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_3_DATOS_PREPARADOS\", 0);  // %DB100.DBB102 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_3_MATRICULA_PALET\", 0);  // %DB100.DBW104 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 4\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_4_DATOS_PREPARADOS\", 0);  // %DB100.DBB108 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_4_MATRICULA_PALET\", 0);  // %DB100.DBW110 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 5\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_5_DATOS_PREPARADOS\", 0);  // %DB100.DBB114 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_5_MATRICULA_PALET\", 0);  // %DB100.DBW116 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 6\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_6_DATOS_PREPARADOS\", 0);  // %DB100.DBB120 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_6_MATRICULA_PALET\", 0);  // %DB100.DBW122 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 7\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_7_DATOS_PREPARADOS\", 0);  // %DB100.DBB126 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_7_MATRICULA_PALET\", 0);  // %DB100.DBW128 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 8\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_8_DATOS_PREPARADOS\", 0);  // %DB100.DBB132 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_8_MATRICULA_PALET\", 0);  // %DB100.DBW134 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 9\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_9_DATOS_PREPARADOS\", 0);  // %DB100.DBB138 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_9_MATRICULA_PALET\", 0);  // %DB100.DBW140 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 10\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_10_DATOS_PREPARADOS\", 0);  // %DB100.DBB144 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_10_MATRICULA_PALET\", 0);  // %DB100.DBW146 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 11\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_11_DATOS_PREPARADOS\", 0);  // %DB100.DBB150 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_11_MATRICULA_PALET\", 0);  // %DB100.DBW152 - 15.001..30.000\n\n// Paleta en Mesa de Entrada Pasillo 12\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_12_DATOS_PREPARADOS\", 0);  // %DB100.DBB156 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PASILLO_12_MATRICULA_PALET\", 0);  // %DB100.DBW158 - 15.001..30.000\n\n// Paleta en PIS\nglobal.set(\"INTERFACE_DATOS_PALETA_PIS_DATOS_PREPARADOS\", 0);  // %DB100.DBB162 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_PALETA_PIS_MATRICULA_PALET\", 0);  // %DB100.DBW164 - 15.001..30.000\n\n// Corrección de datos sobre CTF36\nglobal.set(\"INTERFACE_DATOS_CORRECCION_CTF36_DATOS_PREPARADOS\", 0);  // %DB100.DBB170 - 0=SIN DATOS 1=DATOS PREPARADOS\nglobal.set(\"INTERFACE_DATOS_CORRECCION_CTF36_MATRICULA_PALET\", 0);  // %DB100.DBW172 - 1..12\nglobal.set(\"INTERFACE_DATOS_CORRECCION_CTF36_DESTINO\", 0);  // %DB100.DBB174 - 1..12 PASILLOS 20=SALIDA 30=RECHAZO\nglobal.set(\"INTERFACE_DATOS_CORRECCION_CTF36_RESULTADO\", 0);  // %DB100.DBW176 - 15.001..30.000\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "303bd9eb4e5ce897",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PIE1",
        "func": "// Definir variables globales para los tipos de estaciones\nglobal.set(\"TipoEstacion_PIE\", 3);       // Puesto de identificación de entradas\n\n// Estaciones de tipo PIE\nglobal.set(\"Estacion_PIE1\", 1);\n\n\n// Variables para Estaciones de tipo PIE\nglobal.set(\"Estado_PIE1\", 0);\nglobal.set(\"Presencia_PIE1\", 0);\nglobal.set(\"Ocupacion_PIE1\", 0);\nglobal.set(\"Capacidad_PIE1\", 1);\nglobal.set(\"Pasillo_PIE1\", 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4ae7c2343f66186d",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PEPs",
        "func": "// Definir tipo de estación para PEP\nglobal.set(\"TipoEstacion_PEP\", 9);  // Puesto de Entrada al Pasillo\n\n// Estaciones de tipo PEP del 1 al 12\nfor (let i = 1; i <= 12; i++) {\n    global.set(`Estacion_PEP${i}`, i);\n\n    // Variables específicas de cada estación PEP\n    global.set(`Estado_PEP${i}`, 1);\n    global.set(`Presencia_PEP${i}`, 1);\n    global.set(`Ocupacion_PEP${i}`, 0);\n    global.set(`Capacidad_PEP${i}`, 1);\n    global.set(`Pasillo_PEP${i}`, i);\n\n    // Agregar mensajes de depuración para verificar que las variables se hayan inicializado correctamente\n    node.warn(`Estacion_PEP${i} - Estado: ${global.get(`Estado_PEP${i}`)}, Presencia: ${global.get(`Presencia_PEP${i}`)}, Ocupacion: ${global.get(`Ocupacion_PEP${i}`)}, Capacidad: ${global.get(`Capacidad_PEP${i}`)}, Pasillo: ${global.get(`Pasillo_PEP${i}`)}`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4116cebd12f9f41c",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PSPs",
        "func": "// Definir tipo de estación para PSP\nglobal.set(\"TipoEstacion_PSP\", 10);  // Puesto de Salida al Pasillo\n\n// Estaciones de tipo PSP del 1 al 12\nfor (let i = 1; i <= 12; i++) {\n    global.set(`Estacion_PSP${i}`, i);\n\n    // Variables específicas de cada estación PSP\n    global.set(`Estado_PSP${i}`, 1);\n    global.set(`Presencia_PSP${i}`, 1);\n    global.set(`Ocupacion_PSP${i}`, 0);\n    global.set(`Capacidad_PSP${i}`, 1);\n    global.set(`Pasillo_PSP${i}`, i);\n\n    // Agregar mensajes de depuración para verificar que las variables se hayan inicializado correctamente\n    node.warn(`Estacion_PSP${i} - Estado: ${global.get(`Estado_PSP${i}`)}, Presencia: ${global.get(`Presencia_PSP${i}`)}, Ocupacion: ${global.get(`Ocupacion_PSP${i}`)}, Capacidad: ${global.get(`Capacidad_PSP${i}`)}, Pasillo: ${global.get(`Pasillo_PSP${i}`)}`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "95bb512a35517b29",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PIS1",
        "func": "// Definir tipo de estación para PIS\nglobal.set(\"TipoEstacion_PIS\", 4);  // Puesto de salida\n\n// Estación de tipo PIS 1\nglobal.set(\"Estacion_PIS1\", 1);\n\n// Variables específicas de la estación PIS 1\nglobal.set(\"Estado_PIS1\", 1);\nglobal.set(\"Presencia_PIS1\", 1);\nglobal.set(\"Ocupacion_PIS1\", 0);\nglobal.set(\"Capacidad_PIS1\", 1);\nglobal.set(\"Pasillo_PIS1\", 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d6a9fbe25594566b",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PIS2",
        "func": "// Definir tipo de estación para PIS\nglobal.set(\"TipoEstacion_PIS\", 4);  // Puesto de salida\n\n// Estación de tipo PIS 2\nglobal.set(\"Estacion_PIS2\", 2);\n\n// Variables específicas de la estación PIS 2\nglobal.set(\"Estado_PIS2\", 1);\nglobal.set(\"Presencia_PIS2\", 1);\nglobal.set(\"Ocupacion_PIS2\", 0);\nglobal.set(\"Capacidad_PIS2\", 1);\nglobal.set(\"Pasillo_PIS2\", 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "27fb69cfedae6f4d",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PIS3",
        "func": "// Definir tipo de estación para PIS\nglobal.set(\"TipoEstacion_PIS\", 4);  // Puesto de salida\n\n// Estación de tipo PIS 3\nglobal.set(\"Estacion_PIS3\", 3);\n\n// Variables específicas de la estación PIS 3\nglobal.set(\"Estado_PIS3\", 1);\nglobal.set(\"Presencia_PIS3\", 1);\nglobal.set(\"Ocupacion_PIS3\", 0);\nglobal.set(\"Capacidad_PIS3\", 1);\nglobal.set(\"Pasillo_PIS3\", 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ad6c426a4073acdb",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_TLV1",
        "func": "// Definir tipo de estación para TLV\nglobal.set(\"TipoEstacion_TLV\", 1);  // Transelevador\n\n// Estación de tipo TLV 1\nglobal.set(\"Estacion_TLV1\", 1);\n\n// Variables específicas de la estación TLV 1\nglobal.set(\"Estado_TLV1\", 1);\nglobal.set(\"Presencia_TLV1\", 0);\nglobal.set(\"Ocupacion_TLV1\", 0);\nglobal.set(\"Capacidad_TLV1\", 1);\nglobal.set(\"Pasillo_TLV1\", 1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "1ad5e59aa6aa52ed",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_TLV2",
        "func": "// Definir tipo de estación para TLV\nglobal.set(\"TipoEstacion_TLV\", 1);  // Transelevador\n\n// Estación de tipo TLV 2\nglobal.set(\"Estacion_TLV2\", 2);\n\n// Variables específicas de la estación TLV 2\nglobal.set(\"Estado_TLV2\", 0);\nglobal.set(\"Presencia_TLV2\", 0);\nglobal.set(\"Ocupacion_TLV2\", 0);\nglobal.set(\"Capacidad_TLV2\", 1);\nglobal.set(\"Pasillo_TLV2\", 9);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d44fbf9a2276cadd",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS",
        "func": "// Globales SROS\nglobal.set('awaitingResponse_SROS', false);\nglobal.set(\"TimeOutSimo_SROS\", 3000);\nglobal.set('tcpPortSimo_SROS', 3000);\n\n// SROS - Inicializar variables globales\nglobal.set(\"NumeroAlmacen_SROS\", \"20001\");  // Número de almacén (10 dígitos)\nglobal.set(\"OperacionesEncadenadas_SROS\", 1);  // Cantidad de rutas que se actualizan (4 dígitos)\n\n// Datos relativos a la ruta\nglobal.set(\"TipoEstacionOrigen_SROS\", 1);  // Tipo de estación origen de la ruta (3 dígitos)\nglobal.set(\"NumeroEstacionOrigen_SROS\", 1);  // Número de estación origen de la ruta (3 dígitos)\nglobal.set(\"TipoEstacionDestino_SROS\", 2);  // Tipo de estación destino de la ruta (3 dígitos)\nglobal.set(\"NumeroEstacionDestino_SROS\", 2);  // Número de estación destino de la ruta (3 dígitos)\nglobal.set(\"Estado_SROS\", 1);  // Estado de la ruta (3 dígitos)\nglobal.set(\"Ocupacion_SROS\", 100);  // Ocupación en la ruta (3 dígitos)\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "91c7f930af6eb602",
        "type": "link in",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "defVarSROS",
        "links": [
            "efc9a8a9c405e65c"
        ],
        "x": 455,
        "y": 580,
        "wires": [
            [
                "d44fbf9a2276cadd",
                "9c0190e79c14df99",
                "7fb73c9032df82fe",
                "6d629257dc683866",
                "b69078f83894acb4",
                "23f24dbe724c66ac",
                "488876b46086075c",
                "d7cbf9c88477d597"
            ]
        ]
    },
    {
        "id": "e27b67d5d9c7889b",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_Pasillos",
        "func": "\n// Definir tipo de estación para Pasillo\nglobal.set(\"TipoEstacion_Pasillo\", 0);  // Pasillo\n\n// Estaciones de tipo Pasillo del 1 al 12\nfor (let i = 1; i <= 12; i++) {\n    global.set(`Estacion_Pasillo${i}`, i);\n\n    // Variables específicas de cada estación Pasillo\n    global.set(`Estado_Pasillo${i}`, 1);\n    global.set(`Presencia_Pasillo${i}`, 1);\n    global.set(`Ocupacion_Pasillo${i}`, 0);\n    global.set(`Capacidad_Pasillo${i}`, 1);\n    global.set(`Pasillo_Pasillo${i}`, i);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "335edacc99ab3fc2",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_PTA",
        "func": "// Definir tipo de estación para PTA (ET - Estación de Tránsito)\nglobal.set(\"TipoEstacion_PTA\", 20);  // ET\n\n// Estación de tipo PTA1\nglobal.set(\"Estacion_PTA1\", 1);\n\n// Variables específicas para PTA1\nglobal.set(\"Estado_PTA1\", 1);\nglobal.set(\"Presencia_PTA1\", 1);\nglobal.set(\"Ocupacion_PTA1\", 0);\nglobal.set(\"Capacidad_PTA1\", 1);\nglobal.set(\"Pasillo_PTA1\", 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "1bd1af0f4613b779",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "SSTS_Rej1",
        "func": "// Definir tipo de estación para REJ (Puesto de Rechazo)\nglobal.set(\"TipoEstacion_REJ\", 7);  // REJ\n\n// Estación de tipo REJ1\nglobal.set(\"Estacion_REJ1\", 1);\n\n// Variables específicas para REJ1\nglobal.set(\"Estado_REJ1\", 1);\nglobal.set(\"Presencia_REJ1\", 1);\nglobal.set(\"Ocupacion_REJ1\", 0);\nglobal.set(\"Capacidad_REJ1\", 1);\nglobal.set(\"Pasillo_REJ1\", 0);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "aa3c7c6d9e62b4cd",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "name": "Start",
        "func": "let estadoActual = global.get('stateMachineStage_Gen') || '00_Reposo';\nlet initOn = global.get('Init_On') || false;\n\n// Verificamos si estamos en el estado 20_Wait y si Init_On es true\nif (estadoActual === 20 && initOn === true) {\n    msg.payload = {};  // Disparamos el flujo deseado\n    global.set('Init_On', false);  // Reseteamos Init_On para evitar múltiples disparos\n} else {\n   \n    msg = null;  // Si no estamos en el estado correcto o Init_On no es true, no hacemos nada\n}\n global.set('Init_On', false);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "51755368a608b8c7",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "bfffca06cd507a7e",
        "name": "100ms",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "aa3c7c6d9e62b4cd"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "ab7590359dce2d49",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_Gen",
        "func": "\n global.set(\"OperacionesEncadenadas_SIMO\",5); \n\n// Lista de estaciones\nconst estaciones = [\n    'PIE1', \n    'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n    'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n    'TLV1', 'TLV2',\n    'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n    'PIS1',\n    'REJ1'\n];\n\n// Inicializar las variables globales relacionadas con SIMO Event a false\nestaciones.forEach(estacion => {\n    global.set(`${estacion}SimoEvent`, false);  // Cada estación tiene una variable para el evento SIMO\n    node.warn(`Variable ${estacion}SimoEvent inicializada en false`);\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d80274bb761d1e9f",
        "type": "link in",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "defVarSSTS",
        "links": [
            "efc9a8a9c405e65c"
        ],
        "x": 95,
        "y": 660,
        "wires": [
            [
                "ab7590359dce2d49",
                "3712ce954216e35e",
                "3f386e1e6ba4ee88",
                "55179f34d19f3113",
                "4ca89e3ce2b6adac",
                "eb5e770b96305feb",
                "042ad5ba7b142f1f",
                "c8a083b9ca100b21",
                "5f5b6c7bfb124336",
                "8bedbfb3691d280a",
                "e0c2c9ca9bee04de",
                "a79c9e7dbf3d24bc"
            ]
        ]
    },
    {
        "id": "3712ce954216e35e",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PIE1",
        "func": "// Definir las variables globales para PIE1\n\n// Obtener la variable dinámica de operaciones encadenadas para PIE1\nglobal.set(\"OperacionesEncadenadas_SIMO_PIE1\", 5); // Dinámico: indica qué partes enviar para PIE1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PIE1\nglobal.set(\"NumeroAlmacen_SIMO_PIE1\", 20001);      // Número de Almacén para PIE1\nglobal.set(\"Equipamiento_SIMO_PIE1\", \"PIE01\");     // Equipamiento específico para PIE1 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el evento en PIE1\nglobal.set(\"CantidadEventos_SIMO_Event_PIE1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_PIE1\", 3);  // Tipo de estación PIE1\nglobal.set(\"NumeroEstacion_SIMO_Event_PIE1\", 1); // Número de estación PIE1\nglobal.set(\"NumeroMovimiento_SIMO_Event_PIE1\", 0); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_PIE1\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_PIE1\", \"0000065536\");  // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_PIE1\", \"12345\");    // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_PIE1\", 220);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_PIE1\", 1);\nglobal.set(\"TipoAltura_SIMO_Event_PIE1\", 1);\nglobal.set(\"XLogica_SIMO_Event_PIE1\", 0);      // Coordenada X lógica para PIE1\nglobal.set(\"YLogica_SIMO_Event_PIE1\", 0);      // Coordenada Y lógica para PIE1\nglobal.set(\"XLocal_SIMO_Event_PIE1\", 0);        // Coordenada X local para PIE1\nglobal.set(\"YLocal_SIMO_Event_PIE1\", 0);       // Coordenada Y local para PIE1\nglobal.set(\"Lado_SIMO_Event_PIE1\", 0);          // Lado para PIE1\nglobal.set(\"Profundidad_SIMO_Event_PIE1\", 0);   // Profundidad para PIE1\nglobal.set(\"Pasillo_SIMO_Event_PIE1\", 0);       // Pasillo para PIE1\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_PIE1`, 0);  // Variables auxiliares para el evento en PIE1\n}\n\n// Definir las variables y constantes para la búsqueda en PIE1\nglobal.set(\"CantidadMovimientos_SIMO_Busq_PIE1\", 0);\nglobal.set(\"TipoEstacion_SIMO_Busq_PIE1\", 3);   // Tipo de estación para PIE1\nglobal.set(\"NumeroEstacion_SIMO_Busq_PIE1\", 1); // Número de estación para la búsqueda en PIE1\nglobal.set(\"NumeroMovimiento_SIMO_Busq_PIE1\", 54321); // Número de movimiento para la búsqueda en PIE1\nglobal.set(\"XActual_SIMO_Busq_PIE1\", 1);       // Coordenada X actual para la búsqueda en PIE1\nglobal.set(\"YActual_SIMO_Busq_PIE1\", 1);       // Coordenada Y actual para la búsqueda en PIE1\nglobal.set(\"Lado_SIMO_Busq_PIE1\", 0);           // Lado para la búsqueda en PIE1\nglobal.set(\"Pasillo_SIMO_Busq_PIE1\", 0);        // Pasillo para la búsqueda en PIE1\nglobal.set(\"Status_SIMO_Busq_PIE1\", \"S\");         // Estado actual para la búsqueda en PIE1\nglobal.set(\"Ocupacion_SIMO_Busq_PIE1\", 0);      // Ocupación para la búsqueda en PIE1\nglobal.set(\"Capacidad_SIMO_Busq_PIE1\", 1);      // Capacidad para la búsqueda en PIE1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_PIE1`, 0);  // Variables auxiliares para la búsqueda en PIE1\n}\n\n// Definir las variables y constantes para el fin de movimiento en PIE1\nglobal.set(\"CantidadFinesMov_SIMO_PIE1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_PIE1\", 3);    // Tipo de estación para el fin de movimiento en PIE1\nglobal.set(\"NumeroEstacion_SIMO_Fin_PIE1\", 1);  // Número de estación para el fin de movimiento en PIE1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_PIE1\", 98765); // Número de movimiento para el fin de movimiento en PIE1\nglobal.set(\"UMA_SIMO_Fin_PIE1\", \"UMA98765\");    // UMA (Unidad de manejo) para PIE1\nglobal.set(\"CodigoError_SIMO_Fin_PIE1\", 0);     // Código de error para el fin de movimiento en PIE1\nglobal.set(\"Auxiliar_SIMO_Fin_PIE1\", 0);        // Auxiliar para el fin de movimiento en PIE1\nglobal.set(\"TipoContenedor_SIMO_Fin_PIE1\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_PIE1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_PIE1\", 10);        // Coordenada X lógica para el fin de movimiento en PIE1\nglobal.set(\"YLogica_SIMO_Fin_PIE1\", 20);        // Coordenada Y lógica para el fin de movimiento en PIE1\nglobal.set(\"XLocal_SIMO_Fin_PIE1\", 5);          // Coordenada X local para el fin de movimiento en PIE1\nglobal.set(\"YLocal_SIMO_Fin_PIE1\", 15);         // Coordenada Y local para el fin de movimiento en PIE1\nglobal.set(\"Lado_SIMO_Fin_PIE1\", 1);            // Lado para el fin de movimiento en PIE1\nglobal.set(\"Profundidad_SIMO_Fin_PIE1\", 3);     // Profundidad para el fin de movimiento en PIE1\nglobal.set(\"Pasillo_SIMO_Fin_PIE1\", 0);         // Pasillo para el fin de movimiento en PIE1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIE1`, 0);    // Variables auxiliares para el fin de movimiento en PIE1\n}\n\nnode.warn(\"Variables de PIE1 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "3f386e1e6ba4ee88",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PEPs",
        "func": "// Definir tipo de estación para PEP\nglobal.set(\"TipoEstacion_SIMO_PEP\", 9);  // Puesto de Entrada al Pasillo (PEP)\n\n// Estaciones de tipo PEP del 1 al 12\nfor (let i = 1; i <= 12; i++) {\n    // Obtener la variable dinámica de operaciones encadenadas para cada PEP\n    global.set(`OperacionesEncadenadas_SIMO_PEP${i}`, 5); // Dinámico: indica qué partes enviar para PEP\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para cada PEP\n    global.set(`NumeroAlmacen_SIMO_PEP${i}`, 20001);      // Número de Almacén para PEP\n    global.set(`Equipamiento_SIMO_PEP${i}`, `PEP${i}`);   // Equipamiento específico para PEP (rellenar con espacios a la izquierda si es necesario)\n\n    // Definir las variables y constantes para el evento en cada PEP\n    global.set(`CantidadEventos_SIMO_Event_PEP${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Event_PEP${i}`, 9);  // Tipo de estación PEP\n    global.set(`NumeroEstacion_SIMO_Event_PEP${i}`, i); // Número de estación PEP\n    global.set(`NumeroMovimiento_SIMO_Event_PEP${i}`, 10000 + i); // Número de movimiento para el evento\n    global.set(`TipoEvento_SIMO_Event_PEP${i}`, 1);    // Tipo de evento\n    global.set(`Flags_SIMO_Event_PEP${i}`, 0);         // Flags para el evento\n    global.set(`Datos_SIMO_Event_PEP${i}`, `Datos del evento PEP${i}`); // Datos del evento (rellenar con espacios si es necesario)\n    global.set(`Peso_SIMO_Event_PEP${i}`, 100 + i);        // Peso para el evento\n    global.set(`TipoContenedor_SIMO_Event_PEP${i}`, 2);\n    global.set(`TipoAltura_SIMO_Event_PEP${i}`, 1);\n    global.set(`XLogica_SIMO_Event_PEP${i}`, 10 + i);      // Coordenada X lógica para PEP\n    global.set(`YLogica_SIMO_Event_PEP${i}`, 20 + i);      // Coordenada Y lógica para PEP\n    global.set(`XLocal_SIMO_Event_PEP${i}`, 5 + i);        // Coordenada X local para PEP\n    global.set(`YLocal_SIMO_Event_PEP${i}`, 15 + i);       // Coordenada Y local para PEP\n    global.set(`Lado_SIMO_Event_PEP${i}`, 1);              // Lado para PEP\n    global.set(`Profundidad_SIMO_Event_PEP${i}`, 3);       // Profundidad para PEP\n    global.set(`Pasillo_SIMO_Event_PEP${i}`, i);           // Pasillo para PEP\n\n    // Variables auxiliares para el evento en PEP\n    for (let j = 1; j <= 10; j++) {\n        global.set(`Aux0${j}_SIMO_Event_PEP${i}`, 0);\n    }\n\n    // **Definir las variables y constantes para la búsqueda en cada PEP** basadas en la imagen proporcionada\n    global.set(`CantidadMovimientos_SIMO_Busq_PEP${i}`, 1);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PEP${i}`, 54320 + i); // Número de movimiento\n    global.set(`TipoEstacion_SIMO_Busq_PEP${i}`, 9);         // Tipo de estación para PEP\n    global.set(`NumeroEstacion_SIMO_Busq_PEP${i}`, i);       // Número de estación para la búsqueda en PEP\n    global.set(`XActual_SIMO_Busq_PEP${i}`, 10 + i);         // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PEP${i}`, 20 + i);         // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PEP${i}`, 1);                 // Lado\n    global.set(`Pasillo_SIMO_Busq_PEP${i}`, i);              // Pasillo\n    global.set(`Status_SIMO_Busq_PEP${i}`, 1);               // Estado\n    global.set(`Ocupacion_SIMO_Busq_PEP${i}`, 0);            // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PEP${i}`, 1);            // Capacidad\n\n    // Variables auxiliares para la búsqueda en PEP\n    for (let j = 1; j <= 8; j++) {  // Basado en la imagen, las auxiliares para búsqueda deben ser 8\n        global.set(`Aux0${j}_SIMO_Busq_PEP${i}`, 0);\n    }\n\n    // **Definir las variables y constantes para el fin de movimiento en cada PEP** con 8 auxiliares\n    global.set(`CantidadFinesMov_SIMO_PEP${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Fin_PEP${i}`, 9);          // Tipo de estación para el fin de movimiento en PEP\n    global.set(`NumeroEstacion_SIMO_Fin_PEP${i}`, i);        // Número de estación para el fin de movimiento en PEP\n    global.set(`NumeroMovimiento_SIMO_Fin_PEP${i}`, 98760 + i); // Número de movimiento para el fin de movimiento en PEP\n    global.set(`UMA_SIMO_Fin_PEP${i}`, `UMA98760${i}`);      // UMA (Unidad de manejo) para PEP\n    global.set(`CodigoError_SIMO_Fin_PEP${i}`, 0);           // Código de error para el fin de movimiento en PEP\n    global.set(`Auxiliar_SIMO_Fin_PEP${i}`, 0);              // Auxiliar para el fin de movimiento en PEP\n    global.set(`TipoContenedor_SIMO_Fin_PEP${i}`, 2);\n    global.set(`TipoAltura_SIMO_Fin_PEP${i}`, 1);\n    global.set(`XLogica_SIMO_Fin_PEP${i}`, 10 + i);          // Coordenada X lógica\n    global.set(`YLogica_SIMO_Fin_PEP${i}`, 20 + i);          // Coordenada Y lógica\n    global.set(`XLocal_SIMO_Fin_PEP${i}`, 5 + i);            // Coordenada X local\n    global.set(`YLocal_SIMO_Fin_PEP${i}`, 15 + i);           // Coordenada Y local\n    global.set(`Lado_SIMO_Fin_PEP${i}`, 1);                  // Lado\n    global.set(`Profundidad_SIMO_Fin_PEP${i}`, 3);           // Profundidad\n    global.set(`Pasillo_SIMO_Fin_PEP${i}`, i);               // Pasillo\n\n    // Variables auxiliares para el fin de movimiento en PEP\n    for (let j = 1; j <= 8; j++) {  // Cambiado a 8 auxiliares para el fin de movimiento\n        global.set(`Aux0${j}_SIMO_Fin_PEP${i}`, 0);\n    }\n}\n\nnode.warn(\"Variables para PEP del 1 al 12 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "55179f34d19f3113",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PSPs",
        "func": "// Definir tipo de estación para PSP\nglobal.set(\"TipoEstacion_SIMO_PSP\", 10);  // Puesto de Salida al Pasillo (PSP)\n\n// Estaciones de tipo PSP del 1 al 12\nfor (let i = 1; i <= 12; i++) {\n    // Obtener la variable dinámica de operaciones encadenadas para cada PSP\n    global.set(`OperacionesEncadenadas_SIMO_PSP${i}`, 5); // Dinámico: indica qué partes enviar para PSP\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para cada PSP\n    global.set(`NumeroAlmacen_SIMO_PSP${i}`, 20001);      // Número de Almacén para PSP\n    global.set(`Equipamiento_SIMO_PSP${i}`, `PSP${i}`);   // Equipamiento específico para PSP (rellenar con espacios a la izquierda si es necesario)\n\n    // Definir las variables y constantes para el evento en cada PSP\n    global.set(`CantidadEventos_SIMO_Event_PSP${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Event_PSP${i}`, 10);  // Tipo de estación PSP\n    global.set(`NumeroEstacion_SIMO_Event_PSP${i}`, i); // Número de estación PSP\n    global.set(`NumeroMovimiento_SIMO_Event_PSP${i}`, 10000 + i); // Número de movimiento para el evento\n    global.set(`TipoEvento_SIMO_Event_PSP${i}`, 1);    // Tipo de evento\n    global.set(`Flags_SIMO_Event_PSP${i}`, 0);         // Flags para el evento\n    global.set(`Datos_SIMO_Event_PSP${i}`, `Datos del evento PSP${i}`); // Datos del evento (rellenar con espacios si es necesario)\n    global.set(`Peso_SIMO_Event_PSP${i}`, 100 + i);        // Peso para el evento\n    global.set(`TipoContenedor_SIMO_Event_PSP${i}`, 2);\n    global.set(`TipoAltura_SIMO_Event_PSP${i}`, 1);\n    global.set(`XLogica_SIMO_Event_PSP${i}`, 10 + i);      // Coordenada X lógica para PSP\n    global.set(`YLogica_SIMO_Event_PSP${i}`, 20 + i);      // Coordenada Y lógica para PSP\n    global.set(`XLocal_SIMO_Event_PSP${i}`, 5 + i);        // Coordenada X local para PSP\n    global.set(`YLocal_SIMO_Event_PSP${i}`, 15 + i);       // Coordenada Y local para PSP\n    global.set(`Lado_SIMO_Event_PSP${i}`, 1);              // Lado para PSP\n    global.set(`Profundidad_SIMO_Event_PSP${i}`, 3);       // Profundidad para PSP\n    global.set(`Pasillo_SIMO_Event_PSP${i}`, i);           // Pasillo para PSP\n\n    // Variables auxiliares para el evento en PSP\n    for (let j = 1; j <= 10; j++) {\n        global.set(`Aux0${j}_SIMO_Event_PSP${i}`, 0);\n    }\n\n    // **Definir las variables y constantes para la búsqueda en cada PSP** basadas en la imagen proporcionada\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP${i}`, 1);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP${i}`, 54320 + i); // Número de movimiento\n    global.set(`TipoEstacion_SIMO_Busq_PSP${i}`, 10);         // Tipo de estación para PSP\n    global.set(`NumeroEstacion_SIMO_Busq_PSP${i}`, i);        // Número de estación para la búsqueda en PSP\n    global.set(`XActual_SIMO_Busq_PSP${i}`, 10 + i);          // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP${i}`, 20 + i);          // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP${i}`, 1);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP${i}`, i);               // Pasillo\n    global.set(`Status_SIMO_Busq_PSP${i}`, 1);                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP${i}`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP${i}`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP\n    for (let j = 1; j <= 8; j++) {  // Basado en la imagen, las auxiliares para búsqueda deben ser 8\n        global.set(`Aux0${j}_SIMO_Busq_PSP${i}`, 0);\n    }\n\n    // **Definir las variables y constantes para el fin de movimiento en cada PSP** con 8 auxiliares\n    global.set(`CantidadFinesMov_SIMO_PSP${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Fin_PSP${i}`, 10);          // Tipo de estación para el fin de movimiento en PSP\n    global.set(`NumeroEstacion_SIMO_Fin_PSP${i}`, i);         // Número de estación para el fin de movimiento en PSP\n    global.set(`NumeroMovimiento_SIMO_Fin_PSP${i}`, 98760 + i); // Número de movimiento para el fin de movimiento en PSP\n    global.set(`UMA_SIMO_Fin_PSP${i}`, `UMA98760${i}`);       // UMA (Unidad de manejo) para PSP\n    global.set(`CodigoError_SIMO_Fin_PSP${i}`, 0);            // Código de error para el fin de movimiento en PSP\n    global.set(`Auxiliar_SIMO_Fin_PSP${i}`, 0);               // Auxiliar para el fin de movimiento en PSP\n    global.set(`TipoContenedor_SIMO_Fin_PSP${i}`, 2);\n    global.set(`TipoAltura_SIMO_Fin_PSP${i}`, 1);\n    global.set(`XLogica_SIMO_Fin_PSP${i}`, 10 + i);           // Coordenada X lógica\n    global.set(`YLogica_SIMO_Fin_PSP${i}`, 20 + i);           // Coordenada Y lógica\n    global.set(`XLocal_SIMO_Fin_PSP${i}`, 5 + i);             // Coordenada X local\n    global.set(`YLocal_SIMO_Fin_PSP${i}`, 15 + i);            // Coordenada Y local\n    global.set(`Lado_SIMO_Fin_PSP${i}`, 1);                   // Lado\n    global.set(`Profundidad_SIMO_Fin_PSP${i}`, 3);            // Profundidad\n    global.set(`Pasillo_SIMO_Fin_PSP${i}`, i);                // Pasillo\n\n    // Variables auxiliares para el fin de movimiento en PSP\n    for (let j = 1; j <= 8; j++) {  // Cambiado a 8 auxiliares para el fin de movimiento\n        global.set(`Aux0${j}_SIMO_Fin_PSP${i}`, 0);\n    }\n}\n\nnode.warn(\"Variables para PSP del 1 al 12 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "4ca89e3ce2b6adac",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PIS1",
        "func": "// Definir las variables globales para PIS1\n\n// Obtener la variable dinámica de operaciones encadenadas para PIS1\nglobal.set(\"OperacionesEncadenadas_SIMO_PIS1\", 5); // Dinámico: indica qué partes enviar para PIS1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PIS1\nglobal.set(\"NumeroAlmacen_SIMO_PIS1\", 20001);      // Número de Almacén para PIS1\nglobal.set(\"Equipamiento_SIMO_PIS1\", \"PIS01\");     // Equipamiento específico para PIS1 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el evento en PIS1\nglobal.set(\"CantidadEventos_SIMO_Event_PIS1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_PIS1\", 4);  // Tipo de estación PIS1\nglobal.set(\"NumeroEstacion_SIMO_Event_PIS1\", 1); // Número de estación PIS1\nglobal.set(\"NumeroMovimiento_SIMO_Event_PIS1\", 0); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_PIS1\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_PIS1\", \"0000065536\");  // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_PIS1\", \"4486\");    // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_PIS1\", 100);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_PIS1\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_PIS1\", 1);\nglobal.set(\"XLogica_SIMO_Event_PIS1\", 10);      // Coordenada X lógica para PIS1\nglobal.set(\"YLogica_SIMO_Event_PIS1\", 20);      // Coordenada Y lógica para PIS1\nglobal.set(\"XLocal_SIMO_Event_PIS1\", 5);        // Coordenada X local para PIS1\nglobal.set(\"YLocal_SIMO_Event_PIS1\", 15);       // Coordenada Y local para PIS1\nglobal.set(\"Lado_SIMO_Event_PIS1\", 1);          // Lado para PIS1\nglobal.set(\"Profundidad_SIMO_Event_PIS1\", 3);   // Profundidad para PIS1\nglobal.set(\"Pasillo_SIMO_Event_PIS1\", 0);       // Pasillo para PIS1\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_PIS1`, 0);  // Variables auxiliares para el evento en PIS1\n}\n\n// Definir las variables y constantes para la búsqueda en PIS1\nglobal.set(\"CantidadMovimientos_SIMO_Busq_PIS1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_PIS1\", 4);   // Tipo de estación para PIS1\nglobal.set(\"NumeroEstacion_SIMO_Busq_PIS1\", 1); // Número de estación para la búsqueda en PIS1\nglobal.set(\"NumeroMovimiento_SIMO_Busq_PIS1\", 54321); // Número de movimiento para la búsqueda en PIS1\nglobal.set(\"XActual_SIMO_Busq_PIS1\", 10);       // Coordenada X actual para la búsqueda en PIS1\nglobal.set(\"YActual_SIMO_Busq_PIS1\", 20);       // Coordenada Y actual para la búsqueda en PIS1\nglobal.set(\"Lado_SIMO_Busq_PIS1\", 1);           // Lado para la búsqueda en PIS1\nglobal.set(\"Pasillo_SIMO_Busq_PIS1\", 0);        // Pasillo para la búsqueda en PIS1\nglobal.set(\"Status_SIMO_Busq_PIS1\", 1);         // Estado actual para la búsqueda en PIS1\nglobal.set(\"Ocupacion_SIMO_Busq_PIS1\", 0);      // Ocupación para la búsqueda en PIS1\nglobal.set(\"Capacidad_SIMO_Busq_PIS1\", 1);      // Capacidad para la búsqueda en PIS1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_PIS1`, 0);  // Variables auxiliares para la búsqueda en PIS1\n}\n\n// Definir las variables y constantes para el fin de movimiento en PIS1\nglobal.set(\"CantidadFinesMov_SIMO_PIS1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_PIS1\", 4);    // Tipo de estación para el fin de movimiento en PIS1\nglobal.set(\"NumeroEstacion_SIMO_Fin_PIS1\", 1);  // Número de estación para el fin de movimiento en PIS1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_PIS1\", 98765); // Número de movimiento para el fin de movimiento en PIS1\nglobal.set(\"UMA_SIMO_Fin_PIS1\", \"UMA98765\");    // UMA (Unidad de manejo) para PIS1\nglobal.set(\"CodigoError_SIMO_Fin_PIS1\", 0);     // Código de error para el fin de movimiento en PIS1\nglobal.set(\"Auxiliar_SIMO_Fin_PIS1\", 0);        // Auxiliar para el fin de movimiento en PIS1\nglobal.set(\"TipoContenedor_SIMO_Fin_PIS1\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_PIS1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_PIS1\", 10);        // Coordenada X lógica para el fin de movimiento en PIS1\nglobal.set(\"YLogica_SIMO_Fin_PIS1\", 20);        // Coordenada Y lógica para el fin de movimiento en PIS1\nglobal.set(\"XLocal_SIMO_Fin_PIS1\", 5);          // Coordenada X local para el fin de movimiento en PIS1\nglobal.set(\"YLocal_SIMO_Fin_PIS1\", 15);         // Coordenada Y local para el fin de movimiento en PIS1\nglobal.set(\"Lado_SIMO_Fin_PIS1\", 1);            // Lado para el fin de movimiento en PIS1\nglobal.set(\"Profundidad_SIMO_Fin_PIS1\", 3);     // Profundidad para el fin de movimiento en PIS1\nglobal.set(\"Pasillo_SIMO_Fin_PIS1\", 0);         // Pasillo para el fin de movimiento en PIS1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIS1`, 0);    // Variables auxiliares para el fin de movimiento en PIS1\n}\n\nnode.warn(\"Variables de PIS1 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "eb5e770b96305feb",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PIS2",
        "func": "// Definir las variables globales para PIS2\n\n// Obtener la variable dinámica de operaciones encadenadas para PIS2\nglobal.set(\"OperacionesEncadenadas_SIMO_PIS2\", 5); // Dinámico: indica qué partes enviar para PIS2\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PIS2\nglobal.set(\"NumeroAlmacen_SIMO_PIS2\", 20001);      // Número de Almacén para PIS2\nglobal.set(\"Equipamiento_SIMO_PIS2\", \"PIS02\");     // Equipamiento específico para PIS2 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el evento en PIS2\nglobal.set(\"CantidadEventos_SIMO_Event_PIS2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_PIS2\", 4);  // Tipo de estación PIS2\nglobal.set(\"NumeroEstacion_SIMO_Event_PIS2\", 2); // Número de estación PIS2\nglobal.set(\"NumeroMovimiento_SIMO_Event_PIS2\", 0); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_PIS2\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_PIS2\", \"0000065536\");  // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_PIS2\", \"4486\");    // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_PIS2\", 100);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_PIS2\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_PIS2\", 1);\nglobal.set(\"XLogica_SIMO_Event_PIS2\", 10);      // Coordenada X lógica para PIS2\nglobal.set(\"YLogica_SIMO_Event_PIS2\", 20);      // Coordenada Y lógica para PIS2\nglobal.set(\"XLocal_SIMO_Event_PIS2\", 5);        // Coordenada X local para PIS2\nglobal.set(\"YLocal_SIMO_Event_PIS2\", 15);       // Coordenada Y local para PIS2\nglobal.set(\"Lado_SIMO_Event_PIS2\", 1);          // Lado para PIS2\nglobal.set(\"Profundidad_SIMO_Event_PIS2\", 3);   // Profundidad para PIS2\nglobal.set(\"Pasillo_SIMO_Event_PIS2\", 0);       // Pasillo para PIS2\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_PIS2`, 0);  // Variables auxiliares para el evento en PIS2\n}\n\n// Definir las variables y constantes para la búsqueda en PIS2\nglobal.set(\"CantidadMovimientos_SIMO_Busq_PIS2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_PIS2\", 4);   // Tipo de estación para PIS2\nglobal.set(\"NumeroEstacion_SIMO_Busq_PIS2\", 2); // Número de estación para la búsqueda en PIS2\nglobal.set(\"NumeroMovimiento_SIMO_Busq_PIS2\", 54321); // Número de movimiento para la búsqueda en PIS2\nglobal.set(\"XActual_SIMO_Busq_PIS2\", 10);       // Coordenada X actual para la búsqueda en PIS2\nglobal.set(\"YActual_SIMO_Busq_PIS2\", 20);       // Coordenada Y actual para la búsqueda en PIS2\nglobal.set(\"Lado_SIMO_Busq_PIS2\", 1);           // Lado para la búsqueda en PIS2\nglobal.set(\"Pasillo_SIMO_Busq_PIS2\", 0);        // Pasillo para la búsqueda en PIS2\nglobal.set(\"Status_SIMO_Busq_PIS2\", 1);         // Estado actual para la búsqueda en PIS2\nglobal.set(\"Ocupacion_SIMO_Busq_PIS2\", 0);      // Ocupación para la búsqueda en PIS2\nglobal.set(\"Capacidad_SIMO_Busq_PIS2\", 1);      // Capacidad para la búsqueda en PIS2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_PIS2`, 0);  // Variables auxiliares para la búsqueda en PIS2\n}\n\n// Definir las variables y constantes para el fin de movimiento en PIS2\nglobal.set(\"CantidadFinesMov_SIMO_PIS2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_PIS2\", 4);    // Tipo de estación para el fin de movimiento en PIS2\nglobal.set(\"NumeroEstacion_SIMO_Fin_PIS2\", 2);  // Número de estación para el fin de movimiento en PIS2\nglobal.set(\"NumeroMovimiento_SIMO_Fin_PIS2\", 98765); // Número de movimiento para el fin de movimiento en PIS2\nglobal.set(\"UMA_SIMO_Fin_PIS2\", \"UMA98765\");    // UMA (Unidad de manejo) para PIS2\nglobal.set(\"CodigoError_SIMO_Fin_PIS2\", 0);     // Código de error para el fin de movimiento en PIS2\nglobal.set(\"Auxiliar_SIMO_Fin_PIS2\", 0);        // Auxiliar para el fin de movimiento en PIS2\nglobal.set(\"TipoContenedor_SIMO_Fin_PIS2\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_PIS2\", 1);\nglobal.set(\"XLogica_SIMO_Fin_PIS2\", 10);        // Coordenada X lógica para el fin de movimiento en PIS2\nglobal.set(\"YLogica_SIMO_Fin_PIS2\", 20);        // Coordenada Y lógica para el fin de movimiento en PIS2\nglobal.set(\"XLocal_SIMO_Fin_PIS2\", 5);          // Coordenada X local para el fin de movimiento en PIS2\nglobal.set(\"YLocal_SIMO_Fin_PIS2\", 15);         // Coordenada Y local para el fin de movimiento en PIS2\nglobal.set(\"Lado_SIMO_Fin_PIS2\", 1);            // Lado para el fin de movimiento en PIS2\nglobal.set(\"Profundidad_SIMO_Fin_PIS2\", 3);     // Profundidad para el fin de movimiento en PIS2\nglobal.set(\"Pasillo_SIMO_Fin_PIS2\", 0);         // Pasillo para el fin de movimiento en PIS2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIS2`, 0);    // Variables auxiliares para el fin de movimiento en PIS2\n}\n\nnode.warn(\"Variables de PIS2 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "042ad5ba7b142f1f",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PIS3",
        "func": "// Definir las variables globales para PIS3\n\n// Obtener la variable dinámica de operaciones encadenadas para PIS3\nglobal.set(\"OperacionesEncadenadas_SIMO_PIS3\", 5); // Dinámico: indica qué partes enviar para PIS3\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PIS3\nglobal.set(\"NumeroAlmacen_SIMO_PIS3\", 20001);      // Número de Almacén para PIS3\nglobal.set(\"Equipamiento_SIMO_PIS3\", \"PIS01\");     // Equipamiento específico para PIS3 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el evento en PIS3\nglobal.set(\"CantidadEventos_SIMO_Event_PIS3\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_PIS3\", 4);  // Tipo de estación PIS3\nglobal.set(\"NumeroEstacion_SIMO_Event_PIS3\", 3); // Número de estación PIS3\nglobal.set(\"NumeroMovimiento_SIMO_Event_PIS3\", 0); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_PIS3\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_PIS3\", \"0000065536\");  // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_PIS3\", \"4486\");    // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_PIS3\", 100);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_PIS3\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_PIS3\", 1);\nglobal.set(\"XLogica_SIMO_Event_PIS3\", 10);      // Coordenada X lógica para PIS3\nglobal.set(\"YLogica_SIMO_Event_PIS3\", 20);      // Coordenada Y lógica para PIS3\nglobal.set(\"XLocal_SIMO_Event_PIS3\", 5);        // Coordenada X local para PIS3\nglobal.set(\"YLocal_SIMO_Event_PIS3\", 15);       // Coordenada Y local para PIS3\nglobal.set(\"Lado_SIMO_Event_PIS3\", 1);          // Lado para PIS3\nglobal.set(\"Profundidad_SIMO_Event_PIS3\", 3);   // Profundidad para PIS3\nglobal.set(\"Pasillo_SIMO_Event_PIS3\", 0);       // Pasillo para PIS3\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_PIS3`, 0);  // Variables auxiliares para el evento en PIS3\n}\n\n// Definir las variables y constantes para la búsqueda en PIS3\nglobal.set(\"CantidadMovimientos_SIMO_Busq_PIS3\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_PIS3\", 4);   // Tipo de estación para PIS3\nglobal.set(\"NumeroEstacion_SIMO_Busq_PIS3\", 3); // Número de estación para la búsqueda en PIS3\nglobal.set(\"NumeroMovimiento_SIMO_Busq_PIS3\", 54321); // Número de movimiento para la búsqueda en PIS3\nglobal.set(\"XActual_SIMO_Busq_PIS3\", 10);       // Coordenada X actual para la búsqueda en PIS3\nglobal.set(\"YActual_SIMO_Busq_PIS3\", 20);       // Coordenada Y actual para la búsqueda en PIS3\nglobal.set(\"Lado_SIMO_Busq_PIS3\", 1);           // Lado para la búsqueda en PIS3\nglobal.set(\"Pasillo_SIMO_Busq_PIS3\", 0);        // Pasillo para la búsqueda en PIS3\nglobal.set(\"Status_SIMO_Busq_PIS3\", 1);         // Estado actual para la búsqueda en PIS3\nglobal.set(\"Ocupacion_SIMO_Busq_PIS3\", 0);      // Ocupación para la búsqueda en PIS3\nglobal.set(\"Capacidad_SIMO_Busq_PIS3\", 1);      // Capacidad para la búsqueda en PIS3\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_PIS3`, 0);  // Variables auxiliares para la búsqueda en PIS3\n}\n\n// Definir las variables y constantes para el fin de movimiento en PIS3\nglobal.set(\"CantidadFinesMov_SIMO_PIS3\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_PIS3\", 4);    // Tipo de estación para el fin de movimiento en PIS3\nglobal.set(\"NumeroEstacion_SIMO_Fin_PIS3\", 3);  // Número de estación para el fin de movimiento en PIS3\nglobal.set(\"NumeroMovimiento_SIMO_Fin_PIS3\", 98765); // Número de movimiento para el fin de movimiento en PIS3\nglobal.set(\"UMA_SIMO_Fin_PIS3\", \"UMA98765\");    // UMA (Unidad de manejo) para PIS3\nglobal.set(\"CodigoError_SIMO_Fin_PIS3\", 0);     // Código de error para el fin de movimiento en PIS3\nglobal.set(\"Auxiliar_SIMO_Fin_PIS3\", 0);        // Auxiliar para el fin de movimiento en PIS3\nglobal.set(\"TipoContenedor_SIMO_Fin_PIS3\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_PIS3\", 1);\nglobal.set(\"XLogica_SIMO_Fin_PIS3\", 10);        // Coordenada X lógica para el fin de movimiento en PIS3\nglobal.set(\"YLogica_SIMO_Fin_PIS3\", 20);        // Coordenada Y lógica para el fin de movimiento en PIS3\nglobal.set(\"XLocal_SIMO_Fin_PIS3\", 5);          // Coordenada X local para el fin de movimiento en PIS3\nglobal.set(\"YLocal_SIMO_Fin_PIS3\", 15);         // Coordenada Y local para el fin de movimiento en PIS3\nglobal.set(\"Lado_SIMO_Fin_PIS3\", 1);            // Lado para el fin de movimiento en PIS3\nglobal.set(\"Profundidad_SIMO_Fin_PIS3\", 3);     // Profundidad para el fin de movimiento en PIS3\nglobal.set(\"Pasillo_SIMO_Fin_PIS3\", 0);         // Pasillo para el fin de movimiento en PIS3\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIS3`, 0);    // Variables auxiliares para el fin de movimiento en PIS3\n}\n\nnode.warn(\"Variables de PIS3 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "c8a083b9ca100b21",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_TLV1",
        "func": "// Definir las variables globales para TLV1\n\n// Obtener la variable dinámica de operaciones encadenadas para TLV1\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV1\", 4); // Dinámico: indica qué partes enviar para TLV1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\nglobal.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\nglobal.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el evento en TLV1\nglobal.set(\"CantidadEventos_SIMO_Event_TLV1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_TLV1\", 5);  // Tipo de estación TLV1\nglobal.set(\"NumeroEstacion_SIMO_Event_TLV1\", 1); // Número de estación TLV1\nglobal.set(\"NumeroMovimiento_SIMO_Event_TLV1\", 0); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_TLV1\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_TLV1\", \"0000065536\");  // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_TLV1\", \"4486\");    // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_TLV1\", 100);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_TLV1\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_TLV1\", 1);\nglobal.set(\"XLogica_SIMO_Event_TLV1\", 10);      // Coordenada X lógica para TLV1\nglobal.set(\"YLogica_SIMO_Event_TLV1\", 20);      // Coordenada Y lógica para TLV1\nglobal.set(\"XLocal_SIMO_Event_TLV1\", 5);        // Coordenada X local para TLV1\nglobal.set(\"YLocal_SIMO_Event_TLV1\", 15);       // Coordenada Y local para TLV1\nglobal.set(\"Lado_SIMO_Event_TLV1\", 1);          // Lado para TLV1\nglobal.set(\"Profundidad_SIMO_Event_TLV1\", 3);   // Profundidad para TLV1\nglobal.set(\"Pasillo_SIMO_Event_TLV1\", 0);       // Pasillo para TLV1\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_TLV1`, 0);  // Variables auxiliares para el evento en TLV1\n}\n\n// Definir las variables y constantes para la búsqueda en TLV1\nglobal.set(\"CantidadMovimientos_SIMO_Busq_TLV1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_TLV1\", 5);   // Tipo de estación para TLV1\nglobal.set(\"NumeroEstacion_SIMO_Busq_TLV1\", 1); // Número de estación para la búsqueda en TLV1\nglobal.set(\"NumeroMovimiento_SIMO_Busq_TLV1\", 54321); // Número de movimiento para la búsqueda en TLV1\nglobal.set(\"XActual_SIMO_Busq_TLV1\", 10);       // Coordenada X actual para la búsqueda en TLV1\nglobal.set(\"YActual_SIMO_Busq_TLV1\", 20);       // Coordenada Y actual para la búsqueda en TLV1\nglobal.set(\"Lado_SIMO_Busq_TLV1\", 1);           // Lado para la búsqueda en TLV1\nglobal.set(\"Pasillo_SIMO_Busq_TLV1\", 0);        // Pasillo para la búsqueda en TLV1\nglobal.set(\"Status_SIMO_Busq_TLV1\", 1);         // Estado actual para la búsqueda en TLV1\nglobal.set(\"Ocupacion_SIMO_Busq_TLV1\", 0);      // Ocupación para la búsqueda en TLV1\nglobal.set(\"Capacidad_SIMO_Busq_TLV1\", 1);      // Capacidad para la búsqueda en TLV1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_TLV1`, 0);  // Variables auxiliares para la búsqueda en TLV1\n}\n\n// Definir las variables y constantes para el fin de movimiento en TLV1\nglobal.set(\"CantidadFinesMov_SIMO_TLV1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV1\", 5);    // Tipo de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV1\", 1);  // Número de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV1\", 98765); // Número de movimiento para el fin de movimiento en TLV1\nglobal.set(\"UMA_SIMO_Fin_TLV1\", \"UMA98765\");    // UMA (Unidad de manejo) para TLV1\nglobal.set(\"CodigoError_SIMO_Fin_TLV1\", 0);     // Código de error para el fin de movimiento en TLV1\nglobal.set(\"Auxiliar_SIMO_Fin_TLV1\", 0);        // Auxiliar para el fin de movimiento en TLV1\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV1\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV1\", 10);        // Coordenada X lógica para el fin de movimiento en TLV1\nglobal.set(\"YLogica_SIMO_Fin_TLV1\", 20);        // Coordenada Y lógica para el fin de movimiento en TLV1\nglobal.set(\"XLocal_SIMO_Fin_TLV1\", 5);          // Coordenada X local para el fin de movimiento en TLV1\nglobal.set(\"YLocal_SIMO_Fin_TLV1\", 15);         // Coordenada Y local para el fin de movimiento en TLV1\nglobal.set(\"Lado_SIMO_Fin_TLV1\", 1);            // Lado para el fin de movimiento en TLV1\nglobal.set(\"Profundidad_SIMO_Fin_TLV1\", 3);     // Profundidad para el fin de movimiento en TLV1\nglobal.set(\"Pasillo_SIMO_Fin_TLV1\", 0);         // Pasillo para el fin de movimiento en TLV1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV1`, 0);    // Variables auxiliares para el fin de movimiento en TLV1\n}\n\nnode.warn(\"Variables de TLV1 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "5f5b6c7bfb124336",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_TLV2",
        "func": "// Definir las variables globales para TLV2\n\n// Obtener la variable dinámica de operaciones encadenadas para TLV2\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV2\", 5); // Dinámico: indica qué partes enviar para TLV2\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV2\nglobal.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV2\nglobal.set(\"Equipamiento_SIMO_TLV2\", \"TLV02\");     // Equipamiento específico para TLV2 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el evento en TLV2\nglobal.set(\"CantidadEventos_SIMO_Event_TLV2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_TLV2\", 5);  // Tipo de estación TLV2\nglobal.set(\"NumeroEstacion_SIMO_Event_TLV2\", 2); // Número de estación TLV2\nglobal.set(\"NumeroMovimiento_SIMO_Event_TLV2\", 0); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_TLV2\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_TLV2\", \"0000065536\");  // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_TLV2\", \"4486\");    // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_TLV2\", 100);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_TLV2\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_TLV2\", 1);\nglobal.set(\"XLogica_SIMO_Event_TLV2\", 12);      // Coordenada X lógica para TLV2\nglobal.set(\"YLogica_SIMO_Event_TLV2\", 22);      // Coordenada Y lógica para TLV2\nglobal.set(\"XLocal_SIMO_Event_TLV2\", 6);        // Coordenada X local para TLV2\nglobal.set(\"YLocal_SIMO_Event_TLV2\", 16);       // Coordenada Y local para TLV2\nglobal.set(\"Lado_SIMO_Event_TLV2\", 1);          // Lado para TLV2\nglobal.set(\"Profundidad_SIMO_Event_TLV2\", 3);   // Profundidad para TLV2\nglobal.set(\"Pasillo_SIMO_Event_TLV2\", 0);       // Pasillo para TLV2\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_TLV2`, 0);  // Variables auxiliares para el evento en TLV2\n}\n\n// Definir las variables y constantes para la búsqueda en TLV2\nglobal.set(\"CantidadMovimientos_SIMO_Busq_TLV2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_TLV2\", 5);   // Tipo de estación para TLV2\nglobal.set(\"NumeroEstacion_SIMO_Busq_TLV2\", 2); // Número de estación para la búsqueda en TLV2\nglobal.set(\"NumeroMovimiento_SIMO_Busq_TLV2\", 54322); // Número de movimiento para la búsqueda en TLV2\nglobal.set(\"XActual_SIMO_Busq_TLV2\", 12);       // Coordenada X actual para la búsqueda en TLV2\nglobal.set(\"YActual_SIMO_Busq_TLV2\", 22);       // Coordenada Y actual para la búsqueda en TLV2\nglobal.set(\"Lado_SIMO_Busq_TLV2\", 1);           // Lado para la búsqueda en TLV2\nglobal.set(\"Pasillo_SIMO_Busq_TLV2\", 0);        // Pasillo para la búsqueda en TLV2\nglobal.set(\"Status_SIMO_Busq_TLV2\", 1);         // Estado actual para la búsqueda en TLV2\nglobal.set(\"Ocupacion_SIMO_Busq_TLV2\", 0);      // Ocupación para la búsqueda en TLV2\nglobal.set(\"Capacidad_SIMO_Busq_TLV2\", 1);      // Capacidad para la búsqueda en TLV2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_TLV2`, 0);  // Variables auxiliares para la búsqueda en TLV2\n}\n\n// Definir las variables y constantes para el fin de movimiento en TLV2\nglobal.set(\"CantidadFinesMov_SIMO_TLV2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV2\", 5);    // Tipo de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV2\", 2);  // Número de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV2\", 98766); // Número de movimiento para el fin de movimiento en TLV2\nglobal.set(\"UMA_SIMO_Fin_TLV2\", \"UMA98766\");    // UMA (Unidad de manejo) para TLV2\nglobal.set(\"CodigoError_SIMO_Fin_TLV2\", 0);     // Código de error para el fin de movimiento en TLV2\nglobal.set(\"Auxiliar_SIMO_Fin_TLV2\", 0);        // Auxiliar para el fin de movimiento en TLV2\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV2\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV2\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV2\", 12);        // Coordenada X lógica para el fin de movimiento en TLV2\nglobal.set(\"YLogica_SIMO_Fin_TLV2\", 22);        // Coordenada Y lógica para el fin de movimiento en TLV2\nglobal.set(\"XLocal_SIMO_Fin_TLV2\", 6);          // Coordenada X local para el fin de movimiento en TLV2\nglobal.set(\"YLocal_SIMO_Fin_TLV2\", 16);         // Coordenada Y local para el fin de movimiento en TLV2\nglobal.set(\"Lado_SIMO_Fin_TLV2\", 1);            // Lado para el fin de movimiento en TLV2\nglobal.set(\"Profundidad_SIMO_Fin_TLV2\", 3);     // Profundidad para el fin de movimiento en TLV2\nglobal.set(\"Pasillo_SIMO_Fin_TLV2\", 0);         // Pasillo para el fin de movimiento en TLV2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV2`, 0);    // Variables auxiliares para el fin de movimiento en TLV2\n}\n\nnode.warn(\"Variables de TLV2 han sido inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "8bedbfb3691d280a",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_Pasillos",
        "func": "// Definir tipo de estación para Pasillo en SIMO\nglobal.set(\"TipoEstacion_SIMO_Pasillo\", 0);  // Pasillo\n\n// Estaciones de tipo Pasillo del 1 al 12\nfor (let i = 1; i <= 12; i++) {\n    // Obtener la variable dinámica de operaciones encadenadas para cada Pasillo\n    global.set(`OperacionesEncadenadas_SIMO_Pasillo${i}`, 5); // Dinámico: indica qué partes enviar para Pasillo\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para cada Pasillo\n    global.set(`NumeroAlmacen_SIMO_Pasillo${i}`, 20001);      // Número de Almacén para cada Pasillo\n    global.set(`Equipamiento_SIMO_Pasillo${i}`, `Pasillo_${i}`);  // Equipamiento específico para cada Pasillo\n\n    // Definir las variables y constantes para el evento en cada Pasillo\n    global.set(`CantidadEventos_SIMO_Event_Pasillo${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Event_Pasillo${i}`, 0);  // Tipo de estación Pasillo\n    global.set(`NumeroEstacion_SIMO_Event_Pasillo${i}`, i); // Número de estación Pasillo\n    global.set(`NumeroMovimiento_SIMO_Event_Pasillo${i}`, 10000 + i); // Número de movimiento para el evento\n    global.set(`TipoEvento_SIMO_Event_Pasillo${i}`, 1);    // Tipo de evento\n    global.set(`Flags_SIMO_Event_Pasillo${i}`, 0);         // Flags para el evento\n    global.set(`Datos_SIMO_Event_Pasillo${i}`, `Datos del evento Pasillo${i}`); // Datos del evento\n    global.set(`Peso_SIMO_Event_Pasillo${i}`, 100 + i);    // Peso para el evento\n    global.set(`TipoContenedor_SIMO_Event_Pasillo${i}`, 2);\n    global.set(`TipoAltura_SIMO_Event_Pasillo${i}`, 1);\n    global.set(`XLogica_SIMO_Event_Pasillo${i}`, 10 + i);  // Coordenada X lógica para Pasillo\n    global.set(`YLogica_SIMO_Event_Pasillo${i}`, 20 + i);  // Coordenada Y lógica para Pasillo\n    global.set(`XLocal_SIMO_Event_Pasillo${i}`, 5 + i);    // Coordenada X local para Pasillo\n    global.set(`YLocal_SIMO_Event_Pasillo${i}`, 15 + i);   // Coordenada Y local para Pasillo\n    global.set(`Lado_SIMO_Event_Pasillo${i}`, 1);          // Lado para Pasillo\n    global.set(`Profundidad_SIMO_Event_Pasillo${i}`, 3);   // Profundidad para Pasillo\n    global.set(`Pasillo_SIMO_Event_Pasillo${i}`, i);       // Pasillo para Pasillo\n\n    // Definir las variables auxiliares para el evento\n    for (let j = 1; j <= 10; j++) {\n        global.set(`Aux0${j}_SIMO_Event_Pasillo${i}`, 0);  // Variables auxiliares para el evento en Pasillo\n    }\n\n    // Definir las variables y constantes para la búsqueda en cada Pasillo\n    global.set(`CantidadMovimientos_SIMO_Busq_Pasillo${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Busq_Pasillo${i}`, 0);   // Tipo de estación para Pasillo\n    global.set(`NumeroEstacion_SIMO_Busq_Pasillo${i}`, i); // Número de estación para la búsqueda en Pasillo\n    global.set(`NumeroMovimiento_SIMO_Busq_Pasillo${i}`, 54300 + i); // Número de movimiento para la búsqueda en Pasillo\n    global.set(`XActual_SIMO_Busq_Pasillo${i}`, 10 + i);    // Coordenada X actual para la búsqueda en Pasillo\n    global.set(`YActual_SIMO_Busq_Pasillo${i}`, 20 + i);    // Coordenada Y actual para la búsqueda en Pasillo\n    global.set(`Lado_SIMO_Busq_Pasillo${i}`, 1);            // Lado para la búsqueda en Pasillo\n    global.set(`Pasillo_SIMO_Busq_Pasillo${i}`, i);         // Pasillo para la búsqueda en Pasillo\n    global.set(`Status_SIMO_Busq_Pasillo${i}`, 1);          // Estado actual para la búsqueda en Pasillo\n    global.set(`Ocupacion_SIMO_Busq_Pasillo${i}`, 0);       // Ocupación para la búsqueda en Pasillo\n    global.set(`Capacidad_SIMO_Busq_Pasillo${i}`, 1);       // Capacidad para la búsqueda en Pasillo\n\n    // Definir las variables auxiliares para la búsqueda\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Busq_Pasillo${i}`, 0);  // Variables auxiliares para la búsqueda en Pasillo\n    }\n\n    // Definir las variables y constantes para el fin de movimiento en cada Pasillo\n    global.set(`CantidadFinesMov_SIMO_Pasillo${i}`, 1);\n    global.set(`TipoEstacion_SIMO_Fin_Pasillo${i}`, 0);    // Tipo de estación para el fin de movimiento en Pasillo\n    global.set(`NumeroEstacion_SIMO_Fin_Pasillo${i}`, i);  // Número de estación para el fin de movimiento en Pasillo\n    global.set(`NumeroMovimiento_SIMO_Fin_Pasillo${i}`, 98700 + i); // Número de movimiento para el fin de movimiento en Pasillo\n    global.set(`UMA_SIMO_Fin_Pasillo${i}`, `UMA98700${i}`);    // UMA (Unidad de manejo) para Pasillo\n    global.set(`CodigoError_SIMO_Fin_Pasillo${i}`, 0);     // Código de error para el fin de movimiento en Pasillo\n    global.set(`TipoContenedor_SIMO_Fin_Pasillo${i}`, 2);\n    global.set(`TipoAltura_SIMO_Fin_Pasillo${i}`, 1);\n    global.set(`XLogica_SIMO_Fin_Pasillo${i}`, 10 + i);    // Coordenada X lógica para el fin de movimiento en Pasillo\n    global.set(`YLogica_SIMO_Fin_Pasillo${i}`, 20 + i);    // Coordenada Y lógica para el fin de movimiento en Pasillo\n    global.set(`XLocal_SIMO_Fin_Pasillo${i}`, 5 + i);      // Coordenada X local para el fin de movimiento en Pasillo\n    global.set(`YLocal_SIMO_Fin_Pasillo${i}`, 15 + i);     // Coordenada Y local para el fin de movimiento en Pasillo\n    global.set(`Lado_SIMO_Fin_Pasillo${i}`, 1);            // Lado para el fin de movimiento en Pasillo\n    global.set(`Profundidad_SIMO_Fin_Pasillo${i}`, 3);     // Profundidad para el fin de movimiento en Pasillo\n    global.set(`Pasillo_SIMO_Fin_Pasillo${i}`, i);         // Pasillo para el fin de movimiento en Pasillo\n\n    // Definir las variables auxiliares para el fin de movimiento\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Fin_Pasillo${i}`, 0);    // Variables auxiliares para el fin de movimiento en Pasillo\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "e0c2c9ca9bee04de",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_PTA",
        "func": "// Definir tipo de estación para PTA1 en SIMO\nglobal.set(\"TipoEstacion_SIMO_PTA1\", 20);  // Tipo de estación para PTA1\n\n// Obtener la variable dinámica de operaciones encadenadas para PTA1\nglobal.set(\"OperacionesEncadenadas_SIMO_PTA1\", 5); // Dinámico: indica qué partes enviar para PTA1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PTA1\nglobal.set(\"NumeroAlmacen_SIMO_PTA1\", 20001);      // Número de Almacén para PTA1\nglobal.set(\"Equipamiento_SIMO_PTA1\", \"PTA_1\");     // Equipamiento específico para PTA1 (rellenar con espacios si es necesario)\n\n// Definir las variables y constantes para el evento en PTA1\nglobal.set(\"CantidadEventos_SIMO_Event_PTA1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_PTA1\", 11);  // Tipo de estación PTA1\nglobal.set(\"NumeroEstacion_SIMO_Event_PTA1\", 1); // Número de estación PTA1\nglobal.set(\"NumeroMovimiento_SIMO_Event_PTA1\", 10100); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_PTA1\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_PTA1\", 0);         // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_PTA1\", \"Datos del evento PTA1\"); // Datos del evento (rellenar con espacios si es necesario)\nglobal.set(\"Peso_SIMO_Event_PTA1\", 120);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_PTA1\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_PTA1\", 1);\nglobal.set(\"XLogica_SIMO_Event_PTA1\", 15);      // Coordenada X lógica para PTA1\nglobal.set(\"YLogica_SIMO_Event_PTA1\", 25);      // Coordenada Y lógica para PTA1\nglobal.set(\"XLocal_SIMO_Event_PTA1\", 10);       // Coordenada X local para PTA1\nglobal.set(\"YLocal_SIMO_Event_PTA1\", 20);       // Coordenada Y local para PTA1\nglobal.set(\"Lado_SIMO_Event_PTA1\", 1);          // Lado para PTA1\nglobal.set(\"Profundidad_SIMO_Event_PTA1\", 3);   // Profundidad para PTA1\nglobal.set(\"Pasillo_SIMO_Event_PTA1\", 0);       // Pasillo para PTA1\n\n// Definir las variables auxiliares para el evento\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_PTA1`, 0);  // Variables auxiliares para el evento en PTA1\n}\n\n// Definir las variables y constantes para la búsqueda en PTA1\nglobal.set(\"CantidadMovimientos_SIMO_Busq_PTA1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_PTA1\", 11);   // Tipo de estación para PTA1\nglobal.set(\"NumeroEstacion_SIMO_Busq_PTA1\", 1); // Número de estación para la búsqueda en PTA1\nglobal.set(\"NumeroMovimiento_SIMO_Busq_PTA1\", 54310); // Número de movimiento para la búsqueda en PTA1\nglobal.set(\"XActual_SIMO_Busq_PTA1\", 15);       // Coordenada X actual para la búsqueda en PTA1\nglobal.set(\"YActual_SIMO_Busq_PTA1\", 25);       // Coordenada Y actual para la búsqueda en PTA1\nglobal.set(\"Lado_SIMO_Busq_PTA1\", 1);           // Lado para la búsqueda en PTA1\nglobal.set(\"Pasillo_SIMO_Busq_PTA1\", 0);        // Pasillo para la búsqueda en PTA1\nglobal.set(\"Status_SIMO_Busq_PTA1\", 1);         // Estado actual para la búsqueda en PTA1\nglobal.set(\"Ocupacion_SIMO_Busq_PTA1\", 0);      // Ocupación para la búsqueda en PTA1\nglobal.set(\"Capacidad_SIMO_Busq_PTA1\", 1);      // Capacidad para la búsqueda en PTA1\n\n// Definir las variables auxiliares para la búsqueda\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_PTA1`, 0);  // Variables auxiliares para la búsqueda en PTA1\n}\n\n// Definir las variables y constantes para el fin de movimiento en PTA1\nglobal.set(\"CantidadFinesMov_SIMO_PTA1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_PTA1\", 11);    // Tipo de estación para el fin de movimiento en PTA1\nglobal.set(\"NumeroEstacion_SIMO_Fin_PTA1\", 1);  // Número de estación para el fin de movimiento en PTA1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_PTA1\", 98710); // Número de movimiento para el fin de movimiento en PTA1\nglobal.set(\"UMA_SIMO_Fin_PTA1\", \"UMA98710\");    // UMA (Unidad de manejo) para PTA1\nglobal.set(\"CodigoError_SIMO_Fin_PTA1\", 0);     // Código de error para el fin de movimiento en PTA1\nglobal.set(\"TipoContenedor_SIMO_Fin_PTA1\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_PTA1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_PTA1\", 15);        // Coordenada X lógica para el fin de movimiento en PTA1\nglobal.set(\"YLogica_SIMO_Fin_PTA1\", 25);        // Coordenada Y lógica para el fin de movimiento en PTA1\nglobal.set(\"XLocal_SIMO_Fin_PTA1\", 10);         // Coordenada X local para el fin de movimiento en PTA1\nglobal.set(\"YLocal_SIMO_Fin_PTA1\", 20);         // Coordenada Y local para el fin de movimiento en PTA1\nglobal.set(\"Lado_SIMO_Fin_PTA1\", 1);            // Lado para el fin de movimiento en PTA1\nglobal.set(\"Profundidad_SIMO_Fin_PTA1\", 3);     // Profundidad para el fin de movimiento en PTA1\nglobal.set(\"Pasillo_SIMO_Fin_PTA1\", 0);         // Pasillo para el fin de movimiento en PTA1\n\n// Definir las variables auxiliares para el fin de movimiento\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PTA1`, 0);    // Variables auxiliares para el fin de movimiento en PTA1\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a79c9e7dbf3d24bc",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "ec3a2628e8eec90e",
        "name": "SIMO_Rej1",
        "func": "// Definir tipo de estación para REJ1 en SIMO\nglobal.set(\"TipoEstacion_SIMO_REJ1\", 7);  // Tipo de estación para REJ1\n\n// Obtener la variable dinámica de operaciones encadenadas para REJ1\nglobal.set(\"OperacionesEncadenadas_SIMO_REJ1\", 5); // Dinámico: indica qué partes enviar para REJ1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para REJ1\nglobal.set(\"NumeroAlmacen_SIMO_REJ1\", 20001);      // Número de Almacén para REJ1\nglobal.set(\"Equipamiento_SIMO_REJ1\", \"REJ_1\");     // Equipamiento específico para REJ1\n\n// Definir las variables y constantes para el evento en REJ1\nglobal.set(\"CantidadEventos_SIMO_Event_REJ1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_REJ1\", 7);  // Tipo de estación REJ1\nglobal.set(\"NumeroEstacion_SIMO_Event_REJ1\", 1); // Número de estación REJ1\nglobal.set(\"NumeroMovimiento_SIMO_Event_REJ1\", 10100); // Número de movimiento para el evento\nglobal.set(\"TipoEvento_SIMO_Event_REJ1\", 1);    // Tipo de evento\nglobal.set(\"Flags_SIMO_Event_REJ1\", 0);         // Flags para el evento\nglobal.set(\"Datos_SIMO_Event_REJ1\", \"Datos del evento REJ1\"); // Datos del evento\nglobal.set(\"Peso_SIMO_Event_REJ1\", 120);        // Peso para el evento\nglobal.set(\"TipoContenedor_SIMO_Event_REJ1\", 2);\nglobal.set(\"TipoAltura_SIMO_Event_REJ1\", 1);\nglobal.set(\"XLogica_SIMO_Event_REJ1\", 15);      // Coordenada X lógica para REJ1\nglobal.set(\"YLogica_SIMO_Event_REJ1\", 25);      // Coordenada Y lógica para REJ1\nglobal.set(\"XLocal_SIMO_Event_REJ1\", 10);       // Coordenada X local para REJ1\nglobal.set(\"YLocal_SIMO_Event_REJ1\", 20);       // Coordenada Y local para REJ1\nglobal.set(\"Lado_SIMO_Event_REJ1\", 1);          // Lado para REJ1\nglobal.set(\"Profundidad_SIMO_Event_REJ1\", 3);   // Profundidad para REJ1\nglobal.set(\"Pasillo_SIMO_Event_REJ1\", 0);       // Pasillo para REJ1\n\n// Definir las variables auxiliares para el evento\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_REJ1`, 0);  // Variables auxiliares para el evento en REJ1\n}\n\n// Definir las variables y constantes para la búsqueda en REJ1\nglobal.set(\"CantidadMovimientos_SIMO_Busq_REJ1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Busq_REJ1\", 7);   // Tipo de estación para REJ1\nglobal.set(\"NumeroEstacion_SIMO_Busq_REJ1\", 1); // Número de estación para la búsqueda en REJ1\nglobal.set(\"NumeroMovimiento_SIMO_Busq_REJ1\", 54310); // Número de movimiento para la búsqueda en REJ1\nglobal.set(\"XActual_SIMO_Busq_REJ1\", 15);       // Coordenada X actual para la búsqueda en REJ1\nglobal.set(\"YActual_SIMO_Busq_REJ1\", 25);       // Coordenada Y actual para la búsqueda en REJ1\nglobal.set(\"Lado_SIMO_Busq_REJ1\", 1);           // Lado para la búsqueda en REJ1\nglobal.set(\"Pasillo_SIMO_Busq_REJ1\", 0);        // Pasillo para la búsqueda en REJ1\nglobal.set(\"Status_SIMO_Busq_REJ1\", 1);         // Estado actual para la búsqueda en REJ1\nglobal.set(\"Ocupacion_SIMO_Busq_REJ1\", 0);      // Ocupación para la búsqueda en REJ1\nglobal.set(\"Capacidad_SIMO_Busq_REJ1\", 1);      // Capacidad para la búsqueda en REJ1\n\n// Definir las variables auxiliares para la búsqueda\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_REJ1`, 0);  // Variables auxiliares para la búsqueda en REJ1\n}\n\n// Definir las variables y constantes para el fin de movimiento en REJ1\nglobal.set(\"CantidadFinesMov_SIMO_REJ1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_REJ1\", 7);    // Tipo de estación para el fin de movimiento en REJ1\nglobal.set(\"NumeroEstacion_SIMO_Fin_REJ1\", 1);  // Número de estación para el fin de movimiento en REJ1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_REJ1\", 98710); // Número de movimiento para el fin de movimiento en REJ1\nglobal.set(\"UMA_SIMO_Fin_REJ1\", \"UMA98710\");    // UMA (Unidad de manejo) para REJ1\nglobal.set(\"CodigoError_SIMO_Fin_REJ1\", 0);     // Código de error para el fin de movimiento en REJ1\nglobal.set(\"TipoContenedor_SIMO_Fin_REJ1\", 2);\nglobal.set(\"TipoAltura_SIMO_Fin_REJ1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_REJ1\", 15);        // Coordenada X lógica para el fin de movimiento en REJ1\nglobal.set(\"YLogica_SIMO_Fin_REJ1\", 25);        // Coordenada Y lógica para el fin de movimiento en REJ1\nglobal.set(\"XLocal_SIMO_Fin_REJ1\", 10);         // Coordenada X local para el fin de movimiento en REJ1\nglobal.set(\"YLocal_SIMO_Fin_REJ1\", 20);         // Coordenada Y local para el fin de movimiento en REJ1\nglobal.set(\"Lado_SIMO_Fin_REJ1\", 1);            // Lado para el fin de movimiento en REJ1\nglobal.set(\"Profundidad_SIMO_Fin_REJ1\", 3);     // Profundidad para el fin de movimiento en REJ1\nglobal.set(\"Pasillo_SIMO_Fin_REJ1\", 0);         // Pasillo para el fin de movimiento en REJ1\n\n// Definir las variables auxiliares para el fin de movimiento\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_REJ1`, 0);    // Variables auxiliares para el fin de movimiento en REJ1\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "ad39259c5b8d9cb4",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_Gen",
        "func": "// Definir las listas de rutas específicas basadas en la imagen y la explicación\nconst origen = ['PIE1'];  // Solo existe PIE1\nconst pepRange = Array.from({ length: 12 }, (_, i) => `PEP${i + 1}`);  // Rango de PEP1 a PEP12\nconst pspRange = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}`);  // Rango de PSP1 a PSP12\nconst pisRange = ['PIS1', 'PIS2', 'PIS3'];  // Estaciones PIS\nconst rejRange = ['REJ1'];  // Estaciones REJ (solo REJ1)\n\n// Crear variables globales para las rutas desde PIE1\norigen.forEach(pie => {\n    // Rutas PIE1 -> PEP1 a PEP12\n    pepRange.forEach(pep => {\n        global.set(`${pie}_${pep}_SimoEvent`, false);  // Definir evento SIMO para cada ruta PIE1 -> PEP1 a PEP12\n        node.warn(`Variable ${pie}_${pep}_SimoEvent inicializada en false`);\n    });\n\n    // Rutas PIE1 -> PIS1 y PIS3\n    ['PIS1', 'PIS3'].forEach(pis => {\n        global.set(`${pie}_${pis}_SimoEvent`, false);  // Definir evento SIMO para PIE1 -> PIS1 y PIS3\n        node.warn(`Variable ${pie}_${pis}_SimoEvent inicializada en false`);\n    });\n\n    // Rutas PIE1 -> REJ1\n    rejRange.forEach(rej => {\n        global.set(`${pie}_${rej}_SimoEvent`, false);  // Definir evento SIMO para PIE1 -> REJ1\n        node.warn(`Variable ${pie}_${rej}_SimoEvent inicializada en false`);\n    });\n});\n\n// Crear variables globales para las rutas entre PEP -> PSP correspondientes\npepRange.forEach((pep, index) => {\n    const psp = `PSP${index + 1}`;  // PEP1 -> PSP1, PEP2 -> PSP2, etc.\n    global.set(`${pep}_${psp}_SimoEvent`, false);  // Definir evento SIMO para cada ruta PEP -> PSP\n    node.warn(`Variable ${pep}_${psp}_SimoEvent inicializada en false`);\n});\n\n// Crear variables globales para las rutas desde PSP a PIS2 y PIS3\npspRange.forEach(psp => {\n    // Rutas PSP -> PIS2 y PIS3\n    ['PIS2', 'PIS3'].forEach(pis => {\n        global.set(`${psp}_${pis}_SimoEvent`, false);  // Definir evento SIMO para cada ruta PSP -> PIS2 y PIS3\n        node.warn(`Variable ${psp}_${pis}_SimoEvent inicializada en false`);\n    });\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "9c0190e79c14df99",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PIE1_REJ1",
        "func": "// Definir las variables globales para la ruta PIE1 -> REJ1\n\nglobal.set(`NumeroAlmacen_PIE1_REJ1`, 20001);  // Número de Almacén\nglobal.set(`OperacionesEncadenadas_PIE1_REJ1`, 1);  // Cantidad de rutas que se actualizan\n\n// Datos Relativos a la Ruta\nglobal.set(`TipoEstacionOrigen_PIE1_REJ1`, 3);  // Tipo de estación origen de la ruta (PIE)\nglobal.set(`NumeroEstacionOrigen_PIE1_REJ1`, 1);  // Número de estación origen de la ruta (PIE1)\n\nglobal.set(`TipoEstacionDestino_PIE1_REJ1`, 7);  // Tipo de estación destino de la ruta (REJ)\nglobal.set(`NumeroEstacionDestino_PIE1_REJ1`, 1);  // Número de estación destino de la ruta (REJ1)\n\nglobal.set(`Estado_PIE1_REJ1`, 0);  // Estado de la ruta (false = no operativa)\nglobal.set(`Ocupacion_PIE1_REJ1`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n// Mensaje de depuración\nnode.warn(`Variables de la ruta PIE1_REJ1 creadas correctamente`);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7fb73c9032df82fe",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PIE1_PIS1",
        "func": "// Definir las variables globales para la ruta PIE1 -> PIS1\n\nglobal.set(`NumeroAlmacen_PIE1_PIS1`, 20001);  // Número de Almacén\nglobal.set(`OperacionesEncadenadas_PIE1_PIS1`, 1);  // Cantidad de rutas que se actualizan\n\n// Datos Relativos a la Ruta\nglobal.set(`TipoEstacionOrigen_PIE1_PIS1`, 3);  // Tipo de estación origen de la ruta (PIE)\nglobal.set(`NumeroEstacionOrigen_PIE1_PIS1`, 1);  // Número de estación origen de la ruta (PIE1)\n\nglobal.set(`TipoEstacionDestino_PIE1_PIS1`, 4);  // Tipo de estación destino de la ruta (PIS)\nglobal.set(`NumeroEstacionDestino_PIE1_PIS1`, 1);  // Número de estación destino de la ruta (PIS1)\n\nglobal.set(`Estado_PIE1_PIS1`, 0);  // Estado de la ruta (false = no operativa)\nglobal.set(`Ocupacion_PIE1_PIS1`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n// Mensaje de depuración\nnode.warn(`Variables de la ruta PIE1_PIS1 creadas correctamente`);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "6d629257dc683866",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PIE1_PEP(1-12)",
        "func": "// Definir las variables globales para las rutas PIE1 -> PEP1 a PEP12\n\nfor (let i = 1; i <= 12; i++) {\n    global.set(`NumeroAlmacen_PIE1_PEP${i}`, 20001);  // Número de Almacén\n    global.set(`OperacionesEncadenadas_PIE1_PEP${i}`, 1);  // Cantidad de rutas que se actualizan\n\n    // Datos Relativos a la Ruta\n    global.set(`TipoEstacionOrigen_PIE1_PEP${i}`, 3);  // Tipo de estación origen de la ruta (PIE)\n    global.set(`NumeroEstacionOrigen_PIE1_PEP${i}`, 1);  // Número de estación origen de la ruta (PIE1)\n\n    global.set(`TipoEstacionDestino_PIE1_PEP${i}`, 9);  // Tipo de estación destino de la ruta (PEP)\n    global.set(`NumeroEstacionDestino_PIE1_PEP${i}`, i);  // Número de estación destino de la ruta (PEP1 a PEP12)\n\n    global.set(`Estado_PIE1_PEP${i}`, 0);  // Estado de la ruta (false = no operativa)\n    global.set(`Ocupacion_PIE1_PEP${i}`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n    // Mensaje de depuración\n    node.warn(`Variables de la ruta PIE1_PEP${i} creadas correctamente`);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b69078f83894acb4",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PIE1_PIS3",
        "func": "// Definir las variables globales para la ruta PIE1 -> PIS3\n\nglobal.set(`NumeroAlmacen_PIE1_PIS3`, 20001);  // Número de Almacén\nglobal.set(`OperacionesEncadenadas_PIE1_PIS3`, 1);  // Cantidad de rutas que se actualizan\n\n// Datos Relativos a la Ruta\nglobal.set(`TipoEstacionOrigen_PIE1_PIS3`, 3);  // Tipo de estación origen de la ruta (PIE)\nglobal.set(`NumeroEstacionOrigen_PIE1_PIS3`, 1);  // Número de estación origen de la ruta (PIE1)\n\nglobal.set(`TipoEstacionDestino_PIE1_PIS3`, 4);  // Tipo de estación destino de la ruta (PIS)\nglobal.set(`NumeroEstacionDestino_PIE1_PIS3`, 3);  // Número de estación destino de la ruta (PIS3)\n\nglobal.set(`Estado_PIE1_PIS3`, 0);  // Estado de la ruta (false = no operativa)\nglobal.set(`Ocupacion_PIE1_PIS3`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n// Mensaje de depuración\nnode.warn(`Variables de la ruta PIE1_PIS3 creadas correctamente`);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "23f24dbe724c66ac",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PEP(1-12)_PSP(1-12)",
        "func": "\n// Crear variables globales para las rutas entre PEP1 a PEP12 -> PSP1 a PSP12\nconst pepRange = Array.from({ length: 12 }, (_, i) => `PEP${i + 1}`);\nconst pspRange = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}`);\n\npepRange.forEach((pep, index) => {\n    const psp = pspRange[index];\n\n    global.set(`NumeroAlmacen_${pep}_${psp}`, 20001);  // Número de Almacén\n    global.set(`OperacionesEncadenadas_${pep}_${psp}`, 1);  // Cantidad de rutas que se actualizan\n\n    // Datos Relativos a la Ruta\n    global.set(`TipoEstacionOrigen_${pep}_${psp}`, 9);  // Tipo de estación origen de la ruta (PEP)\n    global.set(`NumeroEstacionOrigen_${pep}_${psp}`, parseInt(pep.replace('PEP', '')));  // Número de estación origen de la ruta (PEP1 a PEP12)\n\n    global.set(`TipoEstacionDestino_${pep}_${psp}`, 10);  // Tipo de estación destino de la ruta (PSP)\n    global.set(`NumeroEstacionDestino_${pep}_${psp}`, parseInt(psp.replace('PSP', '')));  // Número de estación destino de la ruta (PSP1 a PSP12)\n\n    global.set(`Estado_${pep}_${psp}`, 0);  // Estado de la ruta (false = no operativa)\n    global.set(`Ocupacion_${pep}_${psp}`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n    // Mensaje de depuración\n    node.warn(`Variables de la ruta ${pep}_${psp} creadas correctamente`);\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "488876b46086075c",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PSP(1-12)_PIS2",
        "func": "// Crear variables globales para las rutas entre PSP1 a PSP12 -> PIS2\nconst pspRange = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}`);\n\npspRange.forEach(psp => {\n    global.set(`NumeroAlmacen_${psp}_PIS2`, 20001);  // Número de Almacén\n    global.set(`OperacionesEncadenadas_${psp}_PIS2`, 1);  // Cantidad de rutas que se actualizan\n\n    // Datos Relativos a la Ruta\n    global.set(`TipoEstacionOrigen_${psp}_PIS2`, 10);  // Tipo de estación origen de la ruta (PSP)\n    global.set(`NumeroEstacionOrigen_${psp}_PIS2`, parseInt(psp.replace('PSP', '')));  // Número de estación origen de la ruta (PSP1 a PSP12)\n\n    global.set(`TipoEstacionDestino_${psp}_PIS2`, 4);  // Tipo de estación destino de la ruta (PIS)\n    global.set(`NumeroEstacionDestino_${psp}_PIS2`, 2);  // Número de estación destino de la ruta (PIS2)\n\n    global.set(`Estado_${psp}_PIS2`, 0);  // Estado de la ruta (false = no operativa)\n    global.set(`Ocupacion_${psp}_PIS2`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n    // Mensaje de depuración\n    node.warn(`Variables de la ruta ${psp}_PIS2 creadas correctamente`);\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "d7cbf9c88477d597",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "a4483f8ddd4066dc",
        "name": "SROS_PSP(1-12)_PIS3",
        "func": "// Crear variables globales para las rutas entre PSP1 a PSP12 -> PIS3\nconst pspRange = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}`);\n\npspRange.forEach(psp => {\n    global.set(`NumeroAlmacen_${psp}_PIS3`, 20001);  // Número de Almacén\n    global.set(`OperacionesEncadenadas_${psp}_PIS3`, 1);  // Cantidad de rutas que se actualizan\n\n    // Datos Relativos a la Ruta\n    global.set(`TipoEstacionOrigen_${psp}_PIS3`, 10);  // Tipo de estación origen de la ruta (PSP)\n    global.set(`NumeroEstacionOrigen_${psp}_PIS3`, parseInt(psp.replace('PSP', '')));  // Número de estación origen de la ruta (PSP1 a PSP12)\n\n    global.set(`TipoEstacionDestino_${psp}_PIS3`, 4);  // Tipo de estación destino de la ruta (PIS)\n    global.set(`NumeroEstacionDestino_${psp}_PIS3`, 3);  // Número de estación destino de la ruta (PIS3)\n\n    global.set(`Estado_${psp}_PIS3`, false);  // Estado de la ruta (false = no operativa)\n    global.set(`Ocupacion_${psp}_PIS3`, 0);  // Ocupación en la ruta (0 = vacía, 1 = ocupada)\n\n    // Mensaje de depuración\n    node.warn(`Variables de la ruta ${psp}_PIS3 creadas correctamente`);\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "09e9b31cfe381753",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "name": "Globales",
        "func": "global.set(\"cpu_usage\", 44);\nglobal.set(\"ram_usage\", 25);\n// Function Node to Define Global Variables\nglobal.set(\"camposTrama\" , {});\nglobal.set(\"INICIO_TRANSMISION\", \"#STX\");\nglobal.set(\"FIN_TRANSMISION\", \"#ETX\");\n\n\n// Resutado global de la respuesta \nglobal.set(\"RESULTADO_OK\", \"0000\");\nglobal.set(\"RESULTADO_VERSION_NO_SOPORTADA\", \"0001\");\nglobal.set(\"RESULTADO_MENSAJE_NO_SOPORTADO\", \"0002\");\nglobal.set(\"RESULTADO_ERROR_PROCESANDO\", \"0006\");\nglobal.set(\"RESULTADO_ERROR_TIMEOUT\", \"0007\");\n\n// Globales\nglobal.set('tcpHost', '192.168.131.33');\nglobal.set('start', false);\nglobal.set('estadoFSM', '00_Reposo');\nglobal.set('reset', false);  // Reseteamos la variable reset para evitar loops\nglobal.set('eventoDetectadoStation', \"TLV1\");  // \nglobal.set('eventoDetectadoStationGen', \"TLV\");  // \n\n// Globales SIMO\n\nglobal.set(\"TelegramID_SIMO\", \"SIMO\");\nglobal.set(\"ExpectedTelegramID_CIMO\", \"CIMO\");\nglobal.set(\"Version_SIMO\", \"20\");\nglobal.set(\"ExpectedVersion_CIMO\", \"20\");\nglobal.set(\"Origin_SIMO\", \"TMS \");\nglobal.set(\"ExpectedOrigin_CIMO\", \"TMS \");\nglobal.set(\"Destination_SIMO\", \"WMS \");\nglobal.set(\"ExpectedDestination_CIMO\", \"WMS \");\nglobal.set(\"ExpectedSequenceNumber_CIMO\", 1);  // Inicial, será incrementado automáticamente\n\n\n// Globales SALI\nglobal.set(\"TelegramID_SALI\", \"SALI\");\nglobal.set(\"ExpectedTelegramID_CALI\", \"CALI\");\nglobal.set(\"Version_SALI\", \"10\");\nglobal.set(\"ExpectedVersion_CALI\", \"10\");\nglobal.set(\"Origin_SALI\", \"TMS \");\nglobal.set(\"ExpectedOrigin_CALI\", \"TMS \");\nglobal.set(\"Destination_SALI\", \"WMS \");\nglobal.set(\"ExpectedDestination_CALI\", \"WMS \");\nglobal.set(\"ExpectedSequenceNumber_SALI\", 1);  // Inicial, será incrementado automáticamente\nglobal.set(\"sequenceNumberSALI\", 1);  // Inicial, será incrementado automáticamente\n\n\n\n// Globales SSTS\nglobal.set(\"TelegramID_SSTS\", \"SSTS\");\nglobal.set(\"ExpectedTelegramID_CSTS\", \"CSTS\");\nglobal.set(\"Version_SSTS\", \"10\");\nglobal.set(\"ExpectedVersion_CSTS\", \"10\");\nglobal.set(\"Origin_SSTS\", \"TMS \");\nglobal.set(\"ExpectedOrigin_CSTS\", \"TMS \");\nglobal.set(\"Destination_SSTS\", \"WMS \");\nglobal.set(\"ExpectedDestination_CSTS\", \"WMS \");\nglobal.set(\"ExpectedSequenceNumber_SSTS\", 1);  // Inicial, será incrementado automáticamente\nglobal.set(\"sequenceNumberSSTS\", 1);  // Inicial, será incrementado automáticamente\n\n\n//Globales SROS\n\nglobal.set(\"TelegramID_SROS\", \"SROS\");\nglobal.set(\"ExpectedTelegramID_SROS\", \"CROS\");\nglobal.set(\"Version_SROS\", \"10\");\nglobal.set(\"ExpectedVersion_CROS\", \"10\");\nglobal.set(\"Origin_SROS\", \"TMS \");\nglobal.set(\"ExpectedOrigin_CROS\", \"TMS \");\nglobal.set(\"Destination_SROS\", \"WMS \");\nglobal.set(\"ExpectedDestination_CROS\", \"WMS \");\nglobal.set(\"ExpectedSequenceNumber_SROS\", 1);  // Inicial, será incrementado automáticamente\nglobal.set(\"sequenceNumberSROS\", 1);  // Inicial, será incrementado automáticamente\n\n\n\n//busqueda psps\nfor (let i = 1; i <= 12; i++) {\n    global.set(`lanzarBusquedaMesaSalida${i}`, false);\n}\n\nnode.warn(\"Variables lanzarBusquedaMesaSalida1 a lanzarBusquedaMesaSalida12 inicializadas en false\");\n\n//manejo de errore TLVs\nglobal.set('errorDepositoTLV1', false);\nglobal.set('errorExtraccionTLV1', false); \nglobal.set('errorDepositoTLV2', false);\nglobal.set('errorExtraccionTLV2', false); \n\nglobal.set(\"eventoLanzadoTLV1\", \"none\");\nglobal.set(\"eventoLanzadoTLV2\", \"none\");\n\nglobal.set('pausePIE1', false); \n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "260f6999113e723a",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "315b4881c2c86424",
        "name": "Tareas",
        "func": "// Función para declarar las variables globales de cada estación con valores iniciales\nfunction declararVariablesGlobales(estacion) {\n    let tareaEstacion = {\n        origen: {\n            estacion: \"\",  \n            xActual: \"\",\n            yActual: \"\",\n            xLocal: \"\",\n            yLocal: \"\",\n            lado: \"\",\n            pasillo: \"\",\n            profundidad: \"\"\n        },\n        destino: {\n            estacion: \"\",  \n            xActual: \"\",\n            yActual: \"\",\n            xLocal: \"\",\n            yLocal: \"\",\n            lado: \"\",\n            pasillo: \"\",\n            profundidad: \"\"\n        },\n        datosAdicionales: {\n            numeroTransporte: \"\",\n            secuencia: \"\",\n            prioridad: \"\",\n            umaContenedor: \"\",\n            tipoContenedor: \"\",\n            tipoAltura: \"\"\n        }\n    };\n\n    // Declarar la tarea para la estación como variable global\n    global.set(`tarea${estacion}`, tareaEstacion);\n    node.warn(`Variables globales inicializadas para ${estacion}`);\n}\n\n// Declarar variables globales para todas las estaciones basadas en tu estructura\ndeclararVariablesGlobales(\"PIE1\");\ndeclararVariablesGlobales(\"PIE2\");\ndeclararVariablesGlobales(\"REJ1\");\ndeclararVariablesGlobales(\"REJ2\");\ndeclararVariablesGlobales(\"REJ3\");\ndeclararVariablesGlobales(\"PIS1\");\ndeclararVariablesGlobales(\"PIS2\");\ndeclararVariablesGlobales(\"PIS3\");\ndeclararVariablesGlobales(\"PEP1\");\ndeclararVariablesGlobales(\"PEP2\");\ndeclararVariablesGlobales(\"PEP3\");\ndeclararVariablesGlobales(\"PEP4\");\ndeclararVariablesGlobales(\"PEP5\");\ndeclararVariablesGlobales(\"PEP6\");\ndeclararVariablesGlobales(\"PEP7\");\ndeclararVariablesGlobales(\"PEP8\");\ndeclararVariablesGlobales(\"PEP9\");\ndeclararVariablesGlobales(\"PEP10\");\ndeclararVariablesGlobales(\"PEP11\");\ndeclararVariablesGlobales(\"PEP12\");\ndeclararVariablesGlobales(\"PSP1\");\ndeclararVariablesGlobales(\"PSP2\");\ndeclararVariablesGlobales(\"PSP3\");\ndeclararVariablesGlobales(\"PSP4\");\ndeclararVariablesGlobales(\"PSP5\");\ndeclararVariablesGlobales(\"PSP6\");\ndeclararVariablesGlobales(\"PSP7\");\ndeclararVariablesGlobales(\"PSP8\");\ndeclararVariablesGlobales(\"PSP9\");\ndeclararVariablesGlobales(\"PSP10\");\ndeclararVariablesGlobales(\"PSP11\");\ndeclararVariablesGlobales(\"PSP12\");\ndeclararVariablesGlobales(\"TLV1\");\ndeclararVariablesGlobales(\"TLV2\");\ndeclararVariablesGlobales(\"PTA1\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "7ad74580372dfc4b",
        "type": "link in",
        "z": "bfffca06cd507a7e",
        "g": "315b4881c2c86424",
        "name": "defVarSGCF",
        "links": [
            "efc9a8a9c405e65c"
        ],
        "x": 455,
        "y": 920,
        "wires": [
            [
                "260f6999113e723a",
                "41aea0a6353bf813"
            ]
        ]
    },
    {
        "id": "41aea0a6353bf813",
        "type": "function",
        "z": "bfffca06cd507a7e",
        "g": "315b4881c2c86424",
        "name": "TareasGen",
        "func": "// Función para inicializar la variable global con remanencia\nfunction inicializarVariableGlobal(nombreVariable, valorInicial) {\n    let valorExistente = global.get(nombreVariable);\n    if (typeof valorExistente === \"undefined\") {\n        global.set(nombreVariable, valorInicial);\n        node.warn(`Variable global ${nombreVariable} inicializada con valor: ${valorInicial}`);\n    } else {\n        node.warn(`Variable global ${nombreVariable} ya existía con valor: ${valorExistente}`);\n    }\n}\n\n// Inicializar todas las variables `datosListos` para las estaciones a `false`\nconst estaciones = [\n    \"PIE1\", \"PIE2\", \"REJ1\", \"REJ2\", \"REJ3\",\n    \"PIS1\", \"PIS2\", \"PIS3\", \"PEP1\", \"PEP2\", \"PEP3\", \"PEP4\", \"PEP5\", \"PEP6\", \n    \"PEP7\", \"PEP8\", \"PEP9\", \"PEP10\", \"PEP11\", \"PEP12\", \n    \"PSP1\", \"PSP2\", \"PSP3\", \"PSP4\", \"PSP5\", \"PSP6\", \n    \"PSP7\", \"PSP8\", \"PSP9\", \"PSP10\", \"PSP11\", \"PSP12\", \n    \"TLV1\", \"TLV2\", \"PTA1\"\n];\n\nestaciones.forEach(estacion => {\n    inicializarVariableGlobal(`datosListos${estacion}`, false);\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "7431e1e7c17e434c",
        "type": "link in",
        "z": "bfffca06cd507a7e",
        "g": "3b894cebda7ce3c5",
        "name": "defVarSROS",
        "links": [
            "efc9a8a9c405e65c"
        ],
        "x": 895,
        "y": 600,
        "wires": [
            [
                "4fd649ab1a44f7da",
                "303bd9eb4e5ce897",
                "4ae7c2343f66186d",
                "4116cebd12f9f41c",
                "95bb512a35517b29",
                "d6a9fbe25594566b",
                "27fb69cfedae6f4d",
                "ad6c426a4073acdb",
                "1ad5e59aa6aa52ed",
                "e27b67d5d9c7889b",
                "335edacc99ab3fc2",
                "1bd1af0f4613b779"
            ]
        ]
    },
    {
        "id": "58ab9e5ffc5432d6",
        "type": "inject",
        "z": "bfffca06cd507a7e",
        "g": "12850eccce220e12",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "7f935eb6f0d4ab45"
            ]
        ]
    },
    {
        "id": "b1a1bda0f662aba9",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "TelegramData",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Definir la función para añadir espacios a la izquierda\nfunction padLeftSpaces(str, length) {\n    return (Array(length).join(' ') + str).slice(-length);\n}\n\n// Definir las variables y constantes para SROS usando variables de flujo\nvar dataSROS = {\n    NumeroAlmacen: flow.get(\"SROS_NumeroAlmacen\"),\n    OperacionesEncadenadas: flow.get(\"SROS_OperacionesEncadenadas\"),\n    TipoEstacionOrigen: flow.get(\"SROS_TipoEstacionOrigen\"),\n    NumeroEstacionOrigen: flow.get(\"SROS_NumeroEstacionOrigen\"),\n    TipoEstacionDestino: flow.get(\"SROS_TipoEstacionDestino\"),\n    NumeroEstacionDestino: flow.get(\"SROS_NumeroEstacionDestino\"),\n    Estado: flow.get(\"SROS_Estado\"),\n    Ocupacion: flow.get(\"SROS_Ocupacion\")\n};\n\n// Generar los datos del telegrama\nvar telegramData = \"\";\ntelegramData += padLeft(dataSROS.NumeroAlmacen.toString(), 10);\ntelegramData += padLeft(dataSROS.OperacionesEncadenadas.toString(), 4);\ntelegramData += padLeft(dataSROS.TipoEstacionOrigen.toString(), 3);\ntelegramData += padLeft(dataSROS.NumeroEstacionOrigen.toString(), 3);\ntelegramData += padLeft(dataSROS.TipoEstacionDestino.toString(), 3);\ntelegramData += padLeft(dataSROS.NumeroEstacionDestino.toString(), 3);\ntelegramData += padLeft(dataSROS.Estado.toString(), 3);\ntelegramData += padLeft(dataSROS.Ocupacion.toString(), 3);\n\n// Asignar los datos del telegrama a msg.payload para pasarlos al siguiente nodo\nmsg.payload.telegramData = telegramData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "2c0bf208a595787e",
                "6ef965eabd6c2366"
            ]
        ]
    },
    {
        "id": "2c0bf208a595787e",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "TelegramData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 140,
        "wires": []
    },
    {
        "id": "6ef965eabd6c2366",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "Telegram",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener la fecha y hora actual del sistema\nvar now = new Date();\nvar DateString = now.getFullYear().toString() + padLeft((now.getMonth() + 1).toString(), 2) + padLeft(now.getDate().toString(), 2);\nvar TimeString = padLeft(now.getHours().toString(), 2) + padLeft(now.getMinutes().toString(), 2) + padLeft(now.getSeconds().toString(), 2) + padLeft(now.getMilliseconds().toString(), 3);\nvar DateTimeString = DateString + TimeString;\n\n// Obtener los datos del telegrama generado previamente\nvar telegramData = msg.payload.telegramData;\n\n// Calcular la longitud de los datos del telegrama\nvar DataLength = padLeft(telegramData.length.toString(), 4);\n\nvar sequenceNumberTemp = global.get(\"sequenceNumber\");\nsequenceNumberTemp = sequenceNumberTemp + 1;\nglobal.set(\"sequenceNumber\", sequenceNumberTemp);\nvar SequenceString = padLeft(sequenceNumberTemp.toString(), 4);  //sequenceNumber.toString()\n//global.set(\"ExpectedSequenceNumber_SSTS\", sequenceNumbe\n\n// Construir el telegrama completo para SROS\nvar Telegram = '#STX';\nTelegram += DataLength;\nTelegram += global.get(\"TelegramID_SROS\"); \nTelegram += global.get(\"Version_SROS\"); \nTelegram += global.get(\"Origin_SROS\"); \nTelegram += global.get(\"Destination_SROS\"); \nTelegram += SequenceString; // Incrementar con cada telegrama enviado\nTelegram += DateTimeString; // Hora actual del sistema\nTelegram += telegramData; // Incluir el telegrama generado previamente\nTelegram += '#ETX';\n\n// Asignar el telegrama completo a msg.payload\nmsg.payload = Telegram;\n// Guardar el telegrama en el contexto global\nglobal.set('originalTelegram', msg.payload);\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "d42288917450e867",
                "1ead23ab86b84fc1"
            ]
        ]
    },
    {
        "id": "d42288917450e867",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "Telegram",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 140,
        "wires": []
    },
    {
        "id": "3a4492a7cb1650db",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "routesEvent",
        "func": "// Definir las listas de rutas específicas\nconst origen = ['PIE1'];  // Solo existe PIE1\nconst pepRange = Array.from({ length: 12 }, (_, i) => `PEP${i + 1}`);  // Rango de PEP1 a PEP12\nconst pspRange = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}`);  // Rango de PSP1 a PSP12\nconst pisRange = ['PIS1', 'PIS2', 'PIS3'];  // Estaciones PIS\nconst rejRange = ['REJ1'];  // Estaciones REJ (solo REJ1)\n\n// Objeto para almacenar el estado de todas las rutas\nlet rutasEstado = {};\n\n// Leer el estado de las rutas desde PIE1\norigen.forEach(pie => {\n    // Leer estado de rutas PIE -> PEP\n    pepRange.forEach(pep => {\n        let estado = global.get(`${pie}_${pep}_SimoEvent`);  // Obtener el estado de la ruta\n        rutasEstado[`${pie}_${pep}`] = estado;  // Guardar el estado de la ruta en el objeto\n    });\n\n    // Leer estado de rutas PIE -> PIS1 y PIS3\n    ['PIS1', 'PIS3'].forEach(pis => {\n        let estado = global.get(`${pie}_${pis}_SimoEvent`);  // Obtener el estado de la ruta\n        rutasEstado[`${pie}_${pis}`] = estado;  // Guardar el estado de la ruta en el objeto\n    });\n\n    // Leer estado de rutas PIE -> REJ1\n    rejRange.forEach(rej => {\n        let estado = global.get(`${pie}_${rej}_SimoEvent`);  // Obtener el estado de la ruta\n        rutasEstado[`${pie}_${rej}`] = estado;  // Guardar el estado de la ruta en el objeto\n    });\n});\n\n// Leer el estado de las rutas entre PEP -> PSP\npepRange.forEach((pep, index) => {\n    const psp = `PSP${index + 1}`;  // PEP1 -> PSP1, PEP2 -> PSP2, etc.\n    let estado = global.get(`${pep}_${psp}_SimoEvent`);  // Obtener el estado de la ruta\n    rutasEstado[`${pep}_${psp}`] = estado;  // Guardar el estado de la ruta en el objeto\n});\n\n// Leer el estado de las rutas desde PSP -> PIS2 y PIS3\npspRange.forEach(psp => {\n    ['PIS2', 'PIS3'].forEach(pis => {\n        let estado = global.get(`${psp}_${pis}_SimoEvent`);  // Obtener el estado de la ruta\n        rutasEstado[`${psp}_${pis}`] = estado;  // Guardar el estado de la ruta en el objeto\n    });\n});\n\n// Asignar el objeto con el estado de las rutas al payload para su posterior uso\nmsg.payload = rutasEstado;\n\n// Enviar el objeto al nodo de depuración o siguiente nodo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1280,
        "wires": [
            [
                "557c82c9d1ef5157"
            ]
        ]
    },
    {
        "id": "557c82c9d1ef5157",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "routesEvent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1280,
        "wires": []
    },
    {
        "id": "bd85397d5fc2380a",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "RoutesData",
        "func": "// Definir rangos de rutas\nconst pepRange = Array.from({ length: 12 }, (_, i) => `PEP${i + 1}`);\nconst pspRange = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}`);\nconst pisRange = ['PIS1', 'PIS2', 'PIS3'];\nconst rejRange = ['REJ1'];\n\n// Crear un objeto para almacenar todos los datos de las rutas\nlet rutasData = {};\n\n// Leer rutas PIE1 -> PEP1 a PEP12\npepRange.forEach(pep => {\n    let ruta = `PIE1_${pep}`;\n    rutasData[ruta] = {\n        NumeroAlmacen: global.get(`NumeroAlmacen_${ruta}`),\n        OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${ruta}`),\n        TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${ruta}`),\n        NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${ruta}`),\n        TipoEstacionDestino: global.get(`TipoEstacionDestino_${ruta}`),\n        NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${ruta}`),\n        Estado: global.get(`Estado_${ruta}`),\n        Ocupacion: global.get(`Ocupacion_${ruta}`)\n    };\n});\n\n// Leer ruta PIE1 -> REJ1\nrejRange.forEach(rej => {\n    let ruta = `PIE1_${rej}`;\n    rutasData[ruta] = {\n        NumeroAlmacen: global.get(`NumeroAlmacen_${ruta}`),\n        OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${ruta}`),\n        TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${ruta}`),\n        NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${ruta}`),\n        TipoEstacionDestino: global.get(`TipoEstacionDestino_${ruta}`),\n        NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${ruta}`),\n        Estado: global.get(`Estado_${ruta}`),\n        Ocupacion: global.get(`Ocupacion_${ruta}`)\n    };\n});\n\n// Leer ruta PIE1 -> PIS1\nlet rutaPIS1 = `PIE1_PIS1`;\nrutasData[rutaPIS1] = {\n    NumeroAlmacen: global.get(`NumeroAlmacen_${rutaPIS1}`),\n    OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${rutaPIS1}`),\n    TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${rutaPIS1}`),\n    NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${rutaPIS1}`),\n    TipoEstacionDestino: global.get(`TipoEstacionDestino_${rutaPIS1}`),\n    NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${rutaPIS1}`),\n    Estado: global.get(`Estado_${rutaPIS1}`),\n    Ocupacion: global.get(`Ocupacion_${rutaPIS1}`)\n};\n\n// Leer ruta PIE1 -> PIS3\nlet rutaPIS3 = `PIE1_PIS3`;\nrutasData[rutaPIS3] = {\n    NumeroAlmacen: global.get(`NumeroAlmacen_${rutaPIS3}`),\n    OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${rutaPIS3}`),\n    TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${rutaPIS3}`),\n    NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${rutaPIS3}`),\n    TipoEstacionDestino: global.get(`TipoEstacionDestino_${rutaPIS3}`),\n    NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${rutaPIS3}`),\n    Estado: global.get(`Estado_${rutaPIS3}`),\n    Ocupacion: global.get(`Ocupacion_${rutaPIS3}`)\n};\n\n// Leer rutas PSP1-PSP12 -> PIS2\npspRange.forEach(psp => {\n    let ruta = `${psp}_PIS2`;\n    rutasData[ruta] = {\n        NumeroAlmacen: global.get(`NumeroAlmacen_${ruta}`),\n        OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${ruta}`),\n        TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${ruta}`),\n        NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${ruta}`),\n        TipoEstacionDestino: global.get(`TipoEstacionDestino_${ruta}`),\n        NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${ruta}`),\n        Estado: global.get(`Estado_${ruta}`),\n        Ocupacion: global.get(`Ocupacion_${ruta}`)\n    };\n});\n\n// Leer rutas PSP1-PSP12 -> PIS3\npspRange.forEach(psp => {\n    let ruta = `${psp}_PIS3`;\n    rutasData[ruta] = {\n        NumeroAlmacen: global.get(`NumeroAlmacen_${ruta}`),\n        OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${ruta}`),\n        TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${ruta}`),\n        NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${ruta}`),\n        TipoEstacionDestino: global.get(`TipoEstacionDestino_${ruta}`),\n        NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${ruta}`),\n        Estado: global.get(`Estado_${ruta}`),\n        Ocupacion: global.get(`Ocupacion_${ruta}`)\n    };\n});\n\n// Leer rutas PEP1-PEP12 -> PSP1-PSP12\npepRange.forEach((pep, index) => {\n    const psp = pspRange[index];\n    let ruta = `${pep}_${psp}`;\n    rutasData[ruta] = {\n        NumeroAlmacen: global.get(`NumeroAlmacen_${ruta}`),\n        OperacionesEncadenadas: global.get(`OperacionesEncadenadas_${ruta}`),\n        TipoEstacionOrigen: global.get(`TipoEstacionOrigen_${ruta}`),\n        NumeroEstacionOrigen: global.get(`NumeroEstacionOrigen_${ruta}`),\n        TipoEstacionDestino: global.get(`TipoEstacionDestino_${ruta}`),\n        NumeroEstacionDestino: global.get(`NumeroEstacionDestino_${ruta}`),\n        Estado: global.get(`Estado_${ruta}`),\n        Ocupacion: global.get(`Ocupacion_${ruta}`)\n    };\n});\n\n// Asignar el objeto con los datos de las rutas a msg.payload para enviarlo\nmsg.payload = rutasData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1340,
        "wires": [
            [
                "5f88b41bff4593af"
            ]
        ]
    },
    {
        "id": "05dbd5e82bb5d839",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1340,
        "wires": [
            [
                "bd85397d5fc2380a"
            ]
        ]
    },
    {
        "id": "5f88b41bff4593af",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "RoutesData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1340,
        "wires": []
    },
    {
        "id": "de24b3d156c102de",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "3a4492a7cb1650db"
            ]
        ]
    },
    {
        "id": "1ead23ab86b84fc1",
        "type": "link out",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "SROS_Out",
        "mode": "link",
        "links": [
            "115476e9aae07689"
        ],
        "x": 1205,
        "y": 240,
        "wires": []
    },
    {
        "id": "70d1052e847a2183",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "Asignacion",
        "func": "// Obtener la ruta que disparó el evento\nlet rutaEvento = global.get(\"eventoDetectadoSROS_Gen\");\n\n// Verificar si la ruta está definida\nif (!rutaEvento) {\n    node.warn(\"No se ha detectado ninguna ruta que haya disparado el evento.\");\n    return msg;\n}\n\n// Lista de rutas disponibles (basadas en las rutas creadas)\nconst rutas = [\n    'PIE1_PEP1', 'PIE1_PEP2', 'PIE1_PEP3', 'PIE1_PEP4', 'PIE1_PEP5', 'PIE1_PEP6', 'PIE1_PEP7', 'PIE1_PEP8', 'PIE1_PEP9', 'PIE1_PEP10', 'PIE1_PEP11', 'PIE1_PEP12',\n    'PIE1_REJ1', 'PIE1_PIS1', 'PIE1_PIS3',\n    'PEP1_PSP1', 'PEP2_PSP2', 'PEP3_PSP3', 'PEP4_PSP4', 'PEP5_PSP5', 'PEP6_PSP6', 'PEP7_PSP7', 'PEP8_PSP8', 'PEP9_PSP9', 'PEP10_PSP10', 'PEP11_PSP11', 'PEP12_PSP12',\n    'PSP1_PIS2', 'PSP1_PIS3', 'PSP2_PIS2', 'PSP2_PIS3', 'PSP3_PIS2', 'PSP3_PIS3', 'PSP4_PIS2', 'PSP4_PIS3', 'PSP5_PIS2', 'PSP5_PIS3',\n    'PSP6_PIS2', 'PSP6_PIS3', 'PSP7_PIS2', 'PSP7_PIS3', 'PSP8_PIS2', 'PSP8_PIS3', 'PSP9_PIS2', 'PSP9_PIS3', 'PSP10_PIS2', 'PSP10_PIS3',\n    'PSP11_PIS2', 'PSP11_PIS3', 'PSP12_PIS2', 'PSP12_PIS3'\n];\n\n// Verificar si la ruta está en la lista de rutas\nif (rutas.includes(rutaEvento)) {\n    // Asignar dinámicamente las variables de flujo para la ruta que disparó el evento\n    let numeroAlmacen = global.get(`NumeroAlmacen_${rutaEvento}`) || 0;\n    let operacionesEncadenadas = global.get(`OperacionesEncadenadas_${rutaEvento}`) || 0;\n    let tipoEstacionOrigen = global.get(`TipoEstacionOrigen_${rutaEvento}`) || 0;\n    let numeroEstacionOrigen = global.get(`NumeroEstacionOrigen_${rutaEvento}`) || 0;\n    let tipoEstacionDestino = global.get(`TipoEstacionDestino_${rutaEvento}`) || 0;\n    let numeroEstacionDestino = global.get(`NumeroEstacionDestino_${rutaEvento}`) || 0;\n    let estado = global.get(`Estado_${rutaEvento}`) || 0;\n    let ocupacion = global.get(`Ocupacion_${rutaEvento}`) || 0;\n\n    // Asignar los valores obtenidos a las variables de flujo\n    flow.set(\"SROS_NumeroAlmacen\", numeroAlmacen);\n    flow.set(\"SROS_OperacionesEncadenadas\", operacionesEncadenadas);\n    flow.set(\"SROS_TipoEstacionOrigen\", tipoEstacionOrigen);\n    flow.set(\"SROS_NumeroEstacionOrigen\", numeroEstacionOrigen);\n    flow.set(\"SROS_TipoEstacionDestino\", tipoEstacionDestino);\n    flow.set(\"SROS_NumeroEstacionDestino\", numeroEstacionDestino);\n    flow.set(\"SROS_Estado\", estado);\n    flow.set(\"SROS_Ocupacion\", ocupacion);\n\n    // Mensaje de depuración para validar la asignación de las variables de flujo\n    node.warn(`Variables de flujo asignadas para la ruta ${rutaEvento}:\nNumeroAlmacen: ${numeroAlmacen}\nOperacionesEncadenadas: ${operacionesEncadenadas}\nTipoEstacionOrigen: ${tipoEstacionOrigen}\nNumeroEstacionOrigen: ${numeroEstacionOrigen}\nTipoEstacionDestino: ${tipoEstacionDestino}\nNumeroEstacionDestino: ${numeroEstacionDestino}\nEstado: ${estado}\nOcupacion: ${ocupacion}`);\n\n} else {\n    // Si la ruta no está en la lista, asignar valores predeterminados\n    flow.set(\"SROS_NumeroAlmacen\", 0);\n    flow.set(\"SROS_OperacionesEncadenadas\", 0);\n    flow.set(\"SROS_TipoEstacionOrigen\", 0);\n    flow.set(\"SROS_NumeroEstacionOrigen\", 0);\n    flow.set(\"SROS_TipoEstacionDestino\", 0);\n    flow.set(\"SROS_NumeroEstacionDestino\", 0);\n    flow.set(\"SROS_Estado\", 0);\n    flow.set(\"SROS_Ocupacion\", 0);\n\n    node.warn(\"No se detectó un evento o la ruta no es válida.\");\n}\n\n// Reseteamos la variable para evitar múltiples disparos\nglobal.set('eventoDetectadoSROS_Gen', false);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "f3cb6428c5f7f91c"
            ]
        ]
    },
    {
        "id": "f3cb6428c5f7f91c",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "SROS",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            [
                "b1a1bda0f662aba9"
            ]
        ]
    },
    {
        "id": "8f0b06067a4cc45e",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 670,
        "y": 140,
        "wires": [
            [
                "f3cb6428c5f7f91c"
            ]
        ]
    },
    {
        "id": "27208a353aa3fbfd",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "Start",
        "func": "let eventoDetectadoSROS_Gen = global.get('eventoDetectadoSROS_Gen') || false;\n\n// Definir las rutas específicas para SROS\nconst rutas = [\n    'PIE1_PEP1', 'PIE1_PEP2', 'PIE1_PEP3', 'PIE1_PEP4', 'PIE1_PEP5', 'PIE1_PEP6', 'PIE1_PEP7', 'PIE1_PEP8', 'PIE1_PEP9', 'PIE1_PEP10', 'PIE1_PEP11', 'PIE1_PEP12',\n    'PIE1_REJ1', 'PIE1_PIS1', 'PIE1_PIS3',\n    'PEP1_PSP1', 'PEP2_PSP2', 'PEP3_PSP3', 'PEP4_PSP4', 'PEP5_PSP5', 'PEP6_PSP6', 'PEP7_PSP7', 'PEP8_PSP8', 'PEP9_PSP9', 'PEP10_PSP10', 'PEP11_PSP11', 'PEP12_PSP12',\n    'PSP1_PIS2', 'PSP1_PIS3', 'PSP2_PIS2', 'PSP2_PIS3', 'PSP3_PIS2', 'PSP3_PIS3', 'PSP4_PIS2', 'PSP4_PIS3', 'PSP5_PIS2', 'PSP5_PIS3',\n    'PSP6_PIS2', 'PSP6_PIS3', 'PSP7_PIS2', 'PSP7_PIS3', 'PSP8_PIS2', 'PSP8_PIS3', 'PSP9_PIS2', 'PSP9_PIS3', 'PSP10_PIS2', 'PSP10_PIS3',\n    'PSP11_PIS2', 'PSP11_PIS3', 'PSP12_PIS2', 'PSP12_PIS3'\n];\n\n// Verificamos si la variable eventoDetectadoSROS_Gen ha cambiado de false a una ruta válida\nif (eventoDetectadoSROS_Gen !== false && rutas.includes(eventoDetectadoSROS_Gen)) {\n     global.set('mensajeCompletado', false); \n    msg.payload = {};  // Disparamos el flujo SROS para la ruta detectada\n    \n    // Reseteamos la variable global que ha disparado el evento (por ejemplo, PIE1_PEP1_SimoEvent)\n    global.set(`${eventoDetectadoSROS_Gen}_SimoEvent`, false);\n    \n   \n} else {\n    msg = null;  // Si no hay cambio o no es una ruta válida, no hacemos nada\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "70d1052e847a2183"
            ]
        ]
    },
    {
        "id": "277d5ce4dac605cd",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "100ms",
        "x": 250,
        "y": 200,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "f9fc947198fb608a",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "DefinicionVar",
        "func": "// Inicializar las variables de flujo para SROS\n\n// Variables generales de la trama SROS según el formato en la imagen\nflow.set(\"SROS_NumeroAlmacen\", 0);  // Número de identificación del almacén\nflow.set(\"SROS_OperacionesEncadenadas\", 0);  // Cantidad de rutas que se actualizan\nflow.set(\"SROS_TipoEstacionOrigen\", 0);  // Tipo de estación de origen de la ruta\nflow.set(\"SROS_NumeroEstacionOrigen\", 0);  // Número de estación de origen de la ruta\nflow.set(\"SROS_TipoEstacionDestino\", 0);  // Tipo de estación de destino de la ruta\nflow.set(\"SROS_NumeroEstacionDestino\", 0);  // Número de estación de destino de la ruta\nflow.set(\"SROS_Estado\", 0);  // Estado de la ruta\nflow.set(\"SROS_Ocupacion\", 0);  // Ocupación en la ruta\n\n// Mensaje de inicialización\nnode.warn(\"Variables de flujo para SROS inicializadas correctamente sin las variables auxiliares.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "aee96f11e187ae22",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "DefinicionVar",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "f9fc947198fb608a"
            ]
        ]
    },
    {
        "id": "17b35082ac0d0a22",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "flowVars",
        "func": "// Leer las variables de flujo para la trama SROS\nlet numeroAlmacen = flow.get(\"SROS_NumeroAlmacen\") || 0;  // Leer Número de identificación del almacén\nlet operacionesEncadenadas = flow.get(\"SROS_OperacionesEncadenadas\") || 0;  // Leer Cantidad de rutas que se actualizan\nlet tipoEstacionOrigen = flow.get(\"SROS_TipoEstacionOrigen\") || 0;  // Leer Tipo de estación de origen de la ruta\nlet numeroEstacionOrigen = flow.get(\"SROS_NumeroEstacionOrigen\") || 0;  // Leer Número de estación de origen de la ruta\nlet tipoEstacionDestino = flow.get(\"SROS_TipoEstacionDestino\") || 0;  // Leer Tipo de estación de destino de la ruta\nlet numeroEstacionDestino = flow.get(\"SROS_NumeroEstacionDestino\") || 0;  // Leer Número de estación de destino de la ruta\nlet estado = flow.get(\"SROS_Estado\") || 0;  // Leer Estado de la ruta\nlet ocupacion = flow.get(\"SROS_Ocupacion\") || 0;  // Leer Ocupación en la ruta\n\n// Asignar los valores leídos a msg.payload\nmsg.payload = {\n    NumeroAlmacen: numeroAlmacen,\n    OperacionesEncadenadas: operacionesEncadenadas,\n    TipoEstacionOrigen: tipoEstacionOrigen,\n    NumeroEstacionOrigen: numeroEstacionOrigen,\n    TipoEstacionDestino: tipoEstacionDestino,\n    NumeroEstacionDestino: numeroEstacionDestino,\n    Estado: estado,\n    Ocupacion: ocupacion\n};\n\n// Mensaje de depuración para validar la lectura de las variables de flujo\nnode.warn(`Variables de flujo para SROS leídas:\nNumeroAlmacen: ${numeroAlmacen}\nOperacionesEncadenadas: ${operacionesEncadenadas}\nTipoEstacionOrigen: ${tipoEstacionOrigen}\nNumeroEstacionOrigen: ${numeroEstacionOrigen}\nTipoEstacionDestino: ${tipoEstacionDestino}\nNumeroEstacionDestino: ${numeroEstacionDestino}\nEstado: ${estado}\nOcupacion: ${ocupacion}`);\n\n// Enviar el mensaje al siguiente nodo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 380,
        "wires": [
            [
                "ad90dee8ebfe7dbd"
            ]
        ]
    },
    {
        "id": "af7d0db9d521262c",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "17b35082ac0d0a22",
                "cc04bb434dadb427",
                "0246fa181d3b8ff0"
            ]
        ]
    },
    {
        "id": "ad90dee8ebfe7dbd",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 380,
        "wires": []
    },
    {
        "id": "0246fa181d3b8ff0",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "eventoDetectadoSROS_Gen",
        "func": "msg.payload = global.get('eventoDetectadoSROS_Gen') || false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "2122c9e67f6c41af"
            ]
        ]
    },
    {
        "id": "2122c9e67f6c41af",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 340,
        "wires": []
    },
    {
        "id": "cc04bb434dadb427",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "function 11",
        "func": "// Obtener la ruta que disparó el evento\nlet rutaEvento = global.get(\"eventoDetectadoSROS_Gen\");\n\n// Validar si la ruta está definida\nif (!rutaEvento) {\n    node.warn(\"No se ha detectado ninguna ruta que haya disparado el evento.\");\n    return msg;\n}\n\n// Leer los valores asociados a la ruta que disparó el evento\nlet numeroAlmacen = global.get(`NumeroAlmacen_${rutaEvento}`) || 0;\nlet operacionesEncadenadas = global.get(`OperacionesEncadenadas_${rutaEvento}`) || 0;\nlet tipoEstacionOrigen = global.get(`TipoEstacionOrigen_${rutaEvento}`) || 0;\nlet numeroEstacionOrigen = global.get(`NumeroEstacionOrigen_${rutaEvento}`) || 0;\nlet tipoEstacionDestino = global.get(`TipoEstacionDestino_${rutaEvento}`) || 0;\nlet numeroEstacionDestino = global.get(`NumeroEstacionDestino_${rutaEvento}`) || 0;\nlet estado = global.get(`Estado_${rutaEvento}`) || 0;\nlet ocupacion = global.get(`Ocupacion_${rutaEvento}`) || 0;\n\n// Asignar los valores obtenidos a msg.payload para visualización\nmsg.payload = {\n    RutaEvento: rutaEvento,\n    NumeroAlmacen: numeroAlmacen,\n    OperacionesEncadenadas: operacionesEncadenadas,\n    TipoEstacionOrigen: tipoEstacionOrigen,\n    NumeroEstacionOrigen: numeroEstacionOrigen,\n    TipoEstacionDestino: tipoEstacionDestino,\n    NumeroEstacionDestino: numeroEstacionDestino,\n    Estado: estado,\n    Ocupacion: ocupacion\n};\n\n// Mensaje de depuración para visualizar los datos leídos\nnode.warn(`Datos leídos para la ruta ${rutaEvento}:\nNumeroAlmacen: ${numeroAlmacen}\nOperacionesEncadenadas: ${operacionesEncadenadas}\nTipoEstacionOrigen: ${tipoEstacionOrigen}\nNumeroEstacionOrigen: ${numeroEstacionOrigen}\nTipoEstacionDestino: ${tipoEstacionDestino}\nNumeroEstacionDestino: ${numeroEstacionDestino}\nEstado: ${estado}\nOcupacion: ${ocupacion}`);\n\n// Retornar los datos en el msg.payload\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 420,
        "wires": [
            [
                "1c707359a0af7de2"
            ]
        ]
    },
    {
        "id": "1c707359a0af7de2",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 420,
        "wires": []
    },
    {
        "id": "29ed2ec2ebd399a8",
        "type": "comment",
        "z": "dac92ca23c599b5f",
        "g": "0604e56ff02b4b65",
        "name": "SROS",
        "info": "****************definicion variables de flujo**********\n\n\n// Inicializar las variables de flujo para SROS\n\n// Variables generales de la trama SROS según el formato en la imagen\nflow.set(\"SROS_NumeroAlmacen\", 0);  // Número de identificación del almacén\nflow.set(\"SROS_OperacionesEncadenadas\", 0);  // Cantidad de rutas que se actualizan\nflow.set(\"SROS_TipoEstacionOrigen\", 0);  // Tipo de estación de origen de la ruta\nflow.set(\"SROS_NumeroEstacionOrigen\", 0);  // Número de estación de origen de la ruta\nflow.set(\"SROS_TipoEstacionDestino\", 0);  // Tipo de estación de destino de la ruta\nflow.set(\"SROS_NumeroEstacionDestino\", 0);  // Número de estación de destino de la ruta\nflow.set(\"SROS_Estado\", 0);  // Estado de la ruta\nflow.set(\"SROS_Ocupacion\", 0);  // Ocupación en la ruta\n\n// Mensaje de inicialización\nnode.warn(\"Variables de flujo para SROS inicializadas correctamente sin las variables auxiliares.\");\n\nreturn msg;\n\n\n***********************************************************\n*************Start********************************************\n\nlet eventoDetectadoSROS_Gen = global.get('eventoDetectadoSROS_Gen') || false;\n\n// Definir las rutas específicas para SROS\nconst rutas = [\n    'PIE1_PEP1', 'PIE1_PEP2', 'PIE1_PEP3', 'PIE1_PEP4', 'PIE1_PEP5', 'PIE1_PEP6', 'PIE1_PEP7', 'PIE1_PEP8', 'PIE1_PEP9', 'PIE1_PEP10', 'PIE1_PEP11', 'PIE1_PEP12',\n    'PIE1_REJ1', 'PIE1_PIS1', 'PIE1_PIS3',\n    'PEP1_PSP1', 'PEP2_PSP2', 'PEP3_PSP3', 'PEP4_PSP4', 'PEP5_PSP5', 'PEP6_PSP6', 'PEP7_PSP7', 'PEP8_PSP8', 'PEP9_PSP9', 'PEP10_PSP10', 'PEP11_PSP11', 'PEP12_PSP12',\n    'PSP1_PIS2', 'PSP1_PIS3', 'PSP2_PIS2', 'PSP2_PIS3', 'PSP3_PIS2', 'PSP3_PIS3', 'PSP4_PIS2', 'PSP4_PIS3', 'PSP5_PIS2', 'PSP5_PIS3',\n    'PSP6_PIS2', 'PSP6_PIS3', 'PSP7_PIS2', 'PSP7_PIS3', 'PSP8_PIS2', 'PSP8_PIS3', 'PSP9_PIS2', 'PSP9_PIS3', 'PSP10_PIS2', 'PSP10_PIS3',\n    'PSP11_PIS2', 'PSP11_PIS3', 'PSP12_PIS2', 'PSP12_PIS3'\n];\n\n// Verificamos si la variable eventoDetectadoSROS_Gen ha cambiado de false a una ruta válida\nif (eventoDetectadoSROS_Gen !== false && rutas.includes(eventoDetectadoSROS_Gen)) {\n    msg.payload = {};  // Disparamos el flujo SROS para la ruta detectada\n    \n    // Reseteamos la variable global que ha disparado el evento (por ejemplo, PIE1_PEP1_SimoEvent)\n    global.set(`${eventoDetectadoSROS_Gen}_SimoEvent`, false);\n    \n   \n} else {\n    msg = null;  // Si no hay cambio o no es una ruta válida, no hacemos nada\n}\n\nreturn msg;\n*****************************************************",
        "x": 1070,
        "y": 400,
        "wires": []
    },
    {
        "id": "99864d882b19b2b5",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "PIE1_REJ1_SimoEvent-->true",
        "func": "  global.set(`PIE1_REJ1_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "74480704f36ab607",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1440,
        "wires": [
            [
                "99864d882b19b2b5"
            ]
        ]
    },
    {
        "id": "cb08c9ea8198e3dd",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "PIE1_PIS1_SimoEvent-->true",
        "func": "  global.set(`PIE1_PIS1_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "c78b8fd91c927870",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1480,
        "wires": [
            [
                "cb08c9ea8198e3dd"
            ]
        ]
    },
    {
        "id": "9057048ce549d2a0",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "PIE1_PIS3_SimoEvent-->true",
        "func": "  global.set(`PIE1_PIS3_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "32ee31996e368c4b",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1520,
        "wires": [
            [
                "9057048ce549d2a0"
            ]
        ]
    },
    {
        "id": "fcbb5e75e2f0acd9",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "PIE1_PEPs_SimoEvent-->true",
        "func": "  global.set(`PIE1_PEP1_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP2_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP3_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP4_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP5_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP6_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP7_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP8_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP9_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP10_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP11_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n  global.set(`PIE1_PEP12_SimoEvent`, true);  // Definir evento SIMO para PIE1 -> REJ1\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "10b37c26726edc94",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1560,
        "wires": [
            [
                "fcbb5e75e2f0acd9"
            ]
        ]
    },
    {
        "id": "e2364c455c941b68",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "PSPs_PIS2_SimoEvent-->true",
        "func": "global.set(`PSP1_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP2_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP3_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP4_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP5_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP6_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP7_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP8_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP9_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP10_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP11_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP12_PIS2_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "a1c7449b4bac3bc5",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1600,
        "wires": [
            [
                "e2364c455c941b68"
            ]
        ]
    },
    {
        "id": "e99a86942e6d9b4f",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "PSPs_PIS3_SimoEvent-->true",
        "func": "global.set(`PSP1_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP2_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP3_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP4_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP5_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP6_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP7_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP8_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP9_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP10_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP11_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\nglobal.set(`PSP12_PIS3_SimoEvent`, true);  // Definir evento SIMO para PSP1 -> REJ1\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "0e421a5dcb121438",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "2d41f37576661d3e",
        "name": "Trig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1640,
        "wires": [
            [
                "e99a86942e6d9b4f"
            ]
        ]
    },
    {
        "id": "b293c0378ca940f9",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "CheckRutas",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "793b3247e4c093b7"
            ]
        ]
    },
    {
        "id": "ca71dfb2a6882f73",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "setRutasOper",
        "func": "\nflow.set(\"estadoCarro\", 4);\nflow.set(\"modoAuto\", true); // Booleano, true = modo auto\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "793b3247e4c093b7",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "CheckRutas",
        "func": "// Obtener el estado actual del carro y el modo de operación desde las variables flowes\n/* \nlet estadoCarro = flow.get(\"estadoCarro\");\nlet modoAuto = flow.get(\"modoAuto\"); // Booleano, true = modo auto \n*/\n\nlet estadoCarro = global.get(\"nuevoRegistroPES\")?.INTERFACE_DATOS_STATUS_CARRO_ESTADO;\nlet modoAuto = global.get(\"nuevoRegistroSCADA\")?.AUT_CARRO_BM693; // Booleano, true = modo auto\n\n// Determinar si las rutas deben estar operativas o no\nlet rutasOperativas = (modoAuto === true && estadoCarro === 4);\n\n// Obtener el estado anterior de rutasOperativas desde la variable flow\nlet estadoAnterior = flow.get(\"estadoRutasOperativas\");\n\n// Array de rutas a verificar\nconst rutasPIE1_PEP = Array.from({ length: 12 }, (_, i) => `PIE1_PEP${i + 1}`);\nconst rutasPSP_PIS2 = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}_PIS2`);\nconst rutasPSP_PIS3 = Array.from({ length: 12 }, (_, i) => `PSP${i + 1}_PIS3`);\n\n// Función para actualizar el estado de cada ruta y solo lanzar evento SIMO si hubo un cambio flow\nfunction actualizarEstadoRuta(ruta, estadoDeseado) {\n    // Siempre actualizar el estado de la ruta\n    global.set(`Estado_${ruta}`, estadoDeseado);\n    \n    // Solo lanzar el evento SIMO si el estado flow cambió\n    if (lanzarEventos) {\n        global.set(`SROS_Todos_SimoEvent`, true);\n       // global.set(`eventoDetectadoSROS_Gen`, true);\n        node.warn(`Evento SIMO lanzado para ${ruta} debido a cambio flow de estado a ${estadoDeseado}`);\n    }\n}\n\n// Verificar si el estado flow ha cambiado de false a true o de true a false\nlet lanzarEventos = rutasOperativas !== estadoAnterior;\n\nif (rutasOperativas) {\n    // Si rutasOperativas es true, poner todas las rutas en estado operativa (1)\n    node.warn(\"Estableciendo todas las rutas en estado operativa (1).\");\n\n    // Actualizar todas las rutas a estado 1 y lanzar eventos SIMO si hay un cambio flow\n    rutasPIE1_PEP.forEach(ruta => actualizarEstadoRuta(ruta, 1));\n    actualizarEstadoRuta(\"PIE1_PIS3\", 1);\n    rutasPSP_PIS2.forEach(ruta => actualizarEstadoRuta(ruta, 1));\n    rutasPSP_PIS3.forEach(ruta => actualizarEstadoRuta(ruta, 1));\n\n} else {\n    // Si rutasOperativas es false, poner todas las rutas en no operativa (0)\n    node.warn(\"Estableciendo todas las rutas en estado no operativa (0).\");\n\n    // Actualizar todas las rutas a estado 0 y lanzar eventos SIMO si hay un cambio flow\n    rutasPIE1_PEP.forEach(ruta => actualizarEstadoRuta(ruta, 0));\n    actualizarEstadoRuta(\"PIE1_PIS3\", 0);\n    rutasPSP_PIS2.forEach(ruta => actualizarEstadoRuta(ruta, 0));\n    rutasPSP_PIS3.forEach(ruta => actualizarEstadoRuta(ruta, 0));\n}\n\n// Actualizar el estado anterior para la próxima ejecución\nflow.set(\"estadoRutasOperativas\", rutasOperativas);\n\nif (lanzarEventos) {\n    node.warn(\"Actualización de eventos SIMO completada debido a cambio de estado flow.\");\n} else {\n    node.warn(\"No se detectó cambio en el estado flow. Estados actualizados sin lanzar eventos SIMO.\");\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "078e3ed86a4912e2",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "ca71dfb2a6882f73"
            ]
        ]
    },
    {
        "id": "e98cbcc8e3daea04",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "resetRutasOper",
        "func": "flow.set(\"estadoCarro\", 4);\nflow.set(\"modoAuto\", false); // Booleano, true = modo auto\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "330b4228004ab4bd",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "e98cbcc8e3daea04"
            ]
        ]
    },
    {
        "id": "895f3221fdb7b08e",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "TelegramData",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Definir las rutas\nconst rutas = [\n    'PIE1_PEP1', 'PIE1_PEP2', 'PIE1_PEP3', 'PIE1_PEP4', 'PIE1_PEP5', 'PIE1_PEP6', 'PIE1_PEP7', 'PIE1_PEP8', 'PIE1_PEP9', 'PIE1_PEP10', 'PIE1_PEP11', 'PIE1_PEP12',\n    'PIE1_PIS3',\n     'PSP1_PIS2', 'PSP1_PIS3', 'PSP2_PIS2', 'PSP2_PIS3', 'PSP3_PIS2', 'PSP3_PIS3', 'PSP4_PIS2', 'PSP4_PIS3', 'PSP5_PIS2', 'PSP5_PIS3',\n    'PSP6_PIS2', 'PSP6_PIS3', 'PSP7_PIS2', 'PSP7_PIS3', 'PSP8_PIS2', 'PSP8_PIS3', 'PSP9_PIS2', 'PSP9_PIS3', 'PSP10_PIS2', 'PSP10_PIS3',\n    'PSP11_PIS2', 'PSP11_PIS3', 'PSP12_PIS2', 'PSP12_PIS3'\n];\n\n// Generar los datos del telegrama\nlet telegramData = \"\";\n\n// Añadir la cabecera\nlet numeroAlmacen = padLeft(global.get(\"NumeroAlmacen_SSTS\") || \"0\", 10);\nlet operacionesEncadenadas = padLeft(rutas.length.toString(), 4);\ntelegramData += numeroAlmacen + operacionesEncadenadas;\n\n// Añadir los datos de cada ruta\nrutas.forEach(function (ruta) {\n    telegramData += padLeft(global.get(`TipoEstacionOrigen_${ruta}`).toString(), 3);\n    telegramData += padLeft(global.get(`NumeroEstacionOrigen_${ruta}`).toString(), 3);\n    telegramData += padLeft(global.get(`TipoEstacionDestino_${ruta}`).toString(), 3);\n    telegramData += padLeft(global.get(`NumeroEstacionDestino_${ruta}`).toString(), 3);\n    telegramData += padLeft(global.get(`Estado_${ruta}`).toString(), 3);\n    telegramData += padLeft(global.get(`Ocupacion_${ruta}`).toString(), 3);\n});\n\n// Asignar los datos del telegrama a msg.payload para pasarlos al siguiente nodo\nmsg.payload.telegramData = telegramData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 860,
        "wires": [
            [
                "41f70f7592ac8f05",
                "2e996f6889472bb5"
            ]
        ]
    },
    {
        "id": "41f70f7592ac8f05",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "TelegramData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 760,
        "wires": []
    },
    {
        "id": "2e996f6889472bb5",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "Telegram",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener la fecha y hora actual del sistema\nvar now = new Date();\nvar DateString = now.getFullYear().toString() + padLeft((now.getMonth() + 1).toString(), 2) + padLeft(now.getDate().toString(), 2);\nvar TimeString = padLeft(now.getHours().toString(), 2) + padLeft(now.getMinutes().toString(), 2) + padLeft(now.getSeconds().toString(), 2) + padLeft(now.getMilliseconds().toString(), 3);\nvar DateTimeString = DateString + TimeString;\n\n// Obtener los datos del telegrama generado previamente\nvar telegramData = msg.payload.telegramData;\n\n// Calcular la longitud de los datos del telegrama\nvar DataLength = padLeft(telegramData.length.toString(), 4);\n\nvar sequenceNumberTemp = global.get(\"sequenceNumber\");\nsequenceNumberTemp = sequenceNumberTemp + 1;\nglobal.set(\"sequenceNumber\", sequenceNumberTemp);\nvar SequenceString = padLeft(sequenceNumberTemp.toString(), 4);  //sequenceNumber.toString()\n//global.set(\"ExpectedSequenceNumber_SSTS\", sequenceNumbe\n\n// Construir el telegrama completo para SROS\nvar Telegram = '#STX';\nTelegram += DataLength;\nTelegram += global.get(\"TelegramID_SROS\"); \nTelegram += global.get(\"Version_SROS\"); \nTelegram += global.get(\"Origin_SROS\"); \nTelegram += global.get(\"Destination_SROS\"); \nTelegram += SequenceString; // Incrementar con cada telegrama enviado\nTelegram += DateTimeString; // Hora actual del sistema\nTelegram += telegramData; // Incluir el telegrama generado previamente\nTelegram += '#ETX';\n\n// Asignar el telegrama completo a msg.payload\nmsg.payload = Telegram;\n// Guardar el telegrama en el contexto global\nglobal.set('originalTelegram', msg.payload);\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 860,
        "wires": [
            [
                "e5331abebd9da2df",
                "3e50956d8b3e84da"
            ]
        ]
    },
    {
        "id": "e5331abebd9da2df",
        "type": "debug",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "Telegram",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 760,
        "wires": []
    },
    {
        "id": "3e50956d8b3e84da",
        "type": "link out",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "SROS_Out",
        "mode": "link",
        "links": [
            "115476e9aae07689"
        ],
        "x": 1005,
        "y": 860,
        "wires": []
    },
    {
        "id": "d9cf5f8d9a642a80",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 900,
        "wires": [
            [
                "011b5074bf73ad27"
            ]
        ]
    },
    {
        "id": "011b5074bf73ad27",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "SROS",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 880,
        "wires": [
            [
                "895f3221fdb7b08e"
            ]
        ]
    },
    {
        "id": "33e0cc12058049f4",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "Start",
        "func": "let eventoDetectadoSROS_Gen = global.get('eventoDetectadoSROS_Gen') || false;\n\n\n\n// Verificamos si la variable eventoDetectadoSROS_Gen ha cambiado de false a una ruta válida\nif (eventoDetectadoSROS_Gen !== false ) {\n     global.set('mensajeCompletado', false); \n    msg.payload = {};  // Disparamos el flujo SROS para la ruta detectada\n    \n    // Reseteamos la variable global que ha disparado el evento (por ejemplo, PIE1_PEP1_SimoEvent)\n    global.set(`SROS_Todos_SimoEvent`, false);\n    global.set(`eventoDetectadoSROS_Gen`, false);\n    \n   \n} else {\n    msg = null;  // Si no hay cambio o no es una ruta válida, no hacemos nada\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 800,
        "wires": [
            [
                "895f3221fdb7b08e"
            ]
        ]
    },
    {
        "id": "fbe9abbc4cf57d3d",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "100ms",
        "x": 150,
        "y": 780,
        "wires": [
            [],
            [],
            [
                "33e0cc12058049f4"
            ],
            []
        ]
    },
    {
        "id": "8dabf0a16ec6dea1",
        "type": "comment",
        "z": "dac92ca23c599b5f",
        "g": "cc13d33aa0b444ba",
        "name": "SROS",
        "info": "****************definicion variables de flujo**********\n\n\n// Inicializar las variables de flujo para SROS\n\n// Variables generales de la trama SROS según el formato en la imagen\nflow.set(\"SROS_NumeroAlmacen\", 0);  // Número de identificación del almacén\nflow.set(\"SROS_OperacionesEncadenadas\", 0);  // Cantidad de rutas que se actualizan\nflow.set(\"SROS_TipoEstacionOrigen\", 0);  // Tipo de estación de origen de la ruta\nflow.set(\"SROS_NumeroEstacionOrigen\", 0);  // Número de estación de origen de la ruta\nflow.set(\"SROS_TipoEstacionDestino\", 0);  // Tipo de estación de destino de la ruta\nflow.set(\"SROS_NumeroEstacionDestino\", 0);  // Número de estación de destino de la ruta\nflow.set(\"SROS_Estado\", 0);  // Estado de la ruta\nflow.set(\"SROS_Ocupacion\", 0);  // Ocupación en la ruta\n\n// Mensaje de inicialización\nnode.warn(\"Variables de flujo para SROS inicializadas correctamente sin las variables auxiliares.\");\n\nreturn msg;\n\n\n***********************************************************\n*************Start********************************************\n\nlet eventoDetectadoSROS_Gen = global.get('eventoDetectadoSROS_Gen') || false;\n\n// Definir las rutas específicas para SROS\nconst rutas = [\n    'PIE1_PEP1', 'PIE1_PEP2', 'PIE1_PEP3', 'PIE1_PEP4', 'PIE1_PEP5', 'PIE1_PEP6', 'PIE1_PEP7', 'PIE1_PEP8', 'PIE1_PEP9', 'PIE1_PEP10', 'PIE1_PEP11', 'PIE1_PEP12',\n    'PIE1_REJ1', 'PIE1_PIS1', 'PIE1_PIS3',\n    'PEP1_PSP1', 'PEP2_PSP2', 'PEP3_PSP3', 'PEP4_PSP4', 'PEP5_PSP5', 'PEP6_PSP6', 'PEP7_PSP7', 'PEP8_PSP8', 'PEP9_PSP9', 'PEP10_PSP10', 'PEP11_PSP11', 'PEP12_PSP12',\n    'PSP1_PIS2', 'PSP1_PIS3', 'PSP2_PIS2', 'PSP2_PIS3', 'PSP3_PIS2', 'PSP3_PIS3', 'PSP4_PIS2', 'PSP4_PIS3', 'PSP5_PIS2', 'PSP5_PIS3',\n    'PSP6_PIS2', 'PSP6_PIS3', 'PSP7_PIS2', 'PSP7_PIS3', 'PSP8_PIS2', 'PSP8_PIS3', 'PSP9_PIS2', 'PSP9_PIS3', 'PSP10_PIS2', 'PSP10_PIS3',\n    'PSP11_PIS2', 'PSP11_PIS3', 'PSP12_PIS2', 'PSP12_PIS3'\n];\n\n// Verificamos si la variable eventoDetectadoSROS_Gen ha cambiado de false a una ruta válida\nif (eventoDetectadoSROS_Gen !== false && rutas.includes(eventoDetectadoSROS_Gen)) {\n    msg.payload = {};  // Disparamos el flujo SROS para la ruta detectada\n    \n    // Reseteamos la variable global que ha disparado el evento (por ejemplo, PIE1_PEP1_SimoEvent)\n    global.set(`${eventoDetectadoSROS_Gen}_SimoEvent`, false);\n    \n   \n} else {\n    msg = null;  // Si no hay cambio o no es una ruta válida, no hacemos nada\n}\n\nreturn msg;\n*****************************************************",
        "x": 870,
        "y": 1020,
        "wires": []
    },
    {
        "id": "790edf56c1e3e980",
        "type": "function",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "SROS_Todos_SimoEvent-->true",
        "func": "global.set(`SROS_Todos_SimoEvent`, true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "453c9ca71a0761d3",
        "type": "inject",
        "z": "dac92ca23c599b5f",
        "g": "6a0487b74f5175e1",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "790edf56c1e3e980"
            ]
        ]
    },
    {
        "id": "364e2c2dd50d5935",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "TelegramData",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Definir la función para añadir espacios a la izquierda\nfunction padLeftSpaces(str, length) {\n    return (Array(length).join(' ') + str).slice(-length);\n}\n\n// Obtener el número de estaciones que se enviarán\nvar estaciones = [\n    { Tipo: global.get(\"TipoEstacion_TLV\"), Numero: global.get(\"Estacion_TLV1\"), Estado: global.get(\"Estado_TLV1\"), Presencia: global.get(\"Presencia_TLV1\"), Ocupacion: global.get(\"Ocupacion_TLV1\"), Capacidad: global.get(\"Capacidad_TLV1\"), Pasillo: global.get(\"Pasillo_TLV1\") },\n    { Tipo: global.get(\"TipoEstacion_TLV\"), Numero: global.get(\"Estacion_TLV2\"), Estado: global.get(\"Estado_TLV2\"), Presencia: global.get(\"Presencia_TLV2\"), Ocupacion: global.get(\"Ocupacion_TLV2\"), Capacidad: global.get(\"Capacidad_TLV2\"), Pasillo: global.get(\"Pasillo_TLV2\") },\n    { Tipo: global.get(\"TipoEstacion_PTA\"), Numero: global.get(\"Estacion_PTA1\"), Estado: global.get(\"Estado_PTA1\"), Presencia: global.get(\"Presencia_PTA1\"), Ocupacion: global.get(\"Ocupacion_PTA1\"), Capacidad: global.get(\"Capacidad_PTA1\"), Pasillo: global.get(\"Pasillo_PTA1\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP1\"), Estado: global.get(\"Estado_PEP1\"), Presencia: global.get(\"Presencia_PEP1\"), Ocupacion: global.get(\"Ocupacion_PEP1\"), Capacidad: global.get(\"Capacidad_PEP1\"), Pasillo: global.get(\"Pasillo_PEP1\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP2\"), Estado: global.get(\"Estado_PEP2\"), Presencia: global.get(\"Presencia_PEP2\"), Ocupacion: global.get(\"Ocupacion_PEP2\"), Capacidad: global.get(\"Capacidad_PEP2\"), Pasillo: global.get(\"Pasillo_PEP2\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP3\"), Estado: global.get(\"Estado_PEP3\"), Presencia: global.get(\"Presencia_PEP3\"), Ocupacion: global.get(\"Ocupacion_PEP3\"), Capacidad: global.get(\"Capacidad_PEP3\"), Pasillo: global.get(\"Pasillo_PEP3\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP4\"), Estado: global.get(\"Estado_PEP4\"), Presencia: global.get(\"Presencia_PEP4\"), Ocupacion: global.get(\"Ocupacion_PEP4\"), Capacidad: global.get(\"Capacidad_PEP4\"), Pasillo: global.get(\"Pasillo_PEP4\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP5\"), Estado: global.get(\"Estado_PEP5\"), Presencia: global.get(\"Presencia_PEP5\"), Ocupacion: global.get(\"Ocupacion_PEP5\"), Capacidad: global.get(\"Capacidad_PEP5\"), Pasillo: global.get(\"Pasillo_PEP5\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP6\"), Estado: global.get(\"Estado_PEP6\"), Presencia: global.get(\"Presencia_PEP6\"), Ocupacion: global.get(\"Ocupacion_PEP6\"), Capacidad: global.get(\"Capacidad_PEP6\"), Pasillo: global.get(\"Pasillo_PEP6\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP7\"), Estado: global.get(\"Estado_PEP7\"), Presencia: global.get(\"Presencia_PEP7\"), Ocupacion: global.get(\"Ocupacion_PEP7\"), Capacidad: global.get(\"Capacidad_PEP7\"), Pasillo: global.get(\"Pasillo_PEP7\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP8\"), Estado: global.get(\"Estado_PEP8\"), Presencia: global.get(\"Presencia_PEP8\"), Ocupacion: global.get(\"Ocupacion_PEP8\"), Capacidad: global.get(\"Capacidad_PEP8\"), Pasillo: global.get(\"Pasillo_PEP8\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP9\"), Estado: global.get(\"Estado_PEP9\"), Presencia: global.get(\"Presencia_PEP9\"), Ocupacion: global.get(\"Ocupacion_PEP9\"), Capacidad: global.get(\"Capacidad_PEP9\"), Pasillo: global.get(\"Pasillo_PEP9\") },\n    { Tipo: global.get(\"TipoEstacion_PEP\"), Numero: global.get(\"Estacion_PEP10\") , Estado: global.get(\"Estado_PEP10\") , Presencia: global.get(\"Presencia_PEP10\") , Ocupacion: global.get(\"Ocupacion_PEP10\") , Capacidad: global.get(\"Capacidad_PEP10\") , Pasillo: global.get(\"Pasillo_PEP10\")  },\n    { Tipo: global.get(\"TipoEstacion_PEP\") , Numero: global.get(\"Estacion_PEP11\") , Estado: global.get(\"Estado_PEP11\") , Presencia: global.get(\"Presencia_PEP11\") , Ocupacion: global.get(\"Ocupacion_PEP11\") , Capacidad: global.get(\"Capacidad_PEP11\") , Pasillo: global.get(\"Pasillo_PEP11\")  },\n    { Tipo: global.get(\"TipoEstacion_PEP\") , Numero: global.get(\"Estacion_PEP12\") , Estado: global.get(\"Estado_PEP12\") , Presencia: global.get(\"Presencia_PEP12\") , Ocupacion: global.get(\"Ocupacion_PEP12\") , Capacidad: global.get(\"Capacidad_PEP12\") , Pasillo: global.get(\"Pasillo_PEP12\")  },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP1\"), Estado: global.get(\"Estado_PSP1\"), Presencia: global.get(\"Presencia_PSP1\"), Ocupacion: global.get(\"Ocupacion_PSP1\"), Capacidad: global.get(\"Capacidad_PSP1\"), Pasillo: global.get(\"Pasillo_PSP1\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP2\"), Estado: global.get(\"Estado_PSP2\"), Presencia: global.get(\"Presencia_PSP2\"), Ocupacion: global.get(\"Ocupacion_PSP2\"), Capacidad: global.get(\"Capacidad_PSP2\"), Pasillo: global.get(\"Pasillo_PSP2\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP3\"), Estado: global.get(\"Estado_PSP3\"), Presencia: global.get(\"Presencia_PSP3\"), Ocupacion: global.get(\"Ocupacion_PSP3\"), Capacidad: global.get(\"Capacidad_PSP3\"), Pasillo: global.get(\"Pasillo_PSP3\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP4\"), Estado: global.get(\"Estado_PSP4\"), Presencia: global.get(\"Presencia_PSP4\"), Ocupacion: global.get(\"Ocupacion_PSP4\"), Capacidad: global.get(\"Capacidad_PSP4\"), Pasillo: global.get(\"Pasillo_PSP4\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP5\"), Estado: global.get(\"Estado_PSP5\"), Presencia: global.get(\"Presencia_PSP5\"), Ocupacion: global.get(\"Ocupacion_PSP5\"), Capacidad: global.get(\"Capacidad_PSP5\"), Pasillo: global.get(\"Pasillo_PSP5\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP6\"), Estado: global.get(\"Estado_PSP6\"), Presencia: global.get(\"Presencia_PSP6\"), Ocupacion: global.get(\"Ocupacion_PSP6\"), Capacidad: global.get(\"Capacidad_PSP6\"), Pasillo: global.get(\"Pasillo_PSP6\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP7\"), Estado: global.get(\"Estado_PSP7\"), Presencia: global.get(\"Presencia_PSP7\"), Ocupacion: global.get(\"Ocupacion_PSP7\"), Capacidad: global.get(\"Capacidad_PSP7\"), Pasillo: global.get(\"Pasillo_PSP7\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP8\"), Estado: global.get(\"Estado_PSP8\"), Presencia: global.get(\"Presencia_PSP8\"), Ocupacion: global.get(\"Ocupacion_PSP8\"), Capacidad: global.get(\"Capacidad_PSP8\"), Pasillo: global.get(\"Pasillo_PSP8\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP9\"), Estado: global.get(\"Estado_PSP9\"), Presencia: global.get(\"Presencia_PSP9\"), Ocupacion: global.get(\"Ocupacion_PSP9\"), Capacidad: global.get(\"Capacidad_PSP9\"), Pasillo: global.get(\"Pasillo_PSP9\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP10\"), Estado: global.get(\"Estado_PSP10\"), Presencia: global.get(\"Presencia_PSP10\"), Ocupacion: global.get(\"Ocupacion_PSP10\"), Capacidad: global.get(\"Capacidad_PSP10\"), Pasillo: global.get(\"Pasillo_PSP10\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP11\"), Estado: global.get(\"Estado_PSP11\"), Presencia: global.get(\"Presencia_PSP11\"), Ocupacion: global.get(\"Ocupacion_PSP11\"), Capacidad: global.get(\"Capacidad_PSP11\"), Pasillo: global.get(\"Pasillo_PSP11\") },\n    { Tipo: global.get(\"TipoEstacion_PSP\"), Numero: global.get(\"Estacion_PSP12\"), Estado: global.get(\"Estado_PSP12\"), Presencia: global.get(\"Presencia_PSP12\"), Ocupacion: global.get(\"Ocupacion_PSP12\"), Capacidad: global.get(\"Capacidad_PSP12\"), Pasillo: global.get(\"Pasillo_PSP12\") },\n    { Tipo: global.get(\"TipoEstacion_PIE\") , Numero: global.get(\"Estacion_PIE1\") , Estado: global.get(\"Estado_PIE1\") , Presencia: global.get(\"Presencia_PIE1\") , Ocupacion: global.get(\"Ocupacion_PIE1\") , Capacidad: global.get(\"Capacidad_PIE1\") , Pasillo: global.get(\"Pasillo_PIE1\") },\n    { Tipo: global.get(\"TipoEstacion_PIS\"), Numero: global.get(\"Estacion_PIS1\"), Estado: global.get(\"Estado_PIS1\"), Presencia: global.get(\"Presencia_PIS1\"), Ocupacion: global.get(\"Ocupacion_PIS1\"), Capacidad: global.get(\"Capacidad_PIS1\"), Pasillo: global.get(\"Pasillo_PIS1\") },\n    { Tipo: global.get(\"TipoEstacion_PIS\"), Numero: global.get(\"Estacion_PIS2\"), Estado: global.get(\"Estado_PIS2\"), Presencia: global.get(\"Presencia_PIS2\"), Ocupacion: global.get(\"Ocupacion_PIS2\"), Capacidad: global.get(\"Capacidad_PIS2\"), Pasillo: global.get(\"Pasillo_PIS2\") },\n    { Tipo: global.get(\"TipoEstacion_PIS\"), Numero: global.get(\"Estacion_PIS3\"), Estado: global.get(\"Estado_PIS3\"), Presencia: global.get(\"Presencia_PIS3\"), Ocupacion: global.get(\"Ocupacion_PIS3\"), Capacidad: global.get(\"Capacidad_PIS3\"), Pasillo: global.get(\"Pasillo_PIS3\") },\n    { Tipo: global.get(\"TipoEstacion_REJ\"), Numero: global.get(\"Estacion_REJ1\"), Estado: global.get(\"Estado_REJ1\"), Presencia: global.get(\"Presencia_REJ1\"), Ocupacion: global.get(\"Ocupacion_REJ1\"), Capacidad: global.get(\"Capacidad_REJ1\"), Pasillo: global.get(\"Pasillo_REJ1\") }\n   \n];\n\n// Definir las variables y constantes para la cabecera\nvar header = {\n    NumeroAlmacen: global.get(\"NumeroAlmacen_SSTS\") || \"0\",  // Valor por defecto en caso de ser undefined\n    OperacionesEncadenadas: padLeft(estaciones.length.toString(), 4),\n};\n\n// Generar los datos del telegrama\nvar telegramData = \"\";\n\n// Añadir la cabecera\ntelegramData += padLeft(header.NumeroAlmacen, 10);\ntelegramData += header.OperacionesEncadenadas;\n\n// Añadir los datos de cada estación\nestaciones.forEach(function(estacion) {\n    telegramData += padLeft(estacion.Tipo.toString(), 3);\n    telegramData += padLeft(estacion.Numero.toString(), 3);\n    telegramData += padLeft(estacion.Estado.toString(), 3);\n    telegramData += padLeft(estacion.Presencia.toString(), 3);\n    telegramData += padLeft(estacion.Ocupacion.toString(), 3);\n    telegramData += padLeft(estacion.Capacidad.toString(), 3);\n    telegramData += padLeft(estacion.Pasillo.toString(), 3);\n});\n\n  global.set(`eventoDetectadoSSTS_Gen`, false);\n// Asignar los datos del telegrama a msg.payload para pasarlos al siguiente nodo\nmsg.payload.telegramData = telegramData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "07e434e84dc0ade7",
                "d7818bafe150c3f9"
            ]
        ]
    },
    {
        "id": "07e434e84dc0ade7",
        "type": "debug",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "TelegramData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.telegramData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "d7818bafe150c3f9",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "Telegram",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener la fecha y hora actual del sistema\nvar now = new Date();\nvar DateString = now.getFullYear().toString() + padLeft((now.getMonth() + 1).toString(), 2) + padLeft(now.getDate().toString(), 2);\nvar TimeString = padLeft(now.getHours().toString(), 2) + padLeft(now.getMinutes().toString(), 2) + padLeft(now.getSeconds().toString(), 2) + padLeft(now.getMilliseconds().toString(), 3);\nvar DateTimeString = DateString + TimeString;\n\n// Obtener los datos del telegrama generado previamente\nvar telegramData = msg.payload.telegramData;\n\n// Calcular la longitud de los datos del telegrama\nvar DataLength = padLeft(telegramData.length.toString(), 4);\n\n\nvar sequenceNumberTemp = global.get(\"sequenceNumber\");\nsequenceNumberTemp = sequenceNumberTemp + 1;\nglobal.set(\"sequenceNumber\", sequenceNumberTemp);\nvar SequenceString = padLeft(sequenceNumberTemp.toString(), 4);  //sequenceNumber.toString()\n//global.set(\"ExpectedSequenceNumber_SSTS\", sequenceNumber);\n\n// Construir el telegrama completo\nvar Telegram = '#STX';\nTelegram += DataLength;\nTelegram += global.get(\"TelegramID_SSTS\"); \nTelegram +=  global.get(\"Version_SSTS\"); \nTelegram +=  global.get(\"Origin_SSTS\"); \nTelegram += global.get(\"Destination_SSTS\"); \nTelegram += SequenceString; // Incrementar con cada telegrama enviado\nTelegram += DateTimeString; // Hora actual del sistema\nTelegram += telegramData; // Incluir el telegrama generado previamente\nTelegram += '#ETX';\n\n// Asignar el telegrama completo a msg.payload\nmsg.payload = Telegram;\n// Guardar el telegrama en el contexto global\nglobal.set('originalTelegram', msg.payload);\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "6d9c6f85519a482e",
                "4bd633d91a78a80d"
            ]
        ]
    },
    {
        "id": "6d9c6f85519a482e",
        "type": "debug",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "Telegram",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 80,
        "wires": []
    },
    {
        "id": "91db07ba067c3df3",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "TelegramData",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener los datos de la estación desde el flujo\nvar estacion = {\n    Tipo: flow.get(\"TipoEstacion\") || 0,          // Tipo de estación (pasado en un nodo anterior)\n    Numero: flow.get(\"NumeroEstacion\") || 0,      // Número de estación\n    Estado: flow.get(\"EstadoEstacion\") || 0,      // Estado de la estación\n    Presencia: flow.get(\"PresenciaEstacion\") || 0, // Presencia en la estación\n    Ocupacion: flow.get(\"OcupacionEstacion\") || 0, // Ocupación de la estación\n    Capacidad: flow.get(\"CapacidadEstacion\") || 0, // Capacidad de la estación\n    Pasillo: flow.get(\"PasilloEstacion\") || 0      // Número de pasillo, si aplica\n};\n\n\nvar header = {\n    NumeroAlmacen: global.get(\"NumeroAlmacen_SSTS\") || \"0\",  // Valor por defecto en caso de ser undefined\n    OperacionesEncadenadas: global.get(\"OperacionesEncadenadas_SSTS\")\n};\n\n// Generar los datos del telegrama para la estación seleccionada\nvar telegramData = \"\";\n\n// Añadir la cabecera\ntelegramData += padLeft(header.NumeroAlmacen, 10);\ntelegramData += padLeft(header.OperacionesEncadenadas, 4);\n\ntelegramData += padLeft(estacion.Tipo.toString(), 3);\ntelegramData += padLeft(estacion.Numero.toString(), 3);\ntelegramData += padLeft(estacion.Estado.toString(), 3);\ntelegramData += padLeft(estacion.Presencia.toString(), 3);\ntelegramData += padLeft(estacion.Ocupacion.toString(), 3);\ntelegramData += padLeft(estacion.Capacidad.toString(), 3);\ntelegramData += padLeft(estacion.Pasillo.toString(), 3);\n\n// Asignar los datos del telegrama a msg.payload para pasarlos al siguiente nodo\nmsg.payload.telegramData = telegramData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 160,
        "wires": [
            [
                "080bc3e83136875e",
                "c38230b24fdfd233"
            ]
        ]
    },
    {
        "id": "080bc3e83136875e",
        "type": "debug",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "TelegramData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.telegramData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 120,
        "wires": []
    },
    {
        "id": "c38230b24fdfd233",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "Telegram",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener la fecha y hora actual del sistema\nvar now = new Date();\nvar DateString = now.getFullYear().toString() + padLeft((now.getMonth() + 1).toString(), 2) + padLeft(now.getDate().toString(), 2);\nvar TimeString = padLeft(now.getHours().toString(), 2) + padLeft(now.getMinutes().toString(), 2) + padLeft(now.getSeconds().toString(), 2) + padLeft(now.getMilliseconds().toString(), 3);\nvar DateTimeString = DateString + TimeString;\n\n// Obtener los datos del telegrama generado previamente\nvar telegramData = msg.payload.telegramData;\n\n// Calcular la longitud de los datos del telegrama\nvar DataLength = padLeft(telegramData.length.toString(), 4);\n\nvar sequenceNumberTemp = global.get(\"sequenceNumber\");\nsequenceNumberTemp = sequenceNumberTemp + 1;\nglobal.set(\"sequenceNumber\", sequenceNumberTemp);\nvar SequenceString = padLeft(sequenceNumberTemp.toString(), 4);  //sequenceNumber.toString()\n//global.set(\"ExpectedSequenceNumber_SSTS\", sequenceNumber);\n\n// Construir el telegrama completo\nvar Telegram = '#STX';\nTelegram += DataLength;\nTelegram += global.get(\"TelegramID_SSTS\"); \nTelegram +=  global.get(\"Version_SSTS\"); \nTelegram +=  global.get(\"Origin_SSTS\"); \nTelegram += global.get(\"Destination_SSTS\"); \nTelegram += SequenceString; // Incrementar con cada telegrama enviado\nTelegram += DateTimeString; // Hora actual del sistema\nTelegram += telegramData; // Incluir el telegrama generado previamente\nTelegram += '#ETX';\n\n\n// Asignar el telegrama completo a msg.payload\n\nmsg.payload = Telegram;\n// Guardar el telegrama en el contexto global\nglobal.set('originalTelegram', msg.payload);\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 160,
        "wires": [
            [
                "9236d03fb2d8607b",
                "b7f47d808dc53ea5"
            ]
        ]
    },
    {
        "id": "9236d03fb2d8607b",
        "type": "debug",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "Telegram",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 120,
        "wires": []
    },
    {
        "id": "01c5255169bc8359",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "DefinicionVar",
        "func": "// Definir las variables en el flujo para la estación\nflow.set(\"TipoEstacion\", 0);          // Tipo de estación (por ejemplo, TLV = 1)\nflow.set(\"NumeroEstacion\", 0);        // Número de la estación (por ejemplo, estación 2)\nflow.set(\"EstadoEstacion\", 0);        // Estado de la estación (1 = activa)\nflow.set(\"PresenciaEstacion\", 0);     // Presencia en la estación (1 = presente)\nflow.set(\"OcupacionEstacion\", 0);     // Ocupación de la estación (0 = vacía)\nflow.set(\"CapacidadEstacion\", 0);     // Capacidad de la estación (1 contenedor)\nflow.set(\"PasilloEstacion\", 0);       // Número de pasillo (por ejemplo, pasillo 3)\nglobal.set(\"OperacionesEncadenadas_SSTS\", 1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2d071656b303efa0",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "DefinicionVar",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 980,
        "y": 120,
        "wires": [
            [
                "01c5255169bc8359"
            ]
        ]
    },
    {
        "id": "461e9c081b41e00a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "SSTS_St",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 160,
        "wires": [
            [
                "91db07ba067c3df3"
            ]
        ]
    },
    {
        "id": "b7f47d808dc53ea5",
        "type": "link out",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "SSTS_Out",
        "mode": "link",
        "links": [
            "a862a21ff82b829d"
        ],
        "x": 1845,
        "y": 160,
        "wires": []
    },
    {
        "id": "989731d30de60f3b",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "461e9c081b41e00a"
            ]
        ]
    },
    {
        "id": "4bd633d91a78a80d",
        "type": "link out",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "SSTS_Out",
        "mode": "link",
        "links": [
            "a862a21ff82b829d"
        ],
        "x": 805,
        "y": 140,
        "wires": []
    },
    {
        "id": "18913ce1449bb514",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "SSTS_All",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "364e2c2dd50d5935"
            ]
        ]
    },
    {
        "id": "886373c0020e6a06",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "18913ce1449bb514"
            ]
        ]
    },
    {
        "id": "4043d3a30de43f1a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "Start",
        "func": "// Obtener el estado actual y la variable 'dispararSSTS_Gen'\nlet eventoDetectadoSSTS_Gen = global.get('eventoDetectadoSSTS_Gen') || false;\nlet dispararSSTS_Gen = global.get('dispararSSTS_Gen');\n\n// Variable para gestionar el temporizador cíclico de 30 segundos\nlet cicloAutomatico = global.get('cicloAutomaticoSSTS') || false;\n\n// Verificamos si estamos en el estado 100 y si dispararSSTS_Gen es true\nif ((eventoDetectadoSSTS_Gen === `SSTS_Todos`)  || ( dispararSSTS_Gen)) {\n    // Enviar el flujo SSTS manualmente y activar el ciclo automático\n    global.set('mensajeCompletado', false); \n    global.set('dispararSSTS_Gen', false);\n     global.set('cicloAutomaticoSSTS', true ) ;\n     msg.payload = {};  // Disparamos el flujo SSTS\n    global.set(`SSTS_TodosSstsEvent`, false);\n  \n\n}  else {\n    // Si no estamos en el estado correcto o la condición no se cumple, no hacemos nada\n    msg = null;\n}\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "364e2c2dd50d5935"
            ]
        ]
    },
    {
        "id": "1630bd12e0cff0c0",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "Asignacion",
        "func": "\n// Obtener la estación que disparó el evento\nlet estacionEvento = global.get(\"eventoDetectadoSSTS_Gen\");\nlet estacionEventoSinNumero = estacionEvento.replace(/\\d+$/, '');  // Remueve cualquier número al final\nglobal.set(\"estacionEventoSinNumero\",estacionEventoSinNumero);\n// Lista de estaciones disponibles\nconst estaciones = [\n  'PIE1', 'PIE2', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n  'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n  'TLV1', 'TLV2', 'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n  'REJ1', 'REJ2', 'REJ3',\n  'PIS1', 'PIS2', 'PIS3',\n  'PTA1'\n  \n];\n\n// Verificar si la estación está en la lista de estaciones\nif (estaciones.includes(estacionEvento)) {\n  // Obtener los valores globales correspondientes a la estación que disparó el evento\n  let tipoEstacion = global.get(`TipoEstacion_${estacionEventoSinNumero}`);  // Tipo de estación según la letra inicial (ej. PEP -> 1)\n  let numeroEstacion = global.get(`Estacion_${estacionEvento}`);  // Número de la estación\n  let estadoEstacion = global.get(`Estado_${estacionEvento}`);  // Estado de la estación\n  let presenciaEstacion = global.get(`Presencia_${estacionEvento}`);  // Presencia en la estación\n  let ocupacionEstacion = global.get(`Ocupacion_${estacionEvento}`);  // Ocupación de la estación\n  let capacidadEstacion = global.get(`Capacidad_${estacionEvento}`);  // Capacidad de la estación\n  let pasilloEstacion = global.get(`Pasillo_${estacionEvento}`);  // Número de pasillo\n\n\n  // Asignar los valores a las variables de flujo\n  flow.set(\"TipoEstacion\", tipoEstacion);\n  flow.set(\"NumeroEstacion\", numeroEstacion);\n  flow.set(\"EstadoEstacion\", estadoEstacion);\n  flow.set(\"PresenciaEstacion\", presenciaEstacion);\n  flow.set(\"OcupacionEstacion\", ocupacionEstacion);\n  flow.set(\"CapacidadEstacion\", capacidadEstacion);\n  flow.set(\"PasilloEstacion\", pasilloEstacion);\n\n // node.warn(`Variables de la estación ${estacionEvento} actualizadas en el flujo`);\n} else {\n  // Definir las variables en el flujo para la estación\nflow.set(\"TipoEstacion\", 0);          // Tipo de estación (por ejemplo, TLV = 1)\nflow.set(\"NumeroEstacion\", 0);        // Número de la estación (por ejemplo, estación 2)\nflow.set(\"EstadoEstacion\", 0);        // Estado de la estación (1 = activa)\nflow.set(\"PresenciaEstacion\", 0);     // Presencia en la estación (1 = presente)\nflow.set(\"OcupacionEstacion\", 0);     // Ocupación de la estación (0 = vacía)\nflow.set(\"CapacidadEstacion\", 0);     // Capacidad de la estación (1 contenedor)\nflow.set(\"PasilloEstacion\", 0);       // Número de pasillo (por ejemplo, pasillo 3)\nnode.warn(\"No se detectó un evento o la estación no es válida\");\n}\nglobal.set('eventoDetectadoSSTS_Gen', false);  // Reseteamos la variable para evitar múltiples disparos\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 200,
        "wires": [
            [
                "461e9c081b41e00a"
            ]
        ]
    },
    {
        "id": "a438495e805ee9fc",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "Start",
        "func": "let eventoDetectadoSSTS_Gen = global.get('eventoDetectadoSSTS_Gen') || false;\nconst estaciones = [\n    'PIE1', 'PIE2', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n    'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n    'TLV1', 'TLV2', 'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n    'REJ1', 'REJ2', 'REJ3',\n    'PIS1', 'PIS2', 'PIS3',\n    'PTA1'\n];\n\n// Verificamos si la variable eventoDetectadoSSTS_Gen ha cambiado de false a una estación válida\nif (eventoDetectadoSSTS_Gen !== false && estaciones.includes(eventoDetectadoSSTS_Gen)) {\n     global.set('mensajeCompletado', false); \n    msg.payload = {};  // Disparamos el flujo SSTS para la estación detectada\n    \n    // Reseteamos la variable global que ha disparado el evento (por ejemplo, PEP1SstsEvent)\n    global.set(`${eventoDetectadoSSTS_Gen}SstsEvent`, false);\n    \n   // global.set('eventoDetectadoSSTS_Gen', false);  // Reseteamos la variable para evitar múltiples disparos\n} else {\n    msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "1630bd12e0cff0c0"
            ]
        ]
    },
    {
        "id": "be42bcee176a15e7",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "100ms",
        "x": 130,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "4043d3a30de43f1a",
                "37d0957556353ab5"
            ],
            []
        ]
    },
    {
        "id": "c508a64717b769bb",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "08d4b7fc21a7a783",
        "g": "6f362c6cd96a870b",
        "name": "100ms",
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "a438495e805ee9fc"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "87c219fe90d87cdb",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "7eed7e8b520920a9",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 460,
        "wires": [
            [
                "c6c3e888bab12fb6"
            ]
        ],
        "l": true
    },
    {
        "id": "dca401ad62738b94",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "ffc737f11425615b",
        "name": "cambioEstado",
        "func": "// Obtener los valores actuales de las variables globales para PIE1\nlet estadoActual = global.get(\"Estado_PIE1\");\nlet presenciaActual = global.get(\"Presencia_PIE1\");\nlet ocupacionActual = global.get(\"Ocupacion_PIE1\");\nlet capacidadActual = global.get(\"Capacidad_PIE1\");\nlet pasilloActual = global.get(\"Pasillo_PIE1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnterior = global.get(\"Estado_PIE1_Anterior\");\nlet presenciaAnterior = global.get(\"Presencia_PIE1_Anterior\");\nlet ocupacionAnterior = global.get(\"Ocupacion_PIE1_Anterior\");\nlet capacidadAnterior = global.get(\"Capacidad_PIE1_Anterior\");\nlet pasilloAnterior = global.get(\"Pasillo_PIE1_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActual !== estadoAnterior ||\n    presenciaActual !== presenciaAnterior ||\n    ocupacionActual !== ocupacionAnterior ||\n    capacidadActual !== capacidadAnterior ||\n    pasilloActual !== pasilloAnterior\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPIE a true\n    global.set(\"cambioEstadoPIE\", true);\n    node.warn(\"Cambio detectado en una o más variables de PIE.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPIE a false\n    global.set(\"cambioEstadoPIE\", false);\n //   node.warn(\"No se detectaron cambios en las variables de PIE.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PIE1_Anterior\", estadoActual);\nglobal.set(\"Presencia_PIE1_Anterior\", presenciaActual);\nglobal.set(\"Ocupacion_PIE1_Anterior\", ocupacionActual);\nglobal.set(\"Capacidad_PIE1_Anterior\", capacidadActual);\nglobal.set(\"Pasillo_PIE1_Anterior\", pasilloActual);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "16d0abf55448528b",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "ffc737f11425615b",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 770,
        "y": 460,
        "wires": [
            [
                "dca401ad62738b94"
            ]
        ],
        "l": true
    },
    {
        "id": "6af4c5ee294e3540",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "6c75ba1697d3feb5",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 680,
        "wires": [
            [
                "9db968d6847bd033"
            ]
        ],
        "l": true
    },
    {
        "id": "29b2ccfdd5d93093",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1a43e1884ab802a5",
        "name": "cambioEstado",
        "func": "// Obtener los valores actuales de las variables globales para TLV1\nlet estadoActualTLV1 = global.get(\"Estado_TLV1\");\nlet presenciaActualTLV1 = global.get(\"Presencia_TLV1\");\nlet ocupacionActualTLV1 = global.get(\"Ocupacion_TLV1\");\nlet capacidadActualTLV1 = global.get(\"Capacidad_TLV1\");\nlet pasilloActualTLV1 = global.get(\"Pasillo_TLV1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorTLV1 = global.get(\"Estado_TLV1_Anterior\");\nlet presenciaAnteriorTLV1 = global.get(\"Presencia_TLV1_Anterior\");\nlet ocupacionAnteriorTLV1 = global.get(\"Ocupacion_TLV1_Anterior\");\nlet capacidadAnteriorTLV1 = global.get(\"Capacidad_TLV1_Anterior\");\nlet pasilloAnteriorTLV1 = global.get(\"Pasillo_TLV1_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualTLV1 !== estadoAnteriorTLV1 ||\n    presenciaActualTLV1 !== presenciaAnteriorTLV1 ||\n    ocupacionActualTLV1 !== ocupacionAnteriorTLV1 ||\n    capacidadActualTLV1 !== capacidadAnteriorTLV1 ||\n    pasilloActualTLV1 !== pasilloAnteriorTLV1\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV1 a true\n    global.set(\"cambioEstadoTLV1\", true);\n    node.warn(\"Cambio detectado en una o más variables de TLV1.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV1 a false\n    global.set(\"cambioEstadoTLV1\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de TLV1.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_TLV1_Anterior\", estadoActualTLV1);\nglobal.set(\"Presencia_TLV1_Anterior\", presenciaActualTLV1);\nglobal.set(\"Ocupacion_TLV1_Anterior\", ocupacionActualTLV1);\nglobal.set(\"Capacidad_TLV1_Anterior\", capacidadActualTLV1);\nglobal.set(\"Pasillo_TLV1_Anterior\", pasilloActualTLV1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "b790e0303553572f",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1a43e1884ab802a5",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroTLV1');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para TLV1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualTLV1 = variablesPLC[\"AUTOMATICO\"];\nlet ocupacionActualTLV1 = variablesPLC[\"OCUPACION\"];  // Viene del PLC\nlet averiaActualTLV1 = variablesPLC[\"AVERIA\"];\nlet pasilloActualTLV1 = variablesPLC[\"PASILLO_ACTUAL\"];\n\n// Presencia será la ocupación sin invertir (es decir, su valor original)\nlet presenciaActualTLV1 = ocupacionActualTLV1 === 1 ? 0 : 1;\n\n\n// Siempre mantener la capacidad en 1 para TLV1\nlet capacidadActualTLV1 = 1;\n\n\n\n// Condición: Si estadoActualTLV1 (AUTOMATICO) es 0 y averiaActualTLV1 (AVERIA) es 0, se pone Estado_TLV1 en 1\nif (estadoActualTLV1 === 0 && averiaActualTLV1 === 0) {\n    estadoActualTLV1 = 1;\n} else {\n    estadoActualTLV1 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_TLV1\", estadoActualTLV1);\nglobal.set(\"Presencia_TLV1\", presenciaActualTLV1);\nglobal.set(\"Ocupacion_TLV1\", ocupacionActualTLV1);\nglobal.set(\"Capacidad_TLV1\", capacidadActualTLV1);\nglobal.set(\"Pasillo_TLV1\", pasilloActualTLV1);\n\n// Emitir una advertencia para comprobar las variables asignadas\n//node.warn(`Estado_TLV1: ${estadoActualTLV1}, Presencia_TLV1: ${presenciaActualTLV1}, Ocupacion_TLV1: ${ocupacionActualTLV1}, Capacidad_TLV1: ${capacidadActualTLV1}, Pasillo_TLV1: ${pasilloActualTLV1}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "649ac37ba75ba846",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "1a43e1884ab802a5",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 770,
        "y": 660,
        "wires": [
            [
                "29b2ccfdd5d93093"
            ]
        ],
        "l": true
    },
    {
        "id": "072c91c870e09df4",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "1a43e1884ab802a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 600,
        "wires": [
            [
                "b790e0303553572f"
            ]
        ]
    },
    {
        "id": "1ef664ed430ccd49",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "004f32f1f2d94b82",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 860,
        "wires": [
            [
                "36a63ddf87180a47"
            ]
        ],
        "l": true
    },
    {
        "id": "f382621f5461764d",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "8dd087fe4b1afadc",
        "name": "cambioEstado",
        "func": "// Obtener los valores actuales de las variables globales para TLV2\nlet estadoActualTLV2 = global.get(\"Estado_TLV2\");\nlet presenciaActualTLV2 = global.get(\"Presencia_TLV2\");\nlet ocupacionActualTLV2 = global.get(\"Ocupacion_TLV2\");\nlet capacidadActualTLV2 = global.get(\"Capacidad_TLV2\");\nlet pasilloActualTLV2 = global.get(\"Pasillo_TLV2\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorTLV2 = global.get(\"Estado_TLV2_Anterior\");\nlet presenciaAnteriorTLV2 = global.get(\"Presencia_TLV2_Anterior\");\nlet ocupacionAnteriorTLV2 = global.get(\"Ocupacion_TLV2_Anterior\");\nlet capacidadAnteriorTLV2 = global.get(\"Capacidad_TLV2_Anterior\");\nlet pasilloAnteriorTLV2 = global.get(\"Pasillo_TLV2_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualTLV2 !== estadoAnteriorTLV2 ||\n    presenciaActualTLV2 !== presenciaAnteriorTLV2 ||\n    ocupacionActualTLV2 !== ocupacionAnteriorTLV2 ||\n    capacidadActualTLV2 !== capacidadAnteriorTLV2 ||\n    pasilloActualTLV2 !== pasilloAnteriorTLV2\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV2 a true\n    global.set(\"cambioEstadoTLV2\", true);\n    node.warn(\"Cambio detectado en una o más variables de TLV2.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV2 a false\n    global.set(\"cambioEstadoTLV2\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de TLV2.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_TLV2_Anterior\", estadoActualTLV2);\nglobal.set(\"Presencia_TLV2_Anterior\", presenciaActualTLV2);\nglobal.set(\"Ocupacion_TLV2_Anterior\", ocupacionActualTLV2);\nglobal.set(\"Capacidad_TLV2_Anterior\", capacidadActualTLV2);\nglobal.set(\"Pasillo_TLV2_Anterior\", pasilloActualTLV2);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "91d0d6423f4160df",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "8dd087fe4b1afadc",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroTLV2');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para TLV2 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualTLV2 = variablesPLC[\"AUTOMATICO\"];\nlet ocupacionActualTLV2 = variablesPLC[\"OCUPACION\"];  // Viene del PLC\nlet averiaActualTLV2 = variablesPLC[\"AVERIA\"];\nlet pasilloActualTLV2 = variablesPLC[\"PASILLO_ACTUAL\"];\n\n// Siempre mantener la capacidad en 1 para TLV2\nlet capacidadActualTLV2 = 1;\n\n// Presencia será la ocupación sin invertir (es decir, su valor original)\nlet presenciaActualTLV2 = ocupacionActualTLV2 === 1 ? 0 : 1;\n\n// Condición: Si estadoActualTLV2 (AUTOMATICO) es 0 y averiaActualTLV2 (AVERIA) es 0, se pone Estado_TLV2 en 1\nif (estadoActualTLV2 === 0 && averiaActualTLV2 === 0) {\n    estadoActualTLV2 = 1;\n} else {\n    estadoActualTLV2 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_TLV2\", estadoActualTLV2);\nglobal.set(\"Presencia_TLV2\", presenciaActualTLV2);\nglobal.set(\"Ocupacion_TLV2\", ocupacionActualTLV2);\nglobal.set(\"Capacidad_TLV2\", capacidadActualTLV2);\nglobal.set(\"Pasillo_TLV2\", pasilloActualTLV2);\n\n// Emitir una advertencia para comprobar las variables asignadas\n//node.warn(`Estado_TLV2: ${estadoActualTLV2}, Presencia_TLV2: ${presenciaActualTLV2}, Ocupacion_TLV2: ${ocupacionActualTLV2}, Capacidad_TLV2: ${capacidadActualTLV2}, Pasillo_TLV2: ${pasilloActualTLV2}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "5b021c33f0ea3c49",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "8dd087fe4b1afadc",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 770,
        "y": 880,
        "wires": [
            [
                "f382621f5461764d"
            ]
        ],
        "l": true
    },
    {
        "id": "aca04322a9fa20e2",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "8dd087fe4b1afadc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 820,
        "wires": [
            [
                "91d0d6423f4160df"
            ]
        ]
    },
    {
        "id": "1b80d223a37105c4",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "059b9c8807e7375d",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 1120,
        "wires": [
            [
                "e63e1868f2a8870b"
            ]
        ],
        "l": true
    },
    {
        "id": "22baeab6c78722b8",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "3c79c6c0f2486565",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PTA1\nlet estadoActualPTA1 = global.get(\"Estado_PTA1\");\nlet presenciaActualPTA1 = global.get(\"Presencia_PTA1\");\nlet ocupacionActualPTA1 = global.get(\"Ocupacion_PTA1\");\nlet capacidadActualPTA1 = global.get(\"Capacidad_PTA1\");\nlet pasilloActualPTA1 = global.get(\"Pasillo_PTA1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPTA1 = global.get(\"Estado_PTA1_Anterior\");\nlet presenciaAnteriorPTA1 = global.get(\"Presencia_PTA1_Anterior\");\nlet ocupacionAnteriorPTA1 = global.get(\"Ocupacion_PTA1_Anterior\");\nlet capacidadAnteriorPTA1 = global.get(\"Capacidad_PTA1_Anterior\");\nlet pasilloAnteriorPTA1 = global.get(\"Pasillo_PTA1_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualPTA1 !== estadoAnteriorPTA1 ||\n    presenciaActualPTA1 !== presenciaAnteriorPTA1 ||\n    ocupacionActualPTA1 !== ocupacionAnteriorPTA1 ||\n    capacidadActualPTA1 !== capacidadAnteriorPTA1 ||\n    pasilloActualPTA1 !== pasilloAnteriorPTA1\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV1 a true\n    global.set(\"cambioEstadoPTA1\", true);\n    node.warn(\"Cambio detectado en una o más variables de PTA1.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV1 a false\n    global.set(\"cambioEstadoPTA1\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PTA1.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PTA1_Anterior\", estadoActualPTA1);\nglobal.set(\"Presencia_PTA1_Anterior\", presenciaActualPTA1);\nglobal.set(\"Ocupacion_PTA1_Anterior\", ocupacionActualPTA1);\nglobal.set(\"Capacidad_PTA1_Anterior\", capacidadActualPTA1);\nglobal.set(\"Pasillo_PTA1_Anterior\", pasilloActualPTA1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "91b5962fa1fb8f16",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "3c79c6c0f2486565",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroPES');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PTA1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualPTA1 = variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_ESTADO\"];\nlet ocupacionActualPTA1 = variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_OCUPACION\"];\n//let averiaActualPTA1 = variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_SITUACION\"];\nlet pasilloActualPTA1 = variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_POSICION\"];\n\n// Siempre mantener la capacidad en 1 para TLV1\nlet capacidadActualPTA1 = 1;\n\n\n// Presencia será la ocupación sin invertir (es decir, su valor original)\nlet presenciaActualPTA1 = ocupacionActualPTA1 === 1 ? 0 : 1;\n\n// Condición: Si estadoActuaPTA1 (AUTOMATICO) es 0 y averiaActualPTA1 (AVERIA) es 0, se pone Estado_TLV2 en 1\nif (estadoActualPTA1 === 0 ) {\n    estadoActualPTA1 = 1;\n} else {\n    estadoActualPTA1 = 0;\n}\n\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PTA1\", estadoActualPTA1);\nglobal.set(\"Presencia_PTA1\", presenciaActualPTA1);\nglobal.set(\"Ocupacion_PTA1\", ocupacionActualPTA1);\nglobal.set(\"Capacidad_PTA1\", capacidadActualPTA1);\nglobal.set(\"Pasillo_PTA1\", pasilloActualPTA1);\n\n// Emitir una advertencia para comprobar las variables asignadas\n//node.warn(`Estado_PTA1: ${estadoActualPTA1}, Presencia_PTA1: ${presenciaActualPTA1}, Ocupacion_PTA1: ${ocupacionActualPTA1}, Capacidad_PTA1: ${capacidadActualPTA1}, Pasillo_PTA1: ${pasilloActualPTA1}`);\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "354a1ce8ef8a467b",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "3c79c6c0f2486565",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 770,
        "y": 1100,
        "wires": [
            [
                "22baeab6c78722b8"
            ]
        ],
        "l": true
    },
    {
        "id": "e6954246d5ddb8dd",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "3c79c6c0f2486565",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 1040,
        "wires": [
            [
                "91b5962fa1fb8f16"
            ]
        ]
    },
    {
        "id": "de6fa14332c2ec16",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "a1d13578cb7c4bc3",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "064bb180e8fad20e"
            ]
        ],
        "l": true
    },
    {
        "id": "152f536aad8f655e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "e85b35963aef282c",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PIS1\nlet estadoActualPIS1 = global.get(\"Estado_PIS1\");\nlet presenciaActualPIS1 = global.get(\"Presencia_PIS1\");\nlet ocupacionActualPIS1 = global.get(\"Ocupacion_PIS1\");\nlet capacidadActualPIS1 = global.get(\"Capacidad_PIS1\");\nlet pasilloActualPIS1 = global.get(\"Pasillo_PIS1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPIS1 = global.get(\"Estado_PIS1_Anterior\");\nlet presenciaAnteriorPIS1 = global.get(\"Presencia_PIS1_Anterior\");\nlet ocupacionAnteriorPIS1 = global.get(\"Ocupacion_PIS1_Anterior\");\nlet capacidadAnteriorPIS1 = global.get(\"Capacidad_PIS1_Anterior\");\nlet pasilloAnteriorPIS1 = global.get(\"Pasillo_PIS1_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualPIS1 !== estadoAnteriorPIS1 ||\n    presenciaActualPIS1 !== presenciaAnteriorPIS1 ||\n    ocupacionActualPIS1 !== ocupacionAnteriorPIS1 ||\n    capacidadActualPIS1 !== capacidadAnteriorPIS1 ||\n    pasilloActualPIS1 !== pasilloAnteriorPIS1\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV1 a true\n    global.set(\"cambioEstadoPIS1\", true);\n    node.warn(\"Cambio detectado en una o más variables de PIS1.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV1 a false\n    global.set(\"cambioEstadoPIS1\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PIS1.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PIS1_Anterior\", estadoActualPIS1);\nglobal.set(\"Presencia_PIS1_Anterior\", presenciaActualPIS1);\nglobal.set(\"Ocupacion_PIS1_Anterior\", ocupacionActualPIS1);\nglobal.set(\"Capacidad_PIS1_Anterior\", capacidadActualPIS1);\nglobal.set(\"Pasillo_PIS1_Anterior\", pasilloActualPIS1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "fafe175485631fd4",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "e85b35963aef282c",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 770,
        "y": 1320,
        "wires": [
            [
                "152f536aad8f655e"
            ]
        ],
        "l": true
    },
    {
        "id": "a8614ed79592d391",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "885a256a1b12a5e9",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "d12a49e29147e46a"
            ]
        ],
        "l": true
    },
    {
        "id": "b9c2f13a5b3ccdfb",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "ca1cfc8a2bc7850b",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PIS2\nlet estadoActualPIS2 = global.get(\"Estado_PIS2\");\nlet presenciaActualPIS2 = global.get(\"Presencia_PIS2\");\nlet ocupacionActualPIS2 = global.get(\"Ocupacion_PIS2\");\nlet capacidadActualPIS2 = global.get(\"Capacidad_PIS2\");\nlet pasilloActualPIS2 = global.get(\"Pasillo_PIS2\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPIS2 = global.get(\"Estado_PIS2_Anterior\");\nlet presenciaAnteriorPIS2 = global.get(\"Presencia_PIS2_Anterior\");\nlet ocupacionAnteriorPIS2 = global.get(\"Ocupacion_PIS2_Anterior\");\nlet capacidadAnteriorPIS2 = global.get(\"Capacidad_PIS2_Anterior\");\nlet pasilloAnteriorPIS2 = global.get(\"Pasillo_PIS2_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualPIS2 !== estadoAnteriorPIS2 ||\n    presenciaActualPIS2 !== presenciaAnteriorPIS2 ||\n    ocupacionActualPIS2 !== ocupacionAnteriorPIS2 ||\n    capacidadActualPIS2 !== capacidadAnteriorPIS2 ||\n    pasilloActualPIS2 !== pasilloAnteriorPIS2\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV1 a true\n    global.set(\"cambioEstadoPIS2\", true);\n    node.warn(\"Cambio detectado en una o más variables de PIS2.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV1 a false\n    global.set(\"cambioEstadoPIS2\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PIS2.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PIS2_Anterior\", estadoActualPIS2);\nglobal.set(\"Presencia_PIS2_Anterior\", presenciaActualPIS2);\nglobal.set(\"Ocupacion_PIS2_Anterior\", ocupacionActualPIS2);\nglobal.set(\"Capacidad_PIS2_Anterior\", capacidadActualPIS2);\nglobal.set(\"Pasillo_PIS2_Anterior\", pasilloActualPIS2);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "18f29b322fd3ee90",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "ca1cfc8a2bc7850b",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 1540,
        "wires": [
            [
                "b9c2f13a5b3ccdfb"
            ]
        ],
        "l": true
    },
    {
        "id": "e9a2dd1bd54506ce",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "9402d3484c4ad92c",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 1740,
        "wires": [
            [
                "6eeeac152ae6887f"
            ]
        ],
        "l": true
    },
    {
        "id": "ece35acd38d010ca",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1130859a0776e0c3",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PIS3\nlet estadoActualPIS3 = global.get(\"Estado_PIS3\");\nlet presenciaActualPIS3 = global.get(\"Presencia_PIS3\");\nlet ocupacionActualPIS3 = global.get(\"Ocupacion_PIS3\");\nlet capacidadActualPIS3 = global.get(\"Capacidad_PIS3\");\nlet pasilloActualPIS3 = global.get(\"Pasillo_PIS3\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPIS3 = global.get(\"Estado_PIS3_Anterior\");\nlet presenciaAnteriorPIS3 = global.get(\"Presencia_PIS3_Anterior\");\nlet ocupacionAnteriorPIS3 = global.get(\"Ocupacion_PIS3_Anterior\");\nlet capacidadAnteriorPIS3 = global.get(\"Capacidad_PIS3_Anterior\");\nlet pasilloAnteriorPIS3 = global.get(\"Pasillo_PIS3_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualPIS3 !== estadoAnteriorPIS3 ||\n    presenciaActualPIS3 !== presenciaAnteriorPIS3 ||\n    ocupacionActualPIS3 !== ocupacionAnteriorPIS3 ||\n    capacidadActualPIS3 !== capacidadAnteriorPIS3 ||\n    pasilloActualPIS3 !== pasilloAnteriorPIS3\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV1 a true\n    global.set(\"cambioEstadoPIS3\", true);\n    node.warn(\"Cambio detectado en una o más variables de PIS3.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV1 a false\n    global.set(\"cambioEstadoPIS3\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PIS3.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PIS3_Anterior\", estadoActualPIS3);\nglobal.set(\"Presencia_PIS3_Anterior\", presenciaActualPIS3);\nglobal.set(\"Ocupacion_PIS3_Anterior\", ocupacionActualPIS3);\nglobal.set(\"Capacidad_PIS3_Anterior\", capacidadActualPIS3);\nglobal.set(\"Pasillo_PIS3_Anterior\", pasilloActualPIS3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "60e46caa22017502",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "1130859a0776e0c3",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 1720,
        "wires": [
            [
                "ece35acd38d010ca"
            ]
        ],
        "l": true
    },
    {
        "id": "16e64d1bb71c2d5a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "d9577576f6d1d102",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 1960,
        "wires": [
            [
                "ca43493bf3820331"
            ]
        ],
        "l": true
    },
    {
        "id": "c8ddcbc05c1bd5b0",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "03344c966549c916",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP1\nlet estadoActualPEP1 = global.get(\"Estado_PEP1\");\nlet presenciaActualPEP1 = global.get(\"Presencia_PEP1\");\nlet ocupacionActualPEP1 = global.get(\"Ocupacion_PEP1\");\nlet capacidadActualPEP1 = global.get(\"Capacidad_PEP1\");\nlet pasilloActualPEP1 = global.get(\"Pasillo_PEP1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP1 = global.get(\"Estado_PEP1_Anterior\");\nlet presenciaAnteriorPEP1 = global.get(\"Presencia_PEP1_Anterior\");\nlet ocupacionAnteriorPEP1 = global.get(\"Ocupacion_PEP1_Anterior\");\nlet capacidadAnteriorPEP1 = global.get(\"Capacidad_PEP1_Anterior\");\nlet pasilloAnteriorPEP1 = global.get(\"Pasillo_PEP1_Anterior\");\n\n// Verificar si el estado ha cambiado para establecer dispararSSTS_GenCambioEstado\nif (estadoActualPEP1 !== estadoAnteriorPEP1) {\n    flow.set(\"dispararSSTS_GenCambioEstado\", true); // Disparar SSTS solo si el estado cambia\n    node.warn(\"Cambio detectado en el estado de PEP1.\");\n}\n\n// Comparar las otras variables actuales con las anteriores, sin incluir el estado\nif (\n    presenciaActualPEP1 !== presenciaAnteriorPEP1 ||\n    ocupacionActualPEP1 !== ocupacionAnteriorPEP1 ||\n    capacidadActualPEP1 !== capacidadAnteriorPEP1 ||\n    pasilloActualPEP1 !== pasilloAnteriorPEP1\n) {\n    // Si alguna de las otras variables cambió, establecer cambioEstadoPEP1 a true\n    global.set(\"cambioEstadoPEP1\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP1.\");\n} else {\n    // Si ninguna de las otras variables cambió, establecer cambioEstadoPEP1 a false\n    global.set(\"cambioEstadoPEP1\", false);\n    // node.warn(\"No se detectaron cambios en las variables de PEP1.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP1_Anterior\", estadoActualPEP1);\nglobal.set(\"Presencia_PEP1_Anterior\", presenciaActualPEP1);\nglobal.set(\"Ocupacion_PEP1_Anterior\", ocupacionActualPEP1);\nglobal.set(\"Capacidad_PEP1_Anterior\", capacidadActualPEP1);\nglobal.set(\"Pasillo_PEP1_Anterior\", pasilloActualPEP1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "8ca16342aa71b23f",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "03344c966549c916",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 1940,
        "wires": [
            [
                "c8ddcbc05c1bd5b0"
            ]
        ],
        "l": true
    },
    {
        "id": "290eb4e13e159466",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "03344c966549c916",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 1880,
        "wires": [
            [
                "4412bae75b1f8f90"
            ]
        ]
    },
    {
        "id": "4412bae75b1f8f90",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "03344c966549c916",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 2 y Salida 2)\nlet MesaEntrada_1_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_1_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_1_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_1_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP1Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP1 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_UNO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP1;\nif (MesaEntrada_1_Posición_1_Recogida_Traslo === 0 && MesaEntrada_1_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP1 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP1 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP1\nlet capacidadActualPEP1 = 1;\nlet estadoActualPEP1 = 0;\nlet pasilloActualPEP1 = 1;  // El pasillo siempre será 1 para PEP1\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP1_Temp = variablesPLC_Mesas[\"FOT_PRES_TC37\"];\nlet presenciaActualPEP1;\nif (presenciaActualPEP1_Temp ) {\n    presenciaActualPEP1 = 0;\n} else {\n    presenciaActualPEP1 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP1 es 0), Estado_PEP1 se pone en 1\nif (estadoActualPEP1Temp && averiaActualPEP1 < 2 ) {\n    estadoActualPEP1 = 1;\n} else {\n    estadoActualPEP1 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP1\", estadoActualPEP1);\nglobal.set(\"Presencia_PEP1\", presenciaActualPEP1);\nglobal.set(\"Ocupacion_PEP1\", ocupacionActualPEP1);\nglobal.set(\"Capacidad_PEP1\", capacidadActualPEP1);\nglobal.set(\"Pasillo_PEP1\", pasilloActualPEP1);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP1: ${estadoActualPEP1}, Presencia_PEP1: ${presenciaActualPEP1}, Ocupacion_PEP1: ${ocupacionActualPEP1}, Capacidad_PEP1: ${capacidadActualPEP1}, Pasillo_PEP1: ${pasilloActualPEP1}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "9d46be3f78b5c57a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "ffc737f11425615b",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroPIE');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PIE1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualPIE1 = variablesPLC[\"ESTADO\"];\nlet ocupacionActualPIE1 = variablesPLC[\"OCUPACION\"];\n//let averiaActualPIE1 = variablesPLC[\"\"];\n//let pasilloActualPIE1 = variablesPLC[\"\"];\n\n// Siempre mantener la capacidad en 1 para PIE1\nlet capacidadActualPIE1 = 1;\nlet pasilloActualPIE1 = 0;\n\n// Condición: Si ocupacionActualPIE1\nif (ocupacionActualPIE1 === 0) {\n    ocupacionActualPIE1 = 0;\n} else {\n    ocupacionActualPIE1 = 1;\n}\n\n\n\n// Condición: Si estadoActualPIE1 (AUTOMATICO) es 1 \nif (estadoActualPIE1 === 1) {\n    estadoActualPIE1 = 1;\n} else {\n    estadoActualPIE1 = 0;\n}\n\n\n// Presencia será la ocupación sin invertir (es decir, su valor original)\nlet presenciaActualPIE1_Temp = global.get(\"CL_PIE\" );\nlet presenciaActualPIE1; \n\nif (presenciaActualPIE1_Temp ) {\n    presenciaActualPIE1 = 0;\n} else {\n      presenciaActualPIE1 = 1;\n    \n}\n\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PIE1\", estadoActualPIE1);\nglobal.set(\"Presencia_PIE1\", presenciaActualPIE1);\nglobal.set(\"Ocupacion_PIE1\", ocupacionActualPIE1);\nglobal.set(\"Capacidad_PIE1\", capacidadActualPIE1);\nglobal.set(\"Pasillo_PIE1\", pasilloActualPIE1);\n\n// Emitir una advertencia para comprobar las variables asignadas\n//node.warn(`Estado_PIE1: ${estadoActualPIE1}, Presencia_PIE1: ${presenciaActualPIE1}, Ocupacion_PIE1: ${ocupacionActualPIE1}, Capacidad_PIE1: ${capacidadActualPIE1}, Pasillo_PIE1: ${pasilloActualPIE1}`);\n\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "ecd814750561f711",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "ffc737f11425615b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 380,
        "wires": [
            [
                "9d46be3f78b5c57a"
            ]
        ]
    },
    {
        "id": "21ebd7c99d33d6c1",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "94ad54c038fdfbe7",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 2180,
        "wires": [
            [
                "bc14ecbe3fb578ea"
            ]
        ],
        "l": true
    },
    {
        "id": "22c5f9027e07b764",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "daa9314530bb6cb7",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP2\nlet estadoActualPEP2 = global.get(\"Estado_PEP2\");\nlet presenciaActualPEP2 = global.get(\"Presencia_PEP2\");\nlet ocupacionActualPEP2 = global.get(\"Ocupacion_PEP2\");\nlet capacidadActualPEP2 = global.get(\"Capacidad_PEP2\");\nlet pasilloActualPEP2 = global.get(\"Pasillo_PEP2\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP2 = global.get(\"Estado_PEP2_Anterior\");\nlet presenciaAnteriorPEP2 = global.get(\"Presencia_PEP2_Anterior\");\nlet ocupacionAnteriorPEP2 = global.get(\"Ocupacion_PEP2_Anterior\");\nlet capacidadAnteriorPEP2 = global.get(\"Capacidad_PEP2_Anterior\");\nlet pasilloAnteriorPEP2 = global.get(\"Pasillo_PEP2_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP2 !== estadoAnteriorPEP2 ||\n    presenciaActualPEP2 !== presenciaAnteriorPEP2 ||\n    ocupacionActualPEP2 !== ocupacionAnteriorPEP2 ||\n    capacidadActualPEP2 !== capacidadAnteriorPEP2 ||\n    pasilloActualPEP2 !== pasilloAnteriorPEP2\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP2 a true\n    global.set(\"cambioEstadoPEP2\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP2.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP2 a false\n    global.set(\"cambioEstadoPEP2\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP2.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP2_Anterior\", estadoActualPEP2);\nglobal.set(\"Presencia_PEP2_Anterior\", presenciaActualPEP2);\nglobal.set(\"Ocupacion_PEP2_Anterior\", ocupacionActualPEP2);\nglobal.set(\"Capacidad_PEP2_Anterior\", capacidadActualPEP2);\nglobal.set(\"Pasillo_PEP2_Anterior\", pasilloActualPEP2);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "1f19d8762842547a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "daa9314530bb6cb7",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 2160,
        "wires": [
            [
                "22c5f9027e07b764"
            ]
        ],
        "l": true
    },
    {
        "id": "7ba580c92f8b5f69",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "daa9314530bb6cb7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 2100,
        "wires": [
            [
                "2fb3de588b0fa348"
            ]
        ]
    },
    {
        "id": "2fb3de588b0fa348",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "daa9314530bb6cb7",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 2 y Salida 2)\nlet MesaEntrada_2_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_2_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_2_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_2_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP2Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP2 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_DOS\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP2;\nif (MesaEntrada_2_Posición_1_Recogida_Traslo === 0 && MesaEntrada_2_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP2 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP2 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP2\nlet capacidadActualPEP2 = 1;\nlet estadoActualPEP2 = 0;\nlet pasilloActualPEP2 = 2;  // El pasillo siempre será 2 para PEP2\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP2_Temp = variablesPLC_Mesas[\"FOT_PRES_TC39\"];\n\nlet presenciaActualPEP2;\nif (presenciaActualPEP2_Temp) {\n    presenciaActualPEP2 = 0;\n} else {\n    presenciaActualPEP2 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP2 es 0), Estado_PEP2 se pone en 1\nif (estadoActualPEP2Temp && averiaActualPEP2 < 2) {\n    estadoActualPEP2 = 1;\n} else {\n    estadoActualPEP2 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP2\", estadoActualPEP2);\nglobal.set(\"Presencia_PEP2\", presenciaActualPEP2);\nglobal.set(\"Ocupacion_PEP2\", ocupacionActualPEP2);\nglobal.set(\"Capacidad_PEP2\", capacidadActualPEP2);\nglobal.set(\"Pasillo_PEP2\", pasilloActualPEP2);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP2: ${estadoActualPEP2}, Presencia_PEP2: ${presenciaActualPEP2}, Ocupacion_PEP2: ${ocupacionActualPEP2}, Capacidad_PEP2: ${capacidadActualPEP2}, Pasillo_PEP2: ${pasilloActualPEP2}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "0f63cd8bfbe06e82",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "66c2ab2d09abd784",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 2640,
        "wires": [
            [
                "5338192c263b8924"
            ]
        ],
        "l": true
    },
    {
        "id": "e8710048858a78c7",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "595f7dc1b58d7763",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP4\nlet estadoActualPEP4 = global.get(\"Estado_PEP4\");\nlet presenciaActualPEP4 = global.get(\"Presencia_PEP4\");\nlet ocupacionActualPEP4 = global.get(\"Ocupacion_PEP4\");\nlet capacidadActualPEP4 = global.get(\"Capacidad_PEP4\");\nlet pasilloActualPEP4 = global.get(\"Pasillo_PEP4\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP4 = global.get(\"Estado_PEP4_Anterior\");\nlet presenciaAnteriorPEP4 = global.get(\"Presencia_PEP4_Anterior\");\nlet ocupacionAnteriorPEP4 = global.get(\"Ocupacion_PEP4_Anterior\");\nlet capacidadAnteriorPEP4 = global.get(\"Capacidad_PEP4_Anterior\");\nlet pasilloAnteriorPEP4 = global.get(\"Pasillo_PEP4_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   //estadoActualPEP4 !== estadoAnteriorPEP4 ||\n    presenciaActualPEP4 !== presenciaAnteriorPEP4 ||\n    ocupacionActualPEP4 !== ocupacionAnteriorPEP4 ||\n    capacidadActualPEP4 !== capacidadAnteriorPEP4 ||\n    pasilloActualPEP4 !== pasilloAnteriorPEP4\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP4 a true\n    global.set(\"cambioEstadoPEP4\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP4.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP4 a false\n    global.set(\"cambioEstadoPEP4\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP4.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP4_Anterior\", estadoActualPEP4);\nglobal.set(\"Presencia_PEP4_Anterior\", presenciaActualPEP4);\nglobal.set(\"Ocupacion_PEP4_Anterior\", ocupacionActualPEP4);\nglobal.set(\"Capacidad_PEP4_Anterior\", capacidadActualPEP4);\nglobal.set(\"Pasillo_PEP4_Anterior\", pasilloActualPEP4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "e4af56cf9b8b64cc",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "595f7dc1b58d7763",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 2620,
        "wires": [
            [
                "e8710048858a78c7"
            ]
        ],
        "l": true
    },
    {
        "id": "535edcd944ab65c3",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "595f7dc1b58d7763",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 2560,
        "wires": [
            [
                "c0725411db92b404"
            ]
        ]
    },
    {
        "id": "c0725411db92b404",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "595f7dc1b58d7763",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 4 y Salida 4)\nlet MesaEntrada_4_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_4_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_4_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_4_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP4Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP4 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_CUATRO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP4;\nif (MesaEntrada_4_Posición_1_Recogida_Traslo === 0 && MesaEntrada_4_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP4 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP4 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP4\nlet capacidadActualPEP4 = 1;\nlet estadoActualPEP4 = 0;\nlet pasilloActualPEP4 = 4;  // El pasillo siempre será 4 para PEP4\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP4_Temp = variablesPLC_Mesas[\"FOT_PRES_TC43\"];\n\nlet presenciaActualPEP4;\nif (presenciaActualPEP4_Temp) {\n    presenciaActualPEP4 = 0;\n} else {\n    presenciaActualPEP4 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP4 es 0), Estado_PEP4 se pone en 1\nif (estadoActualPEP4Temp && averiaActualPEP4 < 2) {\n    estadoActualPEP4 = 1;\n} else {\n    estadoActualPEP4 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP4\", estadoActualPEP4);\nglobal.set(\"Presencia_PEP4\", presenciaActualPEP4);\nglobal.set(\"Ocupacion_PEP4\", ocupacionActualPEP4);\nglobal.set(\"Capacidad_PEP4\", capacidadActualPEP4);\nglobal.set(\"Pasillo_PEP4\", pasilloActualPEP4);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP4: ${estadoActualPEP4}, Presencia_PEP4: ${presenciaActualPEP4}, Ocupacion_PEP4: ${ocupacionActualPEP4}, Capacidad_PEP4: ${capacidadActualPEP4}, Pasillo_PEP4: ${pasilloActualPEP4}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "51ea4c9c089ab077",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "cc637912f1c88272",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 2860,
        "wires": [
            [
                "3155849348c68797"
            ]
        ],
        "l": true
    },
    {
        "id": "b107df030b5c99d1",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1d2f40a68d6c5735",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP5\nlet estadoActualPEP5 = global.get(\"Estado_PEP5\");\nlet presenciaActualPEP5 = global.get(\"Presencia_PEP5\");\nlet ocupacionActualPEP5 = global.get(\"Ocupacion_PEP5\");\nlet capacidadActualPEP5 = global.get(\"Capacidad_PEP5\");\nlet pasilloActualPEP5 = global.get(\"Pasillo_PEP5\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP5 = global.get(\"Estado_PEP5_Anterior\");\nlet presenciaAnteriorPEP5 = global.get(\"Presencia_PEP5_Anterior\");\nlet ocupacionAnteriorPEP5 = global.get(\"Ocupacion_PEP5_Anterior\");\nlet capacidadAnteriorPEP5 = global.get(\"Capacidad_PEP5_Anterior\");\nlet pasilloAnteriorPEP5 = global.get(\"Pasillo_PEP5_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPEP5 !== estadoAnteriorPEP5 ||\n    presenciaActualPEP5 !== presenciaAnteriorPEP5 ||\n    ocupacionActualPEP5 !== ocupacionAnteriorPEP5 ||\n    capacidadActualPEP5 !== capacidadAnteriorPEP5 ||\n    pasilloActualPEP5 !== pasilloAnteriorPEP5\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP5 a true\n    global.set(\"cambioEstadoPEP5\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP5.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP5 a false\n    global.set(\"cambioEstadoPEP5\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP5.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP5_Anterior\", estadoActualPEP5);\nglobal.set(\"Presencia_PEP5_Anterior\", presenciaActualPEP5);\nglobal.set(\"Ocupacion_PEP5_Anterior\", ocupacionActualPEP5);\nglobal.set(\"Capacidad_PEP5_Anterior\", capacidadActualPEP5);\nglobal.set(\"Pasillo_PEP5_Anterior\", pasilloActualPEP5);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "ae923cc2ded897ce",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "1d2f40a68d6c5735",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 2840,
        "wires": [
            [
                "b107df030b5c99d1"
            ]
        ],
        "l": true
    },
    {
        "id": "d6f67cda2c56357b",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "1d2f40a68d6c5735",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 2780,
        "wires": [
            [
                "8c0aa1ec11c80b33"
            ]
        ]
    },
    {
        "id": "8c0aa1ec11c80b33",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1d2f40a68d6c5735",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 5 y Salida 5)\nlet MesaEntrada_5_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_5_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_5_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_5_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP5Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP5 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_CINCO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP5;\nif (MesaEntrada_5_Posición_1_Recogida_Traslo === 0 && MesaEntrada_5_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP5 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP5 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP5\nlet capacidadActualPEP5 = 1;\nlet estadoActualPEP5 = 0;\nlet pasilloActualPEP5 = 5;  // El pasillo siempre será 5 para PEP5\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP5_Temp = variablesPLC_Mesas[\"FOT_PRES_TC45\"];\n\nlet presenciaActualPEP5;\nif (presenciaActualPEP5_Temp) {\n    presenciaActualPEP5 = 0;\n} else {\n    presenciaActualPEP5 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP5 es 0), Estado_PEP5 se pone en 1\nif (estadoActualPEP5Temp && averiaActualPEP5 < 2) {\n    estadoActualPEP5 = 1;\n} else {\n    estadoActualPEP5 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP5\", estadoActualPEP5);\nglobal.set(\"Presencia_PEP5\", presenciaActualPEP5);\nglobal.set(\"Ocupacion_PEP5\", ocupacionActualPEP5);\nglobal.set(\"Capacidad_PEP5\", capacidadActualPEP5);\nglobal.set(\"Pasillo_PEP5\", pasilloActualPEP5);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP5: ${estadoActualPEP5}, Presencia_PEP5: ${presenciaActualPEP5}, Ocupacion_PEP5: ${ocupacionActualPEP5}, Capacidad_PEP5: ${capacidadActualPEP5}, Pasillo_PEP5: ${pasilloActualPEP5}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "e17a602c06a0ab9d",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "30459ef60e88e4a3",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 2400,
        "wires": [
            [
                "a8f6f424e95f486e"
            ]
        ],
        "l": true
    },
    {
        "id": "e32d0d3ad9e58362",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "492b860fd6d5303a",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP3\nlet estadoActualPEP3 = global.get(\"Estado_PEP3\");\nlet presenciaActualPEP3 = global.get(\"Presencia_PEP3\");\nlet ocupacionActualPEP3 = global.get(\"Ocupacion_PEP3\");\nlet capacidadActualPEP3 = global.get(\"Capacidad_PEP3\");\nlet pasilloActualPEP3 = global.get(\"Pasillo_PEP3\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP3 = global.get(\"Estado_PEP3_Anterior\");\nlet presenciaAnteriorPEP3 = global.get(\"Presencia_PEP3_Anterior\");\nlet ocupacionAnteriorPEP3 = global.get(\"Ocupacion_PEP3_Anterior\");\nlet capacidadAnteriorPEP3 = global.get(\"Capacidad_PEP3_Anterior\");\nlet pasilloAnteriorPEP3 = global.get(\"Pasillo_PEP3_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP3 !== estadoAnteriorPEP3 ||\n    presenciaActualPEP3 !== presenciaAnteriorPEP3 ||\n    ocupacionActualPEP3 !== ocupacionAnteriorPEP3 ||\n    capacidadActualPEP3 !== capacidadAnteriorPEP3 ||\n    pasilloActualPEP3 !== pasilloAnteriorPEP3\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP3 a true\n    global.set(\"cambioEstadoPEP3\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP3.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP3 a false\n    global.set(\"cambioEstadoPEP3\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP3.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP3_Anterior\", estadoActualPEP3);\nglobal.set(\"Presencia_PEP3_Anterior\", presenciaActualPEP3);\nglobal.set(\"Ocupacion_PEP3_Anterior\", ocupacionActualPEP3);\nglobal.set(\"Capacidad_PEP3_Anterior\", capacidadActualPEP3);\nglobal.set(\"Pasillo_PEP3_Anterior\", pasilloActualPEP3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "fffe66bd24724e3e",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "492b860fd6d5303a",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 2380,
        "wires": [
            [
                "e32d0d3ad9e58362"
            ]
        ],
        "l": true
    },
    {
        "id": "fb82896624db7825",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "492b860fd6d5303a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 2320,
        "wires": [
            [
                "22a16ee287d7ab92"
            ]
        ]
    },
    {
        "id": "22a16ee287d7ab92",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "492b860fd6d5303a",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 3 y Salida 3)\nlet MesaEntrada_3_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_3_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_3_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_3_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP3Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP3 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_TRES\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP3;\nif (MesaEntrada_3_Posición_1_Recogida_Traslo === 0 && MesaEntrada_3_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP3 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP3 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP3\nlet capacidadActualPEP3 = 1;\nlet estadoActualPEP3 = 0;\nlet pasilloActualPEP3 = 3;  // El pasillo siempre será 3 para PEP3\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP3_Temp = variablesPLC_Mesas[\"FOT_PRES_TC41\"];\n\nlet presenciaActualPEP3;\nif (presenciaActualPEP3_Temp) {\n    presenciaActualPEP3 = 0;\n} else {\n    presenciaActualPEP3 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP3 es 0), Estado_PEP3 se pone en 1\nif (estadoActualPEP3Temp && averiaActualPEP3 < 2 ) {\n    estadoActualPEP3 = 1;\n} else {\n    estadoActualPEP3 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP3\", estadoActualPEP3);\nglobal.set(\"Presencia_PEP3\", presenciaActualPEP3);\nglobal.set(\"Ocupacion_PEP3\", ocupacionActualPEP3);\nglobal.set(\"Capacidad_PEP3\", capacidadActualPEP3);\nglobal.set(\"Pasillo_PEP3\", pasilloActualPEP3);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP3: ${estadoActualPEP3}, Presencia_PEP3: ${presenciaActualPEP3}, Ocupacion_PEP3: ${ocupacionActualPEP3}, Capacidad_PEP3: ${capacidadActualPEP3}, Pasillo_PEP3: ${pasilloActualPEP3}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "a11b932411ac94ac",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "ed3fcddd7157ad59",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 3080,
        "wires": [
            [
                "a9a3b78f10494774"
            ]
        ],
        "l": true
    },
    {
        "id": "874a3fdcded825ac",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "dfef1efca5def057",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP6\nlet estadoActualPEP6 = global.get(\"Estado_PEP6\");\nlet presenciaActualPEP6 = global.get(\"Presencia_PEP6\");\nlet ocupacionActualPEP6 = global.get(\"Ocupacion_PEP6\");\nlet capacidadActualPEP6 = global.get(\"Capacidad_PEP6\");\nlet pasilloActualPEP6 = global.get(\"Pasillo_PEP6\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP6 = global.get(\"Estado_PEP6_Anterior\");\nlet presenciaAnteriorPEP6 = global.get(\"Presencia_PEP6_Anterior\");\nlet ocupacionAnteriorPEP6 = global.get(\"Ocupacion_PEP6_Anterior\");\nlet capacidadAnteriorPEP6 = global.get(\"Capacidad_PEP6_Anterior\");\nlet pasilloAnteriorPEP6 = global.get(\"Pasillo_PEP6_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP6 !== estadoAnteriorPEP6 ||\n    presenciaActualPEP6 !== presenciaAnteriorPEP6 ||\n    ocupacionActualPEP6 !== ocupacionAnteriorPEP6 ||\n    capacidadActualPEP6 !== capacidadAnteriorPEP6 ||\n    pasilloActualPEP6 !== pasilloAnteriorPEP6\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP6 a true\n    global.set(\"cambioEstadoPEP6\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP6.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP6 a false\n    global.set(\"cambioEstadoPEP6\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP6.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP6_Anterior\", estadoActualPEP6);\nglobal.set(\"Presencia_PEP6_Anterior\", presenciaActualPEP6);\nglobal.set(\"Ocupacion_PEP6_Anterior\", ocupacionActualPEP6);\nglobal.set(\"Capacidad_PEP6_Anterior\", capacidadActualPEP6);\nglobal.set(\"Pasillo_PEP6_Anterior\", pasilloActualPEP6);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "9a7b8395a8cdb313",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "dfef1efca5def057",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 3060,
        "wires": [
            [
                "874a3fdcded825ac"
            ]
        ],
        "l": true
    },
    {
        "id": "e1127a581167a38b",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "dfef1efca5def057",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 3000,
        "wires": [
            [
                "707bd643996210c1"
            ]
        ]
    },
    {
        "id": "707bd643996210c1",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "dfef1efca5def057",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 6 y Salida 6)\nlet MesaEntrada_6_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_6_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_6_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_6_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP6Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP6 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_SEIS\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP6;\nif (MesaEntrada_6_Posición_1_Recogida_Traslo === 0 && MesaEntrada_6_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP6 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP6 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP6\nlet capacidadActualPEP6 = 1;\nlet estadoActualPEP6 = 0;\nlet pasilloActualPEP6 = 6;  // El pasillo siempre será 6 para PEP6\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP6_Temp = variablesPLC_Mesas[\"FOT_PRES_TC47\"];\n\nlet presenciaActualPEP6;\nif (presenciaActualPEP6_Temp) {\n    presenciaActualPEP6 = 0;\n} else {\n    presenciaActualPEP6 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP6 es 0), Estado_PEP6 se pone en 1\nif (estadoActualPEP6Temp && averiaActualPEP6 < 2) {\n    estadoActualPEP6 = 1;\n} else {\n    estadoActualPEP6 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP6\", estadoActualPEP6);\nglobal.set(\"Presencia_PEP6\", presenciaActualPEP6);\nglobal.set(\"Ocupacion_PEP6\", ocupacionActualPEP6);\nglobal.set(\"Capacidad_PEP6\", capacidadActualPEP6);\nglobal.set(\"Pasillo_PEP6\", pasilloActualPEP6);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP6: ${estadoActualPEP6}, Presencia_PEP6: ${presenciaActualPEP6}, Ocupacion_PEP6: ${ocupacionActualPEP6}, Capacidad_PEP6: ${capacidadActualPEP6}, Pasillo_PEP6: ${pasilloActualPEP6}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "6c5469fc42be030a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "db60865c83c008fd",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 3300,
        "wires": [
            [
                "a0efb77a7e98015c"
            ]
        ],
        "l": true
    },
    {
        "id": "c5d9ed74ed39b4cc",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "5661050aa6900234",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP7\nlet estadoActualPEP7 = global.get(\"Estado_PEP7\");\nlet presenciaActualPEP7 = global.get(\"Presencia_PEP7\");\nlet ocupacionActualPEP7 = global.get(\"Ocupacion_PEP7\");\nlet capacidadActualPEP7 = global.get(\"Capacidad_PEP7\");\nlet pasilloActualPEP7 = global.get(\"Pasillo_PEP7\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP7 = global.get(\"Estado_PEP7_Anterior\");\nlet presenciaAnteriorPEP7 = global.get(\"Presencia_PEP7_Anterior\");\nlet ocupacionAnteriorPEP7 = global.get(\"Ocupacion_PEP7_Anterior\");\nlet capacidadAnteriorPEP7 = global.get(\"Capacidad_PEP7_Anterior\");\nlet pasilloAnteriorPEP7 = global.get(\"Pasillo_PEP7_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP7 !== estadoAnteriorPEP7 ||\n    presenciaActualPEP7 !== presenciaAnteriorPEP7 ||\n    ocupacionActualPEP7 !== ocupacionAnteriorPEP7 ||\n    capacidadActualPEP7 !== capacidadAnteriorPEP7 ||\n    pasilloActualPEP7 !== pasilloAnteriorPEP7\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP7 a true\n    global.set(\"cambioEstadoPEP7\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP7.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP7 a false\n    global.set(\"cambioEstadoPEP7\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP7.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP7_Anterior\", estadoActualPEP7);\nglobal.set(\"Presencia_PEP7_Anterior\", presenciaActualPEP7);\nglobal.set(\"Ocupacion_PEP7_Anterior\", ocupacionActualPEP7);\nglobal.set(\"Capacidad_PEP7_Anterior\", capacidadActualPEP7);\nglobal.set(\"Pasillo_PEP7_Anterior\", pasilloActualPEP7);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "904382cde0183c8e",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "5661050aa6900234",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 3280,
        "wires": [
            [
                "c5d9ed74ed39b4cc"
            ]
        ],
        "l": true
    },
    {
        "id": "365ccf95b3af2172",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "5661050aa6900234",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 3220,
        "wires": [
            [
                "d3d431e93950bc89"
            ]
        ]
    },
    {
        "id": "d3d431e93950bc89",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "5661050aa6900234",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 7 y Salida 7)\nlet MesaEntrada_7_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_7_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_7_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_7_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP7Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP7 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_SIETE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP7;\nif (MesaEntrada_7_Posición_1_Recogida_Traslo === 0 && MesaEntrada_7_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP7 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP7 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP7\nlet capacidadActualPEP7 = 1;\nlet estadoActualPEP7 = 0;\nlet pasilloActualPEP7 = 7;  // El pasillo siempre será 7 para PEP7\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP7_Temp = variablesPLC_Mesas[\"FOT_PRES_TC49\"];\n\nlet presenciaActualPEP7;\nif (presenciaActualPEP7_Temp) {\n    presenciaActualPEP7 = 0;\n} else {\n    presenciaActualPEP7 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP7 es 0), Estado_PEP7 se pone en 1\nif (estadoActualPEP7Temp && averiaActualPEP7 < 2) {\n    estadoActualPEP7 = 1;\n} else {\n    estadoActualPEP7 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP7\", estadoActualPEP7);\nglobal.set(\"Presencia_PEP7\", presenciaActualPEP7);\nglobal.set(\"Ocupacion_PEP7\", ocupacionActualPEP7);\nglobal.set(\"Capacidad_PEP7\", capacidadActualPEP7);\nglobal.set(\"Pasillo_PEP7\", pasilloActualPEP7);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP7: ${estadoActualPEP7}, Presencia_PEP7: ${presenciaActualPEP7}, Ocupacion_PEP7: ${ocupacionActualPEP7}, Capacidad_PEP7: ${capacidadActualPEP7}, Pasillo_PEP7: ${pasilloActualPEP7}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "8233e3f81da227e0",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "5ac7c5cf94fa331b",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 3520,
        "wires": [
            [
                "9207a3ebec47802b"
            ]
        ],
        "l": true
    },
    {
        "id": "80f208312ebe2b71",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "90b39c4e2e071357",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP8\nlet estadoActualPEP8 = global.get(\"Estado_PEP8\");\nlet presenciaActualPEP8 = global.get(\"Presencia_PEP8\");\nlet ocupacionActualPEP8 = global.get(\"Ocupacion_PEP8\");\nlet capacidadActualPEP8 = global.get(\"Capacidad_PEP8\");\nlet pasilloActualPEP8 = global.get(\"Pasillo_PEP8\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP8 = global.get(\"Estado_PEP8_Anterior\");\nlet presenciaAnteriorPEP8 = global.get(\"Presencia_PEP8_Anterior\");\nlet ocupacionAnteriorPEP8 = global.get(\"Ocupacion_PEP8_Anterior\");\nlet capacidadAnteriorPEP8 = global.get(\"Capacidad_PEP8_Anterior\");\nlet pasilloAnteriorPEP8 = global.get(\"Pasillo_PEP8_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP8 !== estadoAnteriorPEP8 ||\n    presenciaActualPEP8 !== presenciaAnteriorPEP8 ||\n    ocupacionActualPEP8 !== ocupacionAnteriorPEP8 ||\n    capacidadActualPEP8 !== capacidadAnteriorPEP8 ||\n    pasilloActualPEP8 !== pasilloAnteriorPEP8\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP8 a true\n    global.set(\"cambioEstadoPEP8\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP8.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP8 a false\n    global.set(\"cambioEstadoPEP8\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP8.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP8_Anterior\", estadoActualPEP8);\nglobal.set(\"Presencia_PEP8_Anterior\", presenciaActualPEP8);\nglobal.set(\"Ocupacion_PEP8_Anterior\", ocupacionActualPEP8);\nglobal.set(\"Capacidad_PEP8_Anterior\", capacidadActualPEP8);\nglobal.set(\"Pasillo_PEP8_Anterior\", pasilloActualPEP8);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "b16e53465bb1626f",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "90b39c4e2e071357",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 3500,
        "wires": [
            [
                "80f208312ebe2b71"
            ]
        ],
        "l": true
    },
    {
        "id": "1f028294f68e01f2",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "90b39c4e2e071357",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 3440,
        "wires": [
            [
                "550ce0740fd159ea"
            ]
        ]
    },
    {
        "id": "550ce0740fd159ea",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "90b39c4e2e071357",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 8 y Salida 8)\nlet MesaEntrada_8_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_8_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_8_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_8_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP8Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP8 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_OCHO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP8;\nif (MesaEntrada_8_Posición_1_Recogida_Traslo === 0 && MesaEntrada_8_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP8 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP8 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP8\nlet capacidadActualPEP8 = 1;\nlet estadoActualPEP8 = 0;\nlet pasilloActualPEP8 = 8;  // El pasillo siempre será 8 para PEP8\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP8_Temp = variablesPLC_Mesas[\"FOT_PRES_TC51\"];\n\nlet presenciaActualPEP8;\nif (presenciaActualPEP8_Temp) {\n    presenciaActualPEP8 = 0;\n} else {\n    presenciaActualPEP8 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP8 es 0), Estado_PEP8 se pone en 1\nif (estadoActualPEP8Temp && averiaActualPEP8 < 2 ) {\n    estadoActualPEP8 = 1;\n} else {\n    estadoActualPEP8 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP8\", estadoActualPEP8);\nglobal.set(\"Presencia_PEP8\", presenciaActualPEP8);\nglobal.set(\"Ocupacion_PEP8\", ocupacionActualPEP8);\nglobal.set(\"Capacidad_PEP8\", capacidadActualPEP8);\nglobal.set(\"Pasillo_PEP8\", pasilloActualPEP8);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP8: ${estadoActualPEP8}, Presencia_PEP8: ${presenciaActualPEP8}, Ocupacion_PEP8: ${ocupacionActualPEP8}, Capacidad_PEP8: ${capacidadActualPEP8}, Pasillo_PEP8: ${pasilloActualPEP8}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "4a39d6d2712eab35",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "a82b3270d3d0bcd8",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 3740,
        "wires": [
            [
                "bcacdf71b16f4f2b"
            ]
        ],
        "l": true
    },
    {
        "id": "5b306fb852f49015",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "310a360f78abb30d",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP9\nlet estadoActualPEP9 = global.get(\"Estado_PEP9\");\nlet presenciaActualPEP9 = global.get(\"Presencia_PEP9\");\nlet ocupacionActualPEP9 = global.get(\"Ocupacion_PEP9\");\nlet capacidadActualPEP9 = global.get(\"Capacidad_PEP9\");\nlet pasilloActualPEP9 = global.get(\"Pasillo_PEP9\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP9 = global.get(\"Estado_PEP9_Anterior\");\nlet presenciaAnteriorPEP9 = global.get(\"Presencia_PEP9_Anterior\");\nlet ocupacionAnteriorPEP9 = global.get(\"Ocupacion_PEP9_Anterior\");\nlet capacidadAnteriorPEP9 = global.get(\"Capacidad_PEP9_Anterior\");\nlet pasilloAnteriorPEP9 = global.get(\"Pasillo_PEP9_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP9 !== estadoAnteriorPEP9 ||\n    presenciaActualPEP9 !== presenciaAnteriorPEP9 ||\n    ocupacionActualPEP9 !== ocupacionAnteriorPEP9 ||\n    capacidadActualPEP9 !== capacidadAnteriorPEP9 ||\n    pasilloActualPEP9 !== pasilloAnteriorPEP9\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP9 a true\n    global.set(\"cambioEstadoPEP9\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP9.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP9 a false\n    global.set(\"cambioEstadoPEP9\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP9.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP9_Anterior\", estadoActualPEP9);\nglobal.set(\"Presencia_PEP9_Anterior\", presenciaActualPEP9);\nglobal.set(\"Ocupacion_PEP9_Anterior\", ocupacionActualPEP9);\nglobal.set(\"Capacidad_PEP9_Anterior\", capacidadActualPEP9);\nglobal.set(\"Pasillo_PEP9_Anterior\", pasilloActualPEP9);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3720,
        "wires": [
            []
        ]
    },
    {
        "id": "dba090928682a071",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "310a360f78abb30d",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 3720,
        "wires": [
            [
                "5b306fb852f49015"
            ]
        ],
        "l": true
    },
    {
        "id": "a46ec3e98f640314",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "310a360f78abb30d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 3660,
        "wires": [
            [
                "c5822c16fee382ad"
            ]
        ]
    },
    {
        "id": "c5822c16fee382ad",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "310a360f78abb30d",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 9 y Salida 9)\nlet MesaEntrada_9_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_9_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_9_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_9_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP9Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP9 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_NUEVE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP9;\nif (MesaEntrada_9_Posición_1_Recogida_Traslo === 0 && MesaEntrada_9_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP9 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP9 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP9\nlet capacidadActualPEP9 = 1;\nlet estadoActualPEP9 = 0;\nlet pasilloActualPEP9 = 9;  // El pasillo siempre será 9 para PEP9\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP9_Temp = variablesPLC_Mesas[\"FOT_PRES_TC53\"];\n\nlet presenciaActualPEP9;\nif (presenciaActualPEP9_Temp) {\n    presenciaActualPEP9 = 0;\n} else {\n    presenciaActualPEP9 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP9 es 0), Estado_PEP9 se pone en 1\nif (estadoActualPEP9Temp && averiaActualPEP9 < 2) {\n    estadoActualPEP9 = 1;\n} else {\n    estadoActualPEP9 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP9\", estadoActualPEP9);\nglobal.set(\"Presencia_PEP9\", presenciaActualPEP9);\nglobal.set(\"Ocupacion_PEP9\", ocupacionActualPEP9);\nglobal.set(\"Capacidad_PEP9\", capacidadActualPEP9);\nglobal.set(\"Pasillo_PEP9\", pasilloActualPEP9);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP9: ${estadoActualPEP9}, Presencia_PEP9: ${presenciaActualPEP9}, Ocupacion_PEP9: ${ocupacionActualPEP9}, Capacidad_PEP9: ${capacidadActualPEP9}, Pasillo_PEP9: ${pasilloActualPEP9}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "be8eac3fccb93836",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "28a985268abe7b45",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 3960,
        "wires": [
            [
                "c229793ee9e5ad4d"
            ]
        ],
        "l": true
    },
    {
        "id": "b245682cdb594c0a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "9f039eb64ab8f34b",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP10\nlet estadoActualPEP10 = global.get(\"Estado_PEP10\");\nlet presenciaActualPEP10 = global.get(\"Presencia_PEP10\");\nlet ocupacionActualPEP10 = global.get(\"Ocupacion_PEP10\");\nlet capacidadActualPEP10 = global.get(\"Capacidad_PEP10\");\nlet pasilloActualPEP10 = global.get(\"Pasillo_PEP10\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP10 = global.get(\"Estado_PEP10_Anterior\");\nlet presenciaAnteriorPEP10 = global.get(\"Presencia_PEP10_Anterior\");\nlet ocupacionAnteriorPEP10 = global.get(\"Ocupacion_PEP10_Anterior\");\nlet capacidadAnteriorPEP10 = global.get(\"Capacidad_PEP10_Anterior\");\nlet pasilloAnteriorPEP10 = global.get(\"Pasillo_PEP10_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP10 !== estadoAnteriorPEP10 ||\n    presenciaActualPEP10 !== presenciaAnteriorPEP10 ||\n    ocupacionActualPEP10 !== ocupacionAnteriorPEP10 ||\n    capacidadActualPEP10 !== capacidadAnteriorPEP10 ||\n    pasilloActualPEP10 !== pasilloAnteriorPEP10\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP10 a true\n    global.set(\"cambioEstadoPEP10\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP10.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP10 a false\n    global.set(\"cambioEstadoPEP10\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP10.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP10_Anterior\", estadoActualPEP10);\nglobal.set(\"Presencia_PEP10_Anterior\", presenciaActualPEP10);\nglobal.set(\"Ocupacion_PEP10_Anterior\", ocupacionActualPEP10);\nglobal.set(\"Capacidad_PEP10_Anterior\", capacidadActualPEP10);\nglobal.set(\"Pasillo_PEP10_Anterior\", pasilloActualPEP10);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3940,
        "wires": [
            []
        ]
    },
    {
        "id": "bf24cc004d6ee1e0",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "9f039eb64ab8f34b",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 3940,
        "wires": [
            [
                "b245682cdb594c0a"
            ]
        ],
        "l": true
    },
    {
        "id": "29bbe4caebcd1daf",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "9f039eb64ab8f34b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 3880,
        "wires": [
            [
                "09409e8b0486a7a9"
            ]
        ]
    },
    {
        "id": "09409e8b0486a7a9",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "9f039eb64ab8f34b",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas (Mesa Entrada 10 y Salida 10)\nlet MesaEntrada_10_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_10_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_10_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_10_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP10Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP10 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_DIEZ\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP10;\nif (MesaEntrada_10_Posición_1_Recogida_Traslo === 0 && MesaEntrada_10_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP10 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP10 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP10\nlet capacidadActualPEP10 = 1;\nlet estadoActualPEP10 = 0;\nlet pasilloActualPEP10 = 10;  // El pasillo siempre será 10 para PEP10\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP10_Temp = variablesPLC_Mesas[\"FOT_PRES_TC55\"];\n\nlet presenciaActualPEP10;\nif (presenciaActualPEP10_Temp) {\n    presenciaActualPEP10 = 0;\n} else {\n    presenciaActualPEP10 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP10 es 0), Estado_PEP10 se pone en 1\nif (estadoActualPEP10Temp && averiaActualPEP10 < 2 ) {\n    estadoActualPEP10 = 1;\n} else {\n    estadoActualPEP10 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP10\", estadoActualPEP10);\nglobal.set(\"Presencia_PEP10\", presenciaActualPEP10);\nglobal.set(\"Ocupacion_PEP10\", ocupacionActualPEP10);\nglobal.set(\"Capacidad_PEP10\", capacidadActualPEP10);\nglobal.set(\"Pasillo_PEP10\", pasilloActualPEP10);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP10: ${estadoActualPEP10}, Presencia_PEP10: ${presenciaActualPEP10}, Ocupacion_PEP10: ${ocupacionActualPEP10}, Capacidad_PEP10: ${capacidadActualPEP10}, Pasillo_PEP10: ${pasilloActualPEP10}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "43d070bd6b93b02a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "058159e4f974f49b",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 4180,
        "wires": [
            [
                "c330a89e132eb9f7"
            ]
        ],
        "l": true
    },
    {
        "id": "1f9c48d9704a5311",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "757358fd342469d5",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP11\nlet estadoActualPEP11 = global.get(\"Estado_PEP11\");\nlet presenciaActualPEP11 = global.get(\"Presencia_PEP11\");\nlet ocupacionActualPEP11 = global.get(\"Ocupacion_PEP11\");\nlet capacidadActualPEP11 = global.get(\"Capacidad_PEP11\");\nlet pasilloActualPEP11 = global.get(\"Pasillo_PEP11\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP11 = global.get(\"Estado_PEP11_Anterior\");\nlet presenciaAnteriorPEP11 = global.get(\"Presencia_PEP11_Anterior\");\nlet ocupacionAnteriorPEP11 = global.get(\"Ocupacion_PEP11_Anterior\");\nlet capacidadAnteriorPEP11 = global.get(\"Capacidad_PEP11_Anterior\");\nlet pasilloAnteriorPEP11 = global.get(\"Pasillo_PEP11_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  ///  estadoActualPEP11 !== estadoAnteriorPEP11 ||\n    presenciaActualPEP11 !== presenciaAnteriorPEP11 ||\n    ocupacionActualPEP11 !== ocupacionAnteriorPEP11 ||\n    capacidadActualPEP11 !== capacidadAnteriorPEP11 ||\n    pasilloActualPEP11 !== pasilloAnteriorPEP11\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP11 a true\n    global.set(\"cambioEstadoPEP11\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP11.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP11 a false\n    global.set(\"cambioEstadoPEP11\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP11.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP11_Anterior\", estadoActualPEP11);\nglobal.set(\"Presencia_PEP11_Anterior\", presenciaActualPEP11);\nglobal.set(\"Ocupacion_PEP11_Anterior\", ocupacionActualPEP11);\nglobal.set(\"Capacidad_PEP11_Anterior\", capacidadActualPEP11);\nglobal.set(\"Pasillo_PEP11_Anterior\", pasilloActualPEP11);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 4160,
        "wires": [
            []
        ]
    },
    {
        "id": "141a556bf6216588",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "757358fd342469d5",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 4160,
        "wires": [
            [
                "1f9c48d9704a5311"
            ]
        ],
        "l": true
    },
    {
        "id": "52542bc0d7b6a56a",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "757358fd342469d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 4100,
        "wires": [
            [
                "ff366de75ec0988e"
            ]
        ]
    },
    {
        "id": "ff366de75ec0988e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "757358fd342469d5",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaEntrada_11_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_11_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_11_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_11_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP11Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP11 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_ONCE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP11;\nif (MesaEntrada_11_Posición_1_Recogida_Traslo === 0 && MesaEntrada_11_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP11 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP11 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP11\nlet capacidadActualPEP11 = 1;\nlet estadoActualPEP11 = 0;\nlet pasilloActualPEP11 = 11;  // El pasillo para PEP11 es 11\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP11_Temp = variablesPLC_Mesas[\"FOT_PRES_TC57\"];\n\nlet presenciaActualPEP11 = presenciaActualPEP11_Temp ? 0 : 1;\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP11 es 0), Estado_PEP11 se pone en 1\nif (estadoActualPEP11Temp && averiaActualPEP11 < 2 ) {\n    estadoActualPEP11 = 1;\n} else {\n    estadoActualPEP11 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP11\", estadoActualPEP11);\nglobal.set(\"Presencia_PEP11\", presenciaActualPEP11);\nglobal.set(\"Ocupacion_PEP11\", ocupacionActualPEP11);\nglobal.set(\"Capacidad_PEP11\", capacidadActualPEP11);\nglobal.set(\"Pasillo_PEP11\", pasilloActualPEP11);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP11: ${estadoActualPEP11}, Presencia_PEP11: ${presenciaActualPEP11}, Ocupacion_PEP11: ${ocupacionActualPEP11}, Capacidad_PEP11: ${capacidadActualPEP11}, Pasillo_PEP11: ${pasilloActualPEP11}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 4100,
        "wires": [
            []
        ]
    },
    {
        "id": "09327b22ed1181d1",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "9d52f86219780937",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 190,
        "y": 4400,
        "wires": [
            [
                "713fcfee1bd2079d"
            ]
        ],
        "l": true
    },
    {
        "id": "3999028d40f8d219",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "2c12f47d415a60e0",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PEP12\nlet estadoActualPEP12 = global.get(\"Estado_PEP12\");\nlet presenciaActualPEP12 = global.get(\"Presencia_PEP12\");\nlet ocupacionActualPEP12 = global.get(\"Ocupacion_PEP12\");\nlet capacidadActualPEP12 = global.get(\"Capacidad_PEP12\");\nlet pasilloActualPEP12 = global.get(\"Pasillo_PEP12\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPEP12 = global.get(\"Estado_PEP12_Anterior\");\nlet presenciaAnteriorPEP12 = global.get(\"Presencia_PEP12_Anterior\");\nlet ocupacionAnteriorPEP12 = global.get(\"Ocupacion_PEP12_Anterior\");\nlet capacidadAnteriorPEP12 = global.get(\"Capacidad_PEP12_Anterior\");\nlet pasilloAnteriorPEP12 = global.get(\"Pasillo_PEP12_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPEP12 !== estadoAnteriorPEP12 ||\n    presenciaActualPEP12 !== presenciaAnteriorPEP12 ||\n    ocupacionActualPEP12 !== ocupacionAnteriorPEP12 ||\n    capacidadActualPEP12 !== capacidadAnteriorPEP12 ||\n    pasilloActualPEP12 !== pasilloAnteriorPEP12\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPEP12 a true\n    global.set(\"cambioEstadoPEP12\", true);\n    node.warn(\"Cambio detectado en una o más variables de PEP12.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPEP12 a false\n    global.set(\"cambioEstadoPEP12\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PEP12.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PEP12_Anterior\", estadoActualPEP12);\nglobal.set(\"Presencia_PEP12_Anterior\", presenciaActualPEP12);\nglobal.set(\"Ocupacion_PEP12_Anterior\", ocupacionActualPEP12);\nglobal.set(\"Capacidad_PEP12_Anterior\", capacidadActualPEP12);\nglobal.set(\"Pasillo_PEP12_Anterior\", pasilloActualPEP12);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 4380,
        "wires": [
            []
        ]
    },
    {
        "id": "131136f7b0a1786e",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "2c12f47d415a60e0",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 790,
        "y": 4380,
        "wires": [
            [
                "3999028d40f8d219"
            ]
        ],
        "l": true
    },
    {
        "id": "d4ca04fca4d475ac",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "2c12f47d415a60e0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 4320,
        "wires": [
            [
                "c07a27638ff7e971"
            ]
        ]
    },
    {
        "id": "c07a27638ff7e971",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "2c12f47d415a60e0",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PEP = global.get('nuevoRegistroPEP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaEntrada_12_Posición_1_Recogida_Traslo = variablesPLC_Mesas[\"MesaEntrada_12_Posición_1_Recogida_Traslo\"];\nlet MesaEntrada_12_Posición_2_Entrega_Carro = variablesPLC_Mesas[\"MesaEntrada_12_Posición_2_Entrega_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPEP12Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPEP12 = variablesPLC_Scada[\"STATUS_MESAS_ENTRADA_DOCE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPEP12;\nif (MesaEntrada_12_Posición_1_Recogida_Traslo === 0 && MesaEntrada_12_Posición_2_Entrega_Carro === 0) {\n    ocupacionActualPEP12 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPEP12 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PEP12\nlet capacidadActualPEP12 = 1;\nlet estadoActualPEP12 = 0;\nlet pasilloActualPEP12 = 12;  // El pasillo para PEP12 es 12\n\n// Presencia será la ocupación invertida\nlet presenciaActualPEP12_Temp = variablesPLC_Mesas[\"FOT_PRES_TC59\"];\n\nlet presenciaActualPEP12 = presenciaActualPEP12_Temp ? 0 : 1;\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP12 es 0), Estado_PEP12 se pone en 1\nif (estadoActualPEP12Temp && averiaActualPEP12 < 2) {\n    estadoActualPEP12 = 1;\n} else {\n    estadoActualPEP12 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PEP12\", estadoActualPEP12);\nglobal.set(\"Presencia_PEP12\", presenciaActualPEP12);\nglobal.set(\"Ocupacion_PEP12\", ocupacionActualPEP12);\nglobal.set(\"Capacidad_PEP12\", capacidadActualPEP12);\nglobal.set(\"Pasillo_PEP12\", pasilloActualPEP12);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PEP12: ${estadoActualPEP12}, Presencia_PEP12: ${presenciaActualPEP12}, Ocupacion_PEP12: ${ocupacionActualPEP12}, Capacidad_PEP12: ${capacidadActualPEP12}, Pasillo_PEP12: ${pasilloActualPEP12}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 4320,
        "wires": [
            []
        ]
    },
    {
        "id": "901ed9d60bc888cf",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "b35292d9872d730f",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 1960,
        "wires": [
            [
                "9a4062af1a8109d7"
            ]
        ],
        "l": true
    },
    {
        "id": "a9bed921b2c3a3a5",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "81fa9bb85ef6d867",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para PSP1\nlet estadoActualPSP1 = global.get(\"Estado_PSP1\");\nlet presenciaActualPSP1 = global.get(\"Presencia_PSP1\");\nlet ocupacionActualPSP1 = global.get(\"Ocupacion_PSP1\");\nlet capacidadActualPSP1 = global.get(\"Capacidad_PSP1\");\nlet pasilloActualPSP1 = global.get(\"Pasillo_PSP1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP1 = global.get(\"Estado_PSP1_Anterior\");\nlet presenciaAnteriorPSP1 = global.get(\"Presencia_PSP1_Anterior\");\nlet ocupacionAnteriorPSP1 = global.get(\"Ocupacion_PSP1_Anterior\");\nlet capacidadAnteriorPSP1 = global.get(\"Capacidad_PSP1_Anterior\");\nlet pasilloAnteriorPSP1 = global.get(\"Pasillo_PSP1_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPSP1 !== estadoAnteriorPSP1 ||\n    presenciaActualPSP1 !== presenciaAnteriorPSP1 ||\n    ocupacionActualPSP1 !== ocupacionAnteriorPSP1 ||\n    capacidadActualPSP1 !== capacidadAnteriorPSP1 ||\n    pasilloActualPSP1 !== pasilloAnteriorPSP1\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP1 a true\n    global.set(\"cambioEstadoPSP1\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP1.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP1 a false\n    global.set(\"cambioEstadoPSP1\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP1.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP1_Anterior\", estadoActualPSP1);\nglobal.set(\"Presencia_PSP1_Anterior\", presenciaActualPSP1);\nglobal.set(\"Ocupacion_PSP1_Anterior\", ocupacionActualPSP1);\nglobal.set(\"Capacidad_PSP1_Anterior\", capacidadActualPSP1);\nglobal.set(\"Pasillo_PSP1_Anterior\", pasilloActualPSP1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "90babb77a199ef20",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "81fa9bb85ef6d867",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 1920,
        "wires": [
            [
                "a9bed921b2c3a3a5"
            ]
        ],
        "l": true
    },
    {
        "id": "dbe40d0b982fa1c3",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "81fa9bb85ef6d867",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 1880,
        "wires": [
            [
                "6b156e124a0a085c"
            ]
        ]
    },
    {
        "id": "6b156e124a0a085c",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "81fa9bb85ef6d867",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\n//let variablesPLC_PSP = global.get('nuevoRegistroPSP');\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables del PLC para PSP1 están definidas\n//if (typeof variablesPLC_PSP === 'undefined' || variablesPLC_PSP === null) {\n //   node.error(\"Las variables del PLC para PSP1 no están definidas\");\n //   return msg;  // Detenemos la ejecución si no están definidas\n//}\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_1_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_1_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_1_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_1_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP1Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP1 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_UNO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP1;\nif (MesaSalida_1_Posición_2_Entrega_Traslo === 0 && MesaSalida_1_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP1 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP1 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP1\nlet capacidadActualPSP1 = 1;\nlet estadoActualPSP1 = 1;\nlet pasilloActualPSP1 = 1;  // El pasillo para PSP1 es 1\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP1_Temp = variablesPLC_Mesas[\"FOT_PRES_TC38\"] && variablesPLC_Mesas[\"F_FINAL_TC38\"];\n\nlet presenciaActualPSP1;\nif (presenciaActualPSP1_Temp) {\n    presenciaActualPSP1 = 0;\n} else {\n    presenciaActualPSP1 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP1 es 0), Estado_PSP1 se pone en 1\nif (estadoActualPSP1Temp && averiaActualPSP1 < 2) {\n    estadoActualPSP1 = 1;\n} else {\n    estadoActualPSP1 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP1\", estadoActualPSP1);\nglobal.set(\"Presencia_PSP1\", presenciaActualPSP1);\nglobal.set(\"Ocupacion_PSP1\", ocupacionActualPSP1);\nglobal.set(\"Capacidad_PSP1\", capacidadActualPSP1);\nglobal.set(\"Pasillo_PSP1\", pasilloActualPSP1);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP1: ${estadoActualPSP1}, Presencia_PSP1: ${presenciaActualPSP1}, Ocupacion_PSP1: ${ocupacionActualPSP1}, Capacidad_PSP1: ${capacidadActualPSP1}, Pasillo_PSP1: ${pasilloActualPSP1}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "77914056e7a3cceb",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "d9edcc78d0f97bdb",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 2180,
        "wires": [
            [
                "9e590a66b9f1005c"
            ]
        ],
        "l": true
    },
    {
        "id": "3d653904363ce0ac",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1a6b4f431651b5cf",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP2\nlet estadoActualPSP2 = global.get(\"Estado_PSP2\");\nlet presenciaActualPSP2 = global.get(\"Presencia_PSP2\");\nlet ocupacionActualPSP2 = global.get(\"Ocupacion_PSP2\");\nlet capacidadActualPSP2 = global.get(\"Capacidad_PSP2\");\nlet pasilloActualPSP2 = global.get(\"Pasillo_PSP2\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP2 = global.get(\"Estado_PSP2_Anterior\");\nlet presenciaAnteriorPSP2 = global.get(\"Presencia_PSP2_Anterior\");\nlet ocupacionAnteriorPSP2 = global.get(\"Ocupacion_PSP2_Anterior\");\nlet capacidadAnteriorPSP2 = global.get(\"Capacidad_PSP2_Anterior\");\nlet pasilloAnteriorPSP2 = global.get(\"Pasillo_PSP2_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPSP2 !== estadoAnteriorPSP2 ||\n    presenciaActualPSP2 !== presenciaAnteriorPSP2 ||\n    ocupacionActualPSP2 !== ocupacionAnteriorPSP2 ||\n    capacidadActualPSP2 !== capacidadAnteriorPSP2 ||\n    pasilloActualPSP2 !== pasilloAnteriorPSP2\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP2 a true\n    global.set(\"cambioEstadoPSP2\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP2.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP2 a false\n    global.set(\"cambioEstadoPSP2\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP2.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP2_Anterior\", estadoActualPSP2);\nglobal.set(\"Presencia_PSP2_Anterior\", presenciaActualPSP2);\nglobal.set(\"Ocupacion_PSP2_Anterior\", ocupacionActualPSP2);\nglobal.set(\"Capacidad_PSP2_Anterior\", capacidadActualPSP2);\nglobal.set(\"Pasillo_PSP2_Anterior\", pasilloActualPSP2);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "bd6bb4dbcc209742",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "1a6b4f431651b5cf",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 2140,
        "wires": [
            [
                "3d653904363ce0ac"
            ]
        ],
        "l": true
    },
    {
        "id": "7a2dae6a61c74ec0",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "1a6b4f431651b5cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 2100,
        "wires": [
            [
                "9a0848cfb76b0c35"
            ]
        ]
    },
    {
        "id": "9a0848cfb76b0c35",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1a6b4f431651b5cf",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_2_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_2_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_2_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_2_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP2Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP2 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_DOS\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP2;\nif (MesaSalida_2_Posición_2_Entrega_Traslo === 0 && MesaSalida_2_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP2 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP2 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP2\nlet capacidadActualPSP2 = 1;\nlet estadoActualPSP2 = 1;\nlet pasilloActualPSP2 = 2;  // El pasillo para PSP2 es 2\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP2_Temp = variablesPLC_Mesas[\"FOT_PRES_TC40\"] && variablesPLC_Mesas[\"F_FINAL_TC40\"] ;\n\nlet presenciaActualPSP2;\nif (presenciaActualPSP2_Temp) {\n    presenciaActualPSP2 = 0;\n} else {\n    presenciaActualPSP2 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP2 es 0), Estado_PSP2 se pone en 1\nif (estadoActualPSP2Temp && averiaActualPSP2 < 2) {  //\n    estadoActualPSP2 = 1;\n} else {\n  estadoActualPSP2 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP2\", estadoActualPSP2);\nglobal.set(\"Presencia_PSP2\", presenciaActualPSP2);\nglobal.set(\"Ocupacion_PSP2\", ocupacionActualPSP2);\nglobal.set(\"Capacidad_PSP2\", capacidadActualPSP2);\nglobal.set(\"Pasillo_PSP2\", pasilloActualPSP2);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\nnode.warn(`Estado_PSP2: ${estadoActualPSP2}, Presencia_PSP2: ${presenciaActualPSP2}, Ocupacion_PSP2: ${ocupacionActualPSP2}, Capacidad_PSP2: ${capacidadActualPSP2}, Pasillo_PSP2: ${pasilloActualPSP2}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "15d98fd4f769ce69",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "e08f1bf68270a79f",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 2400,
        "wires": [
            [
                "8aafeecdc9d62274"
            ]
        ],
        "l": true
    },
    {
        "id": "860175c031429f3f",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "8376423bb11be713",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP3\nlet estadoActualPSP3 = global.get(\"Estado_PSP3\");\nlet presenciaActualPSP3 = global.get(\"Presencia_PSP3\");\nlet ocupacionActualPSP3 = global.get(\"Ocupacion_PSP3\");\nlet capacidadActualPSP3 = global.get(\"Capacidad_PSP3\");\nlet pasilloActualPSP3 = global.get(\"Pasillo_PSP3\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP3 = global.get(\"Estado_PSP3_Anterior\");\nlet presenciaAnteriorPSP3 = global.get(\"Presencia_PSP3_Anterior\");\nlet ocupacionAnteriorPSP3 = global.get(\"Ocupacion_PSP3_Anterior\");\nlet capacidadAnteriorPSP3 = global.get(\"Capacidad_PSP3_Anterior\");\nlet pasilloAnteriorPSP3 = global.get(\"Pasillo_PSP3_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n//    estadoActualPSP3 !== estadoAnteriorPSP3 ||\n    presenciaActualPSP3 !== presenciaAnteriorPSP3 ||\n    ocupacionActualPSP3 !== ocupacionAnteriorPSP3 ||\n    capacidadActualPSP3 !== capacidadAnteriorPSP3 ||\n    pasilloActualPSP3 !== pasilloAnteriorPSP3\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP3 a true\n    global.set(\"cambioEstadoPSP3\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP3.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP3 a false\n    global.set(\"cambioEstadoPSP3\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP3.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP3_Anterior\", estadoActualPSP3);\nglobal.set(\"Presencia_PSP3_Anterior\", presenciaActualPSP3);\nglobal.set(\"Ocupacion_PSP3_Anterior\", ocupacionActualPSP3);\nglobal.set(\"Capacidad_PSP3_Anterior\", capacidadActualPSP3);\nglobal.set(\"Pasillo_PSP3_Anterior\", pasilloActualPSP3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "45effb94b4b6c71a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "8376423bb11be713",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 2360,
        "wires": [
            [
                "860175c031429f3f"
            ]
        ],
        "l": true
    },
    {
        "id": "fb264e5e6a3e76eb",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "8376423bb11be713",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 2320,
        "wires": [
            [
                "4c49ce44f40ac5d8"
            ]
        ]
    },
    {
        "id": "4c49ce44f40ac5d8",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "8376423bb11be713",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_3_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_3_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_3_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_3_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP3Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP3 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_TRES\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP3;\nif (MesaSalida_3_Posición_2_Entrega_Traslo === 0 && MesaSalida_3_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP3 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP3 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP3\nlet capacidadActualPSP3 = 1;\nlet estadoActualPSP3 = 1;\nlet pasilloActualPSP3 = 3;  // El pasillo para PSP3 es 3\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP3_Temp = variablesPLC_Mesas[\"FOT_PRES_TC42\"] && variablesPLC_Mesas[\"F_FINAL_TC42\"];\n\nlet presenciaActualPSP3;\nif (presenciaActualPSP3_Temp) {\n    presenciaActualPSP3 = 0;\n} else {\n    presenciaActualPSP3 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP3 es 0), Estado_PSP3 se pone en 1\nif (estadoActualPSP3Temp && averiaActualPSP3 < 2) {\n    estadoActualPSP3 = 1;\n} else {\n    estadoActualPSP3 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP3\", estadoActualPSP3);\nglobal.set(\"Presencia_PSP3\", presenciaActualPSP3);\nglobal.set(\"Ocupacion_PSP3\", ocupacionActualPSP3);\nglobal.set(\"Capacidad_PSP3\", capacidadActualPSP3);\nglobal.set(\"Pasillo_PSP3\", pasilloActualPSP3);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP3: ${estadoActualPSP3}, Presencia_PSP3: ${presenciaActualPSP3}, Ocupacion_PSP3: ${ocupacionActualPSP3}, Capacidad_PSP3: ${capacidadActualPSP3}, Pasillo_PSP3: ${pasilloActualPSP3}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "3821acc7cb85eeb4",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "d3ef5eddefc80948",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 2620,
        "wires": [
            [
                "297e9f84a6cfcc8e"
            ]
        ],
        "l": true
    },
    {
        "id": "e95d9d7746bd7170",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "988cfe85526ee4c4",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP4\nlet estadoActualPSP4 = global.get(\"Estado_PSP4\");\nlet presenciaActualPSP4 = global.get(\"Presencia_PSP4\");\nlet ocupacionActualPSP4 = global.get(\"Ocupacion_PSP4\");\nlet capacidadActualPSP4 = global.get(\"Capacidad_PSP4\");\nlet pasilloActualPSP4 = global.get(\"Pasillo_PSP4\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP4 = global.get(\"Estado_PSP4_Anterior\");\nlet presenciaAnteriorPSP4 = global.get(\"Presencia_PSP4_Anterior\");\nlet ocupacionAnteriorPSP4 = global.get(\"Ocupacion_PSP4_Anterior\");\nlet capacidadAnteriorPSP4 = global.get(\"Capacidad_PSP4_Anterior\");\nlet pasilloAnteriorPSP4 = global.get(\"Pasillo_PSP4_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPSP4 !== estadoAnteriorPSP4 ||\n    presenciaActualPSP4 !== presenciaAnteriorPSP4 ||\n    ocupacionActualPSP4 !== ocupacionAnteriorPSP4 ||\n    capacidadActualPSP4 !== capacidadAnteriorPSP4 ||\n    pasilloActualPSP4 !== pasilloAnteriorPSP4\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP4 a true\n    global.set(\"cambioEstadoPSP4\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP4.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP4 a false\n    global.set(\"cambioEstadoPSP4\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP4.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP4_Anterior\", estadoActualPSP4);\nglobal.set(\"Presencia_PSP4_Anterior\", presenciaActualPSP4);\nglobal.set(\"Ocupacion_PSP4_Anterior\", ocupacionActualPSP4);\nglobal.set(\"Capacidad_PSP4_Anterior\", capacidadActualPSP4);\nglobal.set(\"Pasillo_PSP4_Anterior\", pasilloActualPSP4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "113f6554e623c013",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "988cfe85526ee4c4",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 2580,
        "wires": [
            [
                "e95d9d7746bd7170"
            ]
        ],
        "l": true
    },
    {
        "id": "9dac982ba7f02325",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "988cfe85526ee4c4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 2540,
        "wires": [
            [
                "8f04d9a9989e979a"
            ]
        ]
    },
    {
        "id": "8f04d9a9989e979a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "988cfe85526ee4c4",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_4_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_4_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_4_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_4_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP4Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP4 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_CUATRO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP4;\nif (MesaSalida_4_Posición_2_Entrega_Traslo === 0 && MesaSalida_4_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP4 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP4 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP4\nlet capacidadActualPSP4 = 1;\nlet estadoActualPSP4 = 1;\nlet pasilloActualPSP4 = 4;  // El pasillo para PSP4 es 4\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP4_Temp = variablesPLC_Mesas[\"FOT_PRES_TC44\"]  && variablesPLC_Mesas[\"F_FINAL_TC44\"];\n\nlet presenciaActualPSP4;\nif (presenciaActualPSP4_Temp) {\n    presenciaActualPSP4 = 0;\n} else {\n    presenciaActualPSP4 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP4 es 0), Estado_PSP4 se pone en 1\nif (estadoActualPSP4Temp && averiaActualPSP4 < 2) {\n    estadoActualPSP4 = 1;\n} else {\n    estadoActualPSP4 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP4\", estadoActualPSP4);\nglobal.set(\"Presencia_PSP4\", presenciaActualPSP4);\nglobal.set(\"Ocupacion_PSP4\", ocupacionActualPSP4);\nglobal.set(\"Capacidad_PSP4\", capacidadActualPSP4);\nglobal.set(\"Pasillo_PSP4\", pasilloActualPSP4);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP4: ${estadoActualPSP4}, Presencia_PSP4: ${presenciaActualPSP4}, Ocupacion_PSP4: ${ocupacionActualPSP4}, Capacidad_PSP4: ${capacidadActualPSP4}, Pasillo_PSP4: ${pasilloActualPSP4}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "730de4bc1500780a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "8688d38cc539602f",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 2840,
        "wires": [
            [
                "a48599a291757ded"
            ]
        ],
        "l": true
    },
    {
        "id": "4472859d68f6ff70",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "40ea496ecf40f4d0",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP5\nlet estadoActualPSP5 = global.get(\"Estado_PSP5\");\nlet presenciaActualPSP5 = global.get(\"Presencia_PSP5\");\nlet ocupacionActualPSP5 = global.get(\"Ocupacion_PSP5\");\nlet capacidadActualPSP5 = global.get(\"Capacidad_PSP5\");\nlet pasilloActualPSP5 = global.get(\"Pasillo_PSP5\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP5 = global.get(\"Estado_PSP5_Anterior\");\nlet presenciaAnteriorPSP5 = global.get(\"Presencia_PSP5_Anterior\");\nlet ocupacionAnteriorPSP5 = global.get(\"Ocupacion_PSP5_Anterior\");\nlet capacidadAnteriorPSP5 = global.get(\"Capacidad_PSP5_Anterior\");\nlet pasilloAnteriorPSP5 = global.get(\"Pasillo_PSP5_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPSP5 !== estadoAnteriorPSP5 ||\n    presenciaActualPSP5 !== presenciaAnteriorPSP5 ||\n    ocupacionActualPSP5 !== ocupacionAnteriorPSP5 ||\n    capacidadActualPSP5 !== capacidadAnteriorPSP5 ||\n    pasilloActualPSP5 !== pasilloAnteriorPSP5\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP5 a true\n    global.set(\"cambioEstadoPSP5\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP5.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP5 a false\n    global.set(\"cambioEstadoPSP5\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP5.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP5_Anterior\", estadoActualPSP5);\nglobal.set(\"Presencia_PSP5_Anterior\", presenciaActualPSP5);\nglobal.set(\"Ocupacion_PSP5_Anterior\", ocupacionActualPSP5);\nglobal.set(\"Capacidad_PSP5_Anterior\", capacidadActualPSP5);\nglobal.set(\"Pasillo_PSP5_Anterior\", pasilloActualPSP5);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "f6a0927eabb608b7",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "40ea496ecf40f4d0",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 2800,
        "wires": [
            [
                "4472859d68f6ff70"
            ]
        ],
        "l": true
    },
    {
        "id": "8206eab71abededc",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "40ea496ecf40f4d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 2760,
        "wires": [
            [
                "d23dc2248f48e3fd"
            ]
        ]
    },
    {
        "id": "d23dc2248f48e3fd",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "40ea496ecf40f4d0",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_5_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_5_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_5_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_5_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP5Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP5 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_CINCO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP5;\nif (MesaSalida_5_Posición_2_Entrega_Traslo === 0 && MesaSalida_5_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP5 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP5 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP5\nlet capacidadActualPSP5 = 1;\nlet estadoActualPSP5 = 1;\nlet pasilloActualPSP5 = 5;  // El pasillo para PSP5 es 5\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP5_Temp = variablesPLC_Mesas[\"FOT_PRES_TC46\"] && variablesPLC_Mesas[\"F_FINAL_TC46\"];\n\nlet presenciaActualPSP5;\nif (presenciaActualPSP5_Temp) {\n    presenciaActualPSP5 = 0;\n} else {\n    presenciaActualPSP5 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP5 es 0), Estado_PSP5 se pone en 1\nif (estadoActualPSP5Temp && averiaActualPSP5 < 2) {\n    estadoActualPSP5 = 1;\n} else {\n    estadoActualPSP5 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP5\", estadoActualPSP5);\nglobal.set(\"Presencia_PSP5\", presenciaActualPSP5);\nglobal.set(\"Ocupacion_PSP5\", ocupacionActualPSP5);\nglobal.set(\"Capacidad_PSP5\", capacidadActualPSP5);\nglobal.set(\"Pasillo_PSP5\", pasilloActualPSP5);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP5: ${estadoActualPSP5}, Presencia_PSP5: ${presenciaActualPSP5}, Ocupacion_PSP5: ${ocupacionActualPSP5}, Capacidad_PSP5: ${capacidadActualPSP5}, Pasillo_PSP5: ${pasilloActualPSP5}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "563bc7df798a4523",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "3c770f1fd93916b1",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 3060,
        "wires": [
            [
                "745d7bf095efdc97"
            ]
        ],
        "l": true
    },
    {
        "id": "6cc54afeb52564eb",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cd6257a95ea19103",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP6\nlet estadoActualPSP6 = global.get(\"Estado_PSP6\");\nlet presenciaActualPSP6 = global.get(\"Presencia_PSP6\");\nlet ocupacionActualPSP6 = global.get(\"Ocupacion_PSP6\");\nlet capacidadActualPSP6 = global.get(\"Capacidad_PSP6\");\nlet pasilloActualPSP6 = global.get(\"Pasillo_PSP6\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP6 = global.get(\"Estado_PSP6_Anterior\");\nlet presenciaAnteriorPSP6 = global.get(\"Presencia_PSP6_Anterior\");\nlet ocupacionAnteriorPSP6 = global.get(\"Ocupacion_PSP6_Anterior\");\nlet capacidadAnteriorPSP6 = global.get(\"Capacidad_PSP6_Anterior\");\nlet pasilloAnteriorPSP6 = global.get(\"Pasillo_PSP6_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPSP6 !== estadoAnteriorPSP6 ||\n    presenciaActualPSP6 !== presenciaAnteriorPSP6 ||\n    ocupacionActualPSP6 !== ocupacionAnteriorPSP6 ||\n    capacidadActualPSP6 !== capacidadAnteriorPSP6 ||\n    pasilloActualPSP6 !== pasilloAnteriorPSP6\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP6 a true\n    global.set(\"cambioEstadoPSP6\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP6.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP6 a false\n    global.set(\"cambioEstadoPSP6\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP6.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP6_Anterior\", estadoActualPSP6);\nglobal.set(\"Presencia_PSP6_Anterior\", presenciaActualPSP6);\nglobal.set(\"Ocupacion_PSP6_Anterior\", ocupacionActualPSP6);\nglobal.set(\"Capacidad_PSP6_Anterior\", capacidadActualPSP6);\nglobal.set(\"Pasillo_PSP6_Anterior\", pasilloActualPSP6);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3020,
        "wires": [
            []
        ]
    },
    {
        "id": "f8e41d414d59c1fb",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "cd6257a95ea19103",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 3020,
        "wires": [
            [
                "6cc54afeb52564eb"
            ]
        ],
        "l": true
    },
    {
        "id": "1124b22c204a0c1a",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "cd6257a95ea19103",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 2980,
        "wires": [
            [
                "a83a5d050ddb7c5c"
            ]
        ]
    },
    {
        "id": "a83a5d050ddb7c5c",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cd6257a95ea19103",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_6_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_6_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_6_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_6_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP6Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP6 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_SEIS\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP6;\nif (MesaSalida_6_Posición_2_Entrega_Traslo === 0 && MesaSalida_6_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP6 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP6 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP6\nlet capacidadActualPSP6 = 1;\nlet estadoActualPSP6 = 1;\nlet pasilloActualPSP6 = 6;  // El pasillo para PSP6 es 6\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP6_Temp = variablesPLC_Mesas[\"FOT_PRES_TC48\"] && variablesPLC_Mesas[\"F_FINAL_TC48\"];\n\nlet presenciaActualPSP6;\nif (presenciaActualPSP6_Temp) {\n    presenciaActualPSP6 = 0;\n} else {\n    presenciaActualPSP6 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP6 es 0), Estado_PSP6 se pone en 1\nif (estadoActualPSP6Temp && averiaActualPSP6 < 2) {\n    estadoActualPSP6 = 1;\n} else {\n    estadoActualPSP6 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP6\", estadoActualPSP6);\nglobal.set(\"Presencia_PSP6\", presenciaActualPSP6);\nglobal.set(\"Ocupacion_PSP6\", ocupacionActualPSP6);\nglobal.set(\"Capacidad_PSP6\", capacidadActualPSP6);\nglobal.set(\"Pasillo_PSP6\", pasilloActualPSP6);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP6: ${estadoActualPSP6}, Presencia_PSP6: ${presenciaActualPSP6}, Ocupacion_PSP6: ${ocupacionActualPSP6}, Capacidad_PSP6: ${capacidadActualPSP6}, Pasillo_PSP6: ${pasilloActualPSP6}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "84f7e0fb91bf2625",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "cd1d972e2c43fcb3",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 3280,
        "wires": [
            [
                "74222dc67b06cbe9"
            ]
        ],
        "l": true
    },
    {
        "id": "59ba2daaad32cd7b",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "efeffb83c925602d",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP7\nlet estadoActualPSP7 = global.get(\"Estado_PSP7\");\nlet presenciaActualPSP7 = global.get(\"Presencia_PSP7\");\nlet ocupacionActualPSP7 = global.get(\"Ocupacion_PSP7\");\nlet capacidadActualPSP7 = global.get(\"Capacidad_PSP7\");\nlet pasilloActualPSP7 = global.get(\"Pasillo_PSP7\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP7 = global.get(\"Estado_PSP7_Anterior\");\nlet presenciaAnteriorPSP7 = global.get(\"Presencia_PSP7_Anterior\");\nlet ocupacionAnteriorPSP7 = global.get(\"Ocupacion_PSP7_Anterior\");\nlet capacidadAnteriorPSP7 = global.get(\"Capacidad_PSP7_Anterior\");\nlet pasilloAnteriorPSP7 = global.get(\"Pasillo_PSP7_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPSP7 !== estadoAnteriorPSP7 ||\n    presenciaActualPSP7 !== presenciaAnteriorPSP7 ||\n    ocupacionActualPSP7 !== ocupacionAnteriorPSP7 ||\n    capacidadActualPSP7 !== capacidadAnteriorPSP7 ||\n    pasilloActualPSP7 !== pasilloAnteriorPSP7\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP7 a true\n    global.set(\"cambioEstadoPSP7\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP7.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP7 a false\n    global.set(\"cambioEstadoPSP7\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP7.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP7_Anterior\", estadoActualPSP7);\nglobal.set(\"Presencia_PSP7_Anterior\", presenciaActualPSP7);\nglobal.set(\"Ocupacion_PSP7_Anterior\", ocupacionActualPSP7);\nglobal.set(\"Capacidad_PSP7_Anterior\", capacidadActualPSP7);\nglobal.set(\"Pasillo_PSP7_Anterior\", pasilloActualPSP7);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "5a323fa04b318a72",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "efeffb83c925602d",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 3240,
        "wires": [
            [
                "59ba2daaad32cd7b"
            ]
        ],
        "l": true
    },
    {
        "id": "7afab1b880a69b58",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "efeffb83c925602d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 3200,
        "wires": [
            [
                "25a1c76fef39e261"
            ]
        ]
    },
    {
        "id": "25a1c76fef39e261",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "efeffb83c925602d",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_7_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_7_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_7_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_7_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP7Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP7 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_SIETE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP7;\nif (MesaSalida_7_Posición_2_Entrega_Traslo === 0 && MesaSalida_7_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP7 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP7 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP7\nlet capacidadActualPSP7 = 1;\nlet estadoActualPSP7 = 1;\nlet pasilloActualPSP7 = 7;  // El pasillo para PSP7 es 7\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP7_Temp = variablesPLC_Mesas[\"FOT_PRES_TC50\"] && variablesPLC_Mesas[\"F_FINAL_TC50\"];\n\nlet presenciaActualPSP7;\nif (presenciaActualPSP7_Temp) {\n    presenciaActualPSP7 = 0;\n} else {\n    presenciaActualPSP7 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP7 es 0), Estado_PSP7 se pone en 1\nif (estadoActualPSP7Temp && averiaActualPSP7 < 2) {\n    estadoActualPSP7 = 1;\n} else {\n    estadoActualPSP7 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP7\", estadoActualPSP7);\nglobal.set(\"Presencia_PSP7\", presenciaActualPSP7);\nglobal.set(\"Ocupacion_PSP7\", ocupacionActualPSP7);\nglobal.set(\"Capacidad_PSP7\", capacidadActualPSP7);\nglobal.set(\"Pasillo_PSP7\", pasilloActualPSP7);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP7: ${estadoActualPSP7}, Presencia_PSP7: ${presenciaActualPSP7}, Ocupacion_PSP7: ${ocupacionActualPSP7}, Capacidad_PSP7: ${capacidadActualPSP7}, Pasillo_PSP7: ${pasilloActualPSP7}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "e369f9d0a1afe724",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "e6448ee13cee832c",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 3500,
        "wires": [
            [
                "9a9fa7ee2b9c6409"
            ]
        ],
        "l": true
    },
    {
        "id": "8136cac475cf84dd",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "b58bcca42e593365",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP8\nlet estadoActualPSP8 = global.get(\"Estado_PSP8\");\nlet presenciaActualPSP8 = global.get(\"Presencia_PSP8\");\nlet ocupacionActualPSP8 = global.get(\"Ocupacion_PSP8\");\nlet capacidadActualPSP8 = global.get(\"Capacidad_PSP8\");\nlet pasilloActualPSP8 = global.get(\"Pasillo_PSP8\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP8 = global.get(\"Estado_PSP8_Anterior\");\nlet presenciaAnteriorPSP8 = global.get(\"Presencia_PSP8_Anterior\");\nlet ocupacionAnteriorPSP8 = global.get(\"Ocupacion_PSP8_Anterior\");\nlet capacidadAnteriorPSP8 = global.get(\"Capacidad_PSP8_Anterior\");\nlet pasilloAnteriorPSP8 = global.get(\"Pasillo_PSP8_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPSP8 !== estadoAnteriorPSP8 ||\n    presenciaActualPSP8 !== presenciaAnteriorPSP8 ||\n    ocupacionActualPSP8 !== ocupacionAnteriorPSP8 ||\n    capacidadActualPSP8 !== capacidadAnteriorPSP8 ||\n    pasilloActualPSP8 !== pasilloAnteriorPSP8\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP8 a true\n    global.set(\"cambioEstadoPSP8\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP8.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP8 a false\n    global.set(\"cambioEstadoPSP8\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP8.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP8_Anterior\", estadoActualPSP8);\nglobal.set(\"Presencia_PSP8_Anterior\", presenciaActualPSP8);\nglobal.set(\"Ocupacion_PSP8_Anterior\", ocupacionActualPSP8);\nglobal.set(\"Capacidad_PSP8_Anterior\", capacidadActualPSP8);\nglobal.set(\"Pasillo_PSP8_Anterior\", pasilloActualPSP8);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3460,
        "wires": [
            []
        ]
    },
    {
        "id": "b862ff6ab8d5522a",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "b58bcca42e593365",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 3460,
        "wires": [
            [
                "8136cac475cf84dd"
            ]
        ],
        "l": true
    },
    {
        "id": "aa810d476679878d",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "b58bcca42e593365",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 3420,
        "wires": [
            [
                "9fc4358e8510bf83"
            ]
        ]
    },
    {
        "id": "9fc4358e8510bf83",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "b58bcca42e593365",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_8_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_8_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_8_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_8_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP8Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP8 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_OCHO\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP8;\nif (MesaSalida_8_Posición_2_Entrega_Traslo === 0 && MesaSalida_8_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP8 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP8 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP8\nlet capacidadActualPSP8 = 1;\nlet estadoActualPSP8 = 1;\nlet pasilloActualPSP8 = 8;  // El pasillo para PSP8 es 8\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP8_Temp = variablesPLC_Mesas[\"FOT_PRES_TC52\"] && variablesPLC_Mesas[\"F_FINAL_TC52\"];\n\nlet presenciaActualPSP8;\nif (presenciaActualPSP8_Temp) {\n    presenciaActualPSP8 = 0;\n} else {\n    presenciaActualPSP8 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP8 es 0), Estado_PSP8 se pone en 1\nif (estadoActualPSP8Temp && averiaActualPSP8 < 2) {\n    estadoActualPSP8 = 1;\n} else {\n    estadoActualPSP8 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP8\", estadoActualPSP8);\nglobal.set(\"Presencia_PSP8\", presenciaActualPSP8);\nglobal.set(\"Ocupacion_PSP8\", ocupacionActualPSP8);\nglobal.set(\"Capacidad_PSP8\", capacidadActualPSP8);\nglobal.set(\"Pasillo_PSP8\", pasilloActualPSP8);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP8: ${estadoActualPSP8}, Presencia_PSP8: ${presenciaActualPSP8}, Ocupacion_PSP8: ${ocupacionActualPSP8}, Capacidad_PSP8: ${capacidadActualPSP8}, Pasillo_PSP8: ${pasilloActualPSP8}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "0b36b12cbf344e38",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "3b3146c3cff18580",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 3720,
        "wires": [
            [
                "c0bdd7108ca8a8de"
            ]
        ],
        "l": true
    },
    {
        "id": "5e155e852ef4f6f4",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cfa29a50cdbb6993",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP9\nlet estadoActualPSP9 = global.get(\"Estado_PSP9\");\nlet presenciaActualPSP9 = global.get(\"Presencia_PSP9\");\nlet ocupacionActualPSP9 = global.get(\"Ocupacion_PSP9\");\nlet capacidadActualPSP9 = global.get(\"Capacidad_PSP9\");\nlet pasilloActualPSP9 = global.get(\"Pasillo_PSP9\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP9 = global.get(\"Estado_PSP9_Anterior\");\nlet presenciaAnteriorPSP9 = global.get(\"Presencia_PSP9_Anterior\");\nlet ocupacionAnteriorPSP9 = global.get(\"Ocupacion_PSP9_Anterior\");\nlet capacidadAnteriorPSP9 = global.get(\"Capacidad_PSP9_Anterior\");\nlet pasilloAnteriorPSP9 = global.get(\"Pasillo_PSP9_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPSP9 !== estadoAnteriorPSP9 ||\n    presenciaActualPSP9 !== presenciaAnteriorPSP9 ||\n    ocupacionActualPSP9 !== ocupacionAnteriorPSP9 ||\n    capacidadActualPSP9 !== capacidadAnteriorPSP9 ||\n    pasilloActualPSP9 !== pasilloAnteriorPSP9\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP9 a true\n    global.set(\"cambioEstadoPSP9\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP9.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP9 a false\n    global.set(\"cambioEstadoPSP9\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP9.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP9_Anterior\", estadoActualPSP9);\nglobal.set(\"Presencia_PSP9_Anterior\", presenciaActualPSP9);\nglobal.set(\"Ocupacion_PSP9_Anterior\", ocupacionActualPSP9);\nglobal.set(\"Capacidad_PSP9_Anterior\", capacidadActualPSP9);\nglobal.set(\"Pasillo_PSP9_Anterior\", pasilloActualPSP9);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3680,
        "wires": [
            []
        ]
    },
    {
        "id": "f7cd255c1c5a585b",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "cfa29a50cdbb6993",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 3680,
        "wires": [
            [
                "5e155e852ef4f6f4"
            ]
        ],
        "l": true
    },
    {
        "id": "0cfed58f2a22c3c7",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "cfa29a50cdbb6993",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 3640,
        "wires": [
            [
                "b38076043375419f"
            ]
        ]
    },
    {
        "id": "b38076043375419f",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cfa29a50cdbb6993",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_9_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_9_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_9_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_9_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP9Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP9 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_NUEVE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP9;\nif (MesaSalida_9_Posición_2_Entrega_Traslo === 0 && MesaSalida_9_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP9 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP9 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP9\nlet capacidadActualPSP9 = 1;\nlet estadoActualPSP9 = 1;\nlet pasilloActualPSP9 = 9;  // El pasillo para PSP9 es 9\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP9_Temp = variablesPLC_Mesas[\"FOT_PRES_TC54\"] && variablesPLC_Mesas[\"F_FINAL_TC54\"];\n\nlet presenciaActualPSP9;\nif (presenciaActualPSP9_Temp) {\n    presenciaActualPSP9 = 0;\n} else {\n    presenciaActualPSP9 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP9 es 0), Estado_PSP9 se pone en 1\nif (estadoActualPSP9Temp && averiaActualPSP9 < 2) {\n    estadoActualPSP9 = 1;\n} else {\n    estadoActualPSP9 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP9\", estadoActualPSP9);\nglobal.set(\"Presencia_PSP9\", presenciaActualPSP9);\nglobal.set(\"Ocupacion_PSP9\", ocupacionActualPSP9);\nglobal.set(\"Capacidad_PSP9\", capacidadActualPSP9);\nglobal.set(\"Pasillo_PSP9\", pasilloActualPSP9);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP9: ${estadoActualPSP9}, Presencia_PSP9: ${presenciaActualPSP9}, Ocupacion_PSP9: ${ocupacionActualPSP9}, Capacidad_PSP9: ${capacidadActualPSP9}, Pasillo_PSP9: ${pasilloActualPSP9}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 3640,
        "wires": [
            []
        ]
    },
    {
        "id": "1a8debc89acfe840",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "50ad1466a01a29b7",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 3940,
        "wires": [
            [
                "80f3510b5fc41c08"
            ]
        ],
        "l": true
    },
    {
        "id": "f9c9ac66b3d135e6",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "157f1f9d196bf5fc",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP10\nlet estadoActualPSP10 = global.get(\"Estado_PSP10\");\nlet presenciaActualPSP10 = global.get(\"Presencia_PSP10\");\nlet ocupacionActualPSP10 = global.get(\"Ocupacion_PSP10\");\nlet capacidadActualPSP10 = global.get(\"Capacidad_PSP10\");\nlet pasilloActualPSP10 = global.get(\"Pasillo_PSP10\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP10 = global.get(\"Estado_PSP10_Anterior\");\nlet presenciaAnteriorPSP10 = global.get(\"Presencia_PSP10_Anterior\");\nlet ocupacionAnteriorPSP10 = global.get(\"Ocupacion_PSP10_Anterior\");\nlet capacidadAnteriorPSP10 = global.get(\"Capacidad_PSP10_Anterior\");\nlet pasilloAnteriorPSP10 = global.get(\"Pasillo_PSP10_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n  //  estadoActualPSP10 !== estadoAnteriorPSP10 ||\n    presenciaActualPSP10 !== presenciaAnteriorPSP10 ||\n    ocupacionActualPSP10 !== ocupacionAnteriorPSP10 ||\n    capacidadActualPSP10 !== capacidadAnteriorPSP10 ||\n    pasilloActualPSP10 !== pasilloAnteriorPSP10\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP10 a true\n    global.set(\"cambioEstadoPSP10\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP10.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP10 a false\n    global.set(\"cambioEstadoPSP10\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP10.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP10_Anterior\", estadoActualPSP10);\nglobal.set(\"Presencia_PSP10_Anterior\", presenciaActualPSP10);\nglobal.set(\"Ocupacion_PSP10_Anterior\", ocupacionActualPSP10);\nglobal.set(\"Capacidad_PSP10_Anterior\", capacidadActualPSP10);\nglobal.set(\"Pasillo_PSP10_Anterior\", pasilloActualPSP10);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3900,
        "wires": [
            []
        ]
    },
    {
        "id": "62f3c28a5585df3d",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "157f1f9d196bf5fc",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 3900,
        "wires": [
            [
                "f9c9ac66b3d135e6"
            ]
        ],
        "l": true
    },
    {
        "id": "204d3026e8f5160c",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "157f1f9d196bf5fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 3860,
        "wires": [
            [
                "8861d95b3195a62c"
            ]
        ]
    },
    {
        "id": "8861d95b3195a62c",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "157f1f9d196bf5fc",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_10_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_10_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_10_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_10_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP10Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP10 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_DIEZ\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP10;\nif (MesaSalida_10_Posición_2_Entrega_Traslo === 0 && MesaSalida_10_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP10 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP10 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP10\nlet capacidadActualPSP10 = 1;\nlet estadoActualPSP10 = 1;\nlet pasilloActualPSP10 = 10;  // El pasillo para PSP10 es 10\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP10_Temp = variablesPLC_Mesas[\"FOT_PRES_TC56\"] && variablesPLC_Mesas[\"F_FINAL_TC56\"];\n\nlet presenciaActualPSP10;\nif (presenciaActualPSP10_Temp) {\n    presenciaActualPSP10 = 0;\n} else {\n    presenciaActualPSP10 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP10 es 0), Estado_PSP10 se pone en 1\nif (estadoActualPSP10Temp && averiaActualPSP10 < 2) {\n    estadoActualPSP10 = 1;\n} else {\n    estadoActualPSP10 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP10\", estadoActualPSP10);\nglobal.set(\"Presencia_PSP10\", presenciaActualPSP10);\nglobal.set(\"Ocupacion_PSP10\", ocupacionActualPSP10);\nglobal.set(\"Capacidad_PSP10\", capacidadActualPSP10);\nglobal.set(\"Pasillo_PSP10\", pasilloActualPSP10);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP10: ${estadoActualPSP10}, Presencia_PSP10: ${presenciaActualPSP10}, Ocupacion_PSP10: ${ocupacionActualPSP10}, Capacidad_PSP10: ${capacidadActualPSP10}, Pasillo_PSP10: ${pasilloActualPSP10}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 3860,
        "wires": [
            []
        ]
    },
    {
        "id": "d8378b5f042b7bff",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "541f3bb90995b384",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 4160,
        "wires": [
            [
                "8dfb7fe1af22d00a"
            ]
        ],
        "l": true
    },
    {
        "id": "cc9f028de59b25a5",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "73230e2c64169b38",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP11\nlet estadoActualPSP11 = global.get(\"Estado_PSP11\");\nlet presenciaActualPSP11 = global.get(\"Presencia_PSP11\");\nlet ocupacionActualPSP11 = global.get(\"Ocupacion_PSP11\");\nlet capacidadActualPSP11 = global.get(\"Capacidad_PSP11\");\nlet pasilloActualPSP11 = global.get(\"Pasillo_PSP11\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP11 = global.get(\"Estado_PSP11_Anterior\");\nlet presenciaAnteriorPSP11 = global.get(\"Presencia_PSP11_Anterior\");\nlet ocupacionAnteriorPSP11 = global.get(\"Ocupacion_PSP11_Anterior\");\nlet capacidadAnteriorPSP11 = global.get(\"Capacidad_PSP11_Anterior\");\nlet pasilloAnteriorPSP11 = global.get(\"Pasillo_PSP11_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPSP11 !== estadoAnteriorPSP11 ||\n    presenciaActualPSP11 !== presenciaAnteriorPSP11 ||\n    ocupacionActualPSP11 !== ocupacionAnteriorPSP11 ||\n    capacidadActualPSP11 !== capacidadAnteriorPSP11 ||\n    pasilloActualPSP11 !== pasilloAnteriorPSP11\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP11 a true\n    global.set(\"cambioEstadoPSP11\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP11.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP11 a false\n    global.set(\"cambioEstadoPSP11\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP11.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP11_Anterior\", estadoActualPSP11);\nglobal.set(\"Presencia_PSP11_Anterior\", presenciaActualPSP11);\nglobal.set(\"Ocupacion_PSP11_Anterior\", ocupacionActualPSP11);\nglobal.set(\"Capacidad_PSP11_Anterior\", capacidadActualPSP11);\nglobal.set(\"Pasillo_PSP11_Anterior\", pasilloActualPSP11);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 4120,
        "wires": [
            []
        ]
    },
    {
        "id": "2be64d7f03cb5a10",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "73230e2c64169b38",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 4120,
        "wires": [
            [
                "cc9f028de59b25a5"
            ]
        ],
        "l": true
    },
    {
        "id": "cc7e518b848bd0a4",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "73230e2c64169b38",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 4080,
        "wires": [
            [
                "c46b38a3b099e248"
            ]
        ]
    },
    {
        "id": "c46b38a3b099e248",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "73230e2c64169b38",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_11_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_11_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_11_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_11_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP11Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP11 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_ONCE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP11;\nif (MesaSalida_11_Posición_2_Entrega_Traslo === 0 && MesaSalida_11_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP11 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP11 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP11\nlet capacidadActualPSP11 = 1;\nlet estadoActualPSP11 = 1;\nlet pasilloActualPSP11 = 11;  // El pasillo para PSP11 es 11\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP11_Temp = variablesPLC_Mesas[\"FOT_PRES_TC58\"] && variablesPLC_Mesas[\"F_FINAL_TC58\"];\n\nlet presenciaActualPSP11;\nif (presenciaActualPSP11_Temp) {\n    presenciaActualPSP11 = 0;\n} else {\n    presenciaActualPSP11 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP11 es 0), Estado_PSP11 se pone en 1\nif (estadoActualPSP11Temp && averiaActualPSP11 < 2) {\n    estadoActualPSP11 = 1;\n} else {\n    estadoActualPSP11 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP11\", estadoActualPSP11);\nglobal.set(\"Presencia_PSP11\", presenciaActualPSP11);\nglobal.set(\"Ocupacion_PSP11\", ocupacionActualPSP11);\nglobal.set(\"Capacidad_PSP11\", capacidadActualPSP11);\nglobal.set(\"Pasillo_PSP11\", pasilloActualPSP11);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP11: ${estadoActualPSP11}, Presencia_PSP11: ${presenciaActualPSP11}, Ocupacion_PSP11: ${ocupacionActualPSP11}, Capacidad_PSP11: ${capacidadActualPSP11}, Pasillo_PSP11: ${pasilloActualPSP11}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 4080,
        "wires": [
            []
        ]
    },
    {
        "id": "ceec618be4df21f4",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "bf9d7226c7f674e9",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 4380,
        "wires": [
            [
                "e7f584debc8acf8e"
            ]
        ],
        "l": true
    },
    {
        "id": "6d99f5dd8c061176",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "70698d54da31374d",
        "name": "cambio de estado",
        "func": "// Obtener los valores actuales de las variables globales para PSP12\nlet estadoActualPSP12 = global.get(\"Estado_PSP12\");\nlet presenciaActualPSP12 = global.get(\"Presencia_PSP12\");\nlet ocupacionActualPSP12 = global.get(\"Ocupacion_PSP12\");\nlet capacidadActualPSP12 = global.get(\"Capacidad_PSP12\");\nlet pasilloActualPSP12 = global.get(\"Pasillo_PSP12\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorPSP12 = global.get(\"Estado_PSP12_Anterior\");\nlet presenciaAnteriorPSP12 = global.get(\"Presencia_PSP12_Anterior\");\nlet ocupacionAnteriorPSP12 = global.get(\"Ocupacion_PSP12_Anterior\");\nlet capacidadAnteriorPSP12 = global.get(\"Capacidad_PSP12_Anterior\");\nlet pasilloAnteriorPSP12 = global.get(\"Pasillo_PSP12_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n   // estadoActualPSP12 !== estadoAnteriorPSP12 ||\n    presenciaActualPSP12 !== presenciaAnteriorPSP12 ||\n    ocupacionActualPSP12 !== ocupacionAnteriorPSP12 ||\n    capacidadActualPSP12 !== capacidadAnteriorPSP12 ||\n    pasilloActualPSP12 !== pasilloAnteriorPSP12\n) {\n    // Si alguna variable cambió, establecer cambioEstadoPSP12 a true\n    global.set(\"cambioEstadoPSP12\", true);\n    node.warn(\"Cambio detectado en una o más variables de PSP12.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoPSP12 a false\n    global.set(\"cambioEstadoPSP12\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de PSP12.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_PSP12_Anterior\", estadoActualPSP12);\nglobal.set(\"Presencia_PSP12_Anterior\", presenciaActualPSP12);\nglobal.set(\"Ocupacion_PSP12_Anterior\", ocupacionActualPSP12);\nglobal.set(\"Capacidad_PSP12_Anterior\", capacidadActualPSP12);\nglobal.set(\"Pasillo_PSP12_Anterior\", pasilloActualPSP12);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "0ef9c25be6874e3d",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "70698d54da31374d",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2070,
        "y": 4340,
        "wires": [
            [
                "6d99f5dd8c061176"
            ]
        ],
        "l": true
    },
    {
        "id": "28183fb0c3f04b61",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "70698d54da31374d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 4300,
        "wires": [
            [
                "5b712691f3594337"
            ]
        ]
    },
    {
        "id": "5b712691f3594337",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "70698d54da31374d",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_Scada = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables SCADA están definidas\nif (typeof variablesPLC_Scada === 'undefined' || variablesPLC_Scada === null) {\n    node.error(\"Las variables SCADA no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC para las mesas\nlet MesaSalida_12_Posición_2_Entrega_Traslo = variablesPLC_Mesas[\"MesaSalida_12_Posición_2_Entrega_Traslo\"];\nlet MesaSalida_12_Posición_1_Recogida_Carro = variablesPLC_Mesas[\"MesaSalida_12_Posición_1_Recogida_Carro\"];\n\n// Asignar la variable de estado temporal (Auto/Manual de las Mesas)\nlet estadoActualPSP12Temp = variablesPLC_Scada[\"S_AUT_7MAN_BM692\"];\n\n// Obtener la variable de avería desde SCADA\nlet averiaActualPSP12 = variablesPLC_Scada[\"STATUS_MESAS_SALIDA_DOCE\"];\n\n// Condición para asignar el valor de ocupación basado en las variables de mesa\nlet ocupacionActualPSP12;\nif (MesaSalida_12_Posición_2_Entrega_Traslo === 0 && MesaSalida_12_Posición_1_Recogida_Carro === 0) {\n    ocupacionActualPSP12 = 0;  // Si ambas posiciones están a 0, ocupación es 0\n} else {\n    ocupacionActualPSP12 = 1;  // Si alguna posición tiene valor distinto de 0, ocupación es 1\n}\n\n// Mantener la capacidad en 1 para PSP12\nlet capacidadActualPSP12 = 1;\nlet estadoActualPSP12 = 1;\nlet pasilloActualPSP12 = 12;  // El pasillo para PSP12 es 12\n\n// Presencia será la ocupación invertida\nlet presenciaActualPSP12_Temp = variablesPLC_Mesas[\"FOT_PRES_TC60\"] && variablesPLC_Mesas[\"F_FINAL_TC61\"];\n\nlet presenciaActualPSP12;\nif (presenciaActualPSP12_Temp) {\n    presenciaActualPSP12 = 0;\n} else {\n    presenciaActualPSP12 = 1;\n}\n\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPSP12 es 0), Estado_PSP12 se pone en 1\nif (estadoActualPSP12Temp && averiaActualPSP12 < 2) {\n    estadoActualPSP12 = 1;\n} else {\n    estadoActualPSP12 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PSP12\", estadoActualPSP12);\nglobal.set(\"Presencia_PSP12\", presenciaActualPSP12);\nglobal.set(\"Ocupacion_PSP12\", ocupacionActualPSP12);\nglobal.set(\"Capacidad_PSP12\", capacidadActualPSP12);\nglobal.set(\"Pasillo_PSP12\", pasilloActualPSP12);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PSP12: ${estadoActualPSP12}, Presencia_PSP12: ${presenciaActualPSP12}, Ocupacion_PSP12: ${ocupacionActualPSP12}, Capacidad_PSP12: ${capacidadActualPSP12}, Pasillo_PSP12: ${pasilloActualPSP12}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 4300,
        "wires": [
            []
        ]
    },
    {
        "id": "ad2166224834465a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "e85b35963aef282c",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC_PIE = global.get('nuevoRegistroPIE');\nlet variablesPLC_SCADA = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_PIE === 'undefined' || variablesPLC_PIE === null) {\n    node.error(\"Las variables del PLC para PIS1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_SCADA === 'undefined' || variablesPLC_SCADA === null) {\n    node.error(\"Las variables del PLC para PIS1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualPIS1_TEMP = variablesPLC_SCADA[\"AUT_MAN_BM692_PIS1_2\"];\nlet capacidadActualPIS1 = 1;\nlet pasilloActualPIS1 = 0;\n\n// Presencia será asignada en base a la variable SCADA\nlet presenciaActualPIS1_Temp = variablesPLC_SCADA[\"FOT_FINAL_TA29_PIS1_REJ1\"];\nlet presenciaActualPIS1 = (presenciaActualPIS1_Temp) ? 0 : 1;  // Si presenciaActualPIS1_Temp es verdadero, presencia será 0, de lo contrario 1\n\n// Ocupación será el inverso de la presencia\nlet ocupacionActualPIS1 = (presenciaActualPIS1 === 1) ? 0 : 1;\n\n// Condición: Si estadoActualPIE1 (AUTOMATICO) es 1 \nlet estadoActualPIS1; \nif (estadoActualPIS1_TEMP) {\n    estadoActualPIS1 = 1;\n} else {\n    estadoActualPIS1 = 0;\n}\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PIS1\", estadoActualPIS1);\nglobal.set(\"Presencia_PIS1\", presenciaActualPIS1);\nglobal.set(\"Ocupacion_PIS1\", ocupacionActualPIS1);\nglobal.set(\"Capacidad_PIS1\", capacidadActualPIS1);\nglobal.set(\"Pasillo_PIS1\", pasilloActualPIS1);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PIS1: ${estadoActualPIS1}, Presencia_PIS1: ${presenciaActualPIS1}, Ocupacion_PIS1: ${ocupacionActualPIS1}, Capacidad_PIS1: ${capacidadActualPIS1}, Pasillo_PIS1: ${pasilloActualPIS1}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "a9520fcfa10d00de",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "e85b35963aef282c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 1260,
        "wires": [
            [
                "ad2166224834465a"
            ]
        ]
    },
    {
        "id": "b2f6f37ea370b841",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "ca1cfc8a2bc7850b",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC_PIE = global.get('nuevoRegistroPIE');\nlet variablesPLC_SCADA = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_PIE === 'undefined' || variablesPLC_PIE === null) {\n    node.error(\"Las variables del PLC para PIS2 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_SCADA === 'undefined' || variablesPLC_SCADA === null) {\n    node.error(\"Las variables del PLC para PIS2 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualPIS2_TEMP = variablesPLC_SCADA[\"AUT_MAN_BM692_PIS1_2\"];\nlet capacidadActualPIS2 = 1;\nlet pasilloActualPIS2 = 0;\n\n// Presencia será asignada en base a la variable SCADA\nlet presenciaActualPIS2_Temp = variablesPLC_SCADA[\"FOT_PRES_TA35_PIS2\"];\nlet presenciaActualPIS2 = (presenciaActualPIS2_Temp) ? 0 : 1;  // Si presenciaActualPIS2_Temp es verdadero, presencia será 0, de lo contrario 1\n\n// Ocupación será el inverso de la presencia\nlet ocupacionActualPIS2 = (presenciaActualPIS2 === 1) ? 0 : 1;\nlet estadoActualPIS2;\n// Condición: Si estadoActualPIE1 (AUTOMATICO) es 1 \nif (estadoActualPIS2_TEMP) {\n    estadoActualPIS2 = 1;\n} else {\n    estadoActualPIS2 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PIS2\", estadoActualPIS2);\nglobal.set(\"Presencia_PIS2\", presenciaActualPIS2);\nglobal.set(\"Ocupacion_PIS2\", ocupacionActualPIS2);\nglobal.set(\"Capacidad_PIS2\", capacidadActualPIS2);\nglobal.set(\"Pasillo_PIS2\", pasilloActualPIS2);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PIS2: ${estadoActualPIS2}, Presencia_PIS2: ${presenciaActualPIS2}, Ocupacion_PIS2: ${ocupacionActualPIS2}, Capacidad_PIS2: ${capacidadActualPIS2}, Pasillo_PIS2: ${pasilloActualPIS2}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "4d07180b2a5687e9",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "ca1cfc8a2bc7850b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 1480,
        "wires": [
            [
                "b2f6f37ea370b841"
            ]
        ]
    },
    {
        "id": "6744d4d992b89368",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "2c0210b39fe6451a",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 1450,
        "y": 1700,
        "wires": [
            [
                "7d9d3af7fdea810e"
            ]
        ],
        "l": true
    },
    {
        "id": "296d419ce42833b9",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cc73fe0e91f6abc6",
        "name": "cambio de estado ",
        "func": "// Obtener los valores actuales de las variables globales para REJ1\nlet estadoActualREJ1 = global.get(\"Estado_REJ1\");\nlet presenciaActualREJ1 = global.get(\"Presencia_REJ1\");\nlet ocupacionActualREJ1 = global.get(\"Ocupacion_REJ1\");\nlet capacidadActualREJ1 = global.get(\"Capacidad_REJ1\");\nlet pasilloActualREJ1 = global.get(\"Pasillo_REJ1\");\n\n// Obtener los valores anteriores almacenados en variables globales\nlet estadoAnteriorREJ1 = global.get(\"Estado_REJ1_Anterior\");\nlet presenciaAnteriorREJ1 = global.get(\"Presencia_REJ1_Anterior\");\nlet ocupacionAnteriorREJ1 = global.get(\"Ocupacion_REJ1_Anterior\");\nlet capacidadAnteriorREJ1 = global.get(\"Capacidad_REJ1_Anterior\");\nlet pasilloAnteriorREJ1 = global.get(\"Pasillo_REJ1_Anterior\");\n\n// Comparar los valores actuales con los anteriores\nif (\n    estadoActualREJ1 !== estadoAnteriorREJ1 ||\n    presenciaActualREJ1 !== presenciaAnteriorREJ1 ||\n    ocupacionActualREJ1 !== ocupacionAnteriorREJ1 ||\n    capacidadActualREJ1 !== capacidadAnteriorREJ1 ||\n    pasilloActualREJ1 !== pasilloAnteriorREJ1\n) {\n    // Si alguna variable cambió, establecer cambioEstadoTLV1 a true\n    global.set(\"cambioEstadoREJ1\", true);\n    node.warn(\"Cambio detectado en una o más variables de REJ1.\");\n} else {\n    // Si ninguna variable cambió, establecer cambioEstadoTLV1 a false\n    global.set(\"cambioEstadoREJ1\", false);\n  //  node.warn(\"No se detectaron cambios en las variables de REJ1.\");\n}\n\n// Actualizar los valores anteriores con los valores actuales para la próxima verificación\nglobal.set(\"Estado_REJ1_Anterior\", estadoActualREJ1);\nglobal.set(\"Presencia_REJ1_Anterior\", presenciaActualREJ1);\nglobal.set(\"Ocupacion_REJ1_Anterior\", ocupacionActualREJ1);\nglobal.set(\"Capacidad_REJ1_Anterior\", capacidadActualREJ1);\nglobal.set(\"Pasillo_REJ1_Anterior\", pasilloActualREJ1);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "210b407d17b7fe7d",
        "type": "link in",
        "z": "08d4b7fc21a7a783",
        "g": "cc73fe0e91f6abc6",
        "name": "Clock_10Hz",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 2030,
        "y": 1700,
        "wires": [
            [
                "296d419ce42833b9"
            ]
        ],
        "l": true
    },
    {
        "id": "71acd54eec680a32",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cc73fe0e91f6abc6",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC_PIE = global.get('nuevoRegistroPIE');\nlet variablesPLC_SCADA = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_PIE === 'undefined' || variablesPLC_PIE === null) {\n    node.error(\"Las variables del PLC para REJ1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_SCADA === 'undefined' || variablesPLC_SCADA === null) {\n    node.error(\"Las variables del PLC para REJ1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualREJ1_TEMP = variablesPLC_SCADA[\"AUT_MAN_BM692_PIS1_2\"];\nlet capacidadActualREJ1 = 1;\nlet pasilloActualREJ1 = 0;\n\n// Presencia será asignada en base a la variable SCADA\nlet presenciaActualREJ1_Temp = variablesPLC_SCADA[\"FOT_FINAL_TA29_PIS1_REJ1\"];\nlet presenciaActualREJ1 = (presenciaActualREJ1_Temp) ? 0 : 1;  // Si presenciaActualREJ1_Temp es verdadero, presencia será 0, de lo contrario 1\n\n// Ocupación será el inverso de la presencia\nlet ocupacionActualREJ1 = (presenciaActualREJ1 === 1) ? 0 : 1;\nlet estadoActualREJ1;\n// Condición: Si estadoActualPIE1 (AUTOMATICO) es 1 \nif (estadoActualREJ1_TEMP) {\n    estadoActualREJ1 = 1;\n} else {\n    estadoActualREJ1 = 0;\n}\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_REJ1\", estadoActualREJ1);\nglobal.set(\"Presencia_REJ1\", presenciaActualREJ1);\nglobal.set(\"Ocupacion_REJ1\", ocupacionActualREJ1);\nglobal.set(\"Capacidad_REJ1\", capacidadActualREJ1);\nglobal.set(\"Pasillo_REJ1\", pasilloActualREJ1);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_REJ1: ${estadoActualREJ1}, Presencia_REJ1: ${presenciaActualREJ1}, Ocupacion_REJ1: ${ocupacionActualREJ1}, Capacidad_REJ1: ${capacidadActualREJ1}, Pasillo_REJ1: ${pasilloActualREJ1}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "f6d12abaa0b6bbcd",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "cc73fe0e91f6abc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2050,
        "y": 1640,
        "wires": [
            [
                "71acd54eec680a32"
            ]
        ]
    },
    {
        "id": "2d9018454a867fa8",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "1130859a0776e0c3",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC_PIE = global.get('nuevoRegistroPIE');\nlet variablesPLC_SCADA = global.get('nuevoRegistroSCADA');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_PIE === 'undefined' || variablesPLC_PIE === null) {\n    node.error(\"Las variables del PLC para PIS3 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC_SCADA === 'undefined' || variablesPLC_SCADA === null) {\n    node.error(\"Las variables del PLC para PIS3 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables leídas del PLC a las variables globales según corresponda\nlet estadoActualPIS3_TEMP = variablesPLC_SCADA[\"PUP3_S11_AUTO\"];\nlet capacidadActualPIS3 = 1;\nlet pasilloActualPIS3 = 0;\n\n// Presencia será asignada en base a la variable SCADA\nlet presenciaActualPIS3_Temp = variablesPLC_SCADA[\"FOT_FINAL_PIS3\"];\nlet presenciaActualPIS3;\nif (presenciaActualPIS3_Temp ) {\n    presenciaActualPIS3 = 1;\n} else {\n    presenciaActualPIS3 = 0;\n}\n\n// Ocupación será el inverso de la presencia\nlet ocupacionActualPIS3 = (presenciaActualPIS3 === 1) ? 0 : 1;\nlet estadoActualPIS3;\n// Condición: Si el estado actual es AutoManualMesas (verdadero) y no hay avería (averiaActualPEP5 es 0), Estado_PEP5 se pone en 1\nif (estadoActualPIS3_TEMP ) {\n    estadoActualPIS3 = 1;\n} else {\n    estadoActualPIS3 = 0;\n}\n\n// Asignar las variables globales actualizadas\nglobal.set(\"Estado_PIS3\", estadoActualPIS3);\nglobal.set(\"Presencia_PIS3\", presenciaActualPIS3);\nglobal.set(\"Ocupacion_PIS3\", ocupacionActualPIS3);\nglobal.set(\"Capacidad_PIS3\", capacidadActualPIS3);\nglobal.set(\"Pasillo_PIS3\", pasilloActualPIS3);\n\n// Emitir una advertencia para comprobar las variables asignadas (opcional para depuración)\n//node.warn(`Estado_PIS3: ${estadoActualPIS3}, Presencia_PIS3: ${presenciaActualPIS3}, Ocupacion_PIS3: ${ocupacionActualPIS3}, Capacidad_PIS3: ${capacidadActualPIS3}, Pasillo_PIS3: ${pasilloActualPIS3}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "1d53c13ef848157a",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "1130859a0776e0c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 1680,
        "wires": [
            [
                "2d9018454a867fa8"
            ]
        ]
    },
    {
        "id": "e953b56030319cdc",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "name": "function 33",
        "func": " global.set(`REJ1SstsEvent`, true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "d76d1d4c8748731c",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1500,
        "y": 1420,
        "wires": [
            [
                "e953b56030319cdc"
            ]
        ]
    },
    {
        "id": "c99c78ab66cb7912",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "name": "function 34",
        "func": " global.set(`cambioEstadoREJ1`, true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "ffe0aaa06c7ddc99",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1500,
        "y": 1480,
        "wires": [
            [
                "c99c78ab66cb7912"
            ]
        ]
    },
    {
        "id": "37d0957556353ab5",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "Start",
        "func": "// Obtener el estado actual y la variable 'dispararSSTS_Gen'\n\nlet dispararSSTS_GenCambioEstado = flow.get(\"dispararSSTS_GenCambioEstado\"); \n\n// Variable para gestionar el temporizador cíclico de 30 segundos\nlet cicloAutomatico = global.get('cicloAutomaticoSSTS') || false;\n\n// Verificamos si estamos en el estado 100 y si dispararSSTS_Gen es true\nif (dispararSSTS_GenCambioEstado) {\n    // Enviar el flujo SSTS manualmente y activar el ciclo automático\n    global.set(`SSTS_TodosSstsEvent`, true);\n    flow.set(\"dispararSSTS_GenCambioEstado\" , false); \n    global.set('timeElapsedSSTS', Date.now());  // Reiniciar el temporizador\n    node.warn(\"Flujo SSTS_Gen disparado manualmente y activado el ciclo automático de 30 segundos\");\n\n} else if (cicloAutomatico   ) {\n    // Si el ciclo automático está activo, verificamos si han pasado 30 segundos\n    let timeElapsed = global.get('timeElapsedSSTS') || 0;\n    let currentTime = Date.now();\n    let elapsedTime = currentTime - timeElapsed;\n\n    if (elapsedTime >= 30000) {  // 30000 ms = 30 segundos\n        // Disparamos el flujo SSTS automáticamente cada 30 segundos\n        global.set(`SSTS_TodosSstsEvent`, true);\n        global.set('timeElapsedSSTS', Date.now());  // Reiniciar el temporizador\n        node.warn(\"Flujo SSTS_Gen disparado automáticamente cada 30 segundos\");\n    } else {\n        msg = null;  // Esperamos hasta que se cumplan los 30 segundos\n    }\n} else {\n    // Si no estamos en el estado correcto o la condición no se cumple, no hacemos nada\n    msg = null;\n}\n\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2447a1cb399bf6d7",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "SSTS_TodosSstsEvent`, true",
        "func": "global.set(`SSTS_TodosSstsEvent`, true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b95b292a2289e0b9",
        "type": "inject",
        "z": "08d4b7fc21a7a783",
        "g": "c53b5e46694862ab",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "2447a1cb399bf6d7"
            ]
        ]
    },
    {
        "id": "c6c3e888bab12fb6",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "7eed7e8b520920a9",
        "name": "fsm cambio de estado PIE",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePIE') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePIE', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 10);\n            }, 100);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePIE', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 20);\n            }, 100);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPIE\n            global.set('stateMachineEventStagePIE', 20);\n            if (global.get('cambioEstadoPIE') === true) {\n                global.set('stateMachineEventStagePIE', 30); // Si se detecta un cambio de estado\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePIE', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 40);\n            }, 500);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePIE', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC correctamente.\");\n                global.set('stateMachineEventStagePIE', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePIE', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PIE\n            global.set('stateMachineEventStagePIE', 60);\n            node.warn(\"Lanzando evento SSTS para PIE...\");\n            setTimeout(() => {\n                global.set('PIE1SstsEvent', true);\n                node.warn(\"Evento SSTS para PIE1 lanzado con éxito.\");\n                global.set('stateMachineEventStagePIE', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePIE', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePIE', 900);\n            node.warn(\"Registrando ciclo...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePIE', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIE', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePIE', 0);\n            break;\n    }\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9db968d6847bd033",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "6c75ba1697d3feb5",
        "name": "fsm cambio de estado TLV1",
        "func": "\n    let estadoActual = global.get('stateMachineEventStageTLV1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStageTLV1', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 10);\n            }, 100);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStageTLV1', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 20);\n            }, 100);\n            break;\n\n        case 20: // 20_CheckCambioEstadoTLV1\n            global.set('stateMachineEventStageTLV1', 20);\n            if (global.get('cambioEstadoTLV1') === true) {\n                global.set('stateMachineEventStageTLV1', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStageTLV1', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStageTLV1', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en TLV1...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para TLV1 correctamente.\");\n                global.set('stateMachineEventStageTLV1', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStageTLV1', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_TLV1\n            global.set('stateMachineEventStageTLV1', 60);\n            node.warn(\"Lanzando evento SSTS para TLV1...\");\n            setTimeout(() => {\n                global.set('TLV1SstsEvent', true);\n                node.warn(\"Evento SSTS para TLV1 lanzado con éxito.\");\n                global.set('stateMachineEventStageTLV1', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStageTLV1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageTLV1', 900);\n            node.warn(\"Registrando ciclo para TLV1...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageTLV1', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV1', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageTLV1', 0);\n            break;\n    }\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "36a63ddf87180a47",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "004f32f1f2d94b82",
        "name": "fsm cambio de estado TLV2",
        "func": "\n    let estadoActual = global.get('stateMachineEventStageTLV2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStageTLV2', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 10);\n            }, 100);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStageTLV2', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 20);\n            }, 100);\n            break;\n\n        case 20: // 20_CheckCambioEstadoTLV2\n            global.set('stateMachineEventStageTLV2', 20);\n            if (global.get('cambioEstadoTLV2') === true) {\n                global.set('stateMachineEventStageTLV2', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStageTLV2', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStageTLV2', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en TLV2...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para TLV2 correctamente.\");\n                global.set('stateMachineEventStageTLV2', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStageTLV2', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_TLV2\n            global.set('stateMachineEventStageTLV2', 60);\n            node.warn(\"Lanzando evento SSTS para TLV2...\");\n            setTimeout(() => {\n                global.set('TLV2SstsEvent', true);\n                node.warn(\"Evento SSTS para TLV2 lanzado con éxito.\");\n                global.set('stateMachineEventStageTLV2', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStageTLV2', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageTLV2', 900);\n            node.warn(\"Registrando ciclo para TLV2...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageTLV2', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStageTLV2', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageTLV2', 0);\n            break;\n    }\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "e63e1868f2a8870b",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "059b9c8807e7375d",
        "name": "fsm cambio de estado PTA1",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePTA1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePTA1', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 10);\n            }, 100);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePTA1', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 20);\n            }, 100);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPTA1\n            global.set('stateMachineEventStagePTA1', 20);\n            if (global.get('cambioEstadoPTA1') === true) {\n                global.set('stateMachineEventStagePTA1', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePTA1', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePTA1', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PTA1...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PTA1 correctamente.\");\n                global.set('stateMachineEventStagePTA1', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePTA1', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PTA1\n            global.set('stateMachineEventStagePTA1', 60);\n            node.warn(\"Lanzando evento SSTS para PTA1...\");\n            setTimeout(() => {\n                global.set('PTA1SstsEvent', true);\n                node.warn(\"Evento SSTS para PTA1 lanzado con éxito.\");\n                global.set('stateMachineEventStagePTA1', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePTA1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePTA1', 900);\n            node.warn(\"Registrando ciclo para PTA1...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePTA1', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePTA1', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePTA1', 0);\n            break;\n    }\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "064bb180e8fad20e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "a1d13578cb7c4bc3",
        "name": "fsm cambio de estado PIS1",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePIS1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePIS1', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePIS1', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPIS1\n            global.set('stateMachineEventStagePIS1', 20);\n            if (global.get('cambioEstadoPIS1') === true) {\n                global.set('stateMachineEventStagePIS1', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePIS1', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePIS1', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PIS1...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PIS1 correctamente.\");\n                global.set('stateMachineEventStagePIS1', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePIS1', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PIS1\n            global.set('stateMachineEventStagePIS1', 60);\n            node.warn(\"Lanzando evento SSTS para PIS1...\");\n            setTimeout(() => {\n                global.set('PIS1SstsEvent', true);\n                node.warn(\"Evento SSTS para PIS1 lanzado con éxito.\");\n                global.set('stateMachineEventStagePIS1', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePIS1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePIS1', 900);\n            node.warn(\"Registrando ciclo para PIS1...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePIS1', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS1', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePIS1', 0);\n            break;\n    }\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "d12a49e29147e46a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "885a256a1b12a5e9",
        "name": "fsm cambio de estado PIS2",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePIS2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePIS2', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePIS2', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPIS2\n            global.set('stateMachineEventStagePIS2', 20);\n            if (global.get('cambioEstadoPIS2') === true) {\n                global.set('stateMachineEventStagePIS2', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePIS2', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePIS2', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PIS2...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PIS2 correctamente.\");\n                global.set('stateMachineEventStagePIS2', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePIS2', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PIS2\n            global.set('stateMachineEventStagePIS2', 60);\n            node.warn(\"Lanzando evento SSTS para PIS2...\");\n            setTimeout(() => {\n                global.set('PIS2SstsEvent', true);\n                node.warn(\"Evento SSTS para PIS2 lanzado con éxito.\");\n                global.set('stateMachineEventStagePIS2', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePIS2', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePIS2', 900);\n            node.warn(\"Registrando ciclo para PIS2...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePIS2', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS2', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePIS2', 0);\n            break;\n    }\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "6eeeac152ae6887f",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "9402d3484c4ad92c",
        "name": "fsm cambio de estado PIS3",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePIS3') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePIS3', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePIS3', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPIS3\n            global.set('stateMachineEventStagePIS3', 20);\n            if (global.get('cambioEstadoPIS3') === true) {\n                global.set('stateMachineEventStagePIS3', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePIS3', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePIS3', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PIS3...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PIS3 correctamente.\");\n                global.set('stateMachineEventStagePIS3', 50);\n            }, 1000);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePIS3', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PIS3\n            global.set('stateMachineEventStagePIS3', 60);\n            node.warn(\"Lanzando evento SSTS para PIS3...\");\n            setTimeout(() => {\n                global.set('PIS3SstsEvent', true);\n                node.warn(\"Evento SSTS para PIS3 lanzado con éxito.\");\n                global.set('stateMachineEventStagePIS3', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePIS3', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePIS3', 900);\n            node.warn(\"Registrando ciclo para PIS3...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePIS3', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePIS3', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePIS3', 0);\n            break;\n    }\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "ca43493bf3820331",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "d9577576f6d1d102",
        "name": "fsm cambio de estado PEP1",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP1', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP1', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP1\n            global.set('stateMachineEventStagePEP1', 20);\n            if (global.get('cambioEstadoPEP1') === true) {\n                global.set('stateMachineEventStagePEP1', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP1', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP1', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP1...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP1 correctamente.\");\n                global.set('stateMachineEventStagePEP1', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP1', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP1\n            global.set('stateMachineEventStagePEP1', 60);\n            node.warn(\"Lanzando evento SSTS para PEP1...\");\n            setTimeout(() => {\n                global.set('PEP1SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP1 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP1', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP1', 900);\n            node.warn(\"Registrando ciclo para PEP1...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP1', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP1', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP1', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "bc14ecbe3fb578ea",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "94ad54c038fdfbe7",
        "name": "fsm cambio de estado PEP2",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP2', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP2', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP2\n            global.set('stateMachineEventStagePEP2', 20);\n            if (global.get('cambioEstadoPEP2') === true) {\n                global.set('stateMachineEventStagePEP2', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP2', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP2', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP2...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP2 correctamente.\");\n                global.set('stateMachineEventStagePEP2', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP2', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP2\n            global.set('stateMachineEventStagePEP2', 60);\n            node.warn(\"Lanzando evento SSTS para PEP2...\");\n            setTimeout(() => {\n                global.set('PEP2SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP2 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP2', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP2', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP2', 900);\n            node.warn(\"Registrando ciclo para PEP2...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP2', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP2', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP2', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "a8f6f424e95f486e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "30459ef60e88e4a3",
        "name": "fsm cambio de estado PEP3",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP3') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP3', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP3', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP3\n            global.set('stateMachineEventStagePEP3', 20);\n            if (global.get('cambioEstadoPEP3') === true) {\n                global.set('stateMachineEventStagePEP3', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP3', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP3', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP3...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP3 correctamente.\");\n                global.set('stateMachineEventStagePEP3', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP3', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP3\n            global.set('stateMachineEventStagePEP3', 60);\n            node.warn(\"Lanzando evento SSTS para PEP3...\");\n            setTimeout(() => {\n                global.set('PEP3SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP3 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP3', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP3', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP3', 900);\n            node.warn(\"Registrando ciclo para PEP3...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP3', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP3', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP3', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "5338192c263b8924",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "66c2ab2d09abd784",
        "name": "fsm cambio de estado PEP4",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP4') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP4', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP4', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP4\n            global.set('stateMachineEventStagePEP4', 20);\n            if (global.get('cambioEstadoPEP4') === true) {\n                global.set('stateMachineEventStagePEP4', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP4', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP4', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP4...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP4 correctamente.\");\n                global.set('stateMachineEventStagePEP4', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP4', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP4\n            global.set('stateMachineEventStagePEP4', 60);\n            node.warn(\"Lanzando evento SSTS para PEP4...\");\n            setTimeout(() => {\n                global.set('PEP4SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP4 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP4', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP4', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP4', 900);\n            node.warn(\"Registrando ciclo para PEP4...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP4', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP4', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP4', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "a0efb77a7e98015c",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "db60865c83c008fd",
        "name": "fsm cambio de estado PEP7",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP7') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP7', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP7', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP7\n            global.set('stateMachineEventStagePEP7', 20);\n            if (global.get('cambioEstadoPEP7') === true) {\n                global.set('stateMachineEventStagePEP7', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP7', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP7', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP7...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP7 correctamente.\");\n                global.set('stateMachineEventStagePEP7', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP7', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP7\n            global.set('stateMachineEventStagePEP7', 60);\n            node.warn(\"Lanzando evento SSTS para PEP7...\");\n            setTimeout(() => {\n                global.set('PEP7SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP7 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP7', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP7', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP7', 900);\n            node.warn(\"Registrando ciclo para PEP7...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP7', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP7', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP7', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "3155849348c68797",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cc637912f1c88272",
        "name": "fsm cambio de estado PEP5",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP5') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP5', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP5', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP5\n            global.set('stateMachineEventStagePEP5', 20);\n            if (global.get('cambioEstadoPEP5') === true) {\n                global.set('stateMachineEventStagePEP5', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP5', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP5', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP5...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP5 correctamente.\");\n                global.set('stateMachineEventStagePEP5', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP5', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP5\n            global.set('stateMachineEventStagePEP5', 60);\n            node.warn(\"Lanzando evento SSTS para PEP5...\");\n            setTimeout(() => {\n                global.set('PEP5SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP5 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP5', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP5', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP5', 900);\n            node.warn(\"Registrando ciclo para PEP5...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP5', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP5', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP5', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "a9a3b78f10494774",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "ed3fcddd7157ad59",
        "name": "fsm cambio de estado PEP6",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP6') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP6', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP6', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP6\n            global.set('stateMachineEventStagePEP6', 20);\n            if (global.get('cambioEstadoPEP6') === true) {\n                global.set('stateMachineEventStagePEP6', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP6', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP6', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP6...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP6 correctamente.\");\n                global.set('stateMachineEventStagePEP6', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP6', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP6\n            global.set('stateMachineEventStagePEP6', 60);\n            node.warn(\"Lanzando evento SSTS para PEP6...\");\n            setTimeout(() => {\n                global.set('PEP6SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP6 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP6', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP6', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP6', 900);\n            node.warn(\"Registrando ciclo para PEP6...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP6', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP6', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP6', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "9207a3ebec47802b",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "5ac7c5cf94fa331b",
        "name": "fsm cambio de estado PEP8",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP8') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP8', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP8', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP8\n            global.set('stateMachineEventStagePEP8', 20);\n            if (global.get('cambioEstadoPEP8') === true) {\n                global.set('stateMachineEventStagePEP8', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP8', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP8', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP8...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP8 correctamente.\");\n                global.set('stateMachineEventStagePEP8', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP8', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP8\n            global.set('stateMachineEventStagePEP8', 60);\n            node.warn(\"Lanzando evento SSTS para PEP8...\");\n            setTimeout(() => {\n                global.set('PEP8SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP8 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP8', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP8', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP8', 900);\n            node.warn(\"Registrando ciclo para PEP8...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP8', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP8', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP8', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "bcacdf71b16f4f2b",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "a82b3270d3d0bcd8",
        "name": "fsm cambio de estado PEP9",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP9') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP9', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP9', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP9\n            global.set('stateMachineEventStagePEP9', 20);\n            if (global.get('cambioEstadoPEP9') === true) {\n                global.set('stateMachineEventStagePEP9', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP9', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP9', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP9...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP9 correctamente.\");\n                global.set('stateMachineEventStagePEP9', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP9', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP9\n            global.set('stateMachineEventStagePEP9', 60);\n            node.warn(\"Lanzando evento SSTS para PEP9...\");\n            setTimeout(() => {\n                global.set('PEP9SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP9 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP9', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP9', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP9', 900);\n            node.warn(\"Registrando ciclo para PEP9...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP9', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP9', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP9', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "c229793ee9e5ad4d",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "28a985268abe7b45",
        "name": "fsm cambio de estado PEP10",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP10') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP10', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP10', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP10\n            global.set('stateMachineEventStagePEP10', 20);\n            if (global.get('cambioEstadoPEP10') === true) {\n                global.set('stateMachineEventStagePEP10', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP10', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP10', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP10...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP10 correctamente.\");\n                global.set('stateMachineEventStagePEP10', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP10', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP10\n            global.set('stateMachineEventStagePEP10', 60);\n            node.warn(\"Lanzando evento SSTS para PEP10...\");\n            setTimeout(() => {\n                global.set('PEP10SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP10 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP10', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP10', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP10', 900);\n            node.warn(\"Registrando ciclo para PEP10...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP10', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP10', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP10', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "c330a89e132eb9f7",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "058159e4f974f49b",
        "name": "fsm cambio de estado PEP11",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP11') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP11', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP11', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP11\n            global.set('stateMachineEventStagePEP11', 20);\n            if (global.get('cambioEstadoPEP11') === true) {\n                global.set('stateMachineEventStagePEP11', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP11', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP11', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP11...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP11 correctamente.\");\n                global.set('stateMachineEventStagePEP11', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP11', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP11\n            global.set('stateMachineEventStagePEP11', 60);\n            node.warn(\"Lanzando evento SSTS para PEP11...\");\n            setTimeout(() => {\n                global.set('PEP11SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP11 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP11', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP11', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP11', 900);\n            node.warn(\"Registrando ciclo para PEP11...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP11', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP11', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP11', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 4100,
        "wires": [
            []
        ]
    },
    {
        "id": "713fcfee1bd2079d",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "9d52f86219780937",
        "name": "fsm cambio de estado PEP12",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePEP12') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePEP12', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePEP12', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPEP12\n            global.set('stateMachineEventStagePEP12', 20);\n            if (global.get('cambioEstadoPEP12') === true) {\n                global.set('stateMachineEventStagePEP12', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePEP12', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePEP12', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PEP12...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PEP12 correctamente.\");\n                global.set('stateMachineEventStagePEP12', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePEP12', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PEP12\n            global.set('stateMachineEventStagePEP12', 60);\n            node.warn(\"Lanzando evento SSTS para PEP12...\");\n            setTimeout(() => {\n                global.set('PEP12SstsEvent', true);\n                node.warn(\"Evento SSTS para PEP12 lanzado con éxito.\");\n                global.set('stateMachineEventStagePEP12', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePEP12', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePEP12', 900);\n            node.warn(\"Registrando ciclo para PEP12...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePEP12', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePEP12', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePEP12', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 4320,
        "wires": [
            []
        ]
    },
    {
        "id": "7d9d3af7fdea810e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "2c0210b39fe6451a",
        "name": "fsm cambio de estado REJ1",
        "func": "\n    let estadoActual = global.get('stateMachineEventStageREJ1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStageREJ1', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStageREJ1', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoREJ1\n            global.set('stateMachineEventStageREJ1', 20);\n            if (global.get('cambioEstadoREJ1') === true) {\n                global.set('stateMachineEventStageREJ1', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStageREJ1', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStageREJ1', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en REJ1...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para REJ1 correctamente.\");\n                global.set('stateMachineEventStageREJ1', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStageREJ1', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_REJ1\n            global.set('stateMachineEventStageREJ1', 60);\n            node.warn(\"Lanzando evento SSTS para REJ1...\");\n            setTimeout(() => {\n                global.set('REJ1SstsEvent', true);\n                node.warn(\"Evento SSTS para REJ1 lanzado con éxito.\");\n                global.set('stateMachineEventStageREJ1', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStageREJ1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageREJ1', 900);\n            node.warn(\"Registrando ciclo para REJ1...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageREJ1', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStageREJ1', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageREJ1', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "9a4062af1a8109d7",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "b35292d9872d730f",
        "name": "fsm cambio de estado PSP1",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP1', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP1', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP1\n            global.set('stateMachineEventStagePSP1', 20);\n            if (global.get('cambioEstadoPSP1') === true) {\n                global.set('stateMachineEventStagePSP1', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP1', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP1', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP1...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP1 correctamente.\");\n                global.set('stateMachineEventStagePSP1', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP1', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP1\n            global.set('stateMachineEventStagePSP1', 60);\n            node.warn(\"Lanzando evento SSTS para PSP1...\");\n            setTimeout(() => {\n                global.set('PSP1SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP1 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP1', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP1', 900);\n            node.warn(\"Registrando ciclo para PSP1...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP1', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP1', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP1', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "9e590a66b9f1005c",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "d9edcc78d0f97bdb",
        "name": "fsm cambio de estado PSP2",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP2', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP2', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP2\n            global.set('stateMachineEventStagePSP2', 20);\n            if (global.get('cambioEstadoPSP2') === true) {\n                global.set('stateMachineEventStagePSP2', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP2', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP2', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP2...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP2 correctamente.\");\n                global.set('stateMachineEventStagePSP2', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP2', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP2\n            global.set('stateMachineEventStagePSP2', 60);\n            node.warn(\"Lanzando evento SSTS para PSP2...\");\n            setTimeout(() => {\n                global.set('PSP2SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP2 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP2', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP2', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP2', 900);\n            node.warn(\"Registrando ciclo para PSP2...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP2', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP2', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP2', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "8aafeecdc9d62274",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "e08f1bf68270a79f",
        "name": "fsm cambio de estado PSP3",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP3') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP3', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP3', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP3\n            global.set('stateMachineEventStagePSP3', 20);\n            if (global.get('cambioEstadoPSP3') === true) {\n                global.set('stateMachineEventStagePSP3', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP3', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP3', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP3...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP3 correctamente.\");\n                global.set('stateMachineEventStagePSP3', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP3', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP3\n            global.set('stateMachineEventStagePSP3', 60);\n            node.warn(\"Lanzando evento SSTS para PSP3...\");\n            setTimeout(() => {\n                global.set('PSP3SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP3 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP3', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP3', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP3', 900);\n            node.warn(\"Registrando ciclo para PSP3...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP3', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP3', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP3', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "297e9f84a6cfcc8e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "d3ef5eddefc80948",
        "name": "fsm cambio de estado PSP4",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP4') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP4', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP4', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP4\n            global.set('stateMachineEventStagePSP4', 20);\n            if (global.get('cambioEstadoPSP4') === true) {\n                global.set('stateMachineEventStagePSP4', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP4', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP4', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP4...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP4 correctamente.\");\n                global.set('stateMachineEventStagePSP4', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP4', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP4\n            global.set('stateMachineEventStagePSP4', 60);\n            node.warn(\"Lanzando evento SSTS para PSP4...\");\n            setTimeout(() => {\n                global.set('PSP4SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP4 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP4', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP4', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP4', 900);\n            node.warn(\"Registrando ciclo para PSP4...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP4', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP4', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP4', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "a48599a291757ded",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "8688d38cc539602f",
        "name": "fsm cambio de estado PSP5",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP5') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP5', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP5', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP5\n            global.set('stateMachineEventStagePSP5', 20);\n            if (global.get('cambioEstadoPSP5') === true) {\n                global.set('stateMachineEventStagePSP5', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP5', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP5', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP5...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP5 correctamente.\");\n                global.set('stateMachineEventStagePSP5', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP5', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP5\n            global.set('stateMachineEventStagePSP5', 60);\n            node.warn(\"Lanzando evento SSTS para PSP5...\");\n            setTimeout(() => {\n                global.set('PSP5SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP5 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP5', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP5', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP5', 900);\n            node.warn(\"Registrando ciclo para PSP5...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP5', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP5', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP5', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "745d7bf095efdc97",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "3c770f1fd93916b1",
        "name": "fsm cambio de estado PSP6",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP6') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP6', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP6', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP6\n            global.set('stateMachineEventStagePSP6', 20);\n            if (global.get('cambioEstadoPSP6') === true) {\n                global.set('stateMachineEventStagePSP6', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP6', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP6', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP6...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP6 correctamente.\");\n                global.set('stateMachineEventStagePSP6', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP6', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP6\n            global.set('stateMachineEventStagePSP6', 60);\n            node.warn(\"Lanzando evento SSTS para PSP6...\");\n            setTimeout(() => {\n                global.set('PSP6SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP6 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP6', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP6', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP6', 900);\n            node.warn(\"Registrando ciclo para PSP6...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP6', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP6', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP6', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 2980,
        "wires": [
            []
        ]
    },
    {
        "id": "74222dc67b06cbe9",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "cd1d972e2c43fcb3",
        "name": "fsm cambio de estado PSP7",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP7') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP7', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP7', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP7\n            global.set('stateMachineEventStagePSP7', 20);\n            if (global.get('cambioEstadoPSP7') === true) {\n                global.set('stateMachineEventStagePSP7', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP7', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP7', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP7...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP7 correctamente.\");\n                global.set('stateMachineEventStagePSP7', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP7', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP7\n            global.set('stateMachineEventStagePSP7', 60);\n            node.warn(\"Lanzando evento SSTS para PSP7...\");\n            setTimeout(() => {\n                global.set('PSP7SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP7 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP7', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP7', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP7', 900);\n            node.warn(\"Registrando ciclo para PSP7...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP7', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP7', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP7', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "9a9fa7ee2b9c6409",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "e6448ee13cee832c",
        "name": "fsm cambio de estado PSP8",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP8') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP8', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP8', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP8\n            global.set('stateMachineEventStagePSP8', 20);\n            if (global.get('cambioEstadoPSP8') === true) {\n                global.set('stateMachineEventStagePSP8', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP8', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP8', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP8...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP8 correctamente.\");\n                global.set('stateMachineEventStagePSP8', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP8', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP8\n            global.set('stateMachineEventStagePSP8', 60);\n            node.warn(\"Lanzando evento SSTS para PSP8...\");\n            setTimeout(() => {\n                global.set('PSP8SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP8 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP8', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP8', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP8', 900);\n            node.warn(\"Registrando ciclo para PSP8...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP8', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP8', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP8', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "c0bdd7108ca8a8de",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "3b3146c3cff18580",
        "name": "fsm cambio de estado PSP9",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP9') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP9', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP9', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP9\n            global.set('stateMachineEventStagePSP9', 20);\n            if (global.get('cambioEstadoPSP9') === true) {\n                global.set('stateMachineEventStagePSP9', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP9', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP9', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP9...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP9 correctamente.\");\n                global.set('stateMachineEventStagePSP9', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP9', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP9\n            global.set('stateMachineEventStagePSP9', 60);\n            node.warn(\"Lanzando evento SSTS para PSP9...\");\n            setTimeout(() => {\n                global.set('PSP9SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP9 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP9', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP9', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP9', 900);\n            node.warn(\"Registrando ciclo para PSP9...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP9', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP9', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP9', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 3640,
        "wires": [
            []
        ]
    },
    {
        "id": "80f3510b5fc41c08",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "50ad1466a01a29b7",
        "name": "fsm cambio de estado PSP10",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP10') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP10', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP10', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP10\n            global.set('stateMachineEventStagePSP10', 20);\n            if (global.get('cambioEstadoPSP10') === true) {\n                global.set('stateMachineEventStagePSP10', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP10', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP10', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP10...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP10 correctamente.\");\n                global.set('stateMachineEventStagePSP10', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP10', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP10\n            global.set('stateMachineEventStagePSP10', 60);\n            node.warn(\"Lanzando evento SSTS para PSP10...\");\n            setTimeout(() => {\n                global.set('PSP10SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP10 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP10', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP10', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP10', 900);\n            node.warn(\"Registrando ciclo para PSP10...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP10', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP10', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP10', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "8dfb7fe1af22d00a",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "541f3bb90995b384",
        "name": "fsm cambio de estado PSP11",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP11') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP11', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP11', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP11\n            global.set('stateMachineEventStagePSP11', 20);\n            if (global.get('cambioEstadoPSP11') === true) {\n                global.set('stateMachineEventStagePSP11', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP11', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP11', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP11...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP11 correctamente.\");\n                global.set('stateMachineEventStagePSP11', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP11', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP11\n            global.set('stateMachineEventStagePSP11', 60);\n            node.warn(\"Lanzando evento SSTS para PSP11...\");\n            setTimeout(() => {\n                global.set('PSP11SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP11 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP11', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP11', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP11', 900);\n            node.warn(\"Registrando ciclo para PSP11...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP11', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP11', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP11', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 4100,
        "wires": [
            []
        ]
    },
    {
        "id": "e7f584debc8acf8e",
        "type": "function",
        "z": "08d4b7fc21a7a783",
        "g": "bf9d7226c7f674e9",
        "name": "fsm cambio de estado PSP12",
        "func": "\n    let estadoActual = global.get('stateMachineEventStagePSP12') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('stateMachineEventStagePSP12', 0);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStagePSP12', 10);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 20);\n            }, 1000);\n            break;\n\n        case 20: // 20_CheckCambioEstadoPSP12\n            global.set('stateMachineEventStagePSP12', 20);\n            if (global.get('cambioEstadoPSP12') === true) {\n                global.set('stateMachineEventStagePSP12', 30);\n            }\n            break;\n\n        case 30: // 30_CambioDetectado\n            global.set('stateMachineEventStagePSP12', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 40);\n            }, 100);\n            break;\n\n        case 40: // 40_EscribirVariablesPLC\n            global.set('stateMachineEventStagePSP12', 40);\n            node.warn(\"Escribiendo variables al PLC para el cambio de estado detectado en PSP12...\");\n            setTimeout(() => {\n                node.warn(\"Variables escritas al PLC para PSP12 correctamente.\");\n                global.set('stateMachineEventStagePSP12', 50);\n            }, 100);\n            break;\n\n        case 50: // 50_VariablesOk\n            global.set('stateMachineEventStagePSP12', 50);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 60);\n            }, 100);\n            break;\n\n        case 60: // 60_LanzarEventoSSTS_PSP12\n            global.set('stateMachineEventStagePSP12', 60);\n            node.warn(\"Lanzando evento SSTS para PSP12...\");\n            setTimeout(() => {\n                global.set('PSP12SstsEvent', true);\n                node.warn(\"Evento SSTS para PSP12 lanzado con éxito.\");\n                global.set('stateMachineEventStagePSP12', 70);\n            }, 100);\n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventStagePSP12', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 900);\n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStagePSP12', 900);\n            node.warn(\"Registrando ciclo para PSP12...\");\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 1000);\n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStagePSP12', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStagePSP12', 0);\n            }, 100);\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStagePSP12', 0);\n            break;\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 4300,
        "wires": [
            []
        ]
    },
    {
        "id": "b4c93d45efd313d0",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "close",
        "props": [
            {
                "p": "action",
                "v": " close",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "21e0eacecc1000bd"
            ]
        ]
    },
    {
        "id": "948f7a6b15db2a23",
        "type": "debug",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "client 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 180,
        "wires": []
    },
    {
        "id": "438eeb5fc63132d2",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "StatusTCP",
        "func": "\n// Capturar el estado de la conexión\nvar estado = msg.status.text; // Obtener el estado del nodo tcp-client\nglobal.set('estadoConexion', estado); // Guardar en una variable global\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 180,
        "wires": [
            [
                "948f7a6b15db2a23"
            ]
        ]
    },
    {
        "id": "ad6ea4d059518c7f",
        "type": "status",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "",
        "scope": [
            "2e4668521f9bfb8d"
        ],
        "x": 1440,
        "y": 180,
        "wires": [
            [
                "438eeb5fc63132d2"
            ]
        ]
    },
    {
        "id": "dab5e0ec9926a2f0",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1450,
        "y": 100,
        "wires": [
            [
                "24a1a12b900fb021"
            ]
        ]
    },
    {
        "id": "24a1a12b900fb021",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "StatusTCP",
        "func": "msg.payload = global.get('estadoConexion'); //\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 120,
        "wires": [
            [
                "c62d6f35082bef2e"
            ]
        ]
    },
    {
        "id": "c62d6f35082bef2e",
        "type": "debug",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 120,
        "wires": []
    },
    {
        "id": "28b37ebb256d1110",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "param/Connect",
        "func": "// Obtener el estado de la variable global \"produccion\"\nlet produccion = global.get(\"produccion\");\n\n// Definir los detalles del mensaje de conexión según el estado de \"produccion\"\nmsg.action = \"connect\";\nmsg.host = produccion === false ? \"192.168.131.33\" : \"192.168.131.32\"; // Asignar la IP según el estado\nmsg.port = \"3000\";\n\n// Verificar que el payload existe y tiene al menos 12 caracteres\nif (msg.payload && msg.payload.length >= 12) {\n    // Extraer el campo \"Identificación del telegrama\" de la posición 8 a 12\n    let identificacionTelegrama = msg.payload.substring(8, 12);  // Extrae los caracteres entre la posición 8 y 12\n  \n    // Guardar la identificación del telegrama en una variable global\n    global.set(\"identificacionTelegrama\", identificacionTelegrama);\n\n    // Mostrar un mensaje de depuración con la identificación del telegrama capturada\n    node.warn(\"Identificación del telegrama capturada: \" + identificacionTelegrama);\n} else {\n    // Mostrar un mensaje de advertencia si el payload no es válido o es muy corto\n    node.warn(\"El payload no es válido o es demasiado corto para extraer la identificación del telegrama.\");\n}\n\n\n// Retornar el mensaje para continuar con la conexión\nreturn msg;\n//53 --65\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 400,
        "wires": [
            [
                "05289a51466eaf25"
            ]
        ]
    },
    {
        "id": "1cecbdae149625d0",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "connect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "f0edd5338c768ba6"
            ]
        ]
    },
    {
        "id": "47b65f5c919e61bd",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "close",
        "func": "msg.action = \"close\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "efaa4d74a5b93227"
            ]
        ]
    },
    {
        "id": "a8331f017977e824",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "write",
        "func": "let sequenceNumber = global.get(\"sequenceNumber\");\n\nif (sequenceNumber >= 9999) {\n    node.status({ fill: 'yellow', shape: 'dot', text: 'Seq Number Reset' });\n    sequenceNumber = 0;\n} else {\n    node.status({ fill: 'green', shape: 'dot', text: 'Seq Number: ' + sequenceNumber });\n}\n\nglobal.set(\"sequenceNumber\", sequenceNumber);\n\nmsg.action = \"write\";\n\n// Verificar que el payload existe y tiene al menos 12 caracteres\nif (msg.payload && msg.payload.length >= 12) {\n    // Extraer el campo \"Identificación del telegrama\" de la posición 8 a 12\n    let identificacionTelegrama = msg.payload.substring(8, 12);  // Extrae los caracteres entre la posición 8 y 12\n    let equipamientoActual = msg.payload.substring(60, 65);  // Extrae los caracteres entre la posición\n\n       // Guardar la identificación del telegrama en una variable global\n    global.set(\"identificacionTelegrama\", identificacionTelegrama);\n    global.set(\"equipamientoActual_test\", equipamientoActual);\n\n    // Verificar si el primer carácter es 'S' y reemplazarlo con 'C'\n    if (identificacionTelegrama.charAt(0) === 'S') {\n        let identificacionTelegramaExpected = 'C' + identificacionTelegrama.slice(1);\n        \n        // Guardar la identificación esperada en una variable global\n        global.set(\"IdentificacionTelegramaExpected\", identificacionTelegramaExpected);\n        \n        // Mostrar un mensaje de depuración con la identificación capturada y la esperada\n      //  node.warn(\"Identificación del telegrama capturada: \" + identificacionTelegrama);\n       // node.warn(\"Identificación del telegrama esperada: \" + identificacionTelegramaExpected);\n    } else {\n        // Si el primer carácter no es 'S', no se realiza ningún cambio\n        global.set(\"IdentificacionTelegramaExpected\", identificacionTelegrama);\n      //  node.warn(\"El primer carácter de la identificación del telegrama no es 'S', no se realizó ningún cambio.\");\n    }\n} else {\n    // Mostrar un mensaje de advertencia si el payload no es válido o es muy corto\n   // node.warn(\"El payload no es válido o es demasiado corto para extraer la identificación del telegrama.\");\n}\n\nglobal.set(\"tareaRecibida_Gen\" , false);\nmsg.action = \"write\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 480,
        "wires": [
            [
                "19872f1fcf65eb9c",
                "d357c0efa64c3328",
                "42476009560b29c9"
            ]
        ]
    },
    {
        "id": "f5a400cf77894c85",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "write",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#STX0107SALI10TMS WMS 000120240912113525825             PLC_400_Silo030000000020001GalileoSim       1.000020230814120000100000010000000015000063034050#ETX",
        "payloadType": "str",
        "x": 330,
        "y": 480,
        "wires": [
            [
                "b5df25e0f318c88c"
            ]
        ]
    },
    {
        "id": "a1717ecbe9d74320",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "close",
        "links": [
            "21e0eacecc1000bd"
        ],
        "x": 995,
        "y": 320,
        "wires": [
            [
                "47b65f5c919e61bd"
            ]
        ]
    },
    {
        "id": "efaa4d74a5b93227",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "TCP-client Silo",
        "mode": "link",
        "links": [
            "fc2b6b51d0fd01fb"
        ],
        "x": 1265,
        "y": 320,
        "wires": []
    },
    {
        "id": "05289a51466eaf25",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "TCP-client Silo",
        "mode": "link",
        "links": [
            "fc2b6b51d0fd01fb"
        ],
        "x": 1265,
        "y": 400,
        "wires": []
    },
    {
        "id": "19872f1fcf65eb9c",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "TCP-client Silo",
        "mode": "link",
        "links": [
            "fc2b6b51d0fd01fb"
        ],
        "x": 1265,
        "y": 480,
        "wires": []
    },
    {
        "id": "fc2b6b51d0fd01fb",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "TCP-client Silo_in",
        "links": [
            "05289a51466eaf25",
            "19872f1fcf65eb9c",
            "efaa4d74a5b93227"
        ],
        "x": 1365,
        "y": 500,
        "wires": [
            [
                "2e4668521f9bfb8d",
                "efc6665d8e6952c8",
                "221b53ccf590667d",
                "a785861d18ce980c",
                "78c8b5a0aad74e2a",
                "21452e0c2c1639ad"
            ]
        ]
    },
    {
        "id": "21e0eacecc1000bd",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "close",
        "mode": "link",
        "links": [
            "a1717ecbe9d74320"
        ],
        "x": 495,
        "y": 320,
        "wires": []
    },
    {
        "id": "f0edd5338c768ba6",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "connect",
        "mode": "link",
        "links": [
            "eec035d1b79f2eca"
        ],
        "x": 495,
        "y": 400,
        "wires": []
    },
    {
        "id": "b5df25e0f318c88c",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "write",
        "mode": "link",
        "links": [
            "cbc9d29d2f9767e0",
            "eec035d1b79f2eca"
        ],
        "x": 495,
        "y": 480,
        "wires": []
    },
    {
        "id": "1551edf0d41bc526",
        "type": "comment",
        "z": "83ce3d0ba7d79dba",
        "g": "41b688acbad39e5e",
        "name": "Estado de nuestro cliente TCP",
        "info": "Estado de nuestro cliente TCP\n",
        "x": 1720,
        "y": 60,
        "wires": []
    },
    {
        "id": "575fdbb4be35740b",
        "type": "comment",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "Cliente TCP",
        "info": "",
        "x": 1970,
        "y": 280,
        "wires": []
    },
    {
        "id": "9fe6d2e14861eb05",
        "type": "comment",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "Acciones manuales",
        "info": "",
        "x": 390,
        "y": 80,
        "wires": []
    },
    {
        "id": "371010702919b0f9",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "11af00d3466f1aa4",
        "name": "SALI_Out",
        "links": [
            "c1862bbde47bb43b"
        ],
        "x": 375,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "a862a21ff82b829d",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "11af00d3466f1aa4",
        "name": "SSTS_Out",
        "links": [
            "b7f47d808dc53ea5",
            "4bd633d91a78a80d"
        ],
        "x": 375,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "70a915de9a0d3670",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "62f4d07c7aba3ca5",
        "name": "Connect",
        "func": "let estadoActual = global.get('stateMachineStage_Gen') || '00_Reposo';\nlet connectClient = global.get('connectClient') || false;\n\n// Verificamos si estamos en el estado 40_Paso y si connectClient es true\n \nif (estadoActual === 40 && connectClient === true) {\n    global.set('connectClient', false);  // Reseteamos connectClient para evitar múltiples disparos\n    msg.payload = {};  // Disparamos el flujo deseado\n   \n} else {\n      msg = null;  // Si no estamos en el estado correcto o connectClient no es true, no hacemos nada\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 400,
        "wires": [
            [
                "28b37ebb256d1110"
            ]
        ]
    },
    {
        "id": "cbc9d29d2f9767e0",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "write",
        "links": [
            "b5df25e0f318c88c",
            "0f6af8db2e13013d"
        ],
        "x": 1025,
        "y": 440,
        "wires": [
            [
                "a8331f017977e824"
            ]
        ]
    },
    {
        "id": "f93b242eb9480bee",
        "type": "complete",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "Send",
        "scope": [
            "74d54e0a046552d3",
            "115476e9aae07689",
            "a862a21ff82b829d",
            "371010702919b0f9"
        ],
        "uncaught": false,
        "x": 1010,
        "y": 480,
        "wires": [
            [
                "a8331f017977e824"
            ]
        ]
    },
    {
        "id": "2e4668521f9bfb8d",
        "type": "tcp-client",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "action": "action",
        "actionType": "msg",
        "host": "host",
        "hostType": "msg",
        "port": "port",
        "portType": "msg",
        "datamode": "single",
        "datatype": "utf8",
        "newline": "\\n",
        "write": "payload",
        "writeType": "msg",
        "maxRetries": "5",
        "retryDelay": "3000",
        "indefiniteRetries": false,
        "topic": "",
        "name": "TCP-client Silo",
        "debug": "debug",
        "x": 1540,
        "y": 500,
        "wires": [
            [
                "1a58e0cb8474bddb",
                "efc6665d8e6952c8",
                "221b53ccf590667d",
                "a785861d18ce980c",
                "78c8b5a0aad74e2a",
                "21452e0c2c1639ad"
            ]
        ]
    },
    {
        "id": "1a58e0cb8474bddb",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "Parsear Trama",
        "func": "// Función para capturar los campos de la trama\nfunction parsearTrama(trama) {\n    let resultado = {};\n\n    // Inicio de Transmisión (4 caracteres)\n    resultado.inicioTransmision = trama.substring(0, 4);  // \"STX\"\n\n    // Longitud de los datos del telegrama (4 caracteres)\n    resultado.longitudDatos = trama.substring(4, 8);  // \"0048\"\n\n    // Identificación del telegrama (4 caracteres)\n    resultado.identificacionTelegrama = trama.substring(8, 12);  // \"IIII\"\n\n    // Versión (2 caracteres)\n    resultado.version = trama.substring(12, 14);  // \"MN o NN\"\n\n \n    // Origen (4 caracteres)\n    resultado.origen = trama.substring(14, 18);  // \"0000\"\n\n    // Destino (4 caracteres)\n    resultado.destino = trama.substring(18, 22);  // \"DDDD\"\n\n    // Número de secuencia (4 caracteres)\n    resultado.numeroSecuencia = trama.substring(22, 26);  // \"NNNN\"\n\n    // Hora de envío (8 caracteres, formato HHMMSSmm)\n    resultado.horaEnvio = trama.substring(26, 43);  // \"00000000\"\n\n    // Datos del telegrama (según la longitud capturada)\n    let longitudDatos = parseInt(resultado.longitudDatos, 10);  // Obtener el número de bytes\n    let datosInicio = 43;  // El campo de datos empieza en la posición 35\n    let datosFin = datosInicio + longitudDatos;\n\n    // Capturamos los datos entre la posición de inicio y fin\n    resultado.datosTelegrama = trama.substring(datosInicio, datosFin);\n\n    // Fin de Transmisión (4 caracteres, después de los datos del telegrama)\n    resultado.finTransmision = trama.substring(datosFin, datosFin + 4);  // \"ETX\"\n\n    return resultado;\n}\n\n// Llamada a la función con la trama recibida\nlet trama = msg.payload;\nglobal.set(\"camposTrama\" , parsearTrama(trama));\n//global.set('mensajeCompletado', true);\n\n// Retornar los campos extraídos\nmsg.payload =global.get(\"camposTrama\") ;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 500,
        "wires": [
            [
                "0276554b1d078ce3"
            ]
        ]
    },
    {
        "id": "c09d281e55cf9b90",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "close",
        "func": "let estadoActual = global.get('stateMachineStage_Gen') || '00_Reposo';\nlet closeConexion = global.get('closeConexion') || false;\n\n// Verificamos si estamos en el estado 100 y si dispararSSTS_Gen es true\nif (estadoActual === 10 && closeConexion === true) {\n    msg.action =\"close\";  //Cerramos conexion\n    global.set('closeConexion', false);  // Reseteamos la variable para evitar múltiples disparos\n   \n} else {\n    msg = null;  // Si no estamos en el estado correcto o la variable no es true, no hacemos nada\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "21e0eacecc1000bd"
            ]
        ]
    },
    {
        "id": "3ac27adfc8797873",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "83ce3d0ba7d79dba",
        "g": "62f4d07c7aba3ca5",
        "name": "100ms",
        "x": 630,
        "y": 460,
        "wires": [
            [],
            [
                "70a915de9a0d3670"
            ],
            [],
            []
        ]
    },
    {
        "id": "889c27963e94d173",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "83ce3d0ba7d79dba",
        "g": "3d51858420098e1e",
        "name": "100ms",
        "x": 310,
        "y": 220,
        "wires": [
            [],
            [
                "c09d281e55cf9b90"
            ],
            [],
            []
        ]
    },
    {
        "id": "74d54e0a046552d3",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "11af00d3466f1aa4",
        "name": "SIMO_Out",
        "links": [
            "ae3e4c5ba4bc78a6"
        ],
        "x": 375,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "115476e9aae07689",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "11af00d3466f1aa4",
        "name": "SROS_Out",
        "links": [
            "1ead23ab86b84fc1",
            "3e50956d8b3e84da"
        ],
        "x": 375,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "0f6af8db2e13013d",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "write",
        "mode": "link",
        "links": [
            "cbc9d29d2f9767e0",
            "eec035d1b79f2eca"
        ],
        "x": 945,
        "y": 440,
        "wires": []
    },
    {
        "id": "eec035d1b79f2eca",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "eea1a0be66913f53",
        "name": "connect",
        "links": [
            "f0edd5338c768ba6",
            "0f6af8db2e13013d",
            "b5df25e0f318c88c"
        ],
        "x": 985,
        "y": 380,
        "wires": [
            [
                "28b37ebb256d1110"
            ]
        ]
    },
    {
        "id": "af6fe44b9f7780fe",
        "type": "comment",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "Operaciones incluidas en el telegrama:",
        "info": "Operaciones incluidas en el telegrama:\n•\n1 = Evento\n•\n2 = Fin de Movimiento\n•\n3 = Evento + Fin Movimiento\n•\n4 = Búsqueda de Movimiento\n•\n5 = Evento + Búsqueda Movimiento\n•\n6 = Fin de movimiento + Búsqueda de movimiento\n•\n7 = Evento + Fin de movimiento + Búsqueda de movimiento",
        "x": 1730,
        "y": 280,
        "wires": []
    },
    {
        "id": "df1d8a5ab5af1218",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "tareaTLV1",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaTLV1 = global.get(\"tareaTLV1\");\n\nif (tareaTLV1) {\n   // node.warn(\"Tarea TLV1: \" + JSON.stringify(tareaTLV1, null, 2));\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"Tarea TLV1: \"  + JSON.stringify(tareaTLV1, null, 2);\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 20,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "5067dce0410ed9e2",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Check CIMO & Log",
        "func": "let currentDateTime = new Date().toISOString();\n\nmsg.filename = \"C:\\\\Users\\\\admin_scada\\\\Documents\\\\C_Tareas_log.txt\";  // Ruta del archivo en Windows\nmsg.appendNewline = true;  // Añadir nueva línea al final\n//msg.payload = `[${currentDateTime}] Trama registrada correctamente`;  // Contenido del log\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "42039d988f4a306a",
        "type": "file",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "Write to File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2870,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "cc24df38b761f524",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "pie",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#STX0203CIMO20TMS WMS 010220241016162800324000000010000024002000200000000000000000000000000000000000000000000000003800300200100300100001000010000000000000010090090099900001000000001009001                                                  100100100#ETX",
        "payloadType": "str",
        "x": 1450,
        "y": 380,
        "wires": [
            [
                "8508c31a7d8c4be8"
            ]
        ]
    },
    {
        "id": "0276554b1d078ce3",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "parsearDatosEspecificos",
        "func": "// Mapa de estaciones\nconst estacionesMap = {\n    // Pasillos\n    \"000001\": \"Pasillo1\",\n    \"000002\": \"Pasillo2\",\n    \"000003\": \"Pasillo3\",\n    \"000004\": \"Pasillo4\",\n    \"000005\": \"Pasillo5\",\n    \"000006\": \"Pasillo6\",\n    \"000007\": \"Pasillo7\",\n    \"000008\": \"Pasillo8\",\n    \"000009\": \"Pasillo9\",\n    \"000010\": \"Pasillo10\",\n    \"000011\": \"Pasillo11\",\n    \"000012\": \"Pasillo12\",\n\n    // PIE - Puesto de Identificación de Entradas\n    \"003001\": \"PIE1\",\n    \"003002\": \"PIE2\",\n\n    // REJ - Puesto de Rechazo\n    \"007001\": \"REJ1\",\n    \"007002\": \"REJ2\",\n    \"007003\": \"REJ3\",\n\n    // PIS - Punto de Identificación de Salidas\n    \"004001\": \"PIS1\",\n    \"004002\": \"PIS2\",\n    \"004003\": \"PIS3\",\n\n    // PEP - Punto de Entrada al Pasillo\n    \"009001\": \"PEP1\",\n    \"009002\": \"PEP2\",\n    \"009003\": \"PEP3\",\n    \"009004\": \"PEP4\",\n    \"009005\": \"PEP5\",\n    \"009006\": \"PEP6\",\n    \"009007\": \"PEP7\",\n    \"009008\": \"PEP8\",\n    \"009009\": \"PEP9\",\n    \"009010\": \"PEP10\",\n    \"009011\": \"PEP11\",\n    \"009012\": \"PEP12\",\n\n    // PSP - Punto de Salida al Pasillo\n    \"010001\": \"PSP1\",\n    \"010002\": \"PSP2\",\n    \"010003\": \"PSP3\",\n    \"010004\": \"PSP4\",\n    \"010005\": \"PSP5\",\n    \"010006\": \"PSP6\",\n    \"010007\": \"PSP7\",\n    \"010008\": \"PSP8\",\n    \"010009\": \"PSP9\",\n    \"010010\": \"PSP10\",\n    \"010011\": \"PSP11\",\n    \"010012\": \"PSP12\",\n\n    // TLV - Transelevador\n    \"001001\": \"TLV1\",\n    \"001002\": \"TLV2\",\n\n    // ET - Estación de tránsito\n    \"020001\": \"PTA1\"  // Puente de transbordo\n};\n\n// Función para lanzar error si alguna validación no es correcta\nfunction lanzarError(campo, valor) {\n    node.status({\n        fill: 'red',\n        shape: 'ring',\n        text: `Error: Valor inválido para ${campo}: ${valor}`\n    });\n    throw new Error(`Valor inválido para ${campo}: ${valor}`);\n}\n\n// Función para validar los datos del movimiento\nfunction validarMovimiento(movimiento, tipoMovimiento) {\n    if (!movimiento) {\n        lanzarError(`${tipoMovimiento}`, 'Movimiento indefinido');\n    }\n\n    if (parseInt(movimiento.xActual) !== 999 && parseInt(movimiento.xActual) > 59) {\n        lanzarError(`${tipoMovimiento} xActual`, movimiento.xActual);\n    }\n    if (parseInt(movimiento.xLocal) !== 999 && parseInt(movimiento.xLocal) > 59) {\n        lanzarError(`${tipoMovimiento} xLocal`, movimiento.xLocal);\n    }\n    if (parseInt(movimiento.yLocal) > 12) {\n        lanzarError(`${tipoMovimiento} yLocal`, movimiento.yLocal);\n    }\n    if (parseInt(movimiento.yActual) > 12) {\n        lanzarError(`${tipoMovimiento} yActual`, movimiento.yActual);\n    }\n    if (parseInt(movimiento.lado) > 2) {\n        lanzarError(`${tipoMovimiento} lado`, movimiento.lado);\n    }\n    if (parseInt(movimiento.pasillo) > 12) {\n        lanzarError(`${tipoMovimiento} pasillo`, movimiento.pasillo);\n    }\n}\n\n// Función para asignar tarea a una estación con lógica para TLV-1 o TLV-2\nfunction crearTareaParaEstacion(nombreEstacion, nombreEstacionOrigen, nombreEstacionDestino, datosOrigen, datosDestino, datosAdicionales, equipamiento) {\n\n    // Verificar si el equipamiento es TLV-1 o TLV-2, y ajustar la estación en consecuencia\n    if (equipamiento === \"TLV-1\") {\n        // node.warn(`Equipamiento detectado: ${equipamiento}, ajustando la estación a TLV1.`);\n        nombreEstacion = \"TLV1\";  // Cambiar el nombre de la estación a TLV1\n    } else if (equipamiento === \"TLV-2\") {\n        // node.warn(`Equipamiento detectado: ${equipamiento}, ajustando la estación a TLV2.`);\n        nombreEstacion = \"TLV2\";  // Cambiar el nombre de la estación a TLV2\n    }\n\n    // Crear la tarea de la estación\n    let tareaEstacion = {\n        origen: {\n            estacion: nombreEstacionOrigen,\n            xActual: datosOrigen.xActual,\n            yActual: datosOrigen.yActual,\n            xLocal: datosOrigen.xLocal,\n            yLocal: datosOrigen.yLocal,\n            lado: datosOrigen.lado,\n            pasillo: datosOrigen.pasillo,\n            profundidad: datosOrigen.profundidad\n        },\n        destino: {\n            estacion: nombreEstacionDestino,\n            xActual: datosDestino.xActual,\n            yActual: datosDestino.yActual,\n            xLocal: datosDestino.xLocal,\n            yLocal: datosDestino.yLocal,\n            lado: datosDestino.lado,\n            pasillo: datosDestino.pasillo,\n            profundidad: datosDestino.profundidad\n        },\n        datosAdicionales: {\n            numeroTransporte: datosAdicionales.numeroTransporte,\n            secuencia: datosAdicionales.secuencia,\n            prioridad: datosAdicionales.prioridad,\n            umaContenedor: datosAdicionales.umaContenedor,\n            tipoContenedor: datosAdicionales.tipoContenedor,\n            tipoAltura: datosAdicionales.tipoAltura\n        }\n    };\n\n    // Guardar la tarea en la variable global\n    global.set(`tarea${nombreEstacion}`, tareaEstacion);\n    global.set(`datosListos${nombreEstacion}`, true);\n    // node.warn(`Tarea asignada a ${nombreEstacion}: ${JSON.stringify(tareaEstacion)}`);\n}\n\n// Función para parsear los datos del telegrama\nfunction parsearDatosEspecificos(datosTelegrama, operacionesEncadenadas) {\n    let resultado = {};\n    if (datosTelegrama.length >= 203) {\n        global.set(\"tareaRecibida_Gen\", true);\n        resultado.numeroTransporte = datosTelegrama.substring(8, 18);\n        resultado.secuencia = datosTelegrama.substring(18, 22);\n        resultado.prioridad = datosTelegrama.substring(22, 26);\n        resultado.umaContenedor = datosTelegrama.substring(26, 76);\n        resultado.tipoContenedor = datosTelegrama.substring(76, 79);\n        resultado.tipoAltura = datosTelegrama.substring(79, 82);\n\n        resultado.origenMovimiento = {\n            tipoEstacion: datosTelegrama.substring(82, 85),\n            numeroEstacion: datosTelegrama.substring(85, 88),\n            xActual: datosTelegrama.substring(88, 93),\n            yActual: datosTelegrama.substring(93, 98),\n            xLocal: datosTelegrama.substring(98, 101),\n            yLocal: datosTelegrama.substring(101, 104),\n            lado: datosTelegrama.substring(104, 107),\n            pasillo: datosTelegrama.substring(107, 110),\n            profundidad: datosTelegrama.substring(110, 113)\n        };\n\n        resultado.destinoMovimiento = {\n            tipoEstacion: datosTelegrama.substring(113, 116),\n            numeroEstacion: datosTelegrama.substring(116, 119),\n            xActual: datosTelegrama.substring(119, 124),\n            yActual: datosTelegrama.substring(124, 129),\n            xLocal: datosTelegrama.substring(129, 132),\n            yLocal: datosTelegrama.substring(132, 135),\n            lado: datosTelegrama.substring(135, 138),\n            pasillo: datosTelegrama.substring(138, 141),\n            profundidad: datosTelegrama.substring(141, 144)\n        };\n    }\n    return resultado;\n}\n\n// Lógica principal\nlet resultadoGeneral = global.get(\"camposTrama\");\nlet operacionesEncadenadas = global.get('operacionesEncadenadas');\nlet identificacionTelegramaEnviado = global.get(\"identificacionTelegrama\");\nlet datosEspecificos = {};\nlet tramaOriginal = global.get(\"originalTelegram\") || resultadoGeneral.datosTelegrama;\nlet equipamientoActual = global.get(\"equipamientoActual_test\");   ////por modificar\nlet identificacionTelegramaExpected = global.get(\"IdentificacionTelegramaExpected\");\n\ntry {\n    if (true) {   ///  identificacionTelegramaEnviado && operacionesEncadenadas >= 1 && operacionesEncadenadas <= 7\n        datosEspecificos = parsearDatosEspecificos(resultadoGeneral.datosTelegrama, operacionesEncadenadas);\n\n        let claveEstacionOrigen = datosEspecificos?.origenMovimiento?.tipoEstacion + datosEspecificos?.origenMovimiento?.numeroEstacion;\n        let claveEstacionDestino = datosEspecificos?.destinoMovimiento?.tipoEstacion + datosEspecificos?.destinoMovimiento?.numeroEstacion;\n\n        if (estacionesMap[claveEstacionOrigen]) {\n            crearTareaParaEstacion(\n                estacionesMap[claveEstacionOrigen],\n                estacionesMap[claveEstacionOrigen],\n                estacionesMap[claveEstacionDestino] || 'Desconocido',\n                datosEspecificos.origenMovimiento,\n                datosEspecificos.destinoMovimiento,\n                datosEspecificos,\n                equipamientoActual // Aquí puedes simular TLV-1 o TLV-2\n            );\n        } else {\n            // node.warn(`No se encontró la estación origen con clave: ${claveEstacionOrigen}`);\n        }\n\n        let resultadoFinal = resultadoGeneral.datosTelegrama; // || '0000'\n\n        // Procesar para TLV-1\n        if (equipamientoActual === \"TLV-1\") {\n            let eventoLanzadoTLV1 = global.get(`eventoLanzadoTLV-1`);\n            let resultadoKeyTLV1 = `resultadoTLV-1_${eventoLanzadoTLV1}`;\n            global.set(resultadoKeyTLV1, resultadoFinal); //resultadoFinal\n        }\n\n        // Procesar para TLV-2\n        if (equipamientoActual === \"TLV-2\") {\n            let eventoLanzadoTLV2 = global.get(`eventoLanzadoTLV-2`);\n            let resultadoKeyTLV2 = `resultadoTLV-2_${eventoLanzadoTLV2}`;\n            global.set(resultadoKeyTLV2, resultadoFinal); //resultadoFinal\n        }\n\n        // Procesar para PIE1\n        if (equipamientoActual === \"PIE01\") {\n            let eventoLanzadoPIE1 = global.get(`eventoLanzadoPIE1`);\n            let resultadoKeyPIE1 = `resultadoPIE01_${eventoLanzadoPIE1}`;\n            global.set(resultadoKeyPIE1, resultadoFinal); //resultadoFinal\n        }\n\n        // Procesar para PEP1 a PEP12\n        for (let i = 1; i <= 12; i++) {\n            if (equipamientoActual === `PEP${i}`) {\n                let eventoLanzadoPEP = global.get(`eventoLanzadoPEP${i}`);\n                let resultadoKeyPEP = `resultadoPEP${i}_${eventoLanzadoPEP}`;\n                global.set(resultadoKeyPEP, resultadoFinal); //resultadoFinal\n            }\n        }\n\n        // Procesar para PIS1 a PIS3 si equipamientoActual contiene \"PIS1\", \"PIS2\", o \"PIS3\"\n        for (let i = 1; i <= 3; i++) {\n            if (equipamientoActual.includes(`PIS${i}`)) {\n                 global.set(`resultadoPIS${i}_finDeOrden`, resultadoFinal);\n            }\n        }\n\n\n\n        if (resultadoFinal.startsWith(\"0000\")) {\n            global.set('mensajeCompletado', true);\n            global.set(\"EquipamientoActual\", \"none\");\n            node.status({\n                fill: 'green',\n                shape: 'dot',\n                text: `Resultado OK | Trama: ${resultadoGeneral.identificacionTelegrama}`\n            });\n            return [msg, null];\n        } else {\n            throw new Error(`Error en el resultado: ${resultadoFinal}`);\n        }\n    } else {\n        throw new Error('Identificación del telegrama no es válida o las operaciones encadenadas no están dentro del rango permitido.');\n    }\n} catch (error) {\n    node.warn(`Error capturado: ${error.message}`);\n\n\n\n    global.set('mensajeCompletado', true);\n    global.set(\"EquipamientoActual\", \"none\");\n\n    node.status({\n        fill: 'red',\n        shape: 'dot',\n        text: `Error final | Trama: ${resultadoGeneral.identificacionTelegrama}`\n    });\n    return [msg, null];\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 540,
        "wires": [
            [
                "2cfa3e040251b7c6"
            ]
        ]
    },
    {
        "id": "783f74ba4966418a",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "EquipamientoActual",
        "func": "global.set(\"EquipamientoActual\", \"TLV-1\"); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 320,
        "wires": [
            [
                "1a58e0cb8474bddb"
            ]
        ]
    },
    {
        "id": "60fadd9148039509",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "tareaTLV2",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaTLV2 = global.get(\"tareaTLV2\");\n\nif (tareaTLV2) {\n   // node.warn(\"Tarea TLV2: \" + JSON.stringify(tareaTLV2, null, 2));\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"Tarea TLV2: \" + JSON.stringify(tareaTLV2, null, 2);\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 60,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "63a05477e79fb7fc",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "function 69",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaPIE1 = global.get(\"tareaPIE1\");\n\nif (tareaPIE1) {\n   // node.warn(\"tareaPIE1 TLV2: \" + JSON.stringify(tareaPIE1, null, 2));\n} else {\n  //  node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"tareaPIE1 : \" +  JSON.stringify(tareaPIE1, null, 2);\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 100,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "041eb148e43a4587",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "function 70",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaListos = global.get('datosListosTLV1');\n\nif (tareaListos) {\n   // node.warn(\"tareaListos TLV1: \" + tareaListos );\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"tareaListos TLV1: \" + tareaListos;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 380,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "80ef6dbea5ba0cbc",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2070,
        "y": 140,
        "wires": [
            [
                "041eb148e43a4587",
                "19b54e36e2b31bd9",
                "63a05477e79fb7fc",
                "60fadd9148039509",
                "df1d8a5ab5af1218",
                "a5d83cdd9c654f63",
                "ec832a50a78a7f26",
                "13d3a2d2756f14cf",
                "a0b07fcaa3af2fa0",
                "d9e4d1c16f58456a",
                "54ec15cb7cc66875",
                "3c71807a917a36d9",
                "6c931d1a909a4f27"
            ]
        ]
    },
    {
        "id": "19b54e36e2b31bd9",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "function 71",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaListos = global.get('datosListosTLV2');\n\nif (tareaListos) {\n   // node.warn(\"tareaListos TLV2: \" + tareaListos);\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"tareaListos TLV2: \" + tareaListos;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 420,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "f598d78daadef1d4",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "Deposito",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#STX0203CIMO20TMS WMS 000320241016181613535000000010000024006000200000000000000000000000000000000000000000000000003800700200100900900999000010010010010090010000090000200012001000002009001                                                  100100100#ETX",
        "payloadType": "str",
        "x": 1440,
        "y": 300,
        "wires": [
            [
                "783f74ba4966418a"
            ]
        ]
    },
    {
        "id": "a0e657db7eb55fa6",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "Extraccion",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#STX0203CIMO20TMS WMS 000320241016181613535000000010000024856000200000000000000000000000000000000000000000000000003881500200100000600012000120010000010060010100060099900001000000002006001                                                  100100100#ETX",
        "payloadType": "str",
        "x": 1440,
        "y": 340,
        "wires": [
            [
                "783f74ba4966418a"
            ]
        ]
    },
    {
        "id": "a5d83cdd9c654f63",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "tareaPSP11",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaPSP11 = global.get(\"tareaPSP11\");\n\nif (tareaPSP11) {\n   // node.warn(\"tareaPIE1 TLV2: \" + JSON.stringify(tareaPIE1, null, 2));\n} else {\n  //  node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"tareaPSP11 : \" + JSON.stringify(tareaPSP11, null, 2);\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 140,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "ec832a50a78a7f26",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "datosListosPSP11",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaListos = global.get('datosListosPSP11');\n\nif (tareaListos) {\n   // node.warn(\"tareaListos TLV1: \" + tareaListos );\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"datosListosPSP11: \" + tareaListos;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 180,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "707c030e91ea3a2a",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "PSP1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#STX0203CIMO20TMS WMS 000320241016181613535000000010000025238000200000000000000000000000000000000000000000000000003904800200101000100999000010010010020110010040020000100001000000000000001                                                  100100100#ETX",
        "payloadType": "str",
        "x": 1450,
        "y": 420,
        "wires": [
            [
                "1a58e0cb8474bddb",
                "d68c9abbebb48fde"
            ]
        ]
    },
    {
        "id": "8508c31a7d8c4be8",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "EquipamientoActual",
        "func": "global.set(\"EquipamientoActual\", \"PIE-1\"); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 360,
        "wires": [
            [
                "1a58e0cb8474bddb"
            ]
        ]
    },
    {
        "id": "d68c9abbebb48fde",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "EquipamientoActual",
        "func": "global.set(\"EquipamientoActual\", \"PSP-1\"); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 400,
        "wires": [
            [
                "1a58e0cb8474bddb"
            ]
        ]
    },
    {
        "id": "13d3a2d2756f14cf",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "tareaPSP5",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaPSP5 = global.get(\"tareaPSP5\");\n\nif (tareaPSP5) {\n   // node.warn(\"tareaPIE1 TLV2: \" + JSON.stringify(tareaPIE1, null, 2));\n} else {\n  //  node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"tareaPSP5 : \" + JSON.stringify(tareaPSP5, null, 2);\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 220,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "a0b07fcaa3af2fa0",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "datosListosPSP5",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaListos = global.get('datosListosPSP5');\n\nif (tareaListos) {\n   // node.warn(\"tareaListos TLV1: \" + tareaListos );\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"datosListosPSP5: \" + tareaListos;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 260,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "d9e4d1c16f58456a",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "tareaPSP5",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaPSP2 = global.get(\"tareaPSP2\");\n\nif (tareaPSP2) {\n   // node.warn(\"tareaPIE1 TLV2: \" + JSON.stringify(tareaPIE1, null, 2));\n} else {\n  //  node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"tareaPSP2 : \" + JSON.stringify(tareaPSP2, null, 2);\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 300,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "54ec15cb7cc66875",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "datosListosPSP2",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaListos = global.get('datosListosPSP2');\n\nif (tareaListos) {\n   // node.warn(\"tareaListos TLV1: \" + tareaListos );\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"datosListosPSP2: \" + tareaListos;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 340,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "6205b192816bede5",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "resultadoTLV_1_finOrden",
        "func": "// Obtener la tarea de la estación PIE2\nlet resultadoTLV_1_finOrden = global.get('resultadoTLV-1_finOrden');\n\n\n\nmsg.payload = \"resultadoTLV_1_finOrden: \" + resultadoTLV_1_finOrden;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 580,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "ff323584884cf403",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "resultadoTLV_2_busqueda",
        "func": "// Obtener la tarea de la estación PIE2\nlet resultadoTLV_2_busqueda = global.get('resultadoTLV-2_busqueda');\n\n\nmsg.payload = \"resultadoTLV_2_busqueda: \" + resultadoTLV_2_busqueda;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 700,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "3c71807a917a36d9",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "function 79",
        "func": "// Obtener la tarea de la estación PIE2\nlet tareaListos = global.get('datosListosPIE1');\n\nif (tareaListos) {\n   // node.warn(\"tareaListos TLV2: \" + tareaListos);\n} else {\n   // node.warn(\"No se ha asignado ninguna tarea a tareaTLV1\");\n}\nmsg.payload = \"datosListosPIE1: \" + tareaListos;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\nlet stateMachineEventBusquedaPIE1 = global.get('stateMachineEventBusquedaPIE1') || 0;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 460,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "6c931d1a909a4f27",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "function 80",
        "func": "// Obtener la tarea de la estación PIE2\nlet stateMachineEventBusquedaPIE1 = global.get('stateMachineEventBusquedaPIE1');\n\n\n\nmsg.payload = \"stateMachineEventBusquedaPIE1: \" + stateMachineEventBusquedaPIE1;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 500,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "bd5bb17156ed4f2b",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "resultadoTLV_1_busqueda",
        "func": "// Obtener la tarea de la estación PIE2\nlet resultadoTLV_1_busqueda = global.get('resultadoTLV-1_busqueda');\n\n\nmsg.payload = \"resultadoTLV_1_busqueda: \" + resultadoTLV_1_busqueda;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b2f325ac0ae949f3",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "resultadoTLV_2_finOrden",
        "func": "// Obtener la tarea de la estación PIE2\nlet resultadoTLV_2_finOrden = global.get('resultadoTLV-2_finOrden');\n\n\n\nmsg.payload = \"resultadoTLV_2_finOrden: \" + resultadoTLV_2_finOrden;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 660,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "8f86673cf3558945",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "resultadoTLV_1_palletCargado",
        "func": "// Obtener la tarea de la estación PIE2\nlet resultadoTLV_1_palletCargado = global.get('resultadoTLV-1_palletCargado');\n\n\n\nmsg.payload = \"resultadoTLV_1_palletCargado: \" + resultadoTLV_1_palletCargado;\n\nreturn msg;  // Devuelve el mensaje sin alterarlo\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 540,
        "wires": [
            [
                "5067dce0410ed9e2"
            ]
        ]
    },
    {
        "id": "2cfa3e040251b7c6",
        "type": "link out",
        "z": "83ce3d0ba7d79dba",
        "g": "3630a8e88ea93ddf",
        "name": "datos",
        "mode": "link",
        "links": [],
        "x": 1985,
        "y": 460,
        "wires": []
    },
    {
        "id": "02e629533a9462b9",
        "type": "link in",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "datos",
        "links": [],
        "x": 2095,
        "y": 520,
        "wires": [
            [
                "8f86673cf3558945",
                "6205b192816bede5",
                "bd5bb17156ed4f2b",
                "b2f325ac0ae949f3",
                "ff323584884cf403"
            ]
        ]
    },
    {
        "id": "07c256ed646dd87c",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "param/Connect",
        "func": "// Obtener el estado de la variable global \"produccion\"\nlet produccion = global.get(\"produccion\");\n\n// Definir los detalles del mensaje de conexión según el estado de \"produccion\"\nmsg.action = \"connect\";\nmsg.host = produccion === false ? \"192.168.131.33\" : \"192.168.131.32\"; // Asignar la IP según el estado\nmsg.port = \"3000\";\n\n// Validar que el payload existe y tiene al menos 12 caracteres\nif (msg.payload && typeof msg.payload === \"string\" && msg.payload.length >= 12) {\n    try {\n        // Extraer el campo \"Identificación del telegrama\" de la posición 8 a 12\n        let identificacionTelegrama = msg.payload.substring(8, 12).trim(); // Extrae y elimina espacios en blanco\n\n        // Guardar la identificación del telegrama en una variable global\n        global.set(\"identificacionTelegrama\", identificacionTelegrama);\n\n        // Mostrar un mensaje de depuración con la identificación del telegrama capturada\n        node.warn(\"Identificación del telegrama capturada: \" + identificacionTelegrama);\n\n        // Retornar el mensaje con el identificador extraído (si necesario)\n        msg.identificacionTelegrama = identificacionTelegrama;\n\n    } catch (error) {\n        // Manejar errores al procesar el payload\n        node.error(\"Error procesando el payload: \" + error.message, msg);\n        return null;\n    }\n} else {\n    // Mostrar un mensaje de advertencia si el payload no es válido o es muy corto\n    node.warn(\"El payload no es válido o es demasiado corto para extraer la identificación del telegrama.\");\n    return null; // Detenemos el flujo si no cumple con las validaciones\n}\n\n// Retornar el mensaje para continuar con la conexión\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "bb06484c77b46218",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "produccion",
        "func": "let variablesPLC = global.get(\"GESTION_GALIBO\");\n//\n   if (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n        node.warn(\"No hay datos  disponibles.\");\n        return msg;\n    }\nlet produccion = variablesPLC[\"PRODUCCION_MEC\"];\n\nif (produccion)\n{\nglobal.set(\"produccion\", true);\n}else{\n global.set(\"produccion\", false);   \n}\n\n\nreturn msg;\n\n\n\n    \n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7d3b67f5ff7f743f",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "bb06484c77b46218"
            ]
        ]
    },
    {
        "id": "f83e351843b8f4f9",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "param/Connect",
        "func": "// Definir los detalles del mensaje de conexión\nmsg.action = \"connect\";\nmsg.host = \"192.168.131.33\";\nmsg.port = \"3000\";\n\n// Verificar que el payload existe y tiene al menos 12 caracteres\nif (msg.payload && msg.payload.length >= 12) {\n    // Extraer el campo \"Identificación del telegrama\" de la posición 8 a 12\n    let identificacionTelegrama = msg.payload.substring(8, 12);  // Extrae los caracteres entre la posición 8 y 12\n    \n    // Guardar la identificación del telegrama en una variable global\n    global.set(\"identificacionTelegrama\", identificacionTelegrama);\n    \n    // Mostrar un mensaje de depuración con la identificación del telegrama capturada\n    node.warn(\"Identificación del telegrama capturada: \" + identificacionTelegrama);\n} else {\n    // Mostrar un mensaje de advertencia si el payload no es válido o es muy corto\n    node.warn(\"El payload no es válido o es demasiado corto para extraer la identificación del telegrama.\");\n}\n\n// Retornar el mensaje para continuar con la conexión\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7821e3747982da7d",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "produccion",
        "func": "let variablesPLC = global.get(\"GESTION_GALIBO\");\n//\n   if (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n        node.warn(\"No hay datos  disponibles.\");\n        return msg;\n    }\nmsg.payload = variablesPLC[\"PRODUCCION_MEC\"];\n\n\n\nreturn msg;\n\n\n\n    \n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 120,
        "wires": [
            [
                "619a8571d5735d02"
            ]
        ]
    },
    {
        "id": "2ac539194590a727",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "7821e3747982da7d"
            ]
        ]
    },
    {
        "id": "619a8571d5735d02",
        "type": "debug",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "debug 198",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 120,
        "wires": []
    },
    {
        "id": "d357c0efa64c3328",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "equipamientoActual_test",
        "func": "\n\nmsg.payload = global.get(\"equipamientoActual_test\");\n\n\n\nreturn msg;\n\n\n\n    \n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 560,
        "wires": [
            [
                "09db6a7fc5cc8b4a"
            ]
        ]
    },
    {
        "id": "09db6a7fc5cc8b4a",
        "type": "debug",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "debug 199",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 600,
        "wires": []
    },
    {
        "id": "42476009560b29c9",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "EquipamientoActual",
        "func": "\n\nmsg.payload = global.get(\"EquipamientoActual\"); \n\n\n\nreturn msg;\n\n\n\n    \n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "a4f7b228a14958e1"
            ]
        ]
    },
    {
        "id": "a4f7b228a14958e1",
        "type": "debug",
        "z": "83ce3d0ba7d79dba",
        "g": "43f04748f1a41265",
        "name": "debug 200",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 700,
        "wires": []
    },
    {
        "id": "55e53e3066424508",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": "global.get(`resultadoPIS2_finDeOrden`)",
        "func": "msg.payload =  global.get(`resultadoPIS2_finDeOrden`); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 920,
        "wires": [
            [
                "ac99da93ee34f15c"
            ]
        ]
    },
    {
        "id": "ac99da93ee34f15c",
        "type": "debug",
        "z": "83ce3d0ba7d79dba",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 920,
        "wires": []
    },
    {
        "id": "036caf93309dd4bd",
        "type": "inject",
        "z": "83ce3d0ba7d79dba",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1660,
        "y": 920,
        "wires": [
            [
                "55e53e3066424508"
            ]
        ]
    },
    {
        "id": "efc6665d8e6952c8",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": " & Log TramasAll",
        "func": "let currentDateTime = new Date().toISOString();\n\nmsg.filename = \"C:\\\\Users\\\\admin_scada\\\\Documents\\\\C_TramasAll_log.txt\";  // Ruta del archivo en Windows\nmsg.appendNewline = true;  // Añadir nueva línea al final\n//msg.payload = `[${currentDateTime}] Trama registrada correctamente`;  // Contenido del log\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1020,
        "wires": [
            [
                "3303014ab8a7ecbe"
            ]
        ]
    },
    {
        "id": "3303014ab8a7ecbe",
        "type": "file",
        "z": "83ce3d0ba7d79dba",
        "name": "Write to File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1890,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6284365cdba00977",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": " & Log TramasTLV1",
        "func": "let currentDateTime = new Date().toISOString();\n\nmsg.filename = \"C:\\\\Users\\\\admin_scada\\\\Documents\\\\C_TramasTLV1_log.txt\";  // Ruta del archivo en Windows\nmsg.appendNewline = true;  // Añadir nueva línea al final\n//msg.payload = `[${currentDateTime}] Trama registrada correctamente`;  // Contenido del log\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1060,
        "wires": [
            [
                "a2920140ee33d437"
            ]
        ]
    },
    {
        "id": "a2920140ee33d437",
        "type": "file",
        "z": "83ce3d0ba7d79dba",
        "name": "Write to File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1890,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "2bf8a81d73fd8c41",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": " & Log PIE01",
        "func": "let currentDateTime = new Date().toISOString();\n\nmsg.filename = \"C:\\\\Users\\\\admin_scada\\\\Documents\\\\C_PIE01_log.txt\";  // Ruta del archivo en Windows\nmsg.appendNewline = true;  // Añadir nueva línea al final\n//msg.payload = `[${currentDateTime}] Trama registrada correctamente`;  // Contenido del log\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1140,
        "wires": [
            [
                "d5ef1f2d3f46ec91"
            ]
        ]
    },
    {
        "id": "d5ef1f2d3f46ec91",
        "type": "file",
        "z": "83ce3d0ba7d79dba",
        "name": "Write to File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1890,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "78c8b5a0aad74e2a",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": "filtro",
        "func": "const equipamiento = global.get(\"EquipamientoActual\");\nconst resultado = global.get(\"resultadoPIS2_finDeOrden\");\n\nif (equipamiento === \"PIE01\"  ) {\n    return msg;  // Condición cumplida\n}\n\nreturn null;  // Si no se cumple, no envía nada\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1140,
        "wires": [
            [
                "2bf8a81d73fd8c41"
            ]
        ]
    },
    {
        "id": "221b53ccf590667d",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": "filtro",
        "func": "const equipamiento = global.get(\"EquipamientoActual\");\nconst resultado = global.get(\"resultadoPIS2_finDeOrden\");\n\nif (equipamiento === \"TLV-1\" ) {\n    return msg;  // Condición cumplida\n}\n\nreturn null;  // Si no se cumple, no envía nada\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1060,
        "wires": [
            [
                "6284365cdba00977"
            ]
        ]
    },
    {
        "id": "8934fa7f33377b05",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": " & Log TramasTLV2",
        "func": "let currentDateTime = new Date().toISOString();\n\nmsg.filename = \"C:\\\\Users\\\\admin_scada\\\\Documents\\\\C_TramasTLV2_log.txt\";  // Ruta del archivo en Windows\nmsg.appendNewline = true;  // Añadir nueva línea al final\n//msg.payload = `[${currentDateTime}] Trama registrada correctamente`;  // Contenido del log\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1100,
        "wires": [
            [
                "a96301e2d39807da"
            ]
        ]
    },
    {
        "id": "a96301e2d39807da",
        "type": "file",
        "z": "83ce3d0ba7d79dba",
        "name": "Write to File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1890,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "a785861d18ce980c",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": "filtro",
        "func": "const equipamiento = global.get(\"EquipamientoActual\");\nconst resultado = global.get(\"resultadoPIS2_finDeOrden\");\n\nif (equipamiento === \"TLV-2\" ) {\n    return msg;  // Condición cumplida\n}\n\nreturn null;  // Si no se cumple, no envía nada\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1100,
        "wires": [
            [
                "8934fa7f33377b05"
            ]
        ]
    },
    {
        "id": "b7ec383391e0b99c",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": " & Log PIS2 Errores",
        "func": "let currentDateTime = new Date().toISOString();\n\nmsg.filename = \"C:\\\\Users\\\\admin_scada\\\\Documents\\\\C_PIS2_Errores_log.txt\";  // Ruta del archivo en Windows\nmsg.appendNewline = true;  // Añadir nueva línea al final\n//msg.payload = `[${currentDateTime}] Trama registrada correctamente`;  // Contenido del log\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1180,
        "wires": [
            [
                "5aa1607620ae4ded"
            ]
        ]
    },
    {
        "id": "5aa1607620ae4ded",
        "type": "file",
        "z": "83ce3d0ba7d79dba",
        "name": "Write to File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1890,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "21452e0c2c1639ad",
        "type": "function",
        "z": "83ce3d0ba7d79dba",
        "name": "filtro",
        "func": "const equipamiento = global.get(\"EquipamientoActual\");\nconst resultado = global.get(\"resultadoPIS2_finDeOrden\");\n\nif (equipamiento === \"PIS2\" ) {\n    return msg;  // Condición cumplida\n}\n\nreturn null;  // Si no se cumple, no envía nada\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1180,
        "wires": [
            [
                "b7ec383391e0b99c"
            ]
        ]
    },
    {
        "id": "e145527c9f28ef94",
        "type": "function",
        "z": "80dba39c1a7f3e3e",
        "g": "2e96eeca1662ee5a",
        "name": "Reset",
        "func": "\n        msg.topic = \"RESET\";  // Disparamos el flujo SSTS para la estación detectada\n        \n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [
                "28a2ed6ecae2bef2"
            ]
        ]
    },
    {
        "id": "ac36e4806c631ba7",
        "type": "inject",
        "z": "80dba39c1a7f3e3e",
        "g": "2e96eeca1662ee5a",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "RESET",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "e145527c9f28ef94"
            ]
        ]
    },
    {
        "id": "44dc2796b0a1939d",
        "type": "function",
        "z": "80dba39c1a7f3e3e",
        "g": "f0c8d6637dd65dd0",
        "name": "Reset",
        "func": "\n        msg.topic = \"RESET\";  // Disparamos el flujo SSTS para la estación detectada\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "9c40bf35a6b57292"
            ]
        ]
    },
    {
        "id": "404b516fc8fe277e",
        "type": "inject",
        "z": "80dba39c1a7f3e3e",
        "g": "f0c8d6637dd65dd0",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "44dc2796b0a1939d"
            ]
        ]
    },
    {
        "id": "578d7631949f0356",
        "type": "function",
        "z": "80dba39c1a7f3e3e",
        "g": "4b75e765ca4fd9ca",
        "name": "Reset",
        "func": "\n        msg.topic = \"RESET\";  // Disparamos el flujo SSTS para la estación detectada\n        \n   \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "3c5bbe7f3d595d98"
            ]
        ]
    },
    {
        "id": "f746828a68f8fe44",
        "type": "inject",
        "z": "80dba39c1a7f3e3e",
        "g": "4b75e765ca4fd9ca",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 580,
        "wires": [
            [
                "578d7631949f0356"
            ]
        ]
    },
    {
        "id": "2aba482fbeb73c8c",
        "type": "inject",
        "z": "80dba39c1a7f3e3e",
        "g": "2e96eeca1662ee5a",
        "name": "2Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "73d757d57e62778e"
            ]
        ]
    },
    {
        "id": "89296c4621e4437e",
        "type": "inject",
        "z": "80dba39c1a7f3e3e",
        "g": "f0c8d6637dd65dd0",
        "name": "2Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 440,
        "wires": [
            [
                "817f20e17e16175f"
            ]
        ]
    },
    {
        "id": "97495b2db0f6e0a1",
        "type": "inject",
        "z": "80dba39c1a7f3e3e",
        "g": "4b75e765ca4fd9ca",
        "name": "2Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "a2716756ca92e325"
            ]
        ]
    },
    {
        "id": "28a2ed6ecae2bef2",
        "type": "smxstate",
        "z": "80dba39c1a7f3e3e",
        "g": "2e96eeca1662ee5a",
        "name": "Tarea_PIE1",
        "xstateDefinition": "// Import shorthands from xstate object\nconst { assign } = xstate;\n\n/**\n * Guards para verificar si la variable global datosListosPIE1 es true\n */\nconst isTareaListosPIE1 = (context, event) => {\n    let tareaListos = global.get('datosListosPIE1');\n   // node.warn(`Guard - Verificando tarea PIE1: ${tareaListos}`);\n    return tareaListos === true;\n};\n\n/**\n * Guards para verificar si la variable global stateMachineEventStagePIE1_Aux1 es 140\n */\n\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventStage\nconst setStateMachineEventStageNumberPIE1 = (num) => {\n    return (context, event) => {\n        global.set('stateMachineEventStagePIE1', num);  // Asigna el número de la etapa a stateMachineEventStage\n    //    node.warn(`PIE1 - Transicionando a etapa: ${num}`);\n    };\n};\n\n// Acción para resetear la tarea después de ejecutarla\nconst resetTareaPIE1 = (context, event) => {\n    global.set('datosListosPIE1', false);  // Resetea la variable datosListosPIE1 a false\n   // node.warn(\"Tarea de PIE1 reseteada.\");\n};\n\n// Acción para simular la ejecución de la tarea\nconst ejecutarTareaPIE1 = (context, event) => {\n   // node.warn(\"Ejecutando tarea para PIE1...\");\n    return new Promise((resolve) => {\n        setTimeout(() => {\n          //  node.warn(\"Tarea de PIE1 completada.\");\n            resolve();  // Resuelve la promesa después de 1 segundo\n        }, 1000);\n    });\n};\n\n/**\n * Main machine definition for PIE1\n */\nreturn {\n  machine: {\n    context: {\n      Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_ReposoPIE1',\n    states: {\n      '00_ReposoPIE1': {\n          entry: [setStateMachineEventStageNumberPIE1(0)],  // Asigna el número 0\n          after: {\n              1000: '10_InicioPIE1'  // Espera 1000 ms antes de ir a '10_Inicio'\n          },\n          on: { RESET: '00_ReposoPIE1' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '10_InicioPIE1': {\n          entry: [setStateMachineEventStageNumberPIE1(10)],  // Mensaje de entrada en estado 10\n          after: {\n              1000: '20_CheckTareaPIE1'  // Espera 1000 ms antes de ir a '20_CheckTareaPIE1'\n          },\n          on: { RESET: '00_ReposoPIE1' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '20_CheckTareaPIE1': {\n          entry: [setStateMachineEventStageNumberPIE1(20)],  // Asigna el número 20 \n          after: { \n              500: [  // Agrega un retraso de 500 ms para evitar un ciclo infinito\n                { target: '30_EjecutarTareaPIE1', cond: 'isTareaListosPIE1' },  // Si la tarea está lista para PIE1\n                { target: '40_SinTareaPIE1' }  // Si no hay tarea para PIE1\n              ]\n          },\n          on: { RESET: '00_ReposoPIE1' }\n      },\n      '30_EjecutarTareaPIE1': {\n          entry: [setStateMachineEventStageNumberPIE1(30), ejecutarTareaPIE1],  // Ejecuta la tarea y asigna el número 30\n             always: {\n                        target: '50_TareaEjecutadaPIE1',\n                        cond: () => global.get('stateMachineEventStagePIE1_Aux1') > 140  // Solo pasamos si stateMachineEventScan_Gen es 60\n                },\n                 on: { RESET: '00_ReposoPIE1' }  // Evento RESET para reiniciar al estado inicial\n            },\n      '40_SinTareaPIE1': {\n          entry: [setStateMachineEventStageNumberPIE1(40)],  // Asigna el número 40   \n          always: { target: '20_CheckTareaPIE1' },  // Continúa verificando la tarea\n          on: { RESET: '00_ReposoPIE1' }\n      },\n      '50_TareaEjecutadaPIE1': {\n          entry: [setStateMachineEventStageNumberPIE1(50), resetTareaPIE1],  // Resetea la tarea y asigna el número 50\n          always: { target: '20_CheckTareaPIE1' },  // Continúa verificando la tarea\n          on: { RESET: '00_ReposoPIE1' }\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n      actions: { \n          setStateMachineEventStageNumberPIE1,\n          resetTareaPIE1,\n          ejecutarTareaPIE1\n      },\n      guards: {\n          isTareaListosPIE1  // Guard para verificar si la tarea de PIE1 está lista\n         // isAux140  // Guard para verificar si la variable global stateMachineEventStagePIE1_Aux1 es igual a 140\n      }\n  }\n};\n",
        "noerr": 0,
        "x": 690,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9c40bf35a6b57292",
        "type": "smxstate",
        "z": "80dba39c1a7f3e3e",
        "g": "f0c8d6637dd65dd0",
        "name": "Tarea_TLV1",
        "xstateDefinition": "const { assign } = xstate;\n\n/**\n * Guards para verificar si la variable global datosListosTLV1 es true\n */\nconst isTareaListosTLV1 = (context, event) => {\n    let tareaListos = global.get('datosListosTLV1');\n  //  node.warn(`Guard - Verificando tarea TLV1: ${tareaListos}`);\n    return tareaListos === true;\n};\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventStage\nconst setStateMachineEventStageNumberTLV1 = (num) => {\n    return (context, event) => {\n        global.set('stateMachineEventStageTareaGenTLV1', num);  // Asigna el número de la etapa a stateMachineEventStage\n     //   node.warn(`TLV1 - Transicionando a etapa: ${num}`);\n    };\n};\n\n// Acción para resetear la tarea después de ejecutarla\nconst resetTareaTLV1 = (context, event) => {\n    global.set('datosListosTLV1', false);  // Resetea la variable datosListosTLV1 a false\n   // node.warn(\"Tarea de TLV1 reseteada.\");\n};\n\n// Acción para simular la ejecución de la tarea\nconst ejecutarTareaTLV1 = (context, event) => {\n   // node.warn(\"Ejecutando tarea para TLV1...\");\n    return new Promise((resolve) => {\n        setTimeout(() => {\n          ///  node.warn(\"Tarea de TLV1 completada.\");\n            resolve();  // Resuelve la promesa después de 1 segundo\n        }, 1000);\n    });\n};\n\n/**\n * Main machine definition for TLV1\n */\nreturn {\n  machine: {\n    context: {\n      Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_ReposoTLV1',\n    states: {\n      '00_ReposoTLV1': {\n          entry: [setStateMachineEventStageNumberTLV1(0)],  // Asigna el número 0\n          after: {\n              1000: '10_InicioTLV1'  // Espera 1000 ms antes de ir a '10_Inicio'\n          },\n          on: { RESET: '00_ReposoTLV1' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '10_InicioTLV1': {\n          entry: [setStateMachineEventStageNumberTLV1(10), () => node.warn(\"Entrando en estado 10_InicioTLV1\")],  // Mensaje de entrada en estado 10\n          after: {\n              1000: '20_CheckTareaTLV1'  // Espera 1000 ms antes de ir a '20_CheckTareaTLV1'\n          },\n          on: { RESET: '00_ReposoTLV1' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '20_CheckTareaTLV1': {\n          entry: [setStateMachineEventStageNumberTLV1(20)],  // Asigna el número 20\n          after: { \n              500: [  // Agrega un retraso de 500 ms para evitar un ciclo infinito\n                { target: '30_EjecutarTareaTLV1', cond: 'isTareaListosTLV1' },  // Si la tarea está lista para TLV1\n                { target: '40_SinTareaTLV1' }  // Si no hay tarea para TLV1\n              ]\n          },\n          on: { RESET: '00_ReposoTLV1' }\n      },\n\n        '30_EjecutarTareaTLV1': {\n            entry: [setStateMachineEventStageNumberTLV1(30), ejecutarTareaTLV1],  // Ejecuta la tarea y asigna el número 30\n            always: {\n                target: '50_TareaEjecutadaTLV1',\n                cond: () => global.get('stateMachineEventStageEjecutarTareaTLV1') === 1000  // Solo pasamos \n            },\n            on: { RESET: '00_ReposoTLV1' }  // Evento RESET para reiniciar al estado inicial\n        },\n\n\n\n\n      '40_SinTareaTLV1': {\n          entry: [setStateMachineEventStageNumberTLV1(40)],  // Asigna el número 40\n          always: { target: '20_CheckTareaTLV1' },  // Continúa verificando la tarea\n          on: { RESET: '00_ReposoTLV1' }\n      },\n      '50_TareaEjecutadaTLV1': {\n          entry: [setStateMachineEventStageNumberTLV1(50), resetTareaTLV1],  // Resetea la tarea y asigna el número 50\n          always: { target: '20_CheckTareaTLV1' },  // Continúa verificando la tarea\n          on: { RESET: '00_ReposoTLV1' }\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n      actions: { \n          setStateMachineEventStageNumberTLV1,\n          resetTareaTLV1,\n          ejecutarTareaTLV1\n      },\n      guards: {\n          isTareaListosTLV1  // Guard para verificar si la tarea de TLV1 está lista\n      }\n  }\n};\n",
        "noerr": 0,
        "x": 690,
        "y": 440,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3c5bbe7f3d595d98",
        "type": "smxstate",
        "z": "80dba39c1a7f3e3e",
        "g": "4b75e765ca4fd9ca",
        "name": "Tarea_TLV2",
        "xstateDefinition": "const { assign } = xstate;\n\n/**\n * Guards para verificar si la variable global datosListosTLV2 es true\n */\nconst isTareaListosTLV2 = (context, event) => {\n    let tareaListos = global.get('datosListosTLV2');\n  //  node.warn(`Guard - Verificando tarea TLV2: ${tareaListos}`);\n    return tareaListos === true;\n};\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventStage\nconst setStateMachineEventStageNumberTLV2 = (num) => {\n    return (context, event) => {\n        global.set('stateMachineEventStageTareaGenTLV2', num);  // Asigna el número de la etapa a stateMachineEventStage\n     //   node.warn(`TLV2 - Transicionando a etapa: ${num}`);\n    };\n};\n\n// Acción para resetear la tarea después de ejecutarla\nconst resetTareaTLV2 = (context, event) => {\n    global.set('datosListosTLV2', false);  // Resetea la variable datosListosTLV2 a false\n  //  node.warn(\"Tarea de TLV2 reseteada.\");\n};\n\n// Acción para simular la ejecución de la tarea\nconst ejecutarTareaTLV2 = (context, event) => {\n  //  node.warn(\"Ejecutando tarea para TLV2...\");\n    return new Promise((resolve) => {\n        setTimeout(() => {\n        //    node.warn(\"Tarea de TLV2 completada.\");\n            resolve();  // Resuelve la promesa después de 1 segundo\n        }, 1000);\n    });\n};\n\n/**\n * Main machine definition for TLV2\n */\nreturn {\n  machine: {\n    context: {\n      Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_ReposoTLV2',\n    states: {\n      '00_ReposoTLV2': {\n          entry: [setStateMachineEventStageNumberTLV2(0)],  // Asigna el número 0\n          after: {\n              1000: '10_InicioTLV2'  // Espera 1000 ms antes de ir a '10_Inicio'\n          },\n          on: { RESET: '00_ReposoTLV2' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '10_InicioTLV2': {\n          entry: [setStateMachineEventStageNumberTLV2(10), () => node.warn(\"Entrando en estado 10_InicioTLV2\")],  // Mensaje de entrada en estado 10\n          after: {\n              1000: '20_CheckTareaTLV2'  // Espera 1000 ms antes de ir a '20_CheckTareaTLV2'\n          },\n          on: { RESET: '00_ReposoTLV2' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '20_CheckTareaTLV2': {\n          entry: [setStateMachineEventStageNumberTLV2(20)],  // Asigna el número 20\n          after: { \n              500: [  // Agrega un retraso de 500 ms para evitar un ciclo infinito\n                { target: '30_EjecutarTareaTLV2', cond: 'isTareaListosTLV2' },  // Si la tarea está lista para TLV2\n                { target: '40_SinTareaTLV2' }  // Si no hay tarea para TLV2\n              ]\n          },\n          on: { RESET: '00_ReposoTLV2' }\n      },\n\n        '30_EjecutarTareaTLV2': {\n            entry: [setStateMachineEventStageNumberTLV2(30), ejecutarTareaTLV2],  // Ejecuta la tarea y asigna el número 30\n            always: {\n                target: '50_TareaEjecutadaTLV2',\n                cond: () => global.get('stateMachineEventStageEjecutarTareaTLV2') === 1000  // Solo pasamos \n            },\n            on: { RESET: '00_ReposoTLV2' }  // Evento RESET para reiniciar al estado inicial\n        },\n\n\n\n\n      '40_SinTareaTLV2': {\n          entry: [setStateMachineEventStageNumberTLV2(40)],  // Asigna el número 40\n          always: { target: '20_CheckTareaTLV2' },  // Continúa verificando la tarea\n          on: { RESET: '00_ReposoTLV2' }\n      },\n      '50_TareaEjecutadaTLV2': {\n          entry: [setStateMachineEventStageNumberTLV2(50),resetTareaTLV2],  // Resetea la tarea y asigna el número 50\n          always: { target: '20_CheckTareaTLV2' },  // Continúa verificando la tarea\n          on: { RESET: '00_ReposoTLV2' }\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n      actions: { \n          setStateMachineEventStageNumberTLV2,\n          resetTareaTLV2,\n          ejecutarTareaTLV2\n      },\n      guards: {\n          isTareaListosTLV2  // Guard para verificar si la tarea de TLV2 está lista\n      }\n  }\n};\n",
        "noerr": 0,
        "x": 690,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "73d757d57e62778e",
        "type": "function",
        "z": "80dba39c1a7f3e3e",
        "g": "2e96eeca1662ee5a",
        "name": "filtroPie",
        "func": "const tareaListos = global.get('datosListosPIE1') === true;\nconst aux1 = global.get('stateMachineEventStagePIE1_Aux1') || 0;\n\nif (tareaListos || aux1 > 140) {\n    return msg;  // Permitir el mensaje solo si ambas condiciones se cumplen\n}\nreturn null;  // Bloquear si no están listas\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "28a2ed6ecae2bef2"
            ]
        ]
    },
    {
        "id": "817f20e17e16175f",
        "type": "function",
        "z": "80dba39c1a7f3e3e",
        "g": "f0c8d6637dd65dd0",
        "name": "filtroTlv1",
        "func": "const tareaListos = global.get('datosListosTLV1') === true;\nconst auxTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') === 1000;\n\nif (tareaListos || auxTLV1) {\n    return msg;  // Enviar el mensaje solo si ambas condiciones están listas\n}\n\nreturn null;  // No enviar nada si no cumplen\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            [
                "9c40bf35a6b57292"
            ]
        ]
    },
    {
        "id": "a2716756ca92e325",
        "type": "function",
        "z": "80dba39c1a7f3e3e",
        "g": "4b75e765ca4fd9ca",
        "name": "filtroTlv2",
        "func": "const tareaListos = global.get('datosListosTLV2') === true;\nconst auxTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') === 1000;\n\nif (tareaListos || auxTLV2) {\n    return msg;  // Solo avanza si ambas condiciones están listas\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 640,
        "wires": [
            [
                "3c5bbe7f3d595d98"
            ]
        ]
    },
    {
        "id": "d6429bd91fd09d01",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "aac8a039242c66a3",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaPie1' está en true\nlet validar = global.get('validarVariablesTareaPie1');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para PIE1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   global.set('validarVariablesTareaPie1', false);\n    node.warn(\"Variable 'validarVariablesTareaPie1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaPie1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 160,
        "wires": [
            [
                "d331e0537ee75e19"
            ]
        ]
    },
    {
        "id": "d331e0537ee75e19",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "aac8a039242c66a3",
        "name": "validarVariablesPIE1",
        "func": "// Función para validar si las variables cumplen con los criterios establecidos\nfunction validarVariablesPIE1() {\n    let tarea = global.get('tareaPIE1');\n\n    if (!tarea) {\n        node.warn(\"No se ha definido ninguna tarea para PIE1.\");\n        return false;\n    }\n\n    // Validar origen\n    if (parseInt(tarea.origen.xActual) > 12 || parseInt(tarea.origen.yActual) > 12 ||\n        parseInt(tarea.origen.xLocal) > 12 || parseInt(tarea.origen.yLocal) > 12 ||\n        parseInt(tarea.origen.lado) > 2 || parseInt(tarea.origen.pasillo) > 12 ||\n        parseInt(tarea.origen.profundidad) > 12) {\n        node.warn(\"Error: Valores de origen fuera de rango en tareaPIE1.\");\n        return false;\n    }\n\n    // Validar destino\n    if (parseInt(tarea.destino.xActual) > 1000 || parseInt(tarea.destino.yActual) > 12 ||\n        parseInt(tarea.destino.xLocal) > 1000 || parseInt(tarea.destino.yLocal) > 12 ||\n        parseInt(tarea.destino.lado) > 2 || parseInt(tarea.destino.pasillo) > 13 ||\n        parseInt(tarea.destino.profundidad) > 12) {\n        node.warn(\"Error: Valores de destino fuera de rango en tareaPIE1.\");\n        return false;\n    }\n\n    // Validar que destino.estacion solo puede ser \"REJ1\" o entre \"PEP1\" y \"PEP12\"\n    const validDestinos = ['REJ1', 'PIS1', 'PIS3', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12'];\n    if (!validDestinos.includes(tarea.destino.estacion)) {\n        node.warn(`Error: Estación de destino no válida (${tarea.destino.estacion}) en tareaPIE1.`);\n        return false;\n    }\n\n    // Validar datosAdicionales\n    if (tarea.datosAdicionales.numeroTransporte === \"\" || tarea.datosAdicionales.umaContenedor === \"\" ||\n        tarea.datosAdicionales.tipoContenedor === \"\" || tarea.datosAdicionales.tipoAltura === \"\") {\n        node.warn(\"Error: Datos adicionales incompletos en tareaPIE1.\");\n        return false;\n    }\n\n    // Validar que tipoContenedor y tipoAltura no pueden ser mayores que 2\n    if (parseInt(tarea.datosAdicionales.tipoContenedor) > 2 || parseInt(tarea.datosAdicionales.tipoAltura) > 2) {\n        node.warn(\"Error: Tipo de contenedor o tipo de altura no válido (mayor que 2) en tareaPIE1.\");\n        return false;\n    }\n\n    node.warn(\"Todas las variables son válidas para PIE1.\");\n    return true;  // Si todas las validaciones pasan, retornamos true\n}\n\n// Ejecutar la validación y actualizar las variables globales\nif (validarVariablesPIE1()) {\n    global.set('variablesValidadasTareaPie1', true);  // Set to true if validation passes\n    global.set('variablesErroneasTareaPie1', false);  // Ensure the error flag is false\n    node.warn(\"Validación exitosa: variablesValidadasTareaPie1 = true\");\n} else {\n    global.set('variablesValidadasTareaPie1', false);  // Set to false if validation fails\n    global.set('variablesErroneasTareaPie1', true);  // Set error flag if validation fails\n    node.warn(\"Validación fallida: variablesErroneasTareaPie1 = true\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "71350d1559af13a6",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "5d659c68d0fe582e",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (global.get('isIdListoPIE1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n    node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    global.set('isIdListoPIE1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "2c8466fe4dd20e95"
            ]
        ]
    },
    {
        "id": "4852ec782da43717",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (global.get('asignarDatosToID') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    global.set('asignarDatosToID', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 500,
        "wires": [
            [
                "f48bfe8e453ccbca"
            ]
        ]
    },
    {
        "id": "585411b9165d0c17",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "SQL Query Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 440,
        "wires": []
    },
    {
        "id": "878e267f217b835c",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "Insert Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 480,
        "wires": []
    },
    {
        "id": "917179fee3a4911e",
        "type": "mysql",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1310,
        "y": 500,
        "wires": [
            [
                "878e267f217b835c",
                "78e82eb3fb68745b"
            ]
        ]
    },
    {
        "id": "48ddf405259db2da",
        "type": "mysql",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1130,
        "y": 620,
        "wires": [
            [
                "8c9c88bf40afc760"
            ]
        ]
    },
    {
        "id": "d6bbcde1833c97c5",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 780,
        "wires": []
    },
    {
        "id": "8d6bb543efabe208",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "select",
        "func": "// Obtener la tarea desde la variable global tareaPIE1\nvar tareaPIE1 = global.get('tareaPIE1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPIE1 === 'undefined') {\n    node.error(\"Error: tareaPIE1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma y pasillo desde tareaPIE1\nvar movNumber = tareaPIE1.datosAdicionales.numeroTransporte;\nvar uma = tareaPIE1.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPIE1.destino.estacion;\nvar pasillo = tareaPIE1.destino.pasillo;  // Siempre tomamos pasillo de destino\n\n// Obtener el ID desde la variable global matriculaPLC\nvar matriculaPLC = global.get('matriculaPLC');\n\n// Verificar si matriculaPLC es un número válido\nif (typeof matriculaPLC === 'undefined' || isNaN(matriculaPLC)) {\n    node.error(\"Invalid ID: matriculaPLC is undefined or not a valid number\", msg);\n    return null;\n}\n\n// Verificar si movNumber y uma están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined') {\n    node.error(\"movNumber or uma are not set\", msg);\n    return null;\n}\n\n// Verificar si la estación de destino es un PEP\nconst validPEP = ['PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12', 'PIS3'];\n\n// Generar la consulta SQL\nif (validPEP.includes(destinoEstacion)) {\n    // Si el destino es uno de los PEP, incluimos pasillo en la consulta\n    msg.topic = \"SELECT movNumber, uma, pasillo FROM movimientosPIE1 WHERE id = \" + matriculaPLC;\n} else if (destinoEstacion === 'REJ1' || destinoEstacion === 'PIS1'  ) {\n    // Si el destino es REJ1, no consultamos pasillo\n    msg.topic = \"SELECT movNumber, uma FROM movimientosPIE1 WHERE id = \" + matriculaPLC;\n} else {\n    node.error(\"Estación de destino no válida\", msg);\n    return null;\n}\n\n// Continuar con la ejecución después de la consulta SQL\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 620,
        "wires": [
            [
                "48ddf405259db2da"
            ]
        ]
    },
    {
        "id": "57b8c787ac7e8149",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "verify",
        "func": "// Obtener los resultados de la consulta SQL\nvar resultadoSQL = msg.payload[0];  // Asegurarse de que msg.payload contenga los resultados de la consulta\n\nif (typeof resultadoSQL === 'undefined') {\n    node.error(\"No se encontraron resultados para el ID proporcionado\");\n    return null;\n}\n\n// Obtener los valores esperados desde tareaPIE1\nvar tareaPIE1 = global.get('tareaPIE1');\nvar movNumberEsperado = tareaPIE1.datosAdicionales.numeroTransporte;\nvar umaEsperado = tareaPIE1.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPIE1.destino.estacion;\nvar pasilloEsperado = tareaPIE1.destino.pasillo;\n\n// Inicializamos la variable que controlará si los datos coinciden\nvar coincidencia = true;\n\n// Comprobar si los valores de movNumber y uma coinciden\nif (resultadoSQL.movNumber === movNumberEsperado && resultadoSQL.uma === umaEsperado) {\n    node.warn(\"movNumber y uma coinciden con los valores esperados\");\n} else {\n    node.error(\"Error: movNumber o uma no coinciden con los valores esperados\");\n    coincidencia = false;  // Si no coinciden, lo marcamos como error\n}\n\n// Si la estación es un PEP, también verificamos pasillo\nif (destinoEstacion.startsWith(\"PEP\")) {\n    if (resultadoSQL.pasillo === pasilloEsperado) {\n        node.warn(\"Pasillo coincide con el valor esperado\");\n    } else {\n        node.error(\"Error: Pasillo no coincide con el valor esperado\");\n        coincidencia = false;  // Si no coincide el pasillo, lo marcamos como error\n    }\n}\n\n// Si todas las comparaciones son correctas, establecemos baseDatosOkPIE1 en true\nif (coincidencia) {\n    global.set('baseDatosOkPIE1', true);\n    node.warn(\"La comparación de los datos fue exitosa. baseDatosOkPIE1 = true\");\n} else {\n    global.set('baseDatosOkPIE1', false);\n    node.error(\"La comparación de los datos falló. baseDatosOkPIE1 = false\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 780,
        "wires": [
            [
                "d6bbcde1833c97c5"
            ]
        ]
    },
    {
        "id": "0690bbb0f82f3a04",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "f48bfe8e453ccbca"
            ]
        ]
    },
    {
        "id": "8c9c88bf40afc760",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "verify",
        "func": "\n    global.set('baseDatosOkPIE1', true);\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "16dc478ac29a0aa3",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 920,
        "wires": [
            [
                "4c8f51af39f2c32a"
            ]
        ]
    },
    {
        "id": "4c8f51af39f2c32a",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "Escribir en PLC",
        "func": "// Obtener las variables de tareaPIE1\nlet tareaPIE1 = global.get('tareaPIE1');\n\n// Obtener matriculaPLC\nlet matriculaPLC = global.get('matriculaPLC');\n\n// Inicializar las variables del PLC\n\n\n// Validar que las variables necesarias estén definidas\nif (typeof tareaPIE1 === 'undefined' || tareaPIE1 === null) {\n    node.error(\"La tareaPIE1 no está definida\");\n    return [null, null]; // Detenemos la ejecución\n}\n\nif (typeof matriculaPLC === 'undefined' || matriculaPLC === null) {\n    node.error(\"matriculaPLC no está definida\");\n    return [null, null]; // Detenemos la ejecución\n}\n\n// Asignar el valor de matriculaPLC a la variable del PLC\n\n\n// Asignar el valor correspondiente a F_RE_SGA_PERMISO_SALIDA_PES_DESTINO según el valor de destino.estacion\nlet destinoEstacion = tareaPIE1.destino.estacion;\nlet destino;\n\n// Definir el destino esperado basado en destino.estacion\nswitch (destinoEstacion) {\n    case \"PEP1\":\n        destino = 1;\n        break;\n    case \"PEP2\":\n        destino = 2;\n        break;\n    case \"PEP3\":\n        destino = 3;\n        break;\n    case \"PEP4\":\n        destino = 4;\n        break;\n    case \"PEP5\":\n        destino = 5;\n        break;\n    case \"PEP6\":\n        destino = 6;\n        break;\n    case \"PEP7\":\n        destino = 7;\n        break;\n    case \"PEP8\":\n        destino = 8;\n        break;\n    case \"PEP9\":\n        destino = 9;\n        break;\n    case \"PEP10\":\n        destino = 10;\n        break;\n    case \"PEP11\":\n        destino = 11;\n        break;\n    case \"PEP12\":\n        destino = 12;\n        break;\n    case \"REJ1\":\n        destino = 20;\n        break;\n    case \"PIS1\":\n        destino = 20;\n        break;\n    case \"PIS3\":\n        destino = 13;\n        break;\n    default:\n        node.error(\"Destino desconocido: \" + destinoEstacion);\n        return null;\n}\n\n// Emitir una advertencia con los datos que vamos a escribir al PLC\n\n flow.set(\"ORDEN_SALIDA_PES_DESTINO\", destino);\n// Desactivar el flujo de escritura para evitar ejecuciones repetidas\nglobal.set('escribirVarToPLCPIE1', false);\n\n// Retornar múltiples mensajes, uno por cada variable del PLC\n return msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1020,
        "wires": [
            [
                "df51d9bf1da17287",
                "179f04cc4bf48c8a",
                "5d7c7d81f8507afe"
            ]
        ]
    },
    {
        "id": "9830e305845d962c",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (global.get('escribirVarToPLCPie1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    global.set('escribirVarToPLCPie1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "4c8f51af39f2c32a"
            ]
        ]
    },
    {
        "id": "5d7c7d81f8507afe",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "destino",
        "func": "let destino =  flow.get(\"ORDEN_SALIDA_PES_DESTINO\"); // Obtener el valor del payload\n\n\n// Estructura de datos para enviar a s7comm\nmsg.payload = { \"value\":[destino] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1040,
        "wires": [
            [
                "1331c690eceac058",
                "1b0f8d15747c06e6"
            ]
        ]
    },
    {
        "id": "dfda7358066fb33a",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "df51d9bf1da17287",
                "5d7c7d81f8507afe"
            ]
        ]
    },
    {
        "id": "df51d9bf1da17287",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "matricula",
        "func": "let matriculaPLC = global.get('matriculaPLC');\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[matriculaPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 980,
        "wires": [
            [
                "9b6f3a1f21f784db"
            ]
        ]
    },
    {
        "id": "f82f083cb70ba008",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 1240,
        "wires": [
            [
                "020da7c50fbb8b7c"
            ]
        ]
    },
    {
        "id": "09399701d2fe24c6",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "Verify PLC",
        "func": "// Obtener la tarea PIE1 desde la variable global\nlet tareaPIE1 = global.get('tareaPIE1');\n\n// Leer las variables del PLC\nlet nuevoRegistroPES = global.get(\"nuevoRegistroPES\");\n\n// Obtener la matrícula esperada desde la variable global\nlet matriculaEsperada = global.get('matriculaPLC');\n\n// Obtener otros valores esperados desde la tarea\nlet destinoEstacion = tareaPIE1.destino.estacion;\nlet destinoEsperado;\n\n// Definir el destino esperado basado en destino.estacion\nswitch (destinoEstacion) {\n    case \"PEP1\":\n        destinoEsperado = 1;\n        break;\n    case \"PEP2\":\n        destinoEsperado = 2;\n        break;\n    case \"PEP3\":\n        destinoEsperado = 3;\n        break;\n    case \"PEP4\":\n        destinoEsperado = 4;\n        break;\n    case \"PEP5\":\n        destinoEsperado = 5;\n        break;\n    case \"PEP6\":\n        destinoEsperado = 6;\n        break;\n    case \"PEP7\":\n        destinoEsperado = 7;\n        break;\n    case \"PEP8\":\n        destinoEsperado = 8;\n        break;\n    case \"PEP9\":\n        destinoEsperado = 9;\n        break;\n    case \"PEP10\":\n        destinoEsperado = 10;\n        break;\n    case \"PEP11\":\n        destinoEsperado = 11;\n        break;\n    case \"PEP12\":\n        destinoEsperado = 12;\n        break;\n    case \"REJ1\":\n        destinoEsperado = 20;\n        break;\n    case \"PIS1\":\n        destinoEsperado = 20;\n        break;\n    case \"PIS3\":\n        destinoEsperado = 13;\n        break;\n    default:\n        node.error(\"Destino desconocido: \" + destinoEstacion);\n        return;\n}\n\n// Verificar si los valores leídos del PLC coinciden con los esperados\nlet matriculaPLC = nuevoRegistroPES[\"INTERFACE_DATOS_PERMISO_SALIDA_PES_MATRICULA_PALET\"];\nlet destinoPLC = nuevoRegistroPES[\"INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO\"];\n\n// Verificar la matrícula\nif (matriculaPLC === matriculaEsperada) {\n    node.warn(\"Matrícula (umaContenedor) coincide con la tarea.\");\n} else {\n    node.error(`Error: La matrícula del PLC (${matriculaPLC}) no coincide con la matrícula esperada (${matriculaEsperada}).`);\n}\n\n// Verificar el destino\nif (destinoPLC === destinoEsperado) {\n    node.warn(\"Destino coincide con la tarea.\");\n} else {\n    node.error(`Error: El destino del PLC (${destinoPLC}) no coincide con el destino esperado (${destinoEsperado}).`);\n}\n\n// Si ambos valores son correctos, marcamos como correcto, de lo contrario incorrecto\nif (matriculaPLC === matriculaEsperada && destinoPLC === destinoEsperado) {\n    global.set('DatosPlcCorrectos', true);  // Marcar que los datos del PLC son correctos\n    global.set('DatosIncorrectosPlc', false);  // Asegurarse de que el error esté en false\n    node.warn(\"Verificación correcta: DatosPlcCorrectos = true\");\n} else {\n    global.set('DatosPlcCorrectos', false);  // Los datos no son correctos\n    global.set('DatosIncorrectosPlc', true);  // Marcar como error\n    node.error(\"Verificación fallida: DatosIncorrectosPlc = true\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "020da7c50fbb8b7c",
        "type": "s7 control",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "endpoint": "fb206c814b3d2fe5",
        "function": "trigger",
        "name": "",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "9c2d520cb4f699c0",
                "f6865c8dcc18e054"
            ]
        ]
    },
    {
        "id": "9c2d520cb4f699c0",
        "type": "delay",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 1320,
        "wires": [
            [
                "09399701d2fe24c6"
            ]
        ]
    },
    {
        "id": "f6865c8dcc18e054",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "varPES",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroPES = global.get(\"nuevoRegistroPES\");\n\n\n    msg.payload = nuevoRegistroPES;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1260,
        "wires": [
            [
                "e1d1ca3f5b5bdc0d"
            ]
        ]
    },
    {
        "id": "e1d1ca3f5b5bdc0d",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 1260,
        "wires": []
    },
    {
        "id": "1c133404b17b0a25",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (global.get('verificarDatosPLC') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    global.set('verificarDatosPLC', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1320,
        "wires": [
            [
                "020da7c50fbb8b7c"
            ]
        ]
    },
    {
        "id": "e6a0a039476308a8",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 950,
        "y": 1480,
        "wires": [
            [
                "f9cb7964e70e752c"
            ]
        ]
    },
    {
        "id": "f9cb7964e70e752c",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "ejecutar orden PLC",
        "func": "msg.payload = { \"value\":[1] }\n flow.set('ordenToPLC_PIE1', true);\n return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1540,
        "wires": [
            [
                "58e0fb0bbbf0f861",
                "299bd69fa8e96c23"
            ]
        ]
    },
    {
        "id": "32de6ab80a8f05bb",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "Start",
        "func": "let escribirExecOrdenToPLCPie1 = global.get('escribirExecOrdenToPLCPie1');\n\n// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroPES');\n\n\n\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\nlet PRES_PALET_SCAN_MR24 = variablesPLC[\"PRES_PALET_SCAN_MR24\"];\n\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif ( (escribirExecOrdenToPLCPie1) && (PRES_PALET_SCAN_MR24)) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    //global.set('escribirExecOrdenToPLCPie1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1520,
        "wires": [
            [
                "70551487adaea108"
            ]
        ]
    },
    {
        "id": "06b5dbc35905c834",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " { \"value\":[1] }",
        "payloadType": "json",
        "x": 1390,
        "y": 1440,
        "wires": [
            [
                "58e0fb0bbbf0f861"
            ]
        ]
    },
    {
        "id": "299bd69fa8e96c23",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "'ordenToPLC_PIE1', false",
        "func": " flow.set('ordenToPLC_PIE1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "5efc969f6121911e",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 940,
        "wires": [
            [
                "d86805f397b52d9b"
            ]
        ]
    },
    {
        "id": "d86805f397b52d9b",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "SET",
        "func": "global.set(\"PES_100_Ok\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "6b164df79a01dcc0",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "10",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 10)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "1cae78ded33ffe29",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "6b164df79a01dcc0"
            ]
        ]
    },
    {
        "id": "58e0fb0bbbf0f861",
        "type": "s7comm write",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "connection": "d99f0bd56be26201",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"80\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PERMISO_SALIDA_PES_DATOS_PREPARADOS\"}",
        "s7Name": "PERMISO_SALIDA_PES_DATOS_PREPARADOS",
        "topic": "",
        "name": "PERMISO_SALIDA_PES_DATOS_PREPARADOS",
        "signalSetted": false,
        "x": 1510,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "1b0f8d15747c06e6",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "VariablesEscritas_Pes",
        "func": "global.set(\"variablesEscritas_Pes\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "9b6f3a1f21f784db",
        "type": "s7comm write",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "connection": "d99f0bd56be26201",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"W\",\"S7_Offset\":\"82\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PERMISO_SALIDA_PES_MATRICULA_PALET\"}",
        "s7Name": "PERMISO_SALIDA_PES_MATRICULA_PALET",
        "topic": "",
        "name": "PES_MAT_PALLET",
        "signalSetted": false,
        "x": 1610,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "1331c690eceac058",
        "type": "s7comm write",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "connection": "d99f0bd56be26201",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"84\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PERMISO_SALIDA_PES_DESTINO\"}",
        "s7Name": "PERMISO_SALIDA_PES_DESTINO",
        "topic": "",
        "name": "PES_DESTINO",
        "signalSetted": false,
        "x": 1600,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "5c3f7a0a75a6e181",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "20",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 20)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "8dd96615117d9d7b",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "5c3f7a0a75a6e181"
            ]
        ]
    },
    {
        "id": "fc40834fea2f03df",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "30",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 30)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "85bbd0b9aa9ce6ed",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "fc40834fea2f03df"
            ]
        ]
    },
    {
        "id": "207d5e8e311ca512",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "40",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 40)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "eeb77bb44dac533f",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "207d5e8e311ca512"
            ]
        ]
    },
    {
        "id": "76a8b861314342bb",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "900",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 900)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "4e7ddcee7a5abf15",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "76a8b861314342bb"
            ]
        ]
    },
    {
        "id": "d95ee1eba04eb547",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "1000",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 1000)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "0cd6e3cb0cceace4",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "d95ee1eba04eb547"
            ]
        ]
    },
    {
        "id": "11f4c5eab8932461",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "100",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 100)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "190cea74184b510c",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 660,
        "wires": [
            [
                "11f4c5eab8932461"
            ]
        ]
    },
    {
        "id": "179f04cc4bf48c8a",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 940,
        "wires": []
    },
    {
        "id": "fdfee1897e8c6fa4",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "140",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 140)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "692162e6d978cfe9",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 740,
        "wires": [
            [
                "fdfee1897e8c6fa4"
            ]
        ]
    },
    {
        "id": "9f5b6ebe6b3b3ee3",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "name": "matricula",
        "func": " global.set('matriculaPLC', 9);\nmsg.payload =  global.get('matriculaPLC');\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 820,
        "wires": [
            [
                "38cf16f695d00a1f"
            ]
        ]
    },
    {
        "id": "d263fe96fb89140b",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "name": "destino",
        "func": "flow.set(\"SALIDA_PES.DESTINO\", 2); // Obtener el valor del payload\nmsg.payload =  flow.get('SALIDA_PES.DESTINO');\n\n\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 920,
        "wires": [
            [
                "9f1f74dc1adb23f5"
            ]
        ]
    },
    {
        "id": "a97abaf5e580643e",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2590,
        "y": 860,
        "wires": [
            [
                "9f5b6ebe6b3b3ee3",
                "d263fe96fb89140b"
            ]
        ]
    },
    {
        "id": "38cf16f695d00a1f",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "name": "debug 73",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 820,
        "wires": []
    },
    {
        "id": "9f1f74dc1adb23f5",
        "type": "debug",
        "z": "d1a915f5a51627b4",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 920,
        "wires": []
    },
    {
        "id": "41863bc08d38a6ef",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "00",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 0)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "7b33d04ad22c31c7",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "41863bc08d38a6ef"
            ]
        ]
    },
    {
        "id": "d8ab265d95321108",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "136",
        "func": "global.set('stateMachineEventStagePIE1_Aux1', 136)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0e10020c815dfc",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 700,
        "wires": [
            [
                "d8ab265d95321108"
            ]
        ]
    },
    {
        "id": "1c99f7fd5277aa80",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1420,
        "y": 1660,
        "wires": [
            [
                "299bd69fa8e96c23"
            ]
        ]
    },
    {
        "id": "f48bfe8e453ccbca",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPIE1\nvar tareaPIE1 = global.get('tareaPIE1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPIE1 === 'undefined') {\n    node.error(\"Error: tareaPIE1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaPIE1\nvar movNumber = tareaPIE1.datosAdicionales.numeroTransporte;\nvar uma = tareaPIE1.datosAdicionales.umaContenedor;\nvar tipoCont = tareaPIE1.datosAdicionales.tipoContenedor;  // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaPIE1.destino.estacion;\nvar pasillo = tareaPIE1.destino.pasillo;  // Siempre tomamos pasillo de destino\n\n\n// Verificar si movNumber, uma y tipoCont están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof tipoCont === 'undefined') {\n    node.error(\"movNumber, uma o tipoCont no están definidos\", msg);\n    return null;\n}\n\n// Verificar si la estación de destino es un PEP\nconst validPEP = ['PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12'];//, 'PIS3' \n\n// Generar la consulta SQL\nif (validPEP.includes(destinoEstacion)) {\n    // Si el destino es uno de los PEP, incluimos pasillo, tipo de contenedor, estado y fecha actual\n    msg.topic = `\n        INSERT INTO movimientosPIE1 ( estacion, destino, movNumber, uma, pasillo, estado, fechaInicio, aux1)\n        VALUES ( 'PIE1', '${destinoEstacion}', '${movNumber}', '${uma}', '${pasillo}', 'inProcess', NOW(), '${tipoCont}');\n    `;\n} else if (destinoEstacion === 'REJ1' || destinoEstacion === 'PIS1') {\n    // Si el destino es REJ1 o PIS1, omitimos pasillo pero incluimos el estado, la fecha actual y el tipo de contenedor\n    msg.topic = `\n        INSERT INTO movimientosPIE1 ( estacion, destino, movNumber, uma, estado, fechaInicio, aux1)\n        VALUES ('PIE1', '${destinoEstacion}', '${movNumber}', '${uma}', 'inProcess', NOW(), '${tipoCont}');\n    `;\n} else if (destinoEstacion === 'PIS3') {\n    // Si el destino es PIS3, insertar en movimientosTLVsPSPs con estado y fecha actual\n    msg.topic = `\n        INSERT INTO movimientosTLVsPSPs (estacion, destino, movNumber, uma, estado, fechaInicio, aux1)\n        VALUES ('PIE1', '${destinoEstacion}', '${movNumber}', '${uma}', 'inProcess', NOW(), '${tipoCont}');\n    `;\n} else {\n    node.error(\"Estación de destino no válida\", msg);\n    return null;\n}\n\n\nnode.warn(\"Consulta SQL generada: \" + msg.topic);\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "585411b9165d0c17",
                "917179fee3a4911e"
            ]
        ]
    },
    {
        "id": "1f2bad2eed8f551b",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "c7dc416b521083e3",
        "name": "FSM",
        "func": "\n\n\nlet estadoActual = global.get('stateMachineEventStagePIE1_Aux1') || 0;\n\n// Mostrar estado actual en el panel de Node-RED\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Estado actual: ${estadoActual}`\n});\n\nswitch (estadoActual) {\n    case 0: // 00_Reposo\n        // node.warn(\"Estado 00_Reposo\");\n        global.set('variablesValidadasTareaPie1', false);\n        global.set('variablesErroneasTareaPie1', false);\n        global.set('idListoPIE1', false);\n        global.set('baseDatosOkPIE1', false);\n        global.set('asignarDatosToID', false);\n        global.set('DatosPlcCorrectos', false);\n        global.set('DatosIncorrectosPlc', false);\n        global.set('variablesEscritas_Pes', false);\n        global.set('isIdListoPIE1', false);\n        flow.set('ordenToPLC_PIE1', false);\n       // setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 10);\n\n       // }, 500);\n        break;\n\n    case 10: // 10_Inicio\n        // node.warn(\"Estado 10_Inicio\");\n        if (global.get('stateMachineEventStagePIE1') === 30) {\n            global.set('stateMachineEventStagePIE1_Aux1', 20);\n        }\n        break;\n\n    case 20: // 20_LeerVariables\n        //  node.warn(\"Estado 20_LeerVariables\");\n        global.set('variablesOkPIE1', true);\n        if (global.get('variablesOkPIE1') === true) {\n            global.set('stateMachineEventStagePIE1_Aux1', 30);\n        } else {\n            global.set('stateMachineEventStagePIE1_Aux1', 35);\n        }\n        break;\n\n    case 30: // 30_VariablesOk\n        // node.warn(\"Estado 30_VariablesOk\");\n       // if (global.get('buscarIdBusyTLV1') === false && global.get('buscarIdBusyTLV2') === false) {\n            global.set('isIdListoPIE1', true);  // Simulación de ID listo\n       // }\n        \n       // setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 40);\n\n       // }, 500);\n        break;\n\n    case 35: // 35_VariablesErroneas\n        node.warn(\"Estado 35_VariablesErroneas\");\n       // setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 0);\n\n      //  }, 500);\n        break;\n\n    case 40: // 40_BuscarID\n        //  node.warn(\"Estado 40_BuscarID\");\n        //  buscarIDPIE1();\n        if (global.get('idListoPIE1') === true) {\n            global.set('asignarDatosToID', true);\n            global.set('stateMachineEventStagePIE1_Aux1', 50);\n        }\n        break;\n\n    case 50: // 50_IdListo\n        // node.warn(\"Estado 50_IdListo\");\n     //   setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 60);\n\n      //  }, 500);\n        break;\n\n    case 60: // 60_AsignarId\n        node.warn(\"Estado 60_AsignarId\");\n        // global.set('asignarDatosToID', true);\n      //  setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 70);\n\n     //   }, 500);\n        break;\n\n    case 70: // 70_EscribirBaseDatos\n        // node.warn(\"Estado 70_EscribirBaseDatos\");\n        if (global.get('baseDatosOkPIE1') === true) {\n            global.set('escribirVarToPLCPie1', true);\n            global.set('stateMachineEventStagePIE1_Aux1', 90);\n        }\n        break;\n\n    case 90: // 90_BaseDatosOK\n        // node.warn(\"Estado 90_BaseDatosOK\");\n      // setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 100);\n\n      //  }, 500);\n        break;\n\n    case 100: // 100_EscribirVarToPLC\n        node.warn(\"Estado 100_EscribirVarToPLC\");\n        //escribirVarToPLCPie1();\n        if (global.get('variablesEscritas_Pes') === true) {\n            global.set('stateMachineEventStagePIE1_Aux1', 110);\n        }\n        break;\n\n    case 110: // 110_Verificar\n        // node.warn(\"Estado 110_Verificar\");\n        global.set('verificarDatosPLC', true);\n        if (global.get('DatosPlcCorrectos') === true) {\n            global.set('stateMachineEventStagePIE1_Aux1', 120);\n        } else if (global.get('DatosIncorrectosPlc') === true) {\n            global.set('stateMachineEventStagePIE1_Aux1', 120);\n        }\n        break;\n\n    case 120: // 120_VariablesOK\n        // node.warn(\"Estado 120_VariablesOK\");\n        global.set('escribirExecOrdenToPLCPie1', true);\n      //  setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 136);\n\n      //  }, 500);\n        break;\n\n    case 130: // 130_VariablesPlcNoOk\n        // node.warn(\"Estado 130_VariablesPlcNoOk\");\n        setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 90);\n        }, 30000);  // Espera 10 segundos (10,000 milisegundos)\n        break;\n\n    case 136: // 136_OrdenToPLC\n        // node.warn(\"Estado 136_OrdenToPLC\");\n        // global.set('escribirExecOrdenToPLCPie1', true);\n        if (flow.get('ordenToPLC_PIE1') === true) {\n            global.set('stateMachineEventStagePIE1_Aux1', 140);\n        }\n        break;\n\n    case 140: // 140_OrdenOK\n        //  node.warn(\"Estado 140_OrdenOK\");\n        if (flow.get('ordenToPLC_PIE1') === true) {\n            global.set('stateMachineEventStagePIE1_Aux1', 900);\n        }\n        break;\n\n    case 900: // 900_RegistrarCiclo\n        // node.warn(\"Estado 900_RegistrarCiclo\");\n        setTimeout(() => {\n            global.set('stateMachineEventStagePIE1_Aux1', 1000);\n\n        }, 500);\n        break;\n\n    case 1000: // 1000_FinCiclo\n        //  node.warn(\"Estado 1000_FinCiclo\");\n        if (global.get('stateMachineEventStagePIE1') === 20) {\n            global.set('stateMachineEventStagePIE1_Aux1', 0);\n        }\n        break;\n    default:\n        node.warn(\"Estado desconocido, reiniciando...\");\n        global.set('stateMachineEventStagePIE1_Aux1', 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "790238fccf324b86",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "aac8a039242c66a3",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 180,
        "wires": [
            [
                "d6429bd91fd09d01",
                "9a1807fd631d48c4"
            ]
        ]
    },
    {
        "id": "65c811ec0174c964",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "5d659c68d0fe582e",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 300,
        "wires": [
            [
                "71350d1559af13a6"
            ]
        ]
    },
    {
        "id": "aafe1bc5b239c9bd",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 500,
        "wires": [
            [
                "4852ec782da43717"
            ]
        ]
    },
    {
        "id": "3a568f4b1995a15c",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 1100,
        "wires": [
            [
                "9830e305845d962c",
                "f32e595ead227807"
            ]
        ]
    },
    {
        "id": "c6fe310e7532bc2e",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9197ee5d1d276c32",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 1280,
        "wires": [
            [
                "1c133404b17b0a25"
            ]
        ]
    },
    {
        "id": "146288c2774f910e",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 1480,
        "wires": [
            [
                "32de6ab80a8f05bb",
                "761819455be022e8"
            ]
        ]
    },
    {
        "id": "220099ac653f7d23",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "d1a915f5a51627b4",
        "g": "c7dc416b521083e3",
        "name": "clock",
        "x": 170,
        "y": 340,
        "wires": [
            [],
            [
                "1f2bad2eed8f551b"
            ],
            [],
            []
        ]
    },
    {
        "id": "7c4d9d0f0805676a",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "'isIdListoPIE1', true",
        "func": "global.set('isIdListoPIE1', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "e4a247813e14d66b",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 920,
        "wires": [
            [
                "7c4d9d0f0805676a"
            ]
        ]
    },
    {
        "id": "4aa80a8748e0e6dc",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "TRUNCATE TABLE movimientosPIE1",
        "func": "msg.topic = \"TRUNCATE TABLE movimientosPIE1;\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 160,
        "wires": [
            [
                "5ff2708edd29d67b"
            ]
        ]
    },
    {
        "id": "fb59c7e8d70a82b4",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "4aa80a8748e0e6dc"
            ]
        ]
    },
    {
        "id": "5ff2708edd29d67b",
        "type": "mysql",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 370,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2c8466fe4dd20e95",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "5d659c68d0fe582e",
        "name": "set",
        "func": "global.set('idListoPIE1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "78e82eb3fb68745b",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "select",
        "func": "// Obtener la tarea desde la variable global tareaPIE1\nvar tareaPIE1 = global.get('tareaPIE1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPIE1 === 'undefined') {\n    node.error(\"Error: tareaPIE1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaPIE1\nvar movNumber = tareaPIE1.datosAdicionales.numeroTransporte;\nvar uma = tareaPIE1.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPIE1.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Determinar la tabla correcta según el destino\nlet tablaDestino = destinoEstacion === 'PIS3' ? 'movimientosTLVsPSPs' : 'movimientosPIE1';\n\n// Generar la consulta SQL\nmsg.topic = `\n    SELECT id \n    FROM ${tablaDestino}\n    WHERE movNumber = '${movNumber}' AND uma = '${uma}'\n    ORDER BY id DESC LIMIT 1;\n`;\n\nnode.warn(\"Consulta SQL generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 560,
        "wires": [
            [
                "abd5e1062f600a38"
            ]
        ]
    },
    {
        "id": "abd5e1062f600a38",
        "type": "mysql",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1130,
        "y": 560,
        "wires": [
            [
                "9ccc2cb5a74cb000"
            ]
        ]
    },
    {
        "id": "9ccc2cb5a74cb000",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "matriculaPLC",
        "func": "\nif (msg.payload && msg.payload.length > 0) {\n\n    let idEncontrado = msg.payload[0].id;\n\n    global.set('matriculaPLC', idEncontrado);\n    node.warn(`ID encontrado: ${idEncontrado}`);\n\n} else {\n    node.warn(\"No se encontró ningún ID para el movNumber y uma especificados.\");\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 560,
        "wires": [
            [
                "8d6bb543efabe208"
            ]
        ]
    },
    {
        "id": "70551487adaea108",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "CheckMesasLlenas",
        "func": "\n// Obtener las variables de tareaPIE1\nlet tareaPIE1 = global.get('tareaPIE1');\n\n// Validar que la variable tareaPIE1 esté definida\nif (typeof tareaPIE1 === 'undefined' || tareaPIE1 === null) {\n    node.error(\"La tareaPIE1 no está definida\");\n    return null; // Detenemos la ejecución\n}\n\nlet destinoEstacion = tareaPIE1.destino.estacion;\n\nif (typeof destinoEstacion === 'undefined' || destinoEstacion === null) {\n    node.error(\"La estación de destino no está definida\");\n    return null; // Detenemos la ejecución\n}\n\n// Generar la consulta SQL para contar las filas donde el estado es diferente de 'finish'\n// y el campo destino coincide con la variable destinoEstacion\nmsg.topic = `\n    SELECT COUNT(*) AS total\n    FROM movimientosPIE1\n    WHERE destino = '${destinoEstacion}' AND estado != 'finish';\n`;\n\nreturn msg;\n\n\n    \n\n    \n    \n    \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1560,
        "wires": [
            [
                "7fafccbb0d457761"
            ]
        ]
    },
    {
        "id": "7fafccbb0d457761",
        "type": "mysql",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 790,
        "y": 1620,
        "wires": [
            [
                "1ae3bf7479c7fcf2"
            ]
        ]
    },
    {
        "id": "1ae3bf7479c7fcf2",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "CheckMesasLlenas",
        "func": "\n// Obtener el resultado de la consulta SQL desde msg.payload\nif (!msg.payload || !Array.isArray(msg.payload) || msg.payload.length === 0) {\n    node.error(\"El resultado de la consulta no es válido.\");\n    return null; // Si no hay resultados válidos, devolvemos null\n}\n\n// Extraer el conteo desde el resultado de la consulta\nlet totalFilas = msg.payload[0].total;\n\n// Comprobar el valor del conteo\nif (totalFilas > 2) {\n    // Si el conteo es mayor o igual a 2, devolvemos null\n    node.warn(`El conteo es mayor o igual a 2 (${totalFilas}). No se realiza ninguna acción.`);\n    return null;\n} else if (totalFilas === 0 || totalFilas === 1 || totalFilas === 2) {\n    // Si el conteo es 0 o 1, devolvemos msg vacío\n    node.warn(`El conteo es ${totalFilas}. Se permite continuar.`);\n    flow.set('ordenToPLC_PIE1', false);\n     global.set('escribirExecOrdenToPLCPie1', false);\n    return {};\n} else {\n    // Caso no esperado, devolvemos null como fallback\n    node.error(`Valor inesperado del conteo: ${totalFilas}`);\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1620,
        "wires": [
            [
                "f9cb7964e70e752c"
            ]
        ]
    },
    {
        "id": "4e114826e44b1d42",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "10101a045aad6182",
        "name": "select",
        "func": "// Obtener la tarea desde la variable global tareaPIE1\nvar tareaPIE1 = global.get('tareaPIE1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPIE1 === 'undefined') {\n    node.error(\"Error: tareaPIE1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaPIE1\nvar movNumber = tareaPIE1.datosAdicionales.numeroTransporte;\nvar uma = tareaPIE1.datosAdicionales.umaContenedor;\nvar tipoCont = tareaPIE1.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaPIE1.destino.estacion;\nvar pasillo = tareaPIE1.destino.pasillo; // Siempre tomamos pasillo de destino\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n\n    msg.topic = `\n        SELECT id FROM movimientosPIE1\n        WHERE movNumber = '${movNumber}' AND uma = '${uma}'\n        ORDER BY id DESC LIMIT 1;\n    `\n\n\nnode.warn(\"Consulta SQL generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "c716b7df23d8e2bd",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "'escribirExecOrdenToPLCPie1', true",
        "func": " global.set('escribirExecOrdenToPLCPie1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "eb7b8cda57d88235",
        "type": "inject",
        "z": "d1a915f5a51627b4",
        "g": "9368d9260edec0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "c716b7df23d8e2bd"
            ]
        ]
    },
    {
        "id": "9a1807fd631d48c4",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "aac8a039242c66a3",
        "name": "resetPIE1",
        "func": "\nlet variablesPLC1200 = global.get('GESTION_GALIBO');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC1200 === 'undefined' || variablesPLC1200 === null) {\n    node.error(\"Las variables del PLC para PLC1200 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\n\nlet ResetMesa23 = variablesPLC1200[\"RESET_MESA23\"];\n\n\n\n// Verificar si la variable 'SGA_PROCESS' está en true\nif ( ResetMesa23) {\n\n\n    global.set('stateMachineEventStagePIE1_Aux1', 900);\n       \n  \n \n}\n\n\nreturn msg;\n\n\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 200,
        "wires": []
    },
    {
        "id": "761819455be022e8",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "Mesa24_ToSilo",
        "func": "\n// Obtener las variables de tareaPIE1\nlet variablesPLC = global.get('GESTION_GALIBO');\n\n// Validar que la variable tareaPIE1 esté definida\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables plc no estan definidas\");\n    return null; // Detenemos la ejecución\n}\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\nlet Mesa24_Rechazo = variablesPLC[\"MESA24_RECHAZO\"];\nlet Mesa24_ToSilo = variablesPLC[\"MESA24_TO_SILO\"];\n\n\nif (Mesa24_ToSilo) {\n\n    return msg;\n} else {\n   \n    return null; // Detenemos la ejecución\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1420,
        "wires": [
            [
                "f9cb7964e70e752c"
            ]
        ]
    },
    {
        "id": "309f2b917e9a2a29",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "destino",
        "func": "//let destino =  flow.get(\"ORDEN_SALIDA_PES_DESTINO\"); // Obtener el valor del payload\n\n\n// Estructura de datos para enviar a s7comm\nmsg.payload = { \"value\":[20] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1100,
        "wires": [
            [
                "1331c690eceac058",
                "043126cf377c2344"
            ]
        ]
    },
    {
        "id": "f32e595ead227807",
        "type": "function",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "Mesa24_Rechazo",
        "func": "\n// Obtener las variables de tareaPIE1\nlet variablesPLC = global.get('GESTION_GALIBO');\n\n// Validar que la variable tareaPIE1 esté definida\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables plc no estan definidas\");\n    return null; // Detenemos la ejecución\n}\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\nlet Mesa24_Rechazo = variablesPLC[\"MESA24_RECHAZO\"];\nlet Mesa24_ToSilo = variablesPLC[\"MESA24_TO_SILO\"];\n\n\nif (Mesa24_Rechazo) {\n\n    return msg;\n} else {\n   \n    return null; // Detenemos la ejecución\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1120,
        "wires": [
            [
                "309f2b917e9a2a29"
            ]
        ]
    },
    {
        "id": "043126cf377c2344",
        "type": "delay",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 1140,
        "wires": [
            [
                "9c1c3398f8f3eb21"
            ]
        ]
    },
    {
        "id": "9c1c3398f8f3eb21",
        "type": "link out",
        "z": "d1a915f5a51627b4",
        "g": "ae5c0ca0afefba39",
        "name": "rechazo",
        "mode": "link",
        "links": [
            "bb5a3ccc0ea90fae"
        ],
        "x": 1335,
        "y": 1140,
        "wires": []
    },
    {
        "id": "bb5a3ccc0ea90fae",
        "type": "link in",
        "z": "d1a915f5a51627b4",
        "g": "51194275bbfe0668",
        "name": "rechazo",
        "links": [
            "9c1c3398f8f3eb21"
        ],
        "x": 1145,
        "y": 1440,
        "wires": [
            [
                "f9cb7964e70e752c"
            ]
        ]
    },
    {
        "id": "a4abb8566250c82b",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f07b5ce64686c7c6",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = global.get('validarVariablesTareaTLV1');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   global.set('validarVariablesTareaTLV1', false);\n    node.warn(\"Variable 'validarVariablesTareaTLV1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "0152cf43dc9de230"
            ]
        ]
    },
    {
        "id": "0152cf43dc9de230",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f07b5ce64686c7c6",
        "name": "validarVariablesTLV1",
        "func": "// Función para validar si las variables cumplen con los criterios establecidos\nfunction validarVariablesTLV1() {\n    let tarea = global.get('tareaTLV1');\n\n    if (!tarea) {\n        node.warn(\"No se ha definido ninguna tarea para TLV1.\");\n        return false;\n    }\n\n    // Validar origen\n    if (parseInt(tarea.origen.xActual) > 1000 || parseInt(tarea.origen.yActual) > 12 ||\n        parseInt(tarea.origen.xLocal) > 1000 || parseInt(tarea.origen.yLocal) > 12 ||\n        parseInt(tarea.origen.lado) > 2 || parseInt(tarea.origen.pasillo) > 12 ||\n        parseInt(tarea.origen.profundidad) > 12) {\n        node.warn(\"Error: Valores de origen fuera de rango en tareaTLV1.\");\n        return false;\n    }\n\n    // Validar destino\n    if (parseInt(tarea.destino.xActual) > 1000 || parseInt(tarea.destino.yActual) > 12 ||\n        parseInt(tarea.destino.xLocal) > 1000 || parseInt(tarea.destino.yLocal) > 12 ||\n        parseInt(tarea.destino.lado) > 2 || parseInt(tarea.destino.pasillo) > 13 ||\n        parseInt(tarea.destino.profundidad) > 12) {\n        node.warn(\"Error: Valores de destino fuera de rango en tareaTLV1.\");\n        return false;\n    }\n\n    // Validar que destino.estacion solo puede ser \"REJ1\" o entre \"PEP1\" y \"PEP12\"\n    const validDestinos = ['REJ1', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12'];\n    if (!validDestinos.includes(tarea.destino.estacion)) {\n        node.warn(`Error: Estación de destino no válida (${tarea.destino.estacion}) en tareaTLV1.`);\n        return false;\n    }\n\n    // Validar datosAdicionales\n    if (tarea.datosAdicionales.numeroTransporte === \"\" || tarea.datosAdicionales.umaContenedor === \"\" ||\n        tarea.datosAdicionales.tipoContenedor === \"\" || tarea.datosAdicionales.tipoAltura === \"\") {\n        node.warn(\"Error: Datos adicionales incompletos en tareaTLV1.\");\n        return false;\n    }\n\n    // Validar que tipoContenedor y tipoAltura no pueden ser mayores que 2\n    if (parseInt(tarea.datosAdicionales.tipoContenedor) > 2 || parseInt(tarea.datosAdicionales.tipoAltura) > 2) {\n        node.warn(\"Error: Tipo de contenedor o tipo de altura no válido (mayor que 2) en tareaTLV1.\");\n        return false;\n    }\n\n    node.warn(\"Todas las variables son válidas para TLV1.\");\n    return true;  // Si todas las validaciones pasan, retornamos true\n}\n\n// Ejecutar la validación y actualizar las variables globales\nif (validarVariablesTLV1()) {\n    global.set('variablesValidadasTareaTLV1', true);  // Set to true if validation passes\n    global.set('variablesErroneasTareaTLV1', false);  // Ensure the error flag is false\n    node.warn(\"Validación exitosa: variablesValidadasTareaTLV1 = true\");\n} else {\n    global.set('variablesValidadasTareaTLV1', false);  // Set to false if validation fails\n    global.set('variablesErroneasTareaTLV1', true);  // Set error flag if validation fails\n    node.warn(\"Validación fallida: variablesErroneasTareaTLV1 = true\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "08ec2a52aacfad48",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "tareaTLV1",
        "func": "msg.payload = global.get(`tareaTLV1`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1380,
        "wires": [
            [
                "1ad145d6d5714295"
            ]
        ]
    },
    {
        "id": "1ff4e2051745a149",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1380,
        "wires": [
            [
                "08ec2a52aacfad48"
            ]
        ]
    },
    {
        "id": "1ad145d6d5714295",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1380,
        "wires": []
    },
    {
        "id": "ff142eb083d3cb23",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "00",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 0)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f824536a3d1b7df5",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1000,
        "wires": [
            [
                "ff142eb083d3cb23"
            ]
        ]
    },
    {
        "id": "ea425767eaf116e8",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('checkTipoTareaTLV1');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('checkTipoTareaTLV1', false);\n  node.warn(\"Variable 'checkTipoTareaTLV1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 920,
        "wires": [
            [
                "2e465b4a51b1045f",
                "ab58cb6fcaf52060",
                "8d4b4e2b606d5d2d"
            ]
        ]
    },
    {
        "id": "a6183c145cd5939c",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "180",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 180)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "82364dfbfe7f54d3",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 1060,
        "wires": [
            [
                "a6183c145cd5939c"
            ]
        ]
    },
    {
        "id": "93464a7c50a6b904",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "(`datosListosTLV1`, false);",
        "func": "  global.set(`datosListosTLV1`, false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "44a6e8bbe08e328f",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 300,
        "wires": [
            [
                "93464a7c50a6b904"
            ]
        ]
    },
    {
        "id": "247a471baf6e5bf7",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "12a0ef1926fc4816",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('escribirVariablesIntermedias');\n\n\nif (validar) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesIntermedias', false);\n  flow.set('escribirVariablesExtraccion', false);\n  flow.set('escribirVariablesDeposito', false);\n  flow.set('escribirVariablesTrasbordo', false);\n  node.warn(\"Variables '' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1580,
        "wires": [
            [
                "33ac86e728f80aac"
            ]
        ]
    },
    {
        "id": "33ac86e728f80aac",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "12a0ef1926fc4816",
        "name": "checkTipoTareaTLV1",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV1\nlet tareaTLV1 = global.get('tareaTLV1');\n\n\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n// Obtener la tarea almacenada en la variable global \"tareaTLV1\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nvar pasilloActualTLV1 = nuevoRegistroTLV1[\"PASILLO_ACTUAL\"];\nvar pasilloActualTLV2 = nuevoRegistroTLV2[\"PASILLO_ACTUAL\"];\n\nif (!tareaTLV1) {\n    node.warn(\"No se ha encontrado la tarea TLV1.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV1\nlet origen = tareaTLV1.origen;\nlet destino = tareaTLV1.destino;\nlet datosAdicionales = tareaTLV1.datosAdicionales;\n// Extraer el origen y destino de la tarea\nlet origenEstacion = tareaTLV1.origen.estacion;\nlet destinoEstacion = tareaTLV1.destino.estacion;\n\n// Convertir las propiedades a enteros\norigen.xActual = parseInt(origen.xActual, 10);\norigen.yActual = parseInt(origen.yActual, 10);\norigen.xLocal = parseInt(origen.xLocal, 10);\norigen.yLocal = parseInt(origen.yLocal, 10);\norigen.lado = parseInt(origen.lado, 10);\norigen.pasillo = parseInt(origen.pasillo, 10);\norigen.profundidad = parseInt(origen.profundidad, 10);\n\ndestino.xActual = parseInt(destino.xActual, 10);\ndestino.yActual = parseInt(destino.yActual, 10);\ndestino.xLocal = parseInt(destino.xLocal, 10);\ndestino.yLocal = parseInt(destino.yLocal, 10);\ndestino.lado = parseInt(destino.lado, 10);\ndestino.pasillo = parseInt(destino.pasillo, 10);\ndestino.profundidad = parseInt(destino.profundidad, 10);\n\n// Asignar valores a las variables de flujo según el tipo de tarea\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada'); // Obtiene el tipo de tarea\nlet matAsignadaExtraccionTLV1 = global.get('matAsignadaExtraccionTLV1') || 0; // Obtener matrícula asignada para extracción\n\n// Asignar los valores a las variables de flujo intermedias según el tipo de tarea\nfunction asignarValoresAFlujoTLV1(origen, destino, tipoTarea, matAsignadaExtraccionTLV1) {\n    if (tipoTarea === 'trasbordoTLV1') {\n        // Asignar valores de trasbordo\n        flow.set('tipoDeOrdenTLV1', 3); // Trasbordo\n        flow.set('pasilloOrigenOrdenTLV1', pasilloActualTLV1);\n        flow.set('x_OrigenOrdenTLV1', 0);\n        flow.set('y_OrigenOrdenTLV1', 0);\n        flow.set('z_OrigenOrdenTLV1', 0);\n\n        flow.set('pasilloDestinoOrdenTLV1', destino.pasillo);\n        flow.set('x_DestinoOrdenTLV1', 0);\n        flow.set('y_DestinoOrdenTLV1', 0);\n        flow.set('z_DestinoOrdenTLV1', 0);\n\n        // Matricula y otras variables en 0\n        flow.set('mat_OrdenTLV1', 0);\n\n        flow.set('variablesIntermediasEscritas', true);\n    }\n    else if (tipoTarea === 'depositoTLV1') {\n        // Asignar valores de depósito\n        flow.set('tipoDeOrdenTLV1', 1); // Depósito\n        flow.set('pasilloDestinoOrdenTLV1', destino.pasillo);\n        flow.set('x_DestinoOrdenTLV1', destino.xActual);\n        flow.set('y_DestinoOrdenTLV1', destino.yActual);\n        flow.set('z_DestinoOrdenTLV1', destino.lado);\n\n        // Origen en 0\n        flow.set('pasilloOrigenOrdenTLV1', pasilloActualTLV1);\n        flow.set('x_OrigenOrdenTLV1', 0);\n        flow.set('y_OrigenOrdenTLV1', 0);\n        flow.set('z_OrigenOrdenTLV1', 0);\n\n        // Matricula en 0\n        flow.set('mat_OrdenTLV1', flow.get('matActualOrdenTLV1'));\n\n        flow.set('variablesIntermediasEscritas', true);\n    }\n    else if (tipoTarea === 'extraccionTLV1') {\n        // Asignar valores de extracción\n        flow.set('tipoDeOrdenTLV1', 2); // Extracción\n        flow.set('pasilloOrigenOrdenTLV1', origen.pasillo);\n    //    if ( origenEstacion.startsWith(\"TLV\"))  {\n    //    flow.set('x_OrigenOrdenTLV1', 0);\n    //    flow.set('y_OrigenOrdenTLV1', 0);\n    //    flow.set('z_OrigenOrdenTLV1', 0);\n    //      }else{\n        flow.set('x_OrigenOrdenTLV1', origen.xActual);\n        flow.set('y_OrigenOrdenTLV1', origen.yActual);\n        flow.set('z_OrigenOrdenTLV1', origen.lado);\n\n    //      }\n        // Usar la matrícula asignada globalmente\n        flow.set('mat_OrdenTLV1', flow.get('matActualOrdenTLV1')); // matAsignadaExtraccionTLV1\n\n        // Destino en 0\n        flow.set('pasilloDestinoOrdenTLV1', destino.pasillo);\n        flow.set('x_DestinoOrdenTLV1', 0);\n        flow.set('y_DestinoOrdenTLV1', 0);\n        flow.set('z_DestinoOrdenTLV1', 0);\n\n        flow.set('variablesIntermediasEscritas', true);\n    }\n}\n\n// Asignar los valores según el tipo de tarea\nasignarValoresAFlujoTLV1(origen, destino, tipoTarea, matAsignadaExtraccionTLV1);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "6118ad35b02eae56",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 990,
        "y": 1680,
        "wires": [
            [
                "ac168c4535812393"
            ]
        ]
    },
    {
        "id": "ac168c4535812393",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet tipoDeOrden = flow.get('tipoDeOrdenTLV1');\nlet pasilloDestino = flow.get('pasilloDestinoOrdenTLV1');\nlet x_Destino = flow.get('x_DestinoOrdenTLV1');\nlet y_Destino = flow.get('y_DestinoOrdenTLV1');\nlet z_Destino = flow.get('z_DestinoOrdenTLV1');\nlet pasilloOrigen = flow.get('pasilloOrigenOrdenTLV1');\nlet x_Origen = flow.get('x_OrigenOrdenTLV1');\nlet y_Origen = flow.get('y_OrigenOrdenTLV1');\nlet z_Origen = flow.get('z_OrigenOrdenTLV1');\nlet matricula = flow.get('mat_OrdenTLV1');\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: tipoDeOrden };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: pasilloDestino };  // Salida 2: pasilloDestino\nlet msg3 = { payload: x_Destino };       // Salida 3: x_Destino\nlet msg4 = { payload: y_Destino };       // Salida 4: y_Destino\nlet msg5 = { payload: z_Destino };       // Salida 5: z_Destino\nlet msg6 = { payload: pasilloOrigen };   // Salida 6: pasilloOrigen\nlet msg7 = { payload: x_Origen };        // Salida 7: x_Origen\nlet msg8 = { payload: y_Origen };        // Salida 8: y_Origen\nlet msg9 = { payload: z_Origen };        // Salida 9: z_Origen\nlet msg10 = { payload: matricula };      // Salida 10: matricula\n\n\n\n\n\nflow.set('variablesOrdenTLV1_PLCEscritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10];\n",
        "outputs": 10,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1920,
        "wires": [
            [],
            [
                "7b64a966e568f804"
            ],
            [
                "d9e94c4f8a492852"
            ],
            [
                "157328d486a966bb"
            ],
            [
                "1805ddcc6389213e"
            ],
            [
                "9cada9720f1208cd"
            ],
            [
                "638b5fc818751734"
            ],
            [
                "ec16c2627c256aa1"
            ],
            [
                "3375a8f8f175c409"
            ],
            [
                "7d13877a8c80ddea"
            ]
        ]
    },
    {
        "id": "dee00d32b71fa946",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "Start",
        "func": "\nlet stateFSM = global.get('stateMachineEventStageEjecutarTareaTLV1');\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVarToPLC_OrdenTLV1') === true ) {///&& (stateFSM === 160 )\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVarToPLC_OrdenTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1760,
        "wires": [
            [
                "ac168c4535812393"
            ]
        ]
    },
    {
        "id": "55a913532468a97d",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 1230,
        "y": 1680,
        "wires": [
            [
                "7b64a966e568f804",
                "d9e94c4f8a492852",
                "157328d486a966bb",
                "1805ddcc6389213e",
                "9cada9720f1208cd",
                "638b5fc818751734",
                "ec16c2627c256aa1",
                "3375a8f8f175c409",
                "7d13877a8c80ddea"
            ]
        ]
    },
    {
        "id": "7b64a966e568f804",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "pasilloDestino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1760,
        "wires": [
            [
                "14d0e370ea90e59d"
            ]
        ]
    },
    {
        "id": "7aa116ae9b80cb87",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "variablesOrdenTLV1_PLCEscritas",
        "func": "flow.set(\"variablesOrdenTLV1_PLCEscritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "14d0e370ea90e59d",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"27\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_PASILLO_DESTINO\"}",
        "s7Name": "TLV1_ORDEN_PASILLO_DESTINO",
        "topic": "",
        "name": "pasilloDestino ",
        "signalSetted": false,
        "x": 1680,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "44bbecdd8e48a75d",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"28\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_X_DESTINO\"}",
        "s7Name": "TLV1_ORDEN_X_DESTINO",
        "topic": "",
        "name": "x_Destino ",
        "signalSetted": false,
        "x": 1660,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "0a8481b42f3703de",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1050,
        "y": 2280,
        "wires": [
            [
                "1ed346802357d57c"
            ]
        ]
    },
    {
        "id": "ea2b2f9b6ff00510",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "Verify PLC",
        "func": "// Capturar variables de flujo\n//var tipoDeOrden = flow.get('tipoDeOrdenTLV1');\nvar pasilloDestino = flow.get('pasilloDestinoOrdenTLV1');\nvar x_Destino = flow.get('x_DestinoOrdenTLV1');\nvar y_Destino = flow.get('y_DestinoOrdenTLV1');\nvar z_Destino = flow.get('z_DestinoOrdenTLV1');\nvar pasilloOrigen = flow.get('pasilloOrigenOrdenTLV1');\nvar x_Origen = flow.get('x_OrigenOrdenTLV1');\nvar y_Origen = flow.get('y_OrigenOrdenTLV1');\nvar z_Origen = flow.get('z_OrigenOrdenTLV1');\nvar matricula = flow.get('mat_OrdenTLV1');\n\n// Capturar las variables PLC desde la variable global\nvar variablesPLC = global.get('nuevoRegistroTLV1');\n\n// Comparar variables de flujo con las variables del PLC\nvar coinciden = true;\n\nif (pasilloOrigen !== variablesPLC[\"PASILLO_ORIGEN\"]) {\n    coinciden = false;\n}\nif (x_Origen !== variablesPLC[\"COORD_X_ORIGEN\"]) {\n    coinciden = false;\n}\nif (y_Origen !== variablesPLC[\"COORD_Y_ORIGEN\"]) {\n    coinciden = false;\n}\nif (z_Origen !== variablesPLC[\"COORD_Z_ORIGEN\"]) {\n    coinciden = false;\n}\nif (pasilloDestino !== variablesPLC[\"PASILLO_DESTINO\"]) {\n    coinciden = false;\n}\nif (x_Destino !== variablesPLC[\"COORD_X_DESTINO\"]) {\n    coinciden = false;\n}\nif (y_Destino !== variablesPLC[\"COORD_Y_DESTINO\"]) {\n    coinciden = false;\n}\nif (z_Destino !== variablesPLC[\"COORD_Z_DESTINO\"]) {\n    coinciden = false;\n}\n//if (matricula !== variablesPLC[\"MATRICULA\"]) {\n ////   coinciden = false;\n//}\n\n// Actualizar las variables de flujo basadas en el resultado de la comparación\nif (coinciden) {\n    flow.set('DatosPlcCorrectosTLV1', true);\n    flow.set('DatosIncorrectosPlcTLV1', false);\n    msg = { payload: \"Las variables coinciden con las del PLC\" };\n} else {\n    flow.set('DatosPlcCorrectosTLV1', false);\n    flow.set('DatosIncorrectosPlcTLV1', true);\n    msg = { payload: \"Las variables no coinciden con las del PLC\" };\n}\n\n// Retornar el resultado\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "1ed346802357d57c",
        "type": "s7 control",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "endpoint": "2f783281dc55418a",
        "function": "trigger",
        "name": "",
        "x": 1250,
        "y": 2360,
        "wires": [
            [
                "f43c3c1d4068ef44",
                "ea2b2f9b6ff00510"
            ]
        ]
    },
    {
        "id": "f43c3c1d4068ef44",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "varTLV1",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\n\n    msg.payload = nuevoRegistroTLV1;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2300,
        "wires": [
            [
                "fcb5085329a26484"
            ]
        ]
    },
    {
        "id": "fcb5085329a26484",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "varPES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 2300,
        "wires": []
    },
    {
        "id": "22ea6e7c3a52527a",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarVarToPLC_OrdenTLV1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarVarToPLC_OrdenTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2360,
        "wires": [
            [
                "1ed346802357d57c"
            ]
        ]
    },
    {
        "id": "5b673b273de67618",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 1030,
        "y": 2520,
        "wires": [
            [
                "783bedc9cf0db762"
            ]
        ]
    },
    {
        "id": "783bedc9cf0db762",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "ejecutar orden PLC",
        "func": "let tipoOrdenTLV1 = flow.get(\"tipoDeOrdenTLV1\");\n\nmsg.payload = { \"value\":[tipoOrdenTLV1] }\n flow.set('ordenEjecutadaTareaTLV1', false);\n return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 2620,
        "wires": [
            [
                "942b1b8c120c3a21",
                "bbb7526411d058b6"
            ]
        ]
    },
    {
        "id": "38d035d3c49c48c6",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "Start",
        "func": "let stateFSM = global.get('stateMachineEventStageEjecutarTareaTLV1');\n\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif ((flow.get('escribirVarToPLC_EjecutarOrdenTLV1') === true)  && (stateFSM === 200)) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('escribirVarToPLC_EjecutarOrdenTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2600,
        "wires": [
            [
                "783bedc9cf0db762"
            ]
        ]
    },
    {
        "id": "3ce47230632c9208",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"20\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_TIPO\"}",
        "s7Name": "TLV1_ORDEN_TIPO",
        "topic": "",
        "name": "tipoOrdenTLV1",
        "signalSetted": false,
        "x": 1660,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "cc86c4ddcf5e176c",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " { \"value\":[1] }",
        "payloadType": "json",
        "x": 1630,
        "y": 2540,
        "wires": [
            [
                "3ce47230632c9208"
            ]
        ]
    },
    {
        "id": "942b1b8c120c3a21",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "ordenEjecutadaTareaTLV1",
        "func": " flow.set('ordenEjecutadaTareaTLV1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "a68caacada4d5e53",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1660,
        "y": 2820,
        "wires": [
            [
                "942b1b8c120c3a21"
            ]
        ]
    },
    {
        "id": "d9e94c4f8a492852",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "x_Destino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1800,
        "wires": [
            [
                "44bbecdd8e48a75d"
            ]
        ]
    },
    {
        "id": "157328d486a966bb",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "y_Destino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1840,
        "wires": [
            [
                "c27d0bece9662e98"
            ]
        ]
    },
    {
        "id": "1805ddcc6389213e",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "z_Destino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1880,
        "wires": [
            [
                "895c52c132429a1a"
            ]
        ]
    },
    {
        "id": "9cada9720f1208cd",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "pasilloOrigen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1920,
        "wires": [
            [
                "344e32d0185d05dd"
            ]
        ]
    },
    {
        "id": "638b5fc818751734",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "x_Origen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1960,
        "wires": [
            [
                "34dea23ab6f56a90"
            ]
        ]
    },
    {
        "id": "ec16c2627c256aa1",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "y_Origen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2000,
        "wires": [
            [
                "3ee3ec96c7316819"
            ]
        ]
    },
    {
        "id": "3375a8f8f175c409",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "z_Origen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2040,
        "wires": [
            [
                "7b32fc4c42b888ae"
            ]
        ]
    },
    {
        "id": "7d13877a8c80ddea",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "matricula ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2080,
        "wires": [
            [
                "7aa116ae9b80cb87",
                "25da299cb425e251"
            ]
        ]
    },
    {
        "id": "c27d0bece9662e98",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"29\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_Y_DESTINO\"}",
        "s7Name": "TLV1_ORDEN_Y_DESTINO",
        "topic": "",
        "name": "y_Destino ",
        "signalSetted": false,
        "x": 1660,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "895c52c132429a1a",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"30\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_Z_DESTINO\"}",
        "s7Name": "TLV1_ORDEN_Z_DESTINO",
        "topic": "",
        "name": "z_Destino ",
        "signalSetted": false,
        "x": 1660,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "344e32d0185d05dd",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"22\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_PASILLO_ORIGEN\"}",
        "s7Name": "TLV1_ORDEN_PASILLO_ORIGEN",
        "topic": "",
        "name": "pasilloOrigen ",
        "signalSetted": false,
        "x": 1670,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "34dea23ab6f56a90",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"23\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_X_ORIGEN\"}",
        "s7Name": "TLV1_ORDEN_X_ORIGEN",
        "topic": "",
        "name": "x_Origen ",
        "signalSetted": false,
        "x": 1660,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "3ee3ec96c7316819",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"24\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_Y_ORIGEN\"}",
        "s7Name": "TLV1_ORDEN_Y_ORIGEN",
        "topic": "",
        "name": "y_Origen ",
        "signalSetted": false,
        "x": 1660,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "7b32fc4c42b888ae",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"25\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_Z_ORIGEN\"}",
        "s7Name": "TLV1_ORDEN_Z_ORIGEN",
        "topic": "",
        "name": "z_Origen",
        "signalSetted": false,
        "x": 1660,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "25da299cb425e251",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"I\",\"S7_Offset\":\"32\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_ORDEN_MATRICULA\"}",
        "s7Name": "TLV1_ORDEN_MATRICULA",
        "topic": "",
        "name": "matricula ",
        "signalSetted": false,
        "x": 1660,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "12ee6733bd984652",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 3080,
        "wires": [
            [
                "65726c14bf4218a3"
            ]
        ]
    },
    {
        "id": "91fee6a22093aea3",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "name": "Verify PLC",
        "func": "// Obtener el nuevo registro actual del TLV1 desde la letiable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener las letiables del traslo desde nuevoRegistroTLV1\nlet pasilloActual = nuevoRegistroTLV1[\"PASILLO_ACTUAL\"];\nlet xActual = nuevoRegistroTLV1[\"COORD_X_ACTUAL\"];\nlet yActual = nuevoRegistroTLV1[\"COORD_Y_ACTUAL\"];\nlet zActual = nuevoRegistroTLV1[\"COORD_Z_ACTUAL\"];\nlet matriculaActual = nuevoRegistroTLV1[\"MATRICULA_ACTUAL\"];\n\n// Inicializamos la letiable de flujo TLV1_inPosition en false\nflow.set('TLV1_inPosition', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\n\nif (tipoTarea === 'extraccionTLV1') {\n    // En depósito, comparar la posición actual del traslo con las letiables del destino (origen en este caso)\n   // let pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV1');\n    let xOrigenOrden = flow.get('x_OrigenOrdenTLV1');\n    let yOrigenOrden = flow.get('y_OrigenOrdenTLV1');\n   // let zOrigenOrden = 0;\n\n\n    \n    if (//pasilloActual === pasilloOrigenOrden &&\n        xActual === xOrigenOrden &&\n        yActual === yOrigenOrden) {\n       // zActual === zOrigenOrden) {\n        node.warn(\"La posición actual del TLV1 coincide con el destino de la tarea de extraccion.\");\n        flow.set('TLV1_inPosition', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La posición actual del TLV1 NO coincide con el destino de la tarea de extraccion.\");\n        flow.set('TLV1_inPosition', false); // Si no coincide, establecer en false\n    }\n\n} else if (tipoTarea === 'depositoTLV1') {\n    // En extracción, comparar la posición actual del traslo con las letiables del origen. Asignamos valores fijos a X, Y y Z según lo indicado.\n    //let pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV1');\n    let xOrigenOrden = 0;  // X siempre será 0 para deposito \n    let yOrigenOrden = 8;  // Y siempre será 8 para deposito\n    let zOrigenOrden = 0;  // Z siempre será 0 para deposito\n    let xOrigenOrdenEventocarga = 999;  // X siempre será 999 para deposito\n    let yOrigenOrdenEventocarga = 1;  // Y siempre será 1 para deposito\n    \n    if (//pasilloActual === pasilloOrigenOrden &&\n        xActual === xOrigenOrden &&\n        yActual === yOrigenOrden &&\n        zActual === zOrigenOrden) {\n        node.warn(\"La posición actual del TLV1 coincide con el origen de la tarea de deposito.\");\n        flow.set('TLV1_inPosition', true); // Si coincide, establecer en true\n    } else {\n        //node.warn(\"La posición actual del TLV1 NO coincide con el origen de la tarea de extracción.\");\n        flow.set('TLV1_inPosition', false); // Si no coincide, establecer en false\n    }\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "65726c14bf4218a3",
        "type": "s7 control",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "endpoint": "2f783281dc55418a",
        "function": "trigger",
        "name": "",
        "x": 1210,
        "y": 3160,
        "wires": [
            [
                "1baa534de96b8780",
                "91fee6a22093aea3"
            ]
        ]
    },
    {
        "id": "1baa534de96b8780",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "name": "varTLV1",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\n\n    msg.payload = nuevoRegistroTLV1;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 3100,
        "wires": [
            [
                "74146e04f3f29540"
            ]
        ]
    },
    {
        "id": "74146e04f3f29540",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 3100,
        "wires": []
    },
    {
        "id": "2aa17ffc8888317b",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarPosicionActualTLV1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarPosicionActualTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3160,
        "wires": [
            [
                "65726c14bf4218a3"
            ]
        ]
    },
    {
        "id": "9d25eda53d6c232e",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 3480,
        "wires": [
            [
                "144e6bc7b4205da4"
            ]
        ]
    },
    {
        "id": "be47db80995f4403",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "Verify PLC",
        "func": "// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV1\nlet zActual = nuevoRegistroTLV1[\"COORD_Z_ACTUAL\"];\nlet finOrdenEstado = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n// Inicializamos las variables de flujo en false\nflow.set('PalasAfueraTLV1', false);\nglobal.set('errorDepositoTLV1', false);\nglobal.set('errorExtraccionTLV1', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\n\nif (tipoTarea === 'depositoTLV1') {\n    // En depósito, comparar solo la coordenada Z\n    let zOrigenOrden = 1;\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV1 coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('PalasAfueraTLV1', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV1 NO coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('PalasAfueraTLV1', false); // Si no coincide, establecer en false\n    }\n\n    // Condición de error para depósito: finOrdenResultado = 3 y finOrdenEstado = 2\n    if (finOrdenResultado === 3 && finOrdenEstado === 2) {\n        node.warn(\"Error en tarea de depósito detectado. Resultado: 3, Estado: 2.\");\n        global.set('errorDepositoTLV1', true); // Establecer error en depósito\n    }\n\n} else if (tipoTarea === 'extraccionTLV1') {\n    // En extracción, comparar solo la coordenada Z con un valor almacenado en flujo\n    let zOrigenOrden = flow.get('z_OrigenOrdenTLV1');\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV1 coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('PalasAfueraTLV1', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV1 NO coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('PalasAfueraTLV1', false); // Si no coincide, establecer en false\n    }\n\n    // Condición de error para extracción: finOrdenResultado = 4 y finOrdenEstado = 2\n    if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n        node.warn(\"Error en tarea de extracción detectado. Resultado: 4, Estado: 2.\");\n        global.set('errorExtraccionTLV1', true); // Establecer error en extracción\n    }\n}\n\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "144e6bc7b4205da4",
        "type": "s7 control",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "endpoint": "2f783281dc55418a",
        "function": "trigger",
        "name": "",
        "x": 1210,
        "y": 3560,
        "wires": [
            [
                "a7b805f07a18d8ad",
                "be47db80995f4403"
            ]
        ]
    },
    {
        "id": "a7b805f07a18d8ad",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "varTLV1",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\n\n    msg.payload = nuevoRegistroTLV1;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 3500,
        "wires": [
            [
                "5efe65d7abbf21ea"
            ]
        ]
    },
    {
        "id": "5efe65d7abbf21ea",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 3500,
        "wires": []
    },
    {
        "id": "f618b1ccc138b071",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarPalasAfueraTLV1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarPalasAfueraTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3560,
        "wires": [
            [
                "144e6bc7b4205da4"
            ]
        ]
    },
    {
        "id": "ee5976b845fc53c6",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 4560,
        "wires": [
            [
                "b4d0e6d1c5c5ed86"
            ]
        ]
    },
    {
        "id": "e8cbdf2e8ed42a3f",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "name": "Verify PLC",
        "func": "\n// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables del PLC relacionadas con el fin de la orden\nlet finOrdenEstado = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n// Verificar los valores de finOrdenEstado y finOrdenResultado\nif (finOrdenResultado === 1 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 1, Estado: 2. Acción 1 ejecutada.\");\n\n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('errorDepositoTLV1', false);\n    global.set('errorExtraccionTLV1', false);\n      flow.set('finOrdenOK', true);\n\n} else if (finOrdenResultado === 2 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 2, Estado: 2. Acción 2 ejecutada.\");\n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('errorDepositoTLV1', false);\n    global.set('errorExtraccionTLV1', false);\n    flow.set('finOrdenOK', true);\n\n    \n} else if (finOrdenResultado === 3 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 3, Estado: 2. Acción 3 ejecutada.\");\n   \n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('errorDepositoTLV1', true);\n    flow.set('finOrdenOK', true);\n\n} else if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 4, Estado: 2. Acción 4 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 5 y el estado es 2\n\n\n\n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('errorExtraccionTLV1', true);\n    flow.set('finOrdenOK', true);\n\n} else {\n    node.warn(\"Condiciones no coinciden. Ninguna acción ejecutada.\");\n    flow.set('finOrdenOK', false);\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 4640,
        "wires": [
            []
        ]
    },
    {
        "id": "b4d0e6d1c5c5ed86",
        "type": "s7 control",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "endpoint": "2f783281dc55418a",
        "function": "trigger",
        "name": "",
        "x": 1210,
        "y": 4640,
        "wires": [
            [
                "84891dbcb5f3e6ad",
                "e8cbdf2e8ed42a3f"
            ]
        ]
    },
    {
        "id": "84891dbcb5f3e6ad",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "name": "varTLV1",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\n\n    msg.payload = nuevoRegistroTLV1;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 4580,
        "wires": [
            [
                "d6d7af1721fca785"
            ]
        ]
    },
    {
        "id": "d6d7af1721fca785",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 4580,
        "wires": []
    },
    {
        "id": "0a836d6a3c8b53cc",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarFinOrdenTLV1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarFinOrdenTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 4640,
        "wires": [
            [
                "b4d0e6d1c5c5ed86"
            ]
        ]
    },
    {
        "id": "7d96cb4e0bb9e8f0",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 5180,
        "wires": [
            [
                "cd1cb5ef08183db3"
            ]
        ]
    },
    {
        "id": "cd1cb5ef08183db3",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet finOrdenresultado = 0;\nlet finOrdenEstado = 0;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: finOrdenresultado };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: finOrdenEstado };  // Salida 2: pasilloDestino\n\nflow.set('variablesreseteadasTLV1', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 5180,
        "wires": [
            [
                "aa4938d7578df492"
            ],
            [
                "1c7a233ec7bca8b8",
                "f4b53144fad6a921"
            ]
        ]
    },
    {
        "id": "2d8096aec8afe912",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('resetVarOrdenTLV1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('resetVarOrdenTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 5020,
        "wires": [
            [
                "cd1cb5ef08183db3",
                "01054a4f55db73be"
            ]
        ]
    },
    {
        "id": "aa4938d7578df492",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "finOrdenresultado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 5020,
        "wires": [
            []
        ]
    },
    {
        "id": "1c7a233ec7bca8b8",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "variablesreseteadasTLV1",
        "func": "flow.set(\"variablesreseteadasTLV1\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 5180,
        "wires": [
            []
        ]
    },
    {
        "id": "f4b53144fad6a921",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "finOrdenEstado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 5060,
        "wires": [
            []
        ]
    },
    {
        "id": "ffe763d14afc31c1",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "900",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 900)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "b27831a2e0db70d3",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1100,
        "wires": [
            [
                "ffe763d14afc31c1"
            ]
        ]
    },
    {
        "id": "bda59e17f9ed1598",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1520,
        "wires": [
            [
                "349ba449c8363e4c"
            ]
        ]
    },
    {
        "id": "feede933715da93a",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 94",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1520,
        "wires": []
    },
    {
        "id": "349ba449c8363e4c",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "tipoTareaTLV1Chekeada",
        "func": "msg.payload = flow.get('tipoTareaTLV1Chekeada');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1520,
        "wires": [
            [
                "feede933715da93a"
            ]
        ]
    },
    {
        "id": "3ae61cd0f6bf304b",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1580,
        "wires": [
            [
                "679e0180085d8d2a"
            ]
        ]
    },
    {
        "id": "757b4525deb96bbd",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 95",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1580,
        "wires": []
    },
    {
        "id": "679e0180085d8d2a",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "pasilloOrigenOrdenTLV1",
        "func": "msg.payload = flow.get('pasilloOrigenOrdenTLV1');\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1580,
        "wires": [
            [
                "757b4525deb96bbd"
            ]
        ]
    },
    {
        "id": "3b1dc02df5b3204d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "4702713ce0cc8134",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = global.get('validarVariablesTareaTLV1');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   global.set('validarVariablesTareaTLV1', false);\n    node.warn(\"Variable 'validarVariablesTareaTLV1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "7c9b08baa49b06ad"
            ]
        ]
    },
    {
        "id": "7c9b08baa49b06ad",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "4702713ce0cc8134",
        "name": "validarVariablesTLV1",
        "func": "// Función para validar si las variables cumplen con los criterios establecidos\nfunction validarVariablesTLV1() {\n    let tarea = global.get('tareaTLV1');\n\n    if (!tarea) {\n        node.warn(\"No se ha definido ninguna tarea para TLV1.\");\n        return false;\n    }\n\n    // Validar origen\n    if (parseInt(tarea.origen.xActual) > 1000 || parseInt(tarea.origen.yActual) > 12 ||\n        parseInt(tarea.origen.xLocal) > 1000 || parseInt(tarea.origen.yLocal) > 12 ||\n        parseInt(tarea.origen.lado) > 2 || parseInt(tarea.origen.pasillo) > 12 ||\n        parseInt(tarea.origen.profundidad) > 12) {\n        node.warn(\"Error: Valores de origen fuera de rango en tareaTLV1.\");\n        return false;\n    }\n\n    // Validar destino\n    if (parseInt(tarea.destino.xActual) > 1000 || parseInt(tarea.destino.yActual) > 12 ||\n        parseInt(tarea.destino.xLocal) > 1000 || parseInt(tarea.destino.yLocal) > 12 ||\n        parseInt(tarea.destino.lado) > 2 || parseInt(tarea.destino.pasillo) > 13 ||\n        parseInt(tarea.destino.profundidad) > 12) {\n        node.warn(\"Error: Valores de destino fuera de rango en tareaTLV1.\");\n        return false;\n    }\n\n    // Validar que destino.estacion solo puede ser \"REJ1\" o entre \"PEP1\" y \"PEP12\"\n    const validDestinos = ['REJ1', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12'];\n    if (!validDestinos.includes(tarea.destino.estacion)) {\n        node.warn(`Error: Estación de destino no válida (${tarea.destino.estacion}) en tareaTLV1.`);\n        return false;\n    }\n\n    // Validar datosAdicionales\n    if (tarea.datosAdicionales.numeroTransporte === \"\" || tarea.datosAdicionales.umaContenedor === \"\" ||\n        tarea.datosAdicionales.tipoContenedor === \"\" || tarea.datosAdicionales.tipoAltura === \"\") {\n        node.warn(\"Error: Datos adicionales incompletos en tareaTLV1.\");\n        return false;\n    }\n\n    // Validar que tipoContenedor y tipoAltura no pueden ser mayores que 2\n    if (parseInt(tarea.datosAdicionales.tipoContenedor) > 2 || parseInt(tarea.datosAdicionales.tipoAltura) > 2) {\n        node.warn(\"Error: Tipo de contenedor o tipo de altura no válido (mayor que 2) en tareaTLV1.\");\n        return false;\n    }\n\n    node.warn(\"Todas las variables son válidas para TLV1.\");\n    return true;  // Si todas las validaciones pasan, retornamos true\n}\n\n// Ejecutar la validación y actualizar las variables globales\nif (validarVariablesTLV1()) {\n    global.set('variablesValidadasTareaTLV1', true);  // Set to true if validation passes\n    global.set('variablesErroneasTareaTLV1', false);  // Ensure the error flag is false\n    node.warn(\"Validación exitosa: variablesValidadasTareaTLV1 = true\");\n} else {\n    global.set('variablesValidadasTareaTLV1', false);  // Set to false if validation fails\n    global.set('variablesErroneasTareaTLV1', true);  // Set error flag if validation fails\n    node.warn(\"Validación fallida: variablesErroneasTareaTLV1 = true\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "01054a4f55db73be",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "resetOrden",
        "func": "let varPLC = 0;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 4920,
        "wires": [
            [
                "2a51090bef218906"
            ]
        ]
    },
    {
        "id": "987c08d55d704fb9",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "tipoDeOrdenTLV1",
        "func": "\n\nmsg.payload = flow.get('tipoDeOrdenTLV1');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "cf7e2e28436242f3"
            ]
        ]
    },
    {
        "id": "923536b458f31b4a",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "pasilloOrigenOrdenTLV1",
        "func": "\n\nmsg.payload = flow.get('pasilloOrigenOrdenTLV1');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "98c651150fce45a2"
            ]
        ]
    },
    {
        "id": "dffb0c6f297467d1",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "x_OrigenOrdenTLV1",
        "func": "\nmsg.payload = flow.get('x_OrigenOrdenTLV1');\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "2bdab132f1dadf9a"
            ]
        ]
    },
    {
        "id": "8c88e721d6ebf2c1",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "tipoTareaTLV1Chekeada",
        "func": "\n msg.payload =  flow.get('tipoTareaTLV1Chekeada');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "b84a6ce43391d3d3"
            ]
        ]
    },
    {
        "id": "f869e52e721cc58d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "y_OrigenOrdenTLV1",
        "func": "\n\nmsg.payload = flow.get('y_OrigenOrdenTLV1');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1300,
        "wires": [
            [
                "94b3b6c049cdfad7"
            ]
        ]
    },
    {
        "id": "5d990bad1cc4483f",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "z_OrigenOrdenTLV1",
        "func": "\n\nmsg.payload = flow.get('z_OrigenOrdenTLV1');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1340,
        "wires": [
            [
                "8b80df459039f2cd"
            ]
        ]
    },
    {
        "id": "b84a6ce43391d3d3",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 96",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cf7e2e28436242f3",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 97",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1180,
        "wires": []
    },
    {
        "id": "98c651150fce45a2",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 98",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2bdab132f1dadf9a",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 99",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1260,
        "wires": []
    },
    {
        "id": "94b3b6c049cdfad7",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 100",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1300,
        "wires": []
    },
    {
        "id": "8b80df459039f2cd",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "debug 101",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1340,
        "wires": []
    },
    {
        "id": "49152ec24b47685f",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "8c88e721d6ebf2c1",
                "987c08d55d704fb9",
                "923536b458f31b4a",
                "dffb0c6f297467d1",
                "f869e52e721cc58d",
                "5d990bad1cc4483f"
            ]
        ]
    },
    {
        "id": "dd1a4e0aea1f5734",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "resetOrdenTipo",
        "func": "\n// Obtener el nuevo registro de TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables de ORDEN_TIPO y FIN_ORDEN_ESTADO\nlet ordenTipo = nuevoRegistroTLV1[\"ORDEN_TIPO\"];\nlet finOrdenEstado = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\n\n// Verificar si ORDEN_TIPO no es 0 y FIN_ORDEN_ESTADO es 1\nif (ordenTipo !== 0 && finOrdenEstado === 1) {\n    // Asignar la variable de flujo resetOrdenTipo a 0\n    flow.set('resetOrdenTipo', 0);\n\n    // Pasar resetOrdenTipo en el payload\n    msg.payload = flow.get('resetOrdenTipo');\n    \n} else {\n    // Si no se cumplen las condiciones, retornar null\n    return null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2760,
        "wires": [
            [
                "f796ad841b012458"
            ]
        ]
    },
    {
        "id": "f796ad841b012458",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "resetOrdenTipo",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "72479d5a0a104660",
        "type": "delay",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1460,
        "y": 2400,
        "wires": [
            [
                "ea2b2f9b6ff00510"
            ]
        ]
    },
    {
        "id": "13178c97e779719d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "6c7cf121838175e8",
        "name": "repeatWritePLC",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = global.get('stateMachineEventStageEjecutarTareaTLV1');\n\nif (validar === 190) {\n    // Disparar el flujo o acción correspondiente\n\nflow.set(\"repeatWritePLC\", true);\n\nreturn msg;\n\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "9c5535615d53c2fe",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "6c7cf121838175e8",
        "name": "5Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "13178c97e779719d"
            ]
        ]
    },
    {
        "id": "ec747ed1a617534a",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "repeatWritePLC",
        "func": "flow.set('repeatWritePLC', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "feef6b2ba2b95f73",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "ec747ed1a617534a"
            ]
        ]
    },
    {
        "id": "c9ee6dae3e2638ee",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "DatosPlcCorrectosTLV1",
        "func": "flow.set('DatosPlcCorrectosTLV1', true);\nflow.set('DatosIncorrectosPlcTLV1', false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f873f2fcacea0b0d",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "c9ee6dae3e2638ee"
            ]
        ]
    },
    {
        "id": "c1209f9401fbad4e",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "tipoOrdenTLV1",
        "links": [
            "bbb7526411d058b6",
            "2a51090bef218906",
            "d9817943438c0a11"
        ],
        "x": 1475,
        "y": 2580,
        "wires": [
            [
                "3ce47230632c9208"
            ]
        ]
    },
    {
        "id": "bbb7526411d058b6",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "tipoOrdenTLV1",
        "mode": "link",
        "links": [
            "c1209f9401fbad4e"
        ],
        "x": 1335,
        "y": 2540,
        "wires": []
    },
    {
        "id": "2a51090bef218906",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "tipoOrdenTLV1",
        "mode": "link",
        "links": [
            "c1209f9401fbad4e"
        ],
        "x": 1185,
        "y": 4920,
        "wires": []
    },
    {
        "id": "1d6b4c93a8af137b",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "6c7cf121838175e8",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "d68279f6ed61f669"
            ]
        ]
    },
    {
        "id": "c37f0f188cb647e7",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 1020,
        "wires": [
            [
                "f4ce41bf5d663296"
            ]
        ]
    },
    {
        "id": "f4ce41bf5d663296",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "280",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 280)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "d68279f6ed61f669",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "6c7cf121838175e8",
        "name": "fsmOrdenTLV1",
        "func": "// Máquina de estados con switch-case\n\n    let estadoActual = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    // Obtener el nuevo registro actual del TLV1 desde la variable global\n    var nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\n    if (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n        node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n        return msg;\n    }\n\n\n\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            flow.set('escribirVariablesTrasbordo', false);\n            flow.set('escribirVariablesDeposito', false);\n            flow.set('escribirVariablesExtraccion', false);\n            flow.set('variablesIntermediasEscritas', false);\n            flow.set('escribirVarToPLC_EjecutarOrdenTLV1', false);\n            flow.set('ordenEjecutadaTareaTLV1', false);\n            flow.set('verificarPosicionActualTLV1', false);\n            flow.set('TLV1_inPosition', false);\n            flow.set('verificarPalasAfueraTLV1', false);\n            flow.set('PalasAfueraTLV1', false);\n            flow.set('verificarPalasAdentroTLV1', false);\n            flow.set('palletCargado', false);\n            flow.set('verificarFinOrdenTLV1', false);\n            flow.set('finOrdenOK', false);\n            flow.set('resetVarOrdenTLV1', false);\n            flow.set('variablesreseteadasTLV1', false);\n            flow.set('buscarIdOrdenTLV1', false);\n            flow.set('idListoTLV1', false);\n            flow.set('escribirVarToPLC_OrdenTLV1', false);\n            flow.set('variablesOrdenTLV1_PLCEscritas', false);\n            flow.set('checkTipoTareaTLV1', false);\n            flow.set('verificarVarToPLC_OrdenTLV1', false);\n            flow.set('DatosPlcCorrectosTLV1', false);\n            flow.set('DatosIncorrectosPlcTLV1', false);\n            flow.set('trasbordoDoneTLV1', false);\n            flow.set('enviarTramaFinOrden', false);\n            flow.set('tramaFinOrdenEnviada', false);\n            flow.set('enviarTramapalletCargado', false);\n            global.set('repeatTramaCargaTLV1', false);\n            global.set('abortTramaCargaTLV1', false);\n            global.set('repeatTramaFinOrdenTLV1', false);\n            global.set('abortTramaFinOrdenTLV1', false);\n           // global.set('buscarIdBusyTLV1', false);\n            global.set(\"permitirFinOrdenPEP\", false);\n            flow.set('tramapalletCargadoEnviada', false);\n            flow.set('tipoTareaTLV1Chekeada', \"none\");\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 10);\n            // setTimeout(maquinaEstadosTLV1, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 10);\n            if (\n                flow.get('escribirVariablesTrasbordo') === false &&\n                flow.get('escribirVariablesDeposito') === false &&\n                flow.get('escribirVariablesExtraccion') === false &&\n                flow.get('variablesIntermediasEscritas') === false &&\n                flow.get('escribirVarToPLC_EjecutarOrdenTLV1') === false &&\n                flow.get('ordenEjecutadaTareaTLV1') === false &&\n                flow.get('verificarPosicionActualTLV1') === false &&\n                flow.get('TLV1_inPosition') === false &&\n                flow.get('verificarPalasAfueraTLV1') === false &&\n                flow.get('PalasAfueraTLV1') === false &&\n                flow.get('trasbordoDoneTLV1') === false &&\n                flow.get('verificarPalasAdentroTLV1') === false &&\n                flow.get('palletCargado') === false &&\n                flow.get('tipoTareaTLV1Chekeada') === \"none\" &&\n                global.get('stateMachineEventStageTareaGenTLV1') === 30\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventStageEjecutarTareaTLV1', 20);\n                   // global.set('buscarIdBusyTLV1', true);\n                  \n                }, 500);\n            }\n            break;\n\n        // Manteniendo del 20 al 100\n        case 20: // 20_LeerVariables\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 20);\n            flow.set('variablesOkTLV1', true);  // Simulación de variables OK\n            if (flow.get('variablesOkTLV1') === true) {\n                  flow.set('buscarIdOrdenTLV1', true);  // Simulación de ID listo\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 40);\n            }\n            break;\n\n        case 30: // 30_VariablesOk\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 30);\n            setTimeout(() => {\n             global.set('stateMachineEventStageEjecutarTareaTLV1', 40);\n            }, 500);\n            break;\n\n        case 40: // 40_BuscarID\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 40);\n            global.set('errorDepositoTLV1', false);\n            global.set('errorExtraccionTLV1', false);\n           // global.set('buscarIdBusyTLV1', true);\n           // if (global.get('buscarIdBusyTLV2') === false) {\n               // flow.set('buscarIdOrdenTLV1', true);  // Simulación de ID listo\n          //  }\n            if (flow.get('idListoTLV1') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 100);\n            }\n            break;\n\n        case 50: // 50_asignarDatosToIDTLV1\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 50);\n            flow.set('buscarIdOrdenTLV1', false);  // Simulación de ID listo\n            flow.set('asignarDatosToIDTLV1', true);  // Simulación de asignar datos a ID\n            if (flow.get('datosasignadosToIDTLV1') === true) {\n                //global.set('buscarIdBusyTLV1', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 60);\n            } else {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 90);\n            }\n            break;\n\n        case 60: // 60_compararUma\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 60);\n            flow.set('compararUMA', true);  // Simulación de ID listo\n            flow.set('asignarDatosToIDTLV1', false);  // Simulación de asignar datos a ID\n            if (flow.get('umaCorrecto') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 70);\n            } else if (flow.get('umaInCorrecto') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 90);\n            }\n            break;\n\n        case 70: // 70_CompararOk\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 70);\n            if (flow.get('baseDatosOkTLV1') === true) {\n\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 80);\n            }\n            break;\n\n\n\n        case 90: // 90_CompararError\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 90);\n            node.warn(\"Error en la comparación de datos.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 1000);\n            }, 1000);\n            break;\n\n        case 100: // 100_CheckTarea\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 100);\n            flow.set('checkTipoTareaTLV1', true);\n\n            let tipoTarea = flow.get('tipoTareaTLV1Chekeada');\n            let trasbordoDoneTLV1 = flow.get('trasbordoDoneTLV1');\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            let finOrdenEstado100 = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\n            let finOrdenResultado100 = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n            if ((tipoTarea === 'trasbordoTLV1') && (trasbordoDoneTLV1 === false)) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 110);\n            } else if ((tipoTarea === 'depositoTLV1'&& (finOrdenEstado100 === 0) && (finOrdenResultado100 === 0))) {  // \n                global.set('stateMachineEventStageEjecutarTareaTLV1', 120);\n            } else if ((tipoTarea === 'extraccionTLV1'&& (finOrdenEstado100 === 0) && (finOrdenResultado100 === 0))) {//\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 130);\n            }\n            break;\n\n        case 110: // 110_tareaTrasbordo\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 110);\n            flow.set('escribirVariablesTrasbordo', true);  // Variable de flujo para tarea de trasbordo\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 140);\n            }, 500);\n            break;\n\n        case 120: // 120_tareaDeposito\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 120);\n            flow.set('escribirVariablesDeposito', true);  // Variable de flujo para tarea de depósito\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 140);\n            }, 500);\n            break;\n\n\n\n\n        case 130: // 130_tareaExtraccion\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 130);\n            flow.set('escribirVariablesExtraccion', true);  // Variable de flujo para tarea de extracción\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 140);\n            }, 500);\n            break;\n\n        case 140: // 140_EscribirVariablesIntermediasOrdenTLV1\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 140);\n            flow.set('escribirVariablesIntermedias', true);  // Variable de flujo para escribir variables intermedias\n            if (flow.get('variablesIntermediasEscritas')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 150);\n            }\n            break;\n\n        case 150: // 150_VariablesIntermediasEscritasOrdenTLV1\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 150);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 160);;\n            }, 500);\n            break;\n\n        case 160: // 160_EscribirVarToPLC\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 160);\n            flow.set('DatosPlcCorrectosTLV1', false);\n            flow.set('DatosIncorrectosPlcTLV1', false);\n            flow.set('escribirVarToPLC_OrdenTLV1', true);\n            flow.set('variablesIntermediasEscritas', true);\n            flow.set(\"repeatWritePLC\", false);\n            if (flow.get('variablesOrdenTLV1_PLCEscritas')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 170);\n            }\n            break;\n\n        case 170: // 170_Verificar\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 170);\n            flow.set('verificarVarToPLC_OrdenTLV1', true);\n            if (flow.get('DatosPlcCorrectosTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 180);\n            } else if (flow.get('DatosIncorrectosPlcTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 190);\n            }\n            break;\n        case 180: // 180_VariablesOK\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 180);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 200);\n            }, 500);\n            break;\n        case 190: // 190_VariablesPlcNoOk\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 190);\n            if (flow.get('DatosPlcCorrectosTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 200);\n            } else if (flow.get('repeatWritePLC')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 200);\n            }\n            break;\n\n        case 200: // 200_OrdenToPLC\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 200);\n            flow.set('escribirVarToPLC_EjecutarOrdenTLV1', true);\n            if (flow.get('ordenEjecutadaTareaTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 210);\n            }\n            break;\n\n        case 210: // 210_OrdenOK\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 210);\n            flow.set('ordenEjecutadaTareaTLV1', false);\n            let tareaTLV1 = global.get(\"tareaTLV1\");\n            let origenEstacion = tareaTLV1.origen.estacion;\n            let tipoTarea210 = flow.get('tipoTareaTLV1Chekeada');\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            let finOrdenEstado210 = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\n            let finOrdenResultado210 = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n            if (tipoTarea210 === 'trasbordoTLV1') {\n                if ((finOrdenEstado210 === 2) && (finOrdenResultado210 === 5)) {\n                    flow.set('trasbordoDoneTLV1', true);\n                    global.set('stateMachineEventStageEjecutarTareaTLV1', 100);\n                }else if ((finOrdenEstado210 === 2) && (finOrdenResultado210 === 6)) {\n                   //flow.set('trasbordoDoneTLV1', true);\n                    global.set('stateMachineEventStageEjecutarTareaTLV1', 100);\n                } else if ((origenEstacion.startsWith(\"TLV\")) && (tipoTarea210 === 'depositoTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n                }\n\n            } else {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 220);\n            }\n            break;\n\n\n        case 220: // 220_waitTLV1_inPosition\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 220);\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Esperando que TLV1 esté en posición...\" });\n            flow.set('verificarPosicionActualTLV1', true);\n            if (flow.get('TLV1_inPosition')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 230);\n            }\n            break;\n\n        case 230: // 230_TLV1_inPosition\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 230);\n            flow.set('verificarPosicionActualTLV1', false);\n            node.warn(\"TLV1 está en posición.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 240);\n            }, 500);\n            break;\n\n        case 240: // 240_sacandoPalas\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 240);\n            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Sacando palas...\" });\n            let finOrdenEstado240 = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\n            let finOrdenResultado240 = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n            flow.set('verificarPalasAfueraTLV1', true);\n            if (flow.get('PalasAfueraTLV1') || ((finOrdenEstado240 === 2) && (finOrdenResultado240 === 1)) || ((finOrdenEstado240 === 2) && (finOrdenResultado240 === 2))) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 250);\n            } else if (global.get('errorDepositoTLV1') || global.get('errorExtraccionTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            }\n            break;\n\n        case 250: // 250_PalasAfuera\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 250);\n            flow.set('verificarPalasAfueraTLV1', false);\n            node.warn(\"Palas fuera.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 260);\n            }, 500);\n            break;\n\n        case 260: // 260_cargandoPallet\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 260);\n            node.status({ fill: \"blue\", shape: \"dot\", text: \"Cargando pallet...\" });\n            flow.set('verificarPalasAdentroTLV1', true);\n            if (flow.get('palletCargado')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 270);\n            }\n            break;\n\n        case 270: // 270_palletCargado\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 270);\n            flow.set('verificarPalasAdentroTLV1', false);\n             global.set('resultadoTLV-1_palletCargado', \"1111\");\n            flow.set('enviarTramapalletCargado', true);\n            node.warn(\"Pallet cargado.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 274);\n            }, 500);\n            break;\n\n        case 274: // 274_tramapalletCargadoEnviada\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 274);\n\n            if (flow.get('tramapalletCargadoEnviada')) {\n                setTimeout(() => {\n                    global.set('stateMachineEventStageEjecutarTareaTLV1', 275);\n                }, 500);\n            }\n            break;\n\n\n        case 275: // 275_enviarTramaPalletCargado\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 275);\n\n            let resultadoTLV_1_palletCargado = global.get('resultadoTLV-1_palletCargado');\n\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            // let finOrdenEstado286 = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\n            // let finOrdenResultado286 = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n           // if (resultadoTLV_1_palletCargado === \"00000000\") {\n            if (resultadoTLV_1_palletCargado.startsWith(\"0000\")) {    \n                global.set(\"permitirFinOrdenPEP\", true);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            } else if (resultadoTLV_1_palletCargado === \"0001\") {\n                flow.set('enviarTramapalletCargado', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 270);\n            } else if (resultadoTLV_1_palletCargado === \"0002\") {\n                flow.set('enviarTramapalletCargado', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 270);\n            } else if (resultadoTLV_1_palletCargado === \"0006\") {\n                flow.set('enviarTramapalletCargado', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 270);\n            } else if (global.get('repeatTramaCargaTLV1')) {\n                flow.set('enviarTramapalletCargado', false);\n                global.set('repeatTramaCargaTLV1', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 270);\n            } else if (global.get('abortTramaCargaTLV1')) {\n                flow.set('enviarTramapalletCargado', false);\n                global.set('abortTramaCargaTLV1', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            }\n            break;\n\n\n\n\n        case 280: // 280_FinOrden\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            global.set('resultadoTLV-1_finOrden', \"1111\");\n\n            flow.set('verificarFinOrdenTLV1', true);\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Fin de orden ejecutada.\" });\n            if (flow.get('finOrdenOK')) {\n                flow.set('enviarTramaFinOrden', true);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 285);\n            }\n            break;\n\n        case 285: // 285_enviarTramaFinOrden\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 285);\n\n\n            if (flow.get('tramaFinOrdenEnviada')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 286);\n            }\n            break;\n\n        case 286: // 285_waitRespuestaTramaFinOrden\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 286);\n\n\n            //  global.set(\"eventoLanzadoTLV1\", \"palletCargado\");\n\n\n            let resultadoTLV_1_finOrden = global.get('resultadoTLV-1_finOrden');\n\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            // let finOrdenEstado286 = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\n            // let finOrdenResultado286 = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n            if (resultadoTLV_1_finOrden.startsWith(\"0000\")) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 290);\n            } else if (resultadoTLV_1_finOrden === \"0001\") {\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);;\n            } else if (resultadoTLV_1_finOrden === \"0002\") {\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            } else if (resultadoTLV_1_finOrden === \"0006\") {\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            } else if ( global.get('repeatTramaFinOrdenTLV1')) {\n                global.set('repeatTramaFinOrdenTLV1', false);\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 280);\n            } else if ( global.get('abortTramaFinOrdenTLV1')) {\n                global.set('abortTramaFinOrdenTLV1', false);\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 290);\n            }\n            break;\n\n\n\n        case 290: // 290_FinOrdenEjecutada\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 290);\n            flow.set('verificarFinOrdenTLV1', false);\n            flow.set('finOrdenOK', false);\n            node.warn(\"Orden ejecutada correctamente.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 300);\n            }, 500);\n            break;\n\n        case 300: // 300_ResetVarPLC\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 300);\n            node.status({ fill: \"blue\", shape: \"dot\", text: \"Reseteando variables PLC...\" });\n            flow.set('resetVarOrdenTLV1', true);\n            if (flow.get('variablesreseteadasTLV1')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 310);\n            }\n            break;\n\n        case 310: // 310_ResetVarPLC_OK\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 310);\n            flow.set('resetVarOrdenTLV1', false);\n            flow.set('variablesreseteadasTLV1', false);\n            node.warn(\"Orden ejecutada correctamente.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 900);\n            }, 500);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 1000);\n               \n            }, 500);\n            break;\n\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 1000);\n            if (global.get('stateMachineEventStageTareaGenTLV1') === 20) {\n                global.set('stateMachineEventStageEjecutarTareaTLV1', 0);\n                \n            }\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageEjecutarTareaTLV1', 0);\n          \n    }\n\n    return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2e465b4a51b1045f",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet finOrdenresultado = 0;\nlet finOrdenEstado = 0;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: finOrdenresultado };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: finOrdenEstado };  // Salida 2: pasilloDestino\n\nflow.set('variablesreseteadasTLV1', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "7bf22c6cb8d9d8d0"
            ],
            [
                "4427e417a795d0fb"
            ]
        ]
    },
    {
        "id": "7bf22c6cb8d9d8d0",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "finOrdenresultado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "dd9bb856ba87e8f8"
            ]
        ]
    },
    {
        "id": "dd9bb856ba87e8f8",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"41\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_FIN_ORDEN_RESULTADO\"}",
        "s7Name": "TLV1_FIN_ORDEN_RESULTADO",
        "topic": "",
        "name": "finOrdenResultado",
        "signalSetted": false,
        "x": 1650,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "744efa68a39c62a8",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"101\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"40\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV1_FIN_ORDEN_ESTADO\"}",
        "s7Name": "TLV1_FIN_ORDEN_ESTADO",
        "topic": "",
        "name": "finOrdenEstado",
        "signalSetted": false,
        "x": 1640,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4427e417a795d0fb",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "finOrdenEstado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 780,
        "wires": [
            [
                "744efa68a39c62a8"
            ]
        ]
    },
    {
        "id": "ab58cb6fcaf52060",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "resetOrden",
        "func": "let varPLC = 0;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 860,
        "wires": [
            [
                "d9817943438c0a11"
            ]
        ]
    },
    {
        "id": "d9817943438c0a11",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "tipoOrdenTLV1",
        "mode": "link",
        "links": [
            "c1209f9401fbad4e"
        ],
        "x": 1475,
        "y": 860,
        "wires": []
    },
    {
        "id": "e34c97130daa4357",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "Verify PLC",
        "func": "// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV1\nlet zActual = nuevoRegistroTLV1[\"COORD_Z_ACTUAL\"];\n\n// Inicializamos la variable de flujo TLV1_inPosition en false\nflow.set('PalasAfueraTLV1', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\n\nif (tipoTarea === 'depositoTLV1') {\n    // En depósito, comparar solo la coordenada Z\n    let zOrigenOrden = 1;\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV1 coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('PalasAfueraTLV1', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV1 NO coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('PalasAfueraTLV1', false); // Si no coincide, establecer en false\n    }\n\n} else if (tipoTarea === 'extraccionTLV1') {\n    // En extracción, comparar solo la coordenada Z con un valor fijo de 0\n    let zOrigenOrden = flow.get('z_OrigenOrdenTLV1');  // Z siempre será 0 para extracción\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV1 coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('PalasAfueraTLV1', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV1 NO coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('PalasAfueraTLV1', false); // Si no coincide, establecer en false\n    }\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 3600,
        "wires": [
            []
        ]
    },
    {
        "id": "4b93634ce343ad63",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "00",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 0)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "22bbbba092d0bd95",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1040,
        "wires": [
            [
                "4b93634ce343ad63"
            ]
        ]
    },
    {
        "id": "e5e391d578dc47bd",
        "type": "comment",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "tipoEventoTLV1",
        "info": "global.set(\"eventoLanzadoTLV1\", \"none\" );\n global.set(\"eventoLanzadoTLV1\", \"palletCargado\");\n global.set(\"eventoLanzadoTLV1\", \"finDeposito\");\n global.set(\"eventoLanzadoTLV1\", \"finExtraccion\");\n  global.set(\"eventoLanzadoTLV1\", \"errorDeposito\");\n   global.set(\"eventoLanzadoTLV1\", \"errorExtraccion\");\n\n\n\n\n",
        "x": 600,
        "y": 240,
        "wires": []
    },
    {
        "id": "cbe622010c364e9e",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "da2482f6bc6c9e50",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1410,
        "y": 4760,
        "wires": [
            [
                "7efd0386468308a9"
            ]
        ]
    },
    {
        "id": "3ca6f04947e4d8ef",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "da2482f6bc6c9e50",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV1\nlet tareaTLV1 = global.get('tareaTLV1');\n\nif (!tareaTLV1) {\n    node.warn(\"No se ha encontrado la tarea TLV1.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV1\nlet origen = tareaTLV1.origen;\nlet destino = tareaTLV1.destino;\nlet datosAdicionales = tareaTLV1.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables del PLC relacionadas con el fin de la orden\nlet finOrdenEstado = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n// Verificar los valores de finOrdenEstado y finOrdenResultado\nif (finOrdenResultado === 1 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 1, Estado: 2. Acción 1 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 1 y el estado es 2\n    // Obtener la variable dinámica de operaciones encadenadas para TLV1\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV1\", 2); // Dinámico: indica qué partes enviar para TLV1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\nglobal.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\nglobal.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el fin de movimiento en TLV1\nglobal.set(\"CantidadFinesMov_SIMO_TLV1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV1\", 0);    // Tipo de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV1\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV1\", datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV1\nglobal.set(\"UMA_SIMO_Fin_TLV1\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV1\nglobal.set(\"CodigoError_SIMO_Fin_TLV1\", 0);     // Código de error para el fin de movimiento en TLV1\nglobal.set(\"Auxiliar_SIMO_Fin_TLV1\", 0);        // Auxiliar para el fin de movimiento en TLV1\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV1\", datosAdicionales.tipoContenedor);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV1\", destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV1\nglobal.set(\"YLogica_SIMO_Fin_TLV1\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV1\nglobal.set(\"XLocal_SIMO_Fin_TLV1\", 1);          // Coordenada X local para el fin de movimiento en TLV1\nglobal.set(\"YLocal_SIMO_Fin_TLV1\", 0);         // Coordenada Y local para el fin de movimiento en TLV1\nglobal.set(\"Lado_SIMO_Fin_TLV1\", destino.lado);            // Lado para el fin de movimiento en TLV1\nglobal.set(\"Profundidad_SIMO_Fin_TLV1\", 1);     // Profundidad para el fin de movimiento en TLV1\nglobal.set(\"Pasillo_SIMO_Fin_TLV1\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV1`, 0);    // Variables auxiliares para el fin de movimiento en TLV1\n}\n\n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('TLV1SimoEvent', true); \n    global.set('errorDepositoTLV1', false);\n    global.set('errorExtraccionTLV1', false);\n    flow.set('tramaFinOrdenEnviada', true);\n\n} else if (finOrdenResultado === 2 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 2, Estado: 2. Acción 2 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 2 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV1\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV1\", 2); // Dinámico: indica qué partes enviar para TLV1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\nglobal.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\nglobal.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el fin de movimiento en TLV1\nglobal.set(\"CantidadFinesMov_SIMO_TLV1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV1\", 10);    // Tipo de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV1\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV1\",  datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV1\nglobal.set(\"UMA_SIMO_Fin_TLV1\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV1\nglobal.set(\"CodigoError_SIMO_Fin_TLV1\", 0);     // Código de error para el fin de movimiento en TLV1\nglobal.set(\"Auxiliar_SIMO_Fin_TLV1\", 0);        // Auxiliar para el fin de movimiento en TLV1\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV1\", datosAdicionales.tipoContenedor);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV1\",  destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV1\nglobal.set(\"YLogica_SIMO_Fin_TLV1\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV1\nglobal.set(\"XLocal_SIMO_Fin_TLV1\", 1);          // Coordenada X local para el fin de movimiento en TLV1\nglobal.set(\"YLocal_SIMO_Fin_TLV1\", 0);         // Coordenada Y local para el fin de movimiento en TLV1\nglobal.set(\"Lado_SIMO_Fin_TLV1\", destino.lado);            // Lado para el fin de movimiento en TLV1\nglobal.set(\"Profundidad_SIMO_Fin_TLV1\", 1);     // Profundidad para el fin de movimiento en TLV1\nglobal.set(\"Pasillo_SIMO_Fin_TLV1\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV1`, 0);    // Variables auxiliares para el fin de movimiento en TLV1\n}\n\n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('TLV1SimoEvent', true);\n    global.set('errorDepositoTLV1', false);\n    global.set('errorExtraccionTLV1', false);\n    flow.set('tramaFinOrdenEnviada', true);\n\n   // Establecer las variables globales adicionales según el destino.pasillo\n    let pasillo = destino.pasillo;\n    global.set(`lanzarBusquedaMesaSalida${pasillo}`, true);\n    global.set(`numMovMesaSalida${pasillo}`, datosAdicionales.numeroTransporte);\n    global.set(`umaContenedorMesaSalida${pasillo}`, datosAdicionales.umaContenedor);\n    global.set(`tipoContenedorMesaSalida${pasillo}`, datosAdicionales.tipoContenedor);\n\n\n    \n} else if (finOrdenResultado === 3 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 3, Estado: 2. Acción 3 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 5 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV1\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV1\", 2); // Dinámico: indica qué partes enviar para TLV1\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\nglobal.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\nglobal.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el fin de movimiento en TLV1\nglobal.set(\"CantidadFinesMov_SIMO_TLV1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV1\", 0);    // Tipo de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV1\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV1\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV1\", datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV1\nglobal.set(\"UMA_SIMO_Fin_TLV1\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV1\nglobal.set(\"CodigoError_SIMO_Fin_TLV1\", 1);     // Código de error para el fin de movimiento en TLV1\nglobal.set(\"Auxiliar_SIMO_Fin_TLV1\", 0);        // Auxiliar para el fin de movimiento en TLV1\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV1\", datosAdicionales.tipoContenedor);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV1\", destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV1\nglobal.set(\"YLogica_SIMO_Fin_TLV1\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV1\nglobal.set(\"XLocal_SIMO_Fin_TLV1\", 1);          // Coordenada X local para el fin de movimiento en TLV1\nglobal.set(\"YLocal_SIMO_Fin_TLV1\", 0);         // Coordenada Y local para el fin de movimiento en TLV1\nglobal.set(\"Lado_SIMO_Fin_TLV1\", destino.lado);            // Lado para el fin de movimiento en TLV1\nglobal.set(\"Profundidad_SIMO_Fin_TLV1\", 1);     // Profundidad para el fin de movimiento en TLV1\nglobal.set(\"Pasillo_SIMO_Fin_TLV1\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV1\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV1`, 0);    // Variables auxiliares para el fin de movimiento en TLV1\n}\n   \n   \n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('TLV1SimoEvent', true); \n    global.set('errorDepositoTLV1', true);\n    flow.set('tramaFinOrdenEnviada', true);\n\n} else if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 4, Estado: 2. Acción 4 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 5 y el estado es 2\n    // Obtener la variable dinámica de operaciones encadenadas para TLV1\n    global.set(\"OperacionesEncadenadas_SIMO_TLV1\", 2); // Dinámico: indica qué partes enviar para TLV1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\n    global.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\n    global.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n    // Definir las variables y constantes para el fin de movimiento en TLV1\n    global.set(\"CantidadFinesMov_SIMO_TLV1\", 1);\n    global.set(\"TipoEstacion_SIMO_Fin_TLV1\", 0);    // Tipo de estación para el fin de movimiento en TLV1\n    global.set(\"NumeroEstacion_SIMO_Fin_TLV1\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV1\n    global.set(\"NumeroMovimiento_SIMO_Fin_TLV1\", datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV1\n    global.set(\"UMA_SIMO_Fin_TLV1\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV1\n    global.set(\"CodigoError_SIMO_Fin_TLV1\", 2);     // Código de error para el fin de movimiento en TLV1\n    global.set(\"Auxiliar_SIMO_Fin_TLV1\", 0);        // Auxiliar para el fin de movimiento en TLV1\n    global.set(\"TipoContenedor_SIMO_Fin_TLV1\", datosAdicionales.tipoContenedor);\n    global.set(\"TipoAltura_SIMO_Fin_TLV1\", 1);\n    global.set(\"XLogica_SIMO_Fin_TLV1\", destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV1\n    global.set(\"YLogica_SIMO_Fin_TLV1\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV1\n    global.set(\"XLocal_SIMO_Fin_TLV1\", 1);          // Coordenada X local para el fin de movimiento en TLV1\n    global.set(\"YLocal_SIMO_Fin_TLV1\", 0);         // Coordenada Y local para el fin de movimiento en TLV1\n    global.set(\"Lado_SIMO_Fin_TLV1\", destino.lado);            // Lado para el fin de movimiento en TLV1\n    global.set(\"Profundidad_SIMO_Fin_TLV1\", 1);     // Profundidad para el fin de movimiento en TLV1\n    global.set(\"Pasillo_SIMO_Fin_TLV1\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV1\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Fin_TLV1`, 0);    // Variables auxiliares para el fin de movimiento en TLV1\n    }\n\n\n    // Además, establecer TLV1SimoEvent como true\n    global.set(\"eventoLanzadoTLV-1\", \"finOrden\");\n    global.set('TLV1SimoEvent', true);\n    global.set('errorExtraccionTLV1', true);\n    flow.set('tramaFinOrdenEnviada', true);\n\n} else {\n    node.warn(\"Condiciones no coinciden. Ninguna acción ejecutada.\");\n    flow.set('tramaFinOrdenEnviada', false);\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 4820,
        "wires": [
            [
                "7efd0386468308a9"
            ]
        ]
    },
    {
        "id": "d6cfc6c134840906",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "da2482f6bc6c9e50",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('enviarTramaFinOrden') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('enviarTramaFinOrden', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 4820,
        "wires": [
            [
                "3ca6f04947e4d8ef"
            ]
        ]
    },
    {
        "id": "aa993237c3f7b99b",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "c79daa9e355f0941",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('enviarTramapalletCargado') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('enviarTramapalletCargado', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3920,
        "wires": [
            [
                "4493e1ecc1f3be75"
            ]
        ]
    },
    {
        "id": "4493e1ecc1f3be75",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "c79daa9e355f0941",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV1\nlet tareaTLV1 = global.get('tareaTLV1');\n\nif (!tareaTLV1) {\n    node.warn(\"No se ha encontrado la tarea TLV1.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV1\nlet origen = tareaTLV1.origen;\nlet destino = tareaTLV1.destino;\nlet datosAdicionales = tareaTLV1.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV1\nlet zActual = nuevoRegistroTLV1[\"COORD_Z_ACTUAL\"];\n\n// Inicializamos la variable de flujo palletCargado en false\nflow.set('palletCargado', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\nvar xOrigenOrdenEventocarga = 0;  // X siempre será 999 para deposito\nvar yOrigenOrdenEventocarga = 0;  // Y siempre será 1 para deposito\nvar zOrigenOrdenEventocarga = 0;\n\nif (tipoTarea === 'extraccionTLV1') {\n    // En depósito, comparar solo la coordenada Z\n    var zOrigenOrden = 0;\n\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV1');\n    var xOrigenOrden = flow.get('x_OrigenOrdenTLV1');\n    var yOrigenOrden = flow.get('y_OrigenOrdenTLV1');\n    xOrigenOrdenEventocarga = xOrigenOrden;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = yOrigenOrden;  // Y siempre será 1 para deposito\n     zOrigenOrdenEventocarga = flow.get('z_OrigenOrdenTLV1');\n\n\n\n} else if (tipoTarea === 'depositoTLV1') {\n    // En extracción, comparar solo la coordenada Z con un valor fijo de 0\n    var zOrigenOrden = 0;  // Z siempre será 0 para extracción\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV1');\n    xOrigenOrdenEventocarga = 999;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = 1;  // Y siempre será 1 para deposito\n    zOrigenOrdenEventocarga = 1 ;\n\n\n\n}\n\n// Si palletCargado está en true, ejecutar la lógica adicional\nif (true) {\n    // Definir las variables globales para TLV1\n    global.set(\"OperacionesEncadenadas_SIMO_TLV1\", 1); // Dinámico: indica qué partes enviar para TLV1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\n    global.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\n    global.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n    // Definir las variables y constantes para el evento en TLV1\n    global.set(\"CantidadEventos_SIMO_Event_TLV1\", 1);\n    global.set(\"TipoEstacion_SIMO_Event_TLV1\", 1);  // Tipo de estación TLV1\n    global.set(\"NumeroEstacion_SIMO_Event_TLV1\", 1); // Número de estación TLV1\n    global.set(\"NumeroMovimiento_SIMO_Event_TLV1\", datosAdicionales.numeroTransporte); // Número de movimiento para el evento\n    global.set(\"TipoEvento_SIMO_Event_TLV1\", 1);    // Tipo de evento\n    global.set(\"Flags_SIMO_Event_TLV1\", \"0000065536\");  // Flags para el evento\n    global.set(\"Datos_SIMO_Event_TLV1\", \" \");    // Datos del evento (rellenar con espacios si es necesario)\n    global.set(\"Peso_SIMO_Event_TLV1\", 50);        // Peso para el evento\n    global.set(\"TipoContenedor_SIMO_Event_TLV1\", datosAdicionales.tipoContenedor);\n    global.set(\"TipoAltura_SIMO_Event_TLV1\", 1);\n    global.set(\"XLogica_SIMO_Event_TLV1\", xOrigenOrdenEventocarga);      // Coordenada X lógica para TLV1\n    global.set(\"YLogica_SIMO_Event_TLV1\", yOrigenOrdenEventocarga);      // Coordenada Y lógica para TLV1\n    global.set(\"XLocal_SIMO_Event_TLV1\", 1);        // Coordenada X local para TLV1\n    global.set(\"YLocal_SIMO_Event_TLV1\", 0);       // Coordenada Y local para TLV1\n    global.set(\"Lado_SIMO_Event_TLV1\", zOrigenOrdenEventocarga);          // Lado para TLV1\n    global.set(\"Profundidad_SIMO_Event_TLV1\", 1);   // Profundidad para TLV1\n    global.set(\"Pasillo_SIMO_Event_TLV1\", pasilloOrigenOrden);       // Pasillo para TLV1\n\n    for (let j = 1; j <= 10; j++) {\n        global.set(`Aux0${j}_SIMO_Event_TLV1`, 0);  // Variables auxiliares para el evento en TLV1\n    }\n\n    global.set(\"eventoLanzadoTLV-1\", \"palletCargado\");\n\n        // Generar consulta para actualizar movimientosPIE1\n    msg.topic = `\n        UPDATE movimientosPIE1\n        SET estado = 'finish', fechaFin = NOW()\n        WHERE uma = '${datosAdicionales.umaContenedor}';\n    `;\n\n    // Además, establecer TLV1SimoEvent como true\n    global.set('TLV1SimoEvent', true);  \n    flow.set('tramapalletCargadoEnviada', true);  \n\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 3920,
        "wires": [
            [
                "fe9eb71d6b24a9fc"
            ]
        ]
    },
    {
        "id": "e901de98c5d3c8aa",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "repeatTramaCargaTLV1",
        "func": "global.set('repeatTramaCargaTLV1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "b41fa79a2bbd8c6d",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "e901de98c5d3c8aa"
            ]
        ]
    },
    {
        "id": "212feb6ce863e8c6",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "ef91555f14db3f14"
            ]
        ]
    },
    {
        "id": "ef91555f14db3f14",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "abortTramaCargaTLV1",
        "func": "global.set('abortTramaCargaTLV1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "e37f30d7f45630a7",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "repeatTramaFinOrdenTLV1",
        "func": "global.set('repeatTramaFinOrdenTLV1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "8d1ecfea0ee88933",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "e37f30d7f45630a7"
            ]
        ]
    },
    {
        "id": "ee35652db0666746",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "ee2d7c67b2f6b303"
            ]
        ]
    },
    {
        "id": "ee2d7c67b2f6b303",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "44acbfcd2aaae346",
        "name": "abortTramaFinOrdenTLV1",
        "func": "global.set('abortTramaFinOrdenTLV1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "81d759f7be262aec",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 840,
        "wires": [
            [
                "ea425767eaf116e8"
            ]
        ]
    },
    {
        "id": "ce58781b30f9ba0b",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "12a0ef1926fc4816",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1560,
        "wires": [
            [
                "247a471baf6e5bf7"
            ]
        ]
    },
    {
        "id": "b6dbd5160f6208d5",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "0124a297efefa9ba",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1860,
        "wires": [
            [
                "dee00d32b71fa946"
            ]
        ]
    },
    {
        "id": "bb83bc1ddd229c28",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "02299d2b58578052",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 2320,
        "wires": [
            [
                "22ea6e7c3a52527a"
            ]
        ]
    },
    {
        "id": "884fcf9535a69035",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "f541ac6e36356d65",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 2720,
        "wires": [
            [
                "38d035d3c49c48c6"
            ]
        ]
    },
    {
        "id": "a03103ef9ef3643c",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a070d1a16d0f381d",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3140,
        "wires": [
            [
                "2aa17ffc8888317b"
            ]
        ]
    },
    {
        "id": "8a72e760dfd0f575",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "0a6d5a44c1d6b6e1",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3520,
        "wires": [
            [
                "f618b1ccc138b071"
            ]
        ]
    },
    {
        "id": "484f6d4d7a535018",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "c79daa9e355f0941",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3940,
        "wires": [
            [
                "aa993237c3f7b99b"
            ]
        ]
    },
    {
        "id": "5cf3901f4d3dd3e7",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "4c018e43d1d8ab4e",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 4580,
        "wires": [
            [
                "0a836d6a3c8b53cc"
            ]
        ]
    },
    {
        "id": "ebea21677d319f63",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "da2482f6bc6c9e50",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 4760,
        "wires": [
            [
                "d6cfc6c134840906"
            ]
        ]
    },
    {
        "id": "bfc34fd7c1b99739",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "d0603838c5d0839d",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 4960,
        "wires": [
            [
                "2d8096aec8afe912"
            ]
        ]
    },
    {
        "id": "15a09fa2f8c415ab",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 990,
        "y": 3700,
        "wires": [
            [
                "c57e73dafea09b02"
            ]
        ]
    },
    {
        "id": "c57e73dafea09b02",
        "type": "s7 control",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "endpoint": "2f783281dc55418a",
        "function": "trigger",
        "name": "",
        "x": 1190,
        "y": 3780,
        "wires": [
            [
                "85cc8f59dc254252",
                "5758966931a0dfdb"
            ]
        ]
    },
    {
        "id": "85cc8f59dc254252",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "name": "varTLV1",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\n\n    msg.payload = nuevoRegistroTLV1;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 3720,
        "wires": [
            [
                "b8845db7fdc1fd84"
            ]
        ]
    },
    {
        "id": "b8845db7fdc1fd84",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 3720,
        "wires": []
    },
    {
        "id": "cf4f287f6dbe446d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarPalasAdentroTLV1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarPalasAdentroTLV1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3780,
        "wires": [
            [
                "c57e73dafea09b02"
            ]
        ]
    },
    {
        "id": "5758966931a0dfdb",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV1\nlet tareaTLV1 = global.get('tareaTLV1');\n\nif (!tareaTLV1) {\n    node.warn(\"No se ha encontrado la tarea TLV1.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV1\nlet origen = tareaTLV1.origen;\nlet destino = tareaTLV1.destino;\nlet datosAdicionales = tareaTLV1.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV1\nlet zActual = nuevoRegistroTLV1[\"COORD_Z_ACTUAL\"];\n\n// Inicializamos la variable de flujo palletCargado en false\nflow.set('palletCargado', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\nvar xOrigenOrdenEventocarga = 0;  // X siempre será 999 para deposito\nvar yOrigenOrdenEventocarga = 0;  // Y siempre será 1 para deposito\nvar zOrigenOrdenEventocarga = 0;\n\nif (tipoTarea === 'extraccionTLV1') {\n    // En depósito, comparar solo la coordenada Z\n    var zOrigenOrden = 0;\n\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV1');\n    var xOrigenOrden = flow.get('x_OrigenOrdenTLV1');\n    var yOrigenOrden = flow.get('y_OrigenOrdenTLV1');\n    xOrigenOrdenEventocarga = xOrigenOrden;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = yOrigenOrden;  // Y siempre será 1 para deposito\n     zOrigenOrdenEventocarga = flow.get('z_OrigenOrdenTLV1');\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV1 coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('palletCargado', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV1 NO coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('palletCargado', false); // Si no coincide, establecer en false\n    }\n\n} else if (tipoTarea === 'depositoTLV1') {\n    // En extracción, comparar solo la coordenada Z con un valor fijo de 0\n    var zOrigenOrden = 0;  // Z siempre será 0 para extracción\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV1');\n    xOrigenOrdenEventocarga = 999;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = 1;  // Y siempre será 1 para deposito\n    zOrigenOrdenEventocarga = 1 ;\n\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV1 coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('palletCargado', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV1 NO coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('palletCargado', false); // Si no coincide, establecer en false\n    }\n}\n\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 3820,
        "wires": [
            []
        ]
    },
    {
        "id": "962d8746e39aacdb",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "356a7a7c8875936c",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3740,
        "wires": [
            [
                "cf4f287f6dbe446d"
            ]
        ]
    },
    {
        "id": "720c81f2c6ea2070",
        "type": "mysql",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1490,
        "y": 500,
        "wires": [
            [
                "8948f9be12c87476"
            ]
        ]
    },
    {
        "id": "1fd4f29eb34b5403",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "set",
        "func": "   flow.set('idListoTLV1', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "9ed0b15fe8f17ed8",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaTLV1\nvar tareaTLV1 = global.get('tareaTLV1');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV1 === 'undefined') {\n    node.error(\"Error: tareaTLV1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV1\nvar movNumber = tareaTLV1.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV1.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV1.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion =  tareaTLV1.destino.estacion;\nvar pasillo = tareaTLV1.destino.pasillo; // Siempre tomamos pasillo de destino\n\n// Verificar si movNumber, uma y tipoCont están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof tipoCont === 'undefined') {\n    node.error(\"movNumber, uma o tipoCont no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para la inserción\n\n    msg.topic = `\n        INSERT INTO movimientosTLVsPSPs (estacion, destino, movNumber, uma, pasillo, fechaInicio, aux1)\n        VALUES ('TLV1', '${destinoEstacion}', '${movNumber}', '${uma}', '${pasillo}', NOW(), '${tipoCont}');\n    `;\n\n\n\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 500,
        "wires": [
            [
                "720c81f2c6ea2070"
            ]
        ]
    },
    {
        "id": "3a65de5d4018f9f7",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 520,
        "wires": [
            [
                "1fd2643ba856ecac"
            ]
        ]
    },
    {
        "id": "b99e6df7b450c5a4",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 620,
        "wires": [
            [
                "9ed0b15fe8f17ed8"
            ]
        ]
    },
    {
        "id": "8948f9be12c87476",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "select",
        "func": "// Obtener la tarea desde la variable global tareaTLV1\nvar tareaTLV1 = global.get('tareaTLV1');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV1 === 'undefined') {\n    node.error(\"Error: tareaTLV1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV1\nvar movNumber = tareaTLV1.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV1.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV1.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaTLV1.destino.estacion;\nvar pasillo = tareaTLV1.destino.pasillo; // Siempre tomamos pasillo de destino\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n\n    msg.topic = `\n        SELECT id FROM movimientosTLVsPSPs\n        WHERE movNumber = '${movNumber}' AND uma = '${uma}'\n        ORDER BY id DESC LIMIT 1;\n    `\n\n\nnode.warn(\"Consulta SQL generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "9d7f6801a0377b61"
            ]
        ]
    },
    {
        "id": "9d7f6801a0377b61",
        "type": "mysql",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1470,
        "y": 580,
        "wires": [
            [
                "a560c9cf648671db",
                "9a32b669a386fa52"
            ]
        ]
    },
    {
        "id": "a560c9cf648671db",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "matriculaPLC",
        "func": "if (msg.payload && msg.payload.length > 0) {\n\n    let idEncontrado = msg.payload[0].id;\n\n    flow.set('matActualOrdenTLV1', idEncontrado);\n    node.warn(`ID encontrado: ${idEncontrado}`);\n    \n} else {\n    node.warn(\"No se encontró ningún ID para el movNumber y uma especificados.\");\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "1fd4f29eb34b5403"
            ]
        ]
    },
    {
        "id": "9a32b669a386fa52",
        "type": "debug",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "debug 194",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 540,
        "wires": []
    },
    {
        "id": "1fd2643ba856ecac",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "654365d20111389b",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenTLV1');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenTLV1', false);\n    node.warn(\"Variable 'buscarIdOrdenTLV1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "9ed0b15fe8f17ed8"
            ]
        ]
    },
    {
        "id": "7efd0386468308a9",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "da2482f6bc6c9e50",
        "name": "updateTabla",
        "func": "// Obtener la tarea desde la variable global tareaTLV1\nvar tareaTLV1 = global.get('tareaTLV1');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV1 === 'undefined') {\n    node.error(\"Error: tareaTLV1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV1\nvar movNumber = tareaTLV1.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV1.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV1.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaTLV1.destino.estacion;\nvar pasillo = tareaTLV1.destino.pasillo; // Siempre tomamos pasillo de destino\nvar xOrigen = tareaTLV1.origen.xActual; // \nvar yOrigen = tareaTLV1.origen.yActual; // \nvar ladoOrigen = tareaTLV1.origen.lado; // \nvar xDestino = tareaTLV1.destino.xActual; // \nvar yDestino = tareaTLV1.destino.yActual; // \nvar ladoDestino = tareaTLV1.destino.lado; // \n\n// Obtener el nuevo registro actual del TLV1 desde la variable global\nlet nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables del PLC relacionadas con el fin de la orden\nlet finOrdenEstado = nuevoRegistroTLV1[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV1[\"FIN_ORDEN_RESULTADO\"];\n\n\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\nlet idEncontrado = flow.get('matActualOrdenTLV1'); // Obtener el ID de la variable de flujo\n\n// Verificar si el ID está definido\nif (typeof idEncontrado === 'undefined' || idEncontrado === null) {\n    node.error(\"El ID matActualOrdenTLV1 no está definido\");\n    return null;\n}\n\nif (tipoTarea === 'depositoTLV1') {\n    if (finOrdenResultado === 1 && finOrdenEstado === 2) {\n        // Generar la consulta SQL para actualizar el registro con estado \"finish\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xDestino}', y = '${yDestino}', lado = '${ladoDestino}', estado = 'finish', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    } else if (finOrdenResultado === 3 && finOrdenEstado === 2 ){\n\n        // Generar la consulta SQL para actualizar el registro con estado \"errorDep\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xDestino}', y = '${yDestino}', lado = '${ladoDestino}', estado = 'errorDep', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    }\n\n\n\n\n} else if (tipoTarea === 'extraccionTLV1'  ){\n    if (finOrdenResultado === 2 && finOrdenEstado === 2) {\n        // Generar la consulta SQL para actualizar el registro con estado \"finish\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xOrigen}', y = '${yOrigen}', lado = '${ladoOrigen}', estado = 'finish', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    } else if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n\n        // Generar la consulta SQL para actualizar el registro con estado \"errorDep\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xOrigen}', y = '${yOrigen}', lado = '${ladoOrigen}', estado = 'errorExt', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    }\n} else {\n    return null; // No hacer nada si la tarea no es 'depositoTLV1'\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 4820,
        "wires": [
            [
                "8a1b940313059b79"
            ]
        ]
    },
    {
        "id": "8a1b940313059b79",
        "type": "mysql",
        "z": "a4cf0f9e02a0773d",
        "g": "da2482f6bc6c9e50",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1650,
        "y": 4820,
        "wires": [
            []
        ]
    },
    {
        "id": "aaad1a1145c56974",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "210",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 210)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "d91dad70589682f7",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "aaad1a1145c56974"
            ]
        ]
    },
    {
        "id": "22db820fe2f5471b",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "updateTabla",
        "func": "// Obtener la tarea desde la variable global tareaTLV1\nvar tareaTLV1 = global.get('tareaTLV1');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV1 === 'undefined') {\n    node.error(\"Error: tareaTLV1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV1\nvar movNumber = tareaTLV1.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV1.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV1.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaTLV1.destino.estacion;\nvar pasillo = tareaTLV1.destino.pasillo; // Siempre tomamos pasillo de destino\nvar xOrigen = tareaTLV1.origen.xActual; // \nvar yOrigen = tareaTLV1.origen.yActual; // \nvar ladoOrigen = tareaTLV1.origen.lado; // \nvar xDestino = tareaTLV1.destino.xActual; // \nvar yDestino = tareaTLV1.destino.yActual; // \nvar ladoDestino = tareaTLV1.destino.lado; // \n\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV1Chekeada');\nlet idEncontrado = flow.get('matActualOrdenTLV1'); // Obtener el ID de la variable de flujo\n\n// Verificar si el ID está definido\nif (typeof idEncontrado === 'undefined' || idEncontrado === null) {\n    node.error(\"El ID matActualOrdenTLV1 no está definido\");\n    return null;\n}\n\nif (tipoTarea === 'depositoTLV1') {\n\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xDestino}', y = '${yDestino}', lado = '${ladoDestino}', estado = 'inProcess'\n        WHERE id = ${idEncontrado};\n        `;\n \n  \n  return msg;\n \n} else if (tipoTarea === 'extraccionTLV1'  ){\n   \n        // Generar la consulta SQL para actualizar el registro con estado \"finish\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xOrigen}', y = '${yOrigen}', lado = '${ladoOrigen}', estado = 'inProcess'\n        WHERE id = ${idEncontrado};\n        `;\n  return msg;\n   \n} else {\n    return null; // No hacer nada si la tarea no es 'depositoTLV1'\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 920,
        "wires": [
            [
                "bf3779ce6ab23291"
            ]
        ]
    },
    {
        "id": "bf3779ce6ab23291",
        "type": "mysql",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1730,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "8d4b4e2b606d5d2d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "checkTipoTareaTLV1",
        "func": "// Obtener la tarea almacenada en la variable global \"tareaTLV1\"\nlet tareaTLV1 = global.get(\"tareaTLV1\");\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nvar pasilloActualTLV1 = nuevoRegistroTLV1[\"PASILLO_ACTUAL\"];\nvar pasilloActualTLV2 = nuevoRegistroTLV2[\"PASILLO_ACTUAL\"];\n\nglobal.set(\"eventoLanzadoTLV-1\", \"none\" );\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV1 === 'undefined' || tareaTLV1 === null) {\n    node.warn(\"La tareaTLV1 no está definida\");\n    return msg; // Detenemos la ejecución si no está definida\n}\n\n// Extraer el origen y destino de la tarea\nlet origenEstacion = tareaTLV1.origen.estacion;\nlet destinoEstacion = tareaTLV1.destino.estacion;\n\n// Extraer los pasillos del origen y destino\nlet pasilloOrigen = tareaTLV1.origen.pasillo;\nlet pasilloDestino = tareaTLV1.destino.pasillo;\n\n// Convertir los pasillos a números para comparaciones precisas\nlet pasilloOrigenNum = parseInt(pasilloOrigen, 10);\nlet pasilloDestinoNum = parseInt(pasilloDestino, 10);\n\n// Condición 1: Depósito - Si el origen comienza con \"PEP\" y el destino contiene \"Pasillo\", y los pasillos coinciden\nif (\n    (origenEstacion.startsWith(\"PEP\") || origenEstacion.startsWith(\"TLV\")) &&\n    destinoEstacion.includes(\"Pasillo\") &&\n   // pasilloOrigenNum === pasilloDestinoNum &&\n    pasilloActualTLV1 === pasilloDestinoNum \n) {\n    flow.set('tipoTareaTLV1Chekeada', 'depositoTLV1');\n    node.warn(`Tarea detectada: Depósito. Origen: ${origenEstacion}, Destino: ${destinoEstacion}`);\n}\n\n// Condición 2: Extracción - Si el origen contiene \"Pasillo\" y el destino comienza con \"PSP\", y los pasillos coinciden\nelse if (\n   ( origenEstacion.includes(\"Pasillo\")  || origenEstacion.startsWith(\"TLV\")) &&\n    destinoEstacion.startsWith(\"PSP\") &&\n    pasilloOrigenNum === pasilloDestinoNum &&\n    pasilloActualTLV1 === pasilloDestinoNum\n  \n) {\n    flow.set('tipoTareaTLV1Chekeada', 'extraccionTLV1');\n    node.warn(`Tarea detectada: Extracción. Origen: ${origenEstacion}, Destino: ${destinoEstacion}`);\n}\n\n// Condición 3: Trasbordo - Si el origen contiene \"Pasillo\" y el destino contiene \"Pasillo\", y los pasillos NO coinciden y pasilloActualTLV1 es diferente de destinoEstacion\nelse if (\n    (pasilloActualTLV1 !== pasilloDestinoNum) &&\n    (destinoEstacion.includes(\"Pasillo\") || destinoEstacion.startsWith(\"PSP\")) &&\n    pasilloActualTLV2 !== pasilloDestinoNum\n) {\n    flow.set('tipoTareaTLV1Chekeada', 'trasbordoTLV1');\n    node.warn(`Tarea detectada: Trasbordo. Origen pasillo: ${pasilloActualTLV1}, Destino: ${destinoEstacion}`);\n} \n\n// Si no se cumple ninguna de las condiciones anteriores\nelse {\n    node.warn(\"No se encontró una coincidencia válida para la tarea.\");\n    //global.set('stateMachineEventStageEjecutarTareaTLV1', 900)\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 920,
        "wires": [
            [
                "22db820fe2f5471b",
                "5483e33155899d42"
            ]
        ]
    },
    {
        "id": "fe9eb71d6b24a9fc",
        "type": "mysql",
        "z": "a4cf0f9e02a0773d",
        "g": "c79daa9e355f0941",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1310,
        "y": 3920,
        "wires": [
            []
        ]
    },
    {
        "id": "bc26ec2cc2d96253",
        "type": "mysql",
        "z": "a4cf0f9e02a0773d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1030,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cc0adddb2fdd6497",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "name": "update",
        "func": "// Cambiar el valor de 'x' en el registro con id = 1\n msg.topic = `\n        UPDATE movimientosPIE1\n        SET estado = 'finish', fechaFin = NOW()\n         WHERE id = 4;\n    `;\n\nreturn msg;\n\n\n\n\n   ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 100,
        "wires": [
            [
                "bc26ec2cc2d96253"
            ]
        ]
    },
    {
        "id": "cd9070141590561e",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 100,
        "wires": [
            [
                "cc0adddb2fdd6497"
            ]
        ]
    },
    {
        "id": "5483e33155899d42",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PASILLO_ACTUAL_TLV1",
        "func": "var nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n\nif (typeof nuevoRegistroTLV1 === 'undefined' || nuevoRegistroTLV1 === null) {\n    node.warn(\"No hay datos actuales de TLV1 disponibles.\");\n    return msg;\n}\n// Obtener el pasillo actual del registro TLV1\nvar pasilloActualTLV1 = nuevoRegistroTLV1[\"PASILLO_ACTUAL\"];\n\n// Obtener el tipo de tarea de  TLV1\n var tipoTareaTLV1Chekeada = flow.get('tipoTareaTLV1Chekeada');\n\n\n// Verificar que el pasillo sea un valor válido del 1 al 12\nif (typeof pasilloActualTLV1 === 'number' && pasilloActualTLV1 >= 1 && pasilloActualTLV1 <= 12 && tipoTareaTLV1Chekeada === 'depositoTLV1') {//\n    msg.payload = pasilloActualTLV1; // Establecer el valor del pasillo actual en el payload\n    node.warn(`Pasillo actual detectado: ${pasilloActualTLV1}`); // Mensaje para depuración\n} else {\n    node.error(\"El pasillo actual no es válido o está fuera del rango 1-12.\");\n    msg.payload = 0; // Devolver null si el pasillo no es válido\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1080,
        "wires": [
            [
                "036bba304cfe8655"
            ]
        ]
    },
    {
        "id": "1e5481fba0df9880",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP1\"}",
        "s7Name": "PetAvancePEP1",
        "topic": "",
        "name": "PetAvancePEP1",
        "signalSetted": false,
        "x": 1720,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "9b05092235598dfb",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP1",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1020,
        "wires": [
            [
                "1e5481fba0df9880"
            ]
        ]
    },
    {
        "id": "8b59eb15fdc6e2f9",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"1\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP2\"}",
        "s7Name": "PetAvancePEP2",
        "topic": "",
        "name": "PetAvancePEP2",
        "signalSetted": false,
        "x": 1720,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f51390a1667d5850",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP2",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1060,
        "wires": [
            [
                "8b59eb15fdc6e2f9"
            ]
        ]
    },
    {
        "id": "878d6161a043b841",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"2\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP3\"}",
        "s7Name": "PetAvancePEP3",
        "topic": "",
        "name": "PetAvancePEP3",
        "signalSetted": false,
        "x": 1720,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "246f1eb069331a4a",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP3",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1100,
        "wires": [
            [
                "878d6161a043b841"
            ]
        ]
    },
    {
        "id": "aed3bbfbb58180ac",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"3\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP4\"}",
        "s7Name": "PetAvancePEP4",
        "topic": "",
        "name": "PetAvancePEP4",
        "signalSetted": false,
        "x": 1720,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "6380e79094d86e31",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP4",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1140,
        "wires": [
            [
                "aed3bbfbb58180ac"
            ]
        ]
    },
    {
        "id": "4c099ff7c6e1f5fe",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"4\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP5\"}",
        "s7Name": "PetAvancePEP5",
        "topic": "",
        "name": "PetAvancePEP5",
        "signalSetted": false,
        "x": 1720,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "04af771f049584d4",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP5",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1180,
        "wires": [
            [
                "4c099ff7c6e1f5fe"
            ]
        ]
    },
    {
        "id": "306058b9dc3d6aa4",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"5\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP6\"}",
        "s7Name": "PetAvancePEP6",
        "topic": "",
        "name": "PetAvancePEP6",
        "signalSetted": false,
        "x": 1720,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "d93ff1a8aac9aa3a",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP6",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1220,
        "wires": [
            [
                "306058b9dc3d6aa4"
            ]
        ]
    },
    {
        "id": "ccb6c10a1f99c9d0",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"6\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP7\"}",
        "s7Name": "PetAvancePEP7",
        "topic": "",
        "name": "PetAvancePEP7",
        "signalSetted": false,
        "x": 1720,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "0d543ed990e42150",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP7",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1260,
        "wires": [
            [
                "ccb6c10a1f99c9d0"
            ]
        ]
    },
    {
        "id": "fa06e2759a58f54e",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"2\",\"S7_BitOffset\":\"7\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP8\"}",
        "s7Name": "PetAvancePEP8",
        "topic": "",
        "name": "PetAvancePEP8",
        "signalSetted": false,
        "x": 1720,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "6270ef752e82240d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP8",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1300,
        "wires": [
            [
                "fa06e2759a58f54e"
            ]
        ]
    },
    {
        "id": "80bc84b92494c3f2",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"3\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP9\"}",
        "s7Name": "PetAvancePEP9",
        "topic": "",
        "name": "PetAvancePEP9",
        "signalSetted": false,
        "x": 1720,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "67aa4e138a0bcdf4",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP9",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1340,
        "wires": [
            [
                "80bc84b92494c3f2"
            ]
        ]
    },
    {
        "id": "45ce9ac1411fa402",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"3\",\"S7_BitOffset\":\"1\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP10\"}",
        "s7Name": "PetAvancePEP10",
        "topic": "",
        "name": "PetAvancePEP10",
        "signalSetted": false,
        "x": 1730,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "69f4d8a1ac32ae12",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP10",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1380,
        "wires": [
            [
                "45ce9ac1411fa402"
            ]
        ]
    },
    {
        "id": "98a3707a6b952afd",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"3\",\"S7_BitOffset\":\"2\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP11\"}",
        "s7Name": "PetAvancePEP11",
        "topic": "",
        "name": "PetAvancePEP11",
        "signalSetted": false,
        "x": 1730,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "ef5b5b916ac323fb",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP11",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1420,
        "wires": [
            [
                "98a3707a6b952afd"
            ]
        ]
    },
    {
        "id": "7521e8d4e1397ac1",
        "type": "s7comm write",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"3\",\"S7_BitOffset\":\"3\",\"S7_Quantity\":\"1\",\"S7_Name\":\"PetAvancePEP12\"}",
        "s7Name": "PetAvancePEP12",
        "topic": "",
        "name": "PetAvancePEP12",
        "signalSetted": false,
        "x": 1730,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "6c7dbe742db94a2b",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "PetAvancePEP12",
        "func": "let varPLC = true;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1460,
        "wires": [
            [
                "7521e8d4e1397ac1"
            ]
        ]
    },
    {
        "id": "3145fc1c2e7ed744",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP1",
        "links": [
            "539050d4084dbe34",
            "5f59d18be6d00d97"
        ],
        "x": 1315,
        "y": 1020,
        "wires": [
            [
                "9b05092235598dfb"
            ]
        ]
    },
    {
        "id": "34767641d5ff0051",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP2",
        "links": [
            "2ffb31e8766dedcf",
            "5de9b919dde0848f"
        ],
        "x": 1315,
        "y": 1060,
        "wires": [
            [
                "f51390a1667d5850"
            ]
        ]
    },
    {
        "id": "06dbcc7fd7c5dc6b",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP3",
        "links": [
            "53f6190e09dc0c9d",
            "eac8c4a7943774c7"
        ],
        "x": 1315,
        "y": 1100,
        "wires": [
            [
                "246f1eb069331a4a"
            ]
        ]
    },
    {
        "id": "4ceb02c87d43e0a0",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP4",
        "links": [
            "49ba890f32aba50c",
            "55a7b6b114b7368f"
        ],
        "x": 1315,
        "y": 1140,
        "wires": [
            [
                "6380e79094d86e31"
            ]
        ]
    },
    {
        "id": "e5fbe9424eba984b",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP5",
        "links": [
            "693f647b8b75f53c",
            "fca51beeec475332"
        ],
        "x": 1315,
        "y": 1180,
        "wires": [
            [
                "04af771f049584d4"
            ]
        ]
    },
    {
        "id": "4141f05dde2a069f",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP6",
        "links": [
            "4a089d3a231b84b5",
            "9fbe6c300f8c0126"
        ],
        "x": 1315,
        "y": 1220,
        "wires": [
            [
                "d93ff1a8aac9aa3a"
            ]
        ]
    },
    {
        "id": "dec1a917ea1b2806",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP7",
        "links": [
            "90819666511bdc84",
            "daa6095cb4f9ac5c"
        ],
        "x": 1315,
        "y": 1260,
        "wires": [
            [
                "0d543ed990e42150"
            ]
        ]
    },
    {
        "id": "6e4a7cc95bafb4da",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP8",
        "links": [
            "e9f8526b6915e438",
            "f7edd162868376b9"
        ],
        "x": 1315,
        "y": 1300,
        "wires": [
            [
                "6270ef752e82240d"
            ]
        ]
    },
    {
        "id": "eceb06f1dec2b7bd",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP9",
        "links": [
            "4d905987b9531e1e",
            "92140d4588ce57c9"
        ],
        "x": 1315,
        "y": 1340,
        "wires": [
            [
                "67aa4e138a0bcdf4"
            ]
        ]
    },
    {
        "id": "800e1f67c3e236f9",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP10",
        "links": [
            "5a5a522dd8d5123e",
            "5b3505f0942deeb5"
        ],
        "x": 1315,
        "y": 1380,
        "wires": [
            [
                "69f4d8a1ac32ae12"
            ]
        ]
    },
    {
        "id": "bbd3ad34e6f958b5",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP11",
        "links": [
            "79f8bacbc70c8f79",
            "fb52baf177d2997d"
        ],
        "x": 1315,
        "y": 1420,
        "wires": [
            [
                "ef5b5b916ac323fb"
            ]
        ]
    },
    {
        "id": "0423f8d4065ea597",
        "type": "link in",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP12",
        "links": [
            "c49514b0a7d4c1cc",
            "d504c80c67854e47"
        ],
        "x": 1315,
        "y": 1460,
        "wires": [
            [
                "6c7dbe742db94a2b"
            ]
        ]
    },
    {
        "id": "036bba304cfe8655",
        "type": "switch",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "11",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "12",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 13,
        "x": 970,
        "y": 1320,
        "wires": [
            [
                "539050d4084dbe34"
            ],
            [
                "5de9b919dde0848f"
            ],
            [
                "eac8c4a7943774c7"
            ],
            [
                "49ba890f32aba50c"
            ],
            [
                "fca51beeec475332"
            ],
            [
                "4a089d3a231b84b5"
            ],
            [
                "daa6095cb4f9ac5c"
            ],
            [
                "f7edd162868376b9"
            ],
            [
                "4d905987b9531e1e"
            ],
            [
                "5b3505f0942deeb5"
            ],
            [
                "79f8bacbc70c8f79"
            ],
            [
                "d504c80c67854e47"
            ],
            []
        ]
    },
    {
        "id": "539050d4084dbe34",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP1",
        "mode": "link",
        "links": [
            "3145fc1c2e7ed744"
        ],
        "x": 1175,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5de9b919dde0848f",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP2",
        "mode": "link",
        "links": [
            "34767641d5ff0051"
        ],
        "x": 1215,
        "y": 1160,
        "wires": []
    },
    {
        "id": "eac8c4a7943774c7",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP3",
        "mode": "link",
        "links": [
            "06dbcc7fd7c5dc6b"
        ],
        "x": 1185,
        "y": 1200,
        "wires": []
    },
    {
        "id": "49ba890f32aba50c",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP4",
        "mode": "link",
        "links": [
            "4ceb02c87d43e0a0"
        ],
        "x": 1225,
        "y": 1220,
        "wires": []
    },
    {
        "id": "fca51beeec475332",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP5",
        "mode": "link",
        "links": [
            "e5fbe9424eba984b"
        ],
        "x": 1185,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4a089d3a231b84b5",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP6",
        "mode": "link",
        "links": [
            "4141f05dde2a069f"
        ],
        "x": 1225,
        "y": 1260,
        "wires": []
    },
    {
        "id": "daa6095cb4f9ac5c",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP7",
        "mode": "link",
        "links": [
            "dec1a917ea1b2806"
        ],
        "x": 1195,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f7edd162868376b9",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP8",
        "mode": "link",
        "links": [
            "6e4a7cc95bafb4da"
        ],
        "x": 1235,
        "y": 1320,
        "wires": []
    },
    {
        "id": "4d905987b9531e1e",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP9",
        "mode": "link",
        "links": [
            "eceb06f1dec2b7bd"
        ],
        "x": 1195,
        "y": 1360,
        "wires": []
    },
    {
        "id": "5b3505f0942deeb5",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP10",
        "mode": "link",
        "links": [
            "800e1f67c3e236f9"
        ],
        "x": 1235,
        "y": 1380,
        "wires": []
    },
    {
        "id": "79f8bacbc70c8f79",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP11",
        "mode": "link",
        "links": [
            "bbd3ad34e6f958b5"
        ],
        "x": 1195,
        "y": 1400,
        "wires": []
    },
    {
        "id": "d504c80c67854e47",
        "type": "link out",
        "z": "a4cf0f9e02a0773d",
        "g": "125244da6abe9731",
        "name": "AvPEP12",
        "mode": "link",
        "links": [
            "0423f8d4065ea597"
        ],
        "x": 1245,
        "y": 1440,
        "wires": []
    },
    {
        "id": "57ad313093cf850f",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "palletCargado",
        "func": "flow.set('palletCargado', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "bb43cf10019f6ed8",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 880,
        "wires": [
            [
                "57ad313093cf850f"
            ]
        ]
    },
    {
        "id": "6a3b1932cf833e0d",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "palletCargado",
        "func": "flow.set('PalasAfueraTLV1', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5f3dcb69ef85bb46",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 840,
        "wires": [
            [
                "6a3b1932cf833e0d"
            ]
        ]
    },
    {
        "id": "bd753a7603497845",
        "type": "inject",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 940,
        "wires": [
            [
                "18c9ea24defe0ecb"
            ]
        ]
    },
    {
        "id": "18c9ea24defe0ecb",
        "type": "function",
        "z": "a4cf0f9e02a0773d",
        "g": "a70ffa723cb2968b",
        "name": "260",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV1', 260)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "dea2dfbea43f08ec",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "tareaTLV2",
        "func": "msg.payload = global.get(`tareaTLV2`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1080,
        "wires": [
            [
                "b831a91a719d9604"
            ]
        ]
    },
    {
        "id": "490e1fb725c014a4",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "dea2dfbea43f08ec"
            ]
        ]
    },
    {
        "id": "b831a91a719d9604",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 120",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1080,
        "wires": []
    },
    {
        "id": "7c867d76266369ac",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "00",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV2', 0)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "dabd3f6ce1b061f2",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 680,
        "wires": [
            [
                "7c867d76266369ac"
            ]
        ]
    },
    {
        "id": "8a01ca803b3863f7",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "270",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV2', 270)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "fc80279080e6ab78",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 760,
        "wires": [
            [
                "8a01ca803b3863f7"
            ]
        ]
    },
    {
        "id": "abb732e5d8d3bf4c",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "(`datosListosTLV2`, false);",
        "func": "  global.set(`datosListosTLV2`, false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b6d949fc714f99e4",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 120,
        "wires": [
            [
                "abb732e5d8d3bf4c"
            ]
        ]
    },
    {
        "id": "49b16d3bf363f667",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "900",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV2', 900)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "475e54caa7745954",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "49b16d3bf363f667"
            ]
        ]
    },
    {
        "id": "158e6454a761d6b4",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "tipoDeOrdenTLV2",
        "func": "\n\nmsg.payload = flow.get('tipoDeOrdenTLV2');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 880,
        "wires": [
            [
                "81e6fbc566b0b92d"
            ]
        ]
    },
    {
        "id": "558c24565e31c763",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "pasilloOrigenOrdenTLV2",
        "func": "\n\nmsg.payload = flow.get('pasilloOrigenOrdenTLV2');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 920,
        "wires": [
            [
                "a8c8d769ef4473c2"
            ]
        ]
    },
    {
        "id": "4faced8c733b2d1b",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "x_OrigenOrdenTLV2",
        "func": "\nmsg.payload = flow.get('x_OrigenOrdenTLV2');\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 960,
        "wires": [
            [
                "7a869463678005a3"
            ]
        ]
    },
    {
        "id": "285ec8a0e890d94a",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "tipoTareaTLV2Chekeada",
        "func": "\n msg.payload =  flow.get('tipoTareaTLV2Chekeada');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 840,
        "wires": [
            [
                "d22f72f712b6b3b9"
            ]
        ]
    },
    {
        "id": "cbffa0df87a3f333",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "y_OrigenOrdenTLV2",
        "func": "\n\nmsg.payload = flow.get('y_OrigenOrdenTLV2');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1000,
        "wires": [
            [
                "94c8cae535749cb1"
            ]
        ]
    },
    {
        "id": "7ecdd1c44413b458",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "z_OrigenOrdenTLV2",
        "func": "\n\nmsg.payload = flow.get('z_OrigenOrdenTLV2');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "8ef9e0694ae2833d"
            ]
        ]
    },
    {
        "id": "d22f72f712b6b3b9",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 123",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 840,
        "wires": []
    },
    {
        "id": "81e6fbc566b0b92d",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 124",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 880,
        "wires": []
    },
    {
        "id": "a8c8d769ef4473c2",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 125",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 920,
        "wires": []
    },
    {
        "id": "7a869463678005a3",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 126",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 960,
        "wires": []
    },
    {
        "id": "94c8cae535749cb1",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 127",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8ef9e0694ae2833d",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "debug 128",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1040,
        "wires": []
    },
    {
        "id": "85bc7b08b17742cb",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 940,
        "wires": [
            [
                "285ec8a0e890d94a",
                "158e6454a761d6b4",
                "558c24565e31c763",
                "4faced8c733b2d1b",
                "cbffa0df87a3f333",
                "7ecdd1c44413b458"
            ]
        ]
    },
    {
        "id": "32a67f7478ba30ee",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "5ea914341709e6ad",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV2' está en true\nlet validar = global.get('validarVariablesTareaTLV2');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV2...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   global.set('validarVariablesTareaTLV2', false);\n    node.warn(\"Variable 'validarVariablesTareaTLV2' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV2' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 160,
        "wires": [
            [
                "bbc0b5d2b66f4710"
            ]
        ]
    },
    {
        "id": "bbc0b5d2b66f4710",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "5ea914341709e6ad",
        "name": "validarVariablesTLV2",
        "func": "// Función para validar si las variables cumplen con los criterios establecidos\nfunction validarVariablesTLV2() {\n    let tarea = global.get('tareaTLV2');\n\n    if (!tarea) {\n        node.warn(\"No se ha definido ninguna tarea para TLV2.\");\n        return false;\n    }\n\n    // Validar origen\n    if (parseInt(tarea.origen.xActual) > 1000 || parseInt(tarea.origen.yActual) > 12 ||\n        parseInt(tarea.origen.xLocal) > 1000 || parseInt(tarea.origen.yLocal) > 12 ||\n        parseInt(tarea.origen.lado) > 2 || parseInt(tarea.origen.pasillo) > 12 ||\n        parseInt(tarea.origen.profundidad) > 12) {\n        node.warn(\"Error: Valores de origen fuera de rango en tareaTLV2.\");\n        return false;\n    }\n\n    // Validar destino\n    if (parseInt(tarea.destino.xActual) > 1000 || parseInt(tarea.destino.yActual) > 12 ||\n        parseInt(tarea.destino.xLocal) > 1000 || parseInt(tarea.destino.yLocal) > 12 ||\n        parseInt(tarea.destino.lado) > 2 || parseInt(tarea.destino.pasillo) > 13 ||\n        parseInt(tarea.destino.profundidad) > 12) {\n        node.warn(\"Error: Valores de destino fuera de rango en tareaTLV2.\");\n        return false;\n    }\n\n    // Validar que destino.estacion solo puede ser \"REJ1\" o entre \"PEP1\" y \"PEP12\"\n    const validDestinos = ['REJ1', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12'];\n    if (!validDestinos.includes(tarea.destino.estacion)) {\n        node.warn(`Error: Estación de destino no válida (${tarea.destino.estacion}) en tareaTLV2.`);\n        return false;\n    }\n\n    // Validar datosAdicionales\n    if (tarea.datosAdicionales.numeroTransporte === \"\" || tarea.datosAdicionales.umaContenedor === \"\" ||\n        tarea.datosAdicionales.tipoContenedor === \"\" || tarea.datosAdicionales.tipoAltura === \"\") {\n        node.warn(\"Error: Datos adicionales incompletos en tareaTLV2.\");\n        return false;\n    }\n\n    // Validar que tipoContenedor y tipoAltura no pueden ser mayores que 2\n    if (parseInt(tarea.datosAdicionales.tipoContenedor) > 2 || parseInt(tarea.datosAdicionales.tipoAltura) > 2) {\n        node.warn(\"Error: Tipo de contenedor o tipo de altura no válido (mayor que 2) en tareaTLV2.\");\n        return false;\n    }\n\n    node.warn(\"Todas las variables son válidas para TLV2.\");\n    return true;  // Si todas las validaciones pasan, retornamos true\n}\n\n// Ejecutar la validación y actualizar las variables globales\nif (validarVariablesTLV2()) {\n    global.set('variablesValidadasTareaTLV2', true);  // Set to true if validation passes\n    global.set('variablesErroneasTareaTLV2', false);  // Ensure the error flag is false\n    node.warn(\"Validación exitosa: variablesValidadasTareaTLV2 = true\");\n} else {\n    global.set('variablesValidadasTareaTLV2', false);  // Set to false if validation fails\n    global.set('variablesErroneasTareaTLV2', true);  // Set error flag if validation fails\n    node.warn(\"Validación fallida: variablesErroneasTareaTLV2 = true\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8d5bb641d09138df",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV2' está en true\nlet validar = flow.get('checkTipoTareaTLV2');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV2...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('checkTipoTareaTLV2', false);\n  node.warn(\"Variable 'checkTipoTareaTLV2' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV2' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 740,
        "wires": [
            [
                "79a6863fad295f71",
                "ea1a8d54be09f315",
                "2adceef1879aee75"
            ]
        ]
    },
    {
        "id": "c7eeff13580e91cf",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "36465cac5e18f83e",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('escribirVariablesIntermedias');\n\n\nif (validar) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesIntermedias', false);\n  flow.set('escribirVariablesExtraccion', false);\n  flow.set('escribirVariablesDeposito', false);\n  flow.set('escribirVariablesTrasbordo', false);\n  node.warn(\"Variables '' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1500,
        "wires": [
            [
                "f20a84dbc59f012b"
            ]
        ]
    },
    {
        "id": "f20a84dbc59f012b",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "36465cac5e18f83e",
        "name": "checkTipoTareaTLV2",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV2\nlet tareaTLV2 = global.get('tareaTLV2');\n\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\n// Obtener la tarea almacenada en la variable global \"tareaTLV1\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nvar pasilloActualTLV1 = nuevoRegistroTLV1[\"PASILLO_ACTUAL\"];\nvar pasilloActualTLV2 = nuevoRegistroTLV2[\"PASILLO_ACTUAL\"];\n\nif (!tareaTLV2) {\n    node.warn(\"No se ha encontrado la tarea TLV2.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV2\nlet origen = tareaTLV2.origen;\nlet destino = tareaTLV2.destino;\nlet datosAdicionales = tareaTLV2.datosAdicionales;\n// Extraer el origen y destino de la tarea\nlet origenEstacion = tareaTLV2.origen.estacion;\nlet destinoEstacion = tareaTLV2.destino.estacion;\n\n// Convertir las propiedades a enteros\norigen.xActual = parseInt(origen.xActual, 10);\norigen.yActual = parseInt(origen.yActual, 10);\norigen.xLocal = parseInt(origen.xLocal, 10);\norigen.yLocal = parseInt(origen.yLocal, 10);\norigen.lado = parseInt(origen.lado, 10);\norigen.pasillo = parseInt(origen.pasillo, 10);\norigen.profundidad = parseInt(origen.profundidad, 10);\n\ndestino.xActual = parseInt(destino.xActual, 10);\ndestino.yActual = parseInt(destino.yActual, 10);\ndestino.xLocal = parseInt(destino.xLocal, 10);\ndestino.yLocal = parseInt(destino.yLocal, 10);\ndestino.lado = parseInt(destino.lado, 10);\ndestino.pasillo = parseInt(destino.pasillo, 10);\ndestino.profundidad = parseInt(destino.profundidad, 10);\n\n// Asignar valores a las variables de flujo según el tipo de tarea\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada'); // Obtiene el tipo de tarea\nlet matAsignadaExtraccionTLV2 = global.get('matAsignadaExtraccionTLV2') || 0; // Obtener matrícula asignada para extracción\n\n// Asignar los valores a las variables de flujo intermedias según el tipo de tarea\nfunction asignarValoresAFlujoTLV2(origen, destino, tipoTarea, matAsignadaExtraccionTLV2) {\n    if (tipoTarea === 'trasbordoTLV2') {\n        // Asignar valores de trasbordo\n        flow.set('tipoDeOrdenTLV2', 3); // Trasbordo\n        flow.set('pasilloOrigenOrdenTLV2', pasilloActualTLV2);\n        flow.set('x_OrigenOrdenTLV2', 0);\n        flow.set('y_OrigenOrdenTLV2', 0);\n        flow.set('z_OrigenOrdenTLV2', 0);\n\n        flow.set('pasilloDestinoOrdenTLV2', destino.pasillo);\n        flow.set('x_DestinoOrdenTLV2', 0);\n        flow.set('y_DestinoOrdenTLV2', 0);\n        flow.set('z_DestinoOrdenTLV2', 0);\n\n        // Matricula y otras variables en 0\n        flow.set('mat_OrdenTLV2', 0);\n\n        flow.set('variablesIntermediasEscritas', true);\n    }\n    else if (tipoTarea === 'depositoTLV2') {\n        // Asignar valores de depósito\n        flow.set('tipoDeOrdenTLV2', 1); // Depósito\n        flow.set('pasilloDestinoOrdenTLV2', destino.pasillo);\n        flow.set('x_DestinoOrdenTLV2', destino.xActual);\n        flow.set('y_DestinoOrdenTLV2', destino.yActual);\n        flow.set('z_DestinoOrdenTLV2', destino.lado);\n\n        // Origen en 0\n        flow.set('pasilloOrigenOrdenTLV2', pasilloActualTLV2);\n        flow.set('x_OrigenOrdenTLV2', 0);\n        flow.set('y_OrigenOrdenTLV2', 0);\n        flow.set('z_OrigenOrdenTLV2', 0);\n\n        // Matricula en 0\n        flow.set('mat_OrdenTLV2', flow.get('matActualOrdenTLV2'));\n\n        flow.set('variablesIntermediasEscritas', true);\n    }\n    else if (tipoTarea === 'extraccionTLV2') {\n        // Asignar valores de extracción\n        flow.set('tipoDeOrdenTLV2', 2); // Extracción\n        flow.set('pasilloOrigenOrdenTLV2', origen.pasillo);\n      //  if (origenEstacion.startsWith(\"TLV\")) {\n      //      flow.set('x_OrigenOrdenTLV2', 0);\n      //      flow.set('y_OrigenOrdenTLV2', 0);\n      //      flow.set('z_OrigenOrdenTLV2', 0);\n     //   } else {\n            flow.set('x_OrigenOrdenTLV2', origen.xActual);\n            flow.set('y_OrigenOrdenTLV2', origen.yActual);\n            flow.set('z_OrigenOrdenTLV2', origen.lado);\n\n    //    }\n\n        // Usar la matrícula asignada globalmente\n        flow.set('mat_OrdenTLV2', flow.get('matActualOrdenTLV2')); // matAsignadaExtraccionTLV2\n\n        // Destino en 0\n        flow.set('pasilloDestinoOrdenTLV2', destino.pasillo);\n        flow.set('x_DestinoOrdenTLV2', 0);\n        flow.set('y_DestinoOrdenTLV2', 0);\n        flow.set('z_DestinoOrdenTLV2', 0);\n\n        flow.set('variablesIntermediasEscritas', true);\n    }\n}\n\n// Asignar los valores según el tipo de tarea\nasignarValoresAFlujoTLV2(origen, destino, tipoTarea, matAsignadaExtraccionTLV2);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "308efea0509ef7f3",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 1680,
        "wires": [
            [
                "0e1ddadd66b3a1be"
            ]
        ]
    },
    {
        "id": "0e1ddadd66b3a1be",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet tipoDeOrden = flow.get('tipoDeOrdenTLV2');\nlet pasilloDestino = flow.get('pasilloDestinoOrdenTLV2');\nlet x_Destino = flow.get('x_DestinoOrdenTLV2');\nlet y_Destino = flow.get('y_DestinoOrdenTLV2');\nlet z_Destino = flow.get('z_DestinoOrdenTLV2');\nlet pasilloOrigen = flow.get('pasilloOrigenOrdenTLV2');\nlet x_Origen = flow.get('x_OrigenOrdenTLV2');\nlet y_Origen = flow.get('y_OrigenOrdenTLV2');\nlet z_Origen = flow.get('z_OrigenOrdenTLV2');\nlet matricula = flow.get('mat_OrdenTLV2');\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: tipoDeOrden };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: pasilloDestino };  // Salida 2: pasilloDestino\nlet msg3 = { payload: x_Destino };       // Salida 3: x_Destino\nlet msg4 = { payload: y_Destino };       // Salida 4: y_Destino\nlet msg5 = { payload: z_Destino };       // Salida 5: z_Destino\nlet msg6 = { payload: pasilloOrigen };   // Salida 6: pasilloOrigen\nlet msg7 = { payload: x_Origen };        // Salida 7: x_Origen\nlet msg8 = { payload: y_Origen };        // Salida 8: y_Origen\nlet msg9 = { payload: z_Origen };        // Salida 9: z_Origen\nlet msg10 = { payload: matricula };      // Salida 10: matricula\n\n\n\n\n\nflow.set('variablesOrdenTLV2_PLCEscritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2, msg3, msg4, msg5, msg6, msg7, msg8, msg9, msg10];\n",
        "outputs": 10,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1920,
        "wires": [
            [],
            [
                "479c29050efeac7b"
            ],
            [
                "2385def350540c86"
            ],
            [
                "0ee8c863a2bc5c68"
            ],
            [
                "e1c37cd8a71d5d68"
            ],
            [
                "c7ecf0550fc4697c"
            ],
            [
                "86f9702b9872998c"
            ],
            [
                "9fab1ac820f11852"
            ],
            [
                "3a0fee5e96d2f22f"
            ],
            [
                "eecb91d3a0caa786"
            ]
        ]
    },
    {
        "id": "eee407ea594f845e",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "Start",
        "func": "\nlet stateFSM = global.get('stateMachineEventStageEjecutarTareaTLV2');\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVarToPLC_OrdenTLV2') === true ) {///&& (stateFSM === 160 )\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVarToPLC_OrdenTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1760,
        "wires": [
            [
                "0e1ddadd66b3a1be"
            ]
        ]
    },
    {
        "id": "4e0984d89a0faa83",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 1190,
        "y": 1680,
        "wires": [
            [
                "479c29050efeac7b",
                "2385def350540c86",
                "0ee8c863a2bc5c68",
                "e1c37cd8a71d5d68",
                "c7ecf0550fc4697c",
                "86f9702b9872998c",
                "9fab1ac820f11852",
                "3a0fee5e96d2f22f",
                "eecb91d3a0caa786"
            ]
        ]
    },
    {
        "id": "479c29050efeac7b",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "pasilloDestino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1760,
        "wires": [
            [
                "619410ab83e5cf19"
            ]
        ]
    },
    {
        "id": "babaf8da56832b50",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "variablesOrdenTLV2_PLCEscritas",
        "func": "flow.set(\"variablesOrdenTLV2_PLCEscritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "619410ab83e5cf19",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"27\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_PASILLO_DESTINO\"}",
        "s7Name": "TLV2_ORDEN_PASILLO_DESTINO",
        "topic": "",
        "name": "pasilloDestino ",
        "signalSetted": false,
        "x": 1640,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "84a79f13f593674f",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"28\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_X_DESTINO\"}",
        "s7Name": "TLV2_ORDEN_X_DESTINO",
        "topic": "",
        "name": "x_Destino ",
        "signalSetted": false,
        "x": 1620,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "2385def350540c86",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "x_Destino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1800,
        "wires": [
            [
                "84a79f13f593674f"
            ]
        ]
    },
    {
        "id": "0ee8c863a2bc5c68",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "y_Destino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1840,
        "wires": [
            [
                "e8860c8c1d9cbad5"
            ]
        ]
    },
    {
        "id": "e1c37cd8a71d5d68",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "z_Destino ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1880,
        "wires": [
            [
                "60af90e25fc911e1"
            ]
        ]
    },
    {
        "id": "c7ecf0550fc4697c",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "pasilloOrigen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1920,
        "wires": [
            [
                "76eb30e8cfd0d057"
            ]
        ]
    },
    {
        "id": "86f9702b9872998c",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "x_Origen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1960,
        "wires": [
            [
                "3441211f12e52e51"
            ]
        ]
    },
    {
        "id": "9fab1ac820f11852",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "y_Origen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2000,
        "wires": [
            [
                "646fd36341a3519d"
            ]
        ]
    },
    {
        "id": "3a0fee5e96d2f22f",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "z_Origen ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2040,
        "wires": [
            [
                "903982ffa41fc705"
            ]
        ]
    },
    {
        "id": "eecb91d3a0caa786",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "matricula ",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2080,
        "wires": [
            [
                "babaf8da56832b50",
                "3950d327e53dd624"
            ]
        ]
    },
    {
        "id": "e8860c8c1d9cbad5",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"29\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_Y_DESTINO\"}",
        "s7Name": "TLV2_ORDEN_Y_DESTINO",
        "topic": "",
        "name": "y_Destino ",
        "signalSetted": false,
        "x": 1620,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "60af90e25fc911e1",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"30\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_Z_DESTINO\"}",
        "s7Name": "TLV2_ORDEN_Z_DESTINO",
        "topic": "",
        "name": "z_Destino ",
        "signalSetted": false,
        "x": 1620,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "76eb30e8cfd0d057",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"22\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_PASILLO_ORIGEN\"}",
        "s7Name": "TLV2_ORDEN_PASILLO_ORIGEN",
        "topic": "",
        "name": "pasilloOrigen ",
        "signalSetted": false,
        "x": 1630,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "3441211f12e52e51",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"23\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_X_ORIGEN\"}",
        "s7Name": "TLV2_ORDEN_X_ORIGEN",
        "topic": "",
        "name": "x_Origen ",
        "signalSetted": false,
        "x": 1620,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "646fd36341a3519d",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"24\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_Y_ORIGEN\"}",
        "s7Name": "TLV2_ORDEN_Y_ORIGEN",
        "topic": "",
        "name": "y_Origen ",
        "signalSetted": false,
        "x": 1620,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "903982ffa41fc705",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"25\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_Z_ORIGEN\"}",
        "s7Name": "TLV2_ORDEN_Z_ORIGEN",
        "topic": "",
        "name": "z_Origen",
        "signalSetted": false,
        "x": 1620,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "3950d327e53dd624",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"I\",\"S7_Offset\":\"32\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_MATRICULA\"}",
        "s7Name": "TLV2_ORDEN_MATRICULA",
        "topic": "",
        "name": "matricula ",
        "signalSetted": false,
        "x": 1620,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "265b5d6c8ce3f162",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 990,
        "y": 2300,
        "wires": [
            [
                "dbbc9a657c57a158"
            ]
        ]
    },
    {
        "id": "b0dccfadec91ae71",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "Verify PLC",
        "func": "// Capturar variables de flujo\n//var tipoDeOrden = flow.get('tipoDeOrdenTLV2');\nvar pasilloDestino = flow.get('pasilloDestinoOrdenTLV2');\nvar x_Destino = flow.get('x_DestinoOrdenTLV2');\nvar y_Destino = flow.get('y_DestinoOrdenTLV2');\nvar z_Destino = flow.get('z_DestinoOrdenTLV2');\nvar pasilloOrigen = flow.get('pasilloOrigenOrdenTLV2');\nvar x_Origen = flow.get('x_OrigenOrdenTLV2');\nvar y_Origen = flow.get('y_OrigenOrdenTLV2');\nvar z_Origen = flow.get('z_OrigenOrdenTLV2');\nvar matricula = flow.get('mat_OrdenTLV2');\n\n// Capturar las variables PLC desde la variable global\nvar variablesPLC = global.get('nuevoRegistroTLV2');\n\n// Comparar variables de flujo con las variables del PLC\nvar coinciden = true;\n\nif (pasilloOrigen !== variablesPLC[\"PASILLO_ORIGEN\"]) {\n    coinciden = false;\n}\nif (x_Origen !== variablesPLC[\"COORD_X_ORIGEN\"]) {\n    coinciden = false;\n}\nif (y_Origen !== variablesPLC[\"COORD_Y_ORIGEN\"]) {\n    coinciden = false;\n}\nif (z_Origen !== variablesPLC[\"COORD_Z_ORIGEN\"]) {\n    coinciden = false;\n}\nif (pasilloDestino !== variablesPLC[\"PASILLO_DESTINO\"]) {\n    coinciden = false;\n}\nif (x_Destino !== variablesPLC[\"COORD_X_DESTINO\"]) {\n    coinciden = false;\n}\nif (y_Destino !== variablesPLC[\"COORD_Y_DESTINO\"]) {\n    coinciden = false;\n}\nif (z_Destino !== variablesPLC[\"COORD_Z_DESTINO\"]) {\n    coinciden = false;\n}\n//if (matricula !== variablesPLC[\"MATRICULA\"]) {\n ////   coinciden = false;\n//}\n\n// Actualizar las variables de flujo basadas en el resultado de la comparación\nif (coinciden) {\n    flow.set('DatosPlcCorrectosTLV2', true);\n    flow.set('DatosIncorrectosPlcTLV2', false);\n    msg = { payload: \"Las variables coinciden con las del PLC\" };\n} else {\n    flow.set('DatosPlcCorrectosTLV2', false);\n    flow.set('DatosIncorrectosPlcTLV2', true);\n    msg = { payload: \"Las variables no coinciden con las del PLC\" };\n}\n\n// Retornar el resultado\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "dbbc9a657c57a158",
        "type": "s7 control",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "endpoint": "d41610ee1fc6122f",
        "function": "trigger",
        "name": "",
        "x": 1190,
        "y": 2380,
        "wires": [
            [
                "0e5d3547941a8d9a",
                "b0dccfadec91ae71"
            ]
        ]
    },
    {
        "id": "0e5d3547941a8d9a",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "nuevoRegistroTLV2",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\n\n    msg.payload = nuevoRegistroTLV2;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2320,
        "wires": [
            [
                "de3131cbbf826f8d"
            ]
        ]
    },
    {
        "id": "de3131cbbf826f8d",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "varPES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 2320,
        "wires": []
    },
    {
        "id": "84713a822553e94e",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarVarToPLC_OrdenTLV2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarVarToPLC_OrdenTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2380,
        "wires": [
            [
                "dbbc9a657c57a158"
            ]
        ]
    },
    {
        "id": "263a08859e97f433",
        "type": "delay",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 2420,
        "wires": [
            [
                "b0dccfadec91ae71"
            ]
        ]
    },
    {
        "id": "bf6f168d93b09992",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 970,
        "y": 2520,
        "wires": [
            [
                "86660feefd9f8803"
            ]
        ]
    },
    {
        "id": "86660feefd9f8803",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "ejecutar orden PLC",
        "func": "let tipoOrdenTLV2 = flow.get(\"tipoDeOrdenTLV2\");\n\nmsg.payload = { \"value\":[tipoOrdenTLV2] }\n flow.set('ordenEjecutadaTareaTLV2', false);\n return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 2620,
        "wires": [
            [
                "9928a8099a407c09",
                "6ff1b221bb5d6344"
            ]
        ]
    },
    {
        "id": "c5ee7d8a613e6610",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "Start",
        "func": "let stateFSM = global.get('stateMachineEventStageEjecutarTareaTLV2');\n\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif ((flow.get('escribirVarToPLC_EjecutarOrdenTLV2') === true)  && (stateFSM === 200)) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('escribirVarToPLC_EjecutarOrdenTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2600,
        "wires": [
            [
                "86660feefd9f8803"
            ]
        ]
    },
    {
        "id": "969b77e231042c8a",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"20\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_ORDEN_TIPO\"}",
        "s7Name": "TLV2_ORDEN_TIPO",
        "topic": "",
        "name": "tipoOrdenTLV2",
        "signalSetted": false,
        "x": 1600,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "833a9270f98d9ede",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " { \"value\":[1] }",
        "payloadType": "json",
        "x": 1570,
        "y": 2540,
        "wires": [
            [
                "969b77e231042c8a"
            ]
        ]
    },
    {
        "id": "9928a8099a407c09",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "ordenEjecutadaTareaTLV2",
        "func": " flow.set('ordenEjecutadaTareaTLV2', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "0f1360f95b32d74c",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1600,
        "y": 2820,
        "wires": [
            [
                "9928a8099a407c09"
            ]
        ]
    },
    {
        "id": "ca0d3f49f0bfe60d",
        "type": "link in",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "tipoOrdenTLV1",
        "links": [
            "6ff1b221bb5d6344",
            "9235551353f05d0e",
            "14ebaffe7938c44f"
        ],
        "x": 1415,
        "y": 2580,
        "wires": [
            [
                "969b77e231042c8a"
            ]
        ]
    },
    {
        "id": "6ff1b221bb5d6344",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "tipoOrdenTLV1",
        "mode": "link",
        "links": [
            "ca0d3f49f0bfe60d"
        ],
        "x": 1275,
        "y": 2540,
        "wires": []
    },
    {
        "id": "77f31bfe32169290",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 990,
        "y": 2980,
        "wires": [
            [
                "e91f1f6df4fcd804"
            ]
        ]
    },
    {
        "id": "3237ba3fa6176ace",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "name": "Verify PLC",
        "func": "// Obtener el nuevo registro actual del TLV2 desde la letiable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener las letiables del traslo desde nuevoRegistroTLV2\nlet pasilloActual = nuevoRegistroTLV2[\"PASILLO_ACTUAL\"];\nlet xActual = nuevoRegistroTLV2[\"COORD_X_ACTUAL\"];\nlet yActual = nuevoRegistroTLV2[\"COORD_Y_ACTUAL\"];\nlet zActual = nuevoRegistroTLV2[\"COORD_Z_ACTUAL\"];\nlet matriculaActual = nuevoRegistroTLV2[\"MATRICULA_ACTUAL\"];\n\n// Inicializamos la letiable de flujo TLV2_inPosition en false\nflow.set('TLV2_inPosition', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada');\n\nif (tipoTarea === 'extraccionTLV2') {\n    // En depósito, comparar la posición actual del traslo con las letiables del destino (origen en este caso)\n   // let pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV2');\n    let xOrigenOrden = flow.get('x_OrigenOrdenTLV2');\n    let yOrigenOrden = flow.get('y_OrigenOrdenTLV2');\n   // let zOrigenOrden = 0;\n\n\n    \n    if (//pasilloActual === pasilloOrigenOrden &&\n        xActual === xOrigenOrden &&\n        yActual === yOrigenOrden) {\n       // zActual === zOrigenOrden) {\n        node.warn(\"La posición actual del TLV2 coincide con el destino de la tarea de extraccion.\");\n        flow.set('TLV2_inPosition', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La posición actual del TLV2 NO coincide con el destino de la tarea de extraccion.\");\n        flow.set('TLV2_inPosition', false); // Si no coincide, establecer en false\n    }\n\n} else if (tipoTarea === 'depositoTLV2') {\n    // En extracción, comparar la posición actual del traslo con las letiables del origen. Asignamos valores fijos a X, Y y Z según lo indicado.\n    //let pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV2');\n    let xOrigenOrden = 0;  // X siempre será 0 para deposito \n    let yOrigenOrden = 8;  // Y siempre será 8 para deposito\n    let zOrigenOrden = 0;  // Z siempre será 0 para deposito\n    let xOrigenOrdenEventocarga = 999;  // X siempre será 999 para deposito\n    let yOrigenOrdenEventocarga = 1;  // Y siempre será 1 para deposito\n    \n    if (//pasilloActual === pasilloOrigenOrden &&\n        xActual === xOrigenOrden &&\n        yActual === yOrigenOrden &&\n        zActual === zOrigenOrden) {\n        node.warn(\"La posición actual del TLV2 coincide con el origen de la tarea de deposito.\");\n        flow.set('TLV2_inPosition', true); // Si coincide, establecer en true\n    } else {\n        //node.warn(\"La posición actual del TLV2 NO coincide con el origen de la tarea de extracción.\");\n        flow.set('TLV2_inPosition', false); // Si no coincide, establecer en false\n    }\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "e91f1f6df4fcd804",
        "type": "s7 control",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "endpoint": "d41610ee1fc6122f",
        "function": "trigger",
        "name": "",
        "x": 1190,
        "y": 3060,
        "wires": [
            [
                "2682633c132fbe79",
                "3237ba3fa6176ace"
            ]
        ]
    },
    {
        "id": "2682633c132fbe79",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "name": "varTLV2",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\n\n    msg.payload = nuevoRegistroTLV2;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 3000,
        "wires": [
            [
                "fb28c53aa8118dc9"
            ]
        ]
    },
    {
        "id": "fb28c53aa8118dc9",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 3000,
        "wires": []
    },
    {
        "id": "1846eb6d2d2928f1",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarPosicionActualTLV2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarPosicionActualTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3060,
        "wires": [
            [
                "e91f1f6df4fcd804"
            ]
        ]
    },
    {
        "id": "83a8f21c28159991",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 3160,
        "wires": [
            [
                "4e42699baea02063"
            ]
        ]
    },
    {
        "id": "c61468bb0ac7de55",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "name": "Verify PLC",
        "func": "// Obtener el nuevo registro actual del TLV2 desde la variable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV2\nlet zActual = nuevoRegistroTLV2[\"COORD_Z_ACTUAL\"];\nlet finOrdenEstado = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n// Inicializamos la variable de flujo TLV2_inPosition en false\nflow.set('PalasAfueraTLV2', false);\nglobal.set('errorDepositoTLV2', false);\nglobal.set('errorExtraccionTLV2', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada');\n\nif (tipoTarea === 'depositoTLV2') {\n    // En depósito, comparar solo la coordenada Z\n    let zOrigenOrden = 1;\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV2 coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('PalasAfueraTLV2', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV2 NO coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('PalasAfueraTLV2', false); // Si no coincide, establecer en false\n    }\n\n        // Condición de error para depósito: finOrdenResultado = 3 y finOrdenEstado = 2\n    if (finOrdenResultado === 3 && finOrdenEstado === 2) {\n        node.warn(\"Error en tarea de depósito detectado. Resultado: 3, Estado: 2.\");\n        global.set('errorDepositoTLV2', true); // Establecer error en depósito\n    }\n\n} else if (tipoTarea === 'extraccionTLV2') {\n    // En extracción, comparar solo la coordenada Z con un valor fijo de 0\n    let zOrigenOrden = flow.get('z_OrigenOrdenTLV2');  // Z siempre será 0 para extracción\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV2 coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('PalasAfueraTLV2', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV2 NO coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('PalasAfueraTLV2', false); // Si no coincide, establecer en false\n    }\n        // Condición de error para extracción: finOrdenResultado = 4 y finOrdenEstado = 2\n    if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n        node.warn(\"Error en tarea de extracción detectado. Resultado: 4, Estado: 2.\");\n        global.set('errorExtraccionTLV2', true); // Establecer error en extracción\n    }\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "4e42699baea02063",
        "type": "s7 control",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "endpoint": "d41610ee1fc6122f",
        "function": "trigger",
        "name": "",
        "x": 1210,
        "y": 3240,
        "wires": [
            [
                "23209614625cb266",
                "c61468bb0ac7de55"
            ]
        ]
    },
    {
        "id": "23209614625cb266",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "name": "varTLV1",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\n\n    msg.payload = nuevoRegistroTLV2;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 3180,
        "wires": [
            [
                "8a08d3975eaeff8f"
            ]
        ]
    },
    {
        "id": "8a08d3975eaeff8f",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 3180,
        "wires": []
    },
    {
        "id": "fbebc098ece054ae",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarPalasAfueraTLV2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarPalasAfueraTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3240,
        "wires": [
            [
                "4e42699baea02063"
            ]
        ]
    },
    {
        "id": "4b5d039b1fe2460c",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 3360,
        "wires": [
            [
                "264197998b3a136a"
            ]
        ]
    },
    {
        "id": "264197998b3a136a",
        "type": "s7 control",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "endpoint": "d41610ee1fc6122f",
        "function": "trigger",
        "name": "",
        "x": 1210,
        "y": 3440,
        "wires": [
            [
                "7feb6f61239a6056",
                "032032a657ba0e1b"
            ]
        ]
    },
    {
        "id": "7feb6f61239a6056",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "name": "varTLV2",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\n\n    msg.payload = nuevoRegistroTLV2;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 3380,
        "wires": [
            [
                "dd7258c00f5bcedd"
            ]
        ]
    },
    {
        "id": "dd7258c00f5bcedd",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 3380,
        "wires": []
    },
    {
        "id": "c7aa340d5170e073",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarPalasAdentroTLV2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarPalasAdentroTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3440,
        "wires": [
            [
                "264197998b3a136a"
            ]
        ]
    },
    {
        "id": "4347b0d78027d106",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 3700,
        "wires": [
            [
                "fef48fe3055e79cd"
            ]
        ]
    },
    {
        "id": "07b1659827862884",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV2\nlet tareaTLV2 = global.get('tareaTLV2');\n\nif (!tareaTLV2) {\n    node.warn(\"No se ha encontrado la tarea TLV2.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV2\nlet origen = tareaTLV2.origen;\nlet destino = tareaTLV2.destino;\nlet datosAdicionales = tareaTLV2.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV2 desde la variable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables del PLC relacionadas con el fin de la orden\nlet finOrdenEstado = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n// Verificar los valores de finOrdenEstado y finOrdenResultado\nif (finOrdenResultado === 1 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 1, Estado: 2. Acción 1 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 1 y el estado es 2\n    // Obtener la variable dinámica de operaciones encadenadas para TLV2\n\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n     global.set('datosListosTLV2', false);  // Resetea la variable datosListosTLV2 a false\n   // global.set('TLV2SimoEvent', true); \n    global.set('errorDepositoTLV2', false);\n    global.set('errorExtraccionTLV2', false);     \n      flow.set('finOrdenOK', true);\n\n} else if (finOrdenResultado === 2 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 2, Estado: 2. Acción 2 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 2 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV2\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n     global.set('datosListosTLV2', false);  // Resetea la variable datosListosTLV2 a false\n   // global.set('TLV2SimoEvent', true);\n    global.set('errorDepositoTLV2', false);\n    global.set('errorExtraccionTLV2', false);     \n    flow.set('finOrdenOK', true);\n\n   // Establecer las variables globales adicionales según el destino.pasillo\n    let pasillo = destino.pasillo;\n    global.set(`lanzarBusquedaMesaSalida${pasillo}`, true);\n    global.set(`numMovMesaSalida${pasillo}`, datosAdicionales.numeroTransporte);\n    global.set(`umaContenedorMesaSalida${pasillo}`, datosAdicionales.umaContenedor);\n    global.set(`tipoContenedorMesaSalida${pasillo}`, datosAdicionales.tipoContenedor);\n\n\n    \n} else if (finOrdenResultado === 3 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 3, Estado: 2. Acción 3 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 2 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV2\n\n\n\n\n\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n     global.set('datosListosTLV2', false);  // Resetea la variable datosListosTLV2 a false\n  //  global.set('TLV2SimoEvent', true);\n    global.set('errorDepositoTLV2', true);\n    flow.set('finOrdenOK', true);\n    \n}  else if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 4, Estado: 2. Acción 4 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 2 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV2\n\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n     global.set('datosListosTLV2', false);  // Resetea la variable datosListosTLV2 a false\n  //  global.set('TLV2SimoEvent', true);\n    global.set('errorExtraccionTLV2', true);     \n    flow.set('finOrdenOK', true);\n  \n} else {\n    node.warn(\"Condiciones no coinciden. Ninguna acción ejecutada.\");\n    flow.set('finOrdenOK', false);\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 3780,
        "wires": [
            []
        ]
    },
    {
        "id": "fef48fe3055e79cd",
        "type": "s7 control",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "endpoint": "d41610ee1fc6122f",
        "function": "trigger",
        "name": "",
        "x": 1210,
        "y": 3780,
        "wires": [
            [
                "84423b89783bf4bb",
                "07b1659827862884"
            ]
        ]
    },
    {
        "id": "84423b89783bf4bb",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "name": "varTLV2",
        "func": "// Obtener las variables almacenadas en la variable global \"nuevoRegistroPES\"\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\n\n    msg.payload = nuevoRegistroTLV2;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 3720,
        "wires": [
            [
                "394960f56aacd44c"
            ]
        ]
    },
    {
        "id": "394960f56aacd44c",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "name": "varPES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 3720,
        "wires": []
    },
    {
        "id": "aa029a6fd75d1de9",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('verificarFinOrdenTLV2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    flow.set('verificarFinOrdenTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3780,
        "wires": [
            [
                "fef48fe3055e79cd"
            ]
        ]
    },
    {
        "id": "fa924e2cd1cd83b3",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 4320,
        "wires": [
            [
                "6f7dbb7c4cfed84c"
            ]
        ]
    },
    {
        "id": "6f7dbb7c4cfed84c",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet finOrdenresultado = 0;\nlet finOrdenEstado = 0;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: finOrdenresultado };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: finOrdenEstado };  // Salida 2: pasilloDestino\n\nflow.set('variablesreseteadasTLV2', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 4320,
        "wires": [
            [
                "9ae039cd7bd493df"
            ],
            [
                "eb237f2dd2233ff6",
                "c41cb14583b12150"
            ]
        ]
    },
    {
        "id": "b77e26f207fb6638",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('resetVarOrdenTLV2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('resetVarOrdenTLV2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 4160,
        "wires": [
            [
                "6f7dbb7c4cfed84c",
                "4f2597436a19c275"
            ]
        ]
    },
    {
        "id": "9ae039cd7bd493df",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "finOrdenresultado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 4160,
        "wires": [
            []
        ]
    },
    {
        "id": "eb237f2dd2233ff6",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "variablesreseteadasTLV2",
        "func": "flow.set(\"variablesreseteadasTLV2\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 4280,
        "wires": [
            []
        ]
    },
    {
        "id": "a16dae354b447aab",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "debug 130",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 4100,
        "wires": []
    },
    {
        "id": "c41cb14583b12150",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "finOrdenEstado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 4200,
        "wires": [
            []
        ]
    },
    {
        "id": "4f2597436a19c275",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "resetOrden",
        "func": "let varPLC = 0;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 4060,
        "wires": [
            [
                "9235551353f05d0e"
            ]
        ]
    },
    {
        "id": "9235551353f05d0e",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "tipoOrdenTLV1",
        "mode": "link",
        "links": [
            "ca0d3f49f0bfe60d"
        ],
        "x": 1185,
        "y": 4060,
        "wires": []
    },
    {
        "id": "852ba9eb5c973a25",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "950ec591b7c34e74",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV2' está en true\nlet validar = global.get('validarVariablesTareaTLV2');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV2...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   global.set('validarVariablesTareaTLV2', false);\n    node.warn(\"Variable 'validarVariablesTareaTLV2' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV2' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 160,
        "wires": [
            [
                "aab938a824c84b77"
            ]
        ]
    },
    {
        "id": "aab938a824c84b77",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "950ec591b7c34e74",
        "name": "validarVariablesTLV2",
        "func": "// Función para validar si las variables cumplen con los criterios establecidos\nfunction validarVariablesTLV2() {\n    let tarea = global.get('tareaTLV2');\n\n    if (!tarea) {\n        node.warn(\"No se ha definido ninguna tarea para TLV2.\");\n        return false;\n    }\n\n    // Validar origen\n    if (parseInt(tarea.origen.xActual) > 1000 || parseInt(tarea.origen.yActual) > 12 ||\n        parseInt(tarea.origen.xLocal) > 1000 || parseInt(tarea.origen.yLocal) > 12 ||\n        parseInt(tarea.origen.lado) > 2 || parseInt(tarea.origen.pasillo) > 12 ||\n        parseInt(tarea.origen.profundidad) > 12) {\n        node.warn(\"Error: Valores de origen fuera de rango en tareaTLV2.\");\n        return false;\n    }\n\n    // Validar destino\n    if (parseInt(tarea.destino.xActual) > 1000 || parseInt(tarea.destino.yActual) > 12 ||\n        parseInt(tarea.destino.xLocal) > 1000 || parseInt(tarea.destino.yLocal) > 12 ||\n        parseInt(tarea.destino.lado) > 2 || parseInt(tarea.destino.pasillo) > 13 ||\n        parseInt(tarea.destino.profundidad) > 12) {\n        node.warn(\"Error: Valores de destino fuera de rango en tareaTLV2.\");\n        return false;\n    }\n\n    // Validar que destino.estacion solo puede ser \"REJ1\" o entre \"PEP1\" y \"PEP12\"\n    const validDestinos = ['REJ1', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12'];\n    if (!validDestinos.includes(tarea.destino.estacion)) {\n        node.warn(`Error: Estación de destino no válida (${tarea.destino.estacion}) en tareaTLV2.`);\n        return false;\n    }\n\n    // Validar datosAdicionales\n    if (tarea.datosAdicionales.numeroTransporte === \"\" || tarea.datosAdicionales.umaContenedor === \"\" ||\n        tarea.datosAdicionales.tipoContenedor === \"\" || tarea.datosAdicionales.tipoAltura === \"\") {\n        node.warn(\"Error: Datos adicionales incompletos en tareaTLV2.\");\n        return false;\n    }\n\n    // Validar que tipoContenedor y tipoAltura no pueden ser mayores que 2\n    if (parseInt(tarea.datosAdicionales.tipoContenedor) > 2 || parseInt(tarea.datosAdicionales.tipoAltura) > 2) {\n        node.warn(\"Error: Tipo de contenedor o tipo de altura no válido (mayor que 2) en tareaTLV2.\");\n        return false;\n    }\n\n    node.warn(\"Todas las variables son válidas para TLV2.\");\n    return true;  // Si todas las validaciones pasan, retornamos true\n}\n\n// Ejecutar la validación y actualizar las variables globales\nif (validarVariablesTLV2()) {\n    global.set('variablesValidadasTareaTLV2', true);  // Set to true if validation passes\n    global.set('variablesErroneasTareaTLV2', false);  // Ensure the error flag is false\n    node.warn(\"Validación exitosa: variablesValidadasTareaTLV2 = true\");\n} else {\n    global.set('variablesValidadasTareaTLV2', false);  // Set to false if validation fails\n    global.set('variablesErroneasTareaTLV2', true);  // Set error flag if validation fails\n    node.warn(\"Validación fallida: variablesErroneasTareaTLV2 = true\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4dcb425047dafa93",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "2307adfb2879a76a",
        "name": "repeatWritePLC",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = global.get('stateMachineEventStageEjecutarTareaTLV2');\n\nif (validar === 190) {\n    // Disparar el flujo o acción correspondiente\n\nflow.set(\"repeatWritePLC\", true);\n\nreturn msg;\n\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "69f1e64699951b20",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "2307adfb2879a76a",
        "name": "5Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "4dcb425047dafa93"
            ]
        ]
    },
    {
        "id": "242271e7e3dbedd9",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "2307adfb2879a76a",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "7d785f64caa0b7dd"
            ]
        ]
    },
    {
        "id": "7e42e21f29c51576",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "repeatWritePLC",
        "func": "flow.set('repeatWritePLC', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2ae966d4985dd0dd",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "7e42e21f29c51576"
            ]
        ]
    },
    {
        "id": "f2a9e3723a190dfc",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "DatosPlcCorrectosTLV2",
        "func": "flow.set('DatosPlcCorrectosTLV2', true);\nflow.set('DatosIncorrectosPlcTLV2', false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3e191fe0a911ffb0",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "f2a9e3723a190dfc"
            ]
        ]
    },
    {
        "id": "79a6863fad295f71",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "checkTipoTareaTLV2",
        "func": "// Obtener la tarea almacenada en la variable global \"tareaTLV2\"\nlet tareaTLV2 = global.get(\"tareaTLV2\");\nvar nuevoRegistroTLV1 = global.get(\"nuevoRegistroTLV1\");\nvar nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nvar pasilloActualTLV1 = nuevoRegistroTLV1[\"PASILLO_ACTUAL\"];\nvar pasilloActualTLV2 = nuevoRegistroTLV2[\"PASILLO_ACTUAL\"];\n\nglobal.set(\"eventoLanzadoTLV-2\", \"none\");\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV2 === 'undefined' || tareaTLV2 === null) {\n    node.warn(\"La tareaTLV2 no está definida\");\n    return msg; // Detenemos la ejecución si no está definida\n}\n\n// Extraer el origen y destino de la tarea\nlet origenEstacion = tareaTLV2.origen.estacion;\nlet destinoEstacion = tareaTLV2.destino.estacion;\n\n// Extraer los pasillos del origen y destino\nlet pasilloOrigen = tareaTLV2.origen.pasillo;\nlet pasilloDestino = tareaTLV2.destino.pasillo;\n\n// Convertir los pasillos a números para comparaciones precisas\nlet pasilloOrigenNum = parseInt(pasilloOrigen, 10);\nlet pasilloDestinoNum = parseInt(pasilloDestino, 10);\n\n// Condición 1: Depósito - Si el origen comienza con \"PEP\" y el destino contiene \"Pasillo\", y los pasillos coinciden\nif (\n    (origenEstacion.startsWith(\"PEP\") || origenEstacion.startsWith(\"TLV\")) &&\n    destinoEstacion.includes(\"Pasillo\") &&\n  //  pasilloOrigenNum === pasilloDestinoNum &&\n    pasilloActualTLV2 === pasilloDestinoNum\n) {\n    flow.set('tipoTareaTLV2Chekeada', 'depositoTLV2');\n    node.warn(`Tarea detectada: Depósito. Origen: ${origenEstacion}, Destino: ${destinoEstacion}`);\n}\n\n// Condición 2: Extracción - Si el origen contiene \"Pasillo\" y el destino comienza con \"PSP\", y los pasillos coinciden\nelse if (\n   ( origenEstacion.includes(\"Pasillo\")  || origenEstacion.startsWith(\"TLV\")) &&\n    destinoEstacion.startsWith(\"PSP\") &&\n    pasilloOrigenNum === pasilloDestinoNum &&\n    pasilloActualTLV2 === pasilloDestinoNum\n) {\n    flow.set('tipoTareaTLV2Chekeada', 'extraccionTLV2');\n    node.warn(`Tarea detectada: Extracción. Origen: ${origenEstacion}, Destino: ${destinoEstacion}`);\n}\n\n// Condición 3: Trasbordo - Si el origen contiene \"Pasillo\" y el destino contiene \"Pasillo\", y los pasillos NO coinciden y pasilloActualTLV2 es diferente de destinoEstacion\nelse if (\n    pasilloActualTLV2 !== pasilloDestinoNum  &&\n    (destinoEstacion.includes(\"Pasillo\") || destinoEstacion.startsWith(\"PSP\")) &&\n    pasilloActualTLV1 !== pasilloDestinoNum\n) {\n    flow.set('tipoTareaTLV2Chekeada', 'trasbordoTLV2');\n    node.warn(`Tarea detectada: Trasbordo. Origen pasillo: ${pasilloActualTLV2}, Destino: ${destinoEstacion}`);\n} \n\n// Si no se cumple ninguna de las condiciones anteriores\nelse {\n    node.warn(\"No se encontró una coincidencia válida para la tarea.\");\n   // global.set('stateMachineEventStageEjecutarTareaTLV2', 900)\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 840,
        "wires": [
            [
                "dc5f36d70ebb959d",
                "5c384e42e96b28ec"
            ]
        ]
    },
    {
        "id": "ea1a8d54be09f315",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet finOrdenresultado = 0;\nlet finOrdenEstado = 0;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: finOrdenresultado };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: finOrdenEstado };  // Salida 2: pasilloDestino\n\nflow.set('variablesreseteadasTLV2', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 700,
        "wires": [
            [
                "885e228b8275ff0a"
            ],
            [
                "943042f0d14d6970"
            ]
        ]
    },
    {
        "id": "885e228b8275ff0a",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "finOrdenresultado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 680,
        "wires": [
            [
                "06726748ada48898"
            ]
        ]
    },
    {
        "id": "06726748ada48898",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"41\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_FIN_ORDEN_RESULTADO\"}",
        "s7Name": "TLV2_FIN_ORDEN_RESULTADO",
        "topic": "",
        "name": "finOrdenResultado",
        "signalSetted": false,
        "x": 1630,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1655202144555f0e",
        "type": "s7comm write",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"102\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"40\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"TLV2_FIN_ORDEN_ESTADO\"}",
        "s7Name": "TLV2_FIN_ORDEN_ESTADO",
        "topic": "",
        "name": "finOrdenEstado",
        "signalSetted": false,
        "x": 1620,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "943042f0d14d6970",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "finOrdenEstado",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 720,
        "wires": [
            [
                "1655202144555f0e"
            ]
        ]
    },
    {
        "id": "2adceef1879aee75",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "resetOrden",
        "func": "let varPLC = 0;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 780,
        "wires": [
            [
                "14ebaffe7938c44f"
            ]
        ]
    },
    {
        "id": "14ebaffe7938c44f",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "tipoOrdenTLV1",
        "mode": "link",
        "links": [
            "ca0d3f49f0bfe60d"
        ],
        "x": 1405,
        "y": 780,
        "wires": []
    },
    {
        "id": "8303682babaf1e54",
        "type": "comment",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "tipoEventoTLV2",
        "info": "global.set(\"eventoLanzadoTLV2\", \"none\" );\n global.set(\"eventoLanzadoTLV2\", \"palletCargado\");\n global.set(\"eventoLanzadoTLV2\", \"finDeposito\");\n global.set(\"eventoLanzadoTLV2\", \"finExtraccion\");\n  global.set(\"eventoLanzadoTLV2\", \"errorDeposito\");\n   global.set(\"eventoLanzadoTLV2\", \"errorExtraccion\");\n\n\n\n\n",
        "x": 360,
        "y": 3880,
        "wires": []
    },
    {
        "id": "7d785f64caa0b7dd",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "2307adfb2879a76a",
        "name": "fsmOrdenTLV2",
        "func": "// Máquina de estados con switch-case\n\n    let estadoActual = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    // Obtener el nuevo registro actual del TLV2 desde la variable global\n    var nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\n    if (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n        node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n       // return msg;\n    }\n\n\n\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            flow.set('escribirVariablesTrasbordo', false);\n            flow.set('escribirVariablesDeposito', false);\n            flow.set('escribirVariablesExtraccion', false);\n            flow.set('variablesIntermediasEscritas', false);\n            flow.set('escribirVarToPLC_EjecutarOrdenTLV2', false);\n            flow.set('ordenEjecutadaTareaTLV2', false);\n            flow.set('verificarPosicionActualTLV2', false);\n            flow.set('TLV2_inPosition', false);\n            flow.set('verificarPalasAfueraTLV2', false);\n            flow.set('PalasAfueraTLV2', false);\n            flow.set('verificarPalasAdentroTLV2', false);\n            flow.set('palletCargado', false);\n            flow.set('verificarFinOrdenTLV2', false);\n            flow.set('finOrdenOK', false);\n            flow.set('resetVarOrdenTLV2', false);\n            flow.set('variablesreseteadasTLV2', false);\n            flow.set('buscarIdOrdenTLV2', false);\n            flow.set('idListoTLV2', false);\n            flow.set('escribirVarToPLC_OrdenTLV2', false);\n            flow.set('variablesOrdenTLV2_PLCEscritas', false);\n            flow.set('checkTipoTareaTLV2', false);\n            flow.set('verificarVarToPLC_OrdenTLV2', false);\n            flow.set('DatosPlcCorrectosTLV2', false);\n            flow.set('DatosIncorrectosPlcTLV2', false);\n            flow.set('trasbordoDoneTLV2', false);\n            flow.set('enviarTramaFinOrden', false);\n            flow.set('tramaFinOrdenEnviada', false);\n            flow.set('enviarTramapalletCargado', false);\n            global.set('repeatTramaCargaTLV2', false);\n            global.set('abortTramaCargaTLV2', false);\n            global.set('repeatTramaFinOrdenTLV2', false);\n            global.set('abortTramaFinOrdenTLV2', false);\n           // global.set('buscarIdBusyTLV2', false);\n            \n            global.set(\"permitirFinOrdenPEP\", false);\n            flow.set('tramapalletCargadoEnviada', false);\n            flow.set('tipoTareaTLV2Chekeada', \"none\");\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 10);\n            // setTimeout(maquinaEstadosTLV2, 1000);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 10);\n            if (\n                flow.get('escribirVariablesTrasbordo') === false &&\n                flow.get('escribirVariablesDeposito') === false &&\n                flow.get('escribirVariablesExtraccion') === false &&\n                flow.get('variablesIntermediasEscritas') === false &&\n                flow.get('escribirVarToPLC_EjecutarOrdenTLV2') === false &&\n                flow.get('ordenEjecutadaTareaTLV2') === false &&\n                flow.get('verificarPosicionActualTLV2') === false &&\n                flow.get('TLV2_inPosition') === false &&\n                flow.get('verificarPalasAfueraTLV2') === false &&\n                flow.get('PalasAfueraTLV2') === false &&\n                flow.get('trasbordoDoneTLV2') === false &&\n                flow.get('verificarPalasAdentroTLV2') === false &&\n                flow.get('palletCargado') === false &&\n                flow.get('tipoTareaTLV2Chekeada') === \"none\" &&\n                global.get('stateMachineEventStageTareaGenTLV2') === 30\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventStageEjecutarTareaTLV2', 20);\n                  //  global.set('buscarIdBusyTLV2', true);\n                }, 500);\n            }\n            break;\n\n        // Manteniendo del 20 al 100\n        case 20: // 20_LeerVariables\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 20);\n            flow.set('variablesOkTLV2', true);  // Simulación de variables OK\n            if (flow.get('variablesOkTLV2') === true) {\n                flow.set('buscarIdOrdenTLV2', true);  // Simulación de ID listo\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 40);\n            }\n            break;\n\n        case 30: // 30_VariablesOk\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 30);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 40);\n            }, 500);\n            break;\n\n        case 40: // 40_BuscarID\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 40);\n            global.set('errorDepositoTLV2', false);\n            global.set('errorExtraccionTLV2', false);\n           // global.set('buscarIdBusyTLV2', true);\n\n\n          //  if (global.get('buscarIdBusyTLV1') === false) {\n              //  flow.set('buscarIdOrdenTLV2', true);  // Simulación de ID listo\n          //  }\n\n            if (flow.get('idListoTLV2') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 100);\n            }\n            break;\n\n        case 50: // 50_asignarDatosToIDTLV2\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 50);\n            flow.set('buscarIdOrdenTLV2', false);  // Simulación de ID listo\n            flow.set('asignarDatosToIDTLV2', true);  // Simulación de asignar datos a ID\n            if (flow.get('datosasignadosToIDTLV2') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 60);\n               // global.set('buscarIdBusyTLV2', false);\n            } else {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 90);\n            }\n            break;\n\n        case 60: // 60_compararUma\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 60);\n            flow.set('compararUMA', true);  // Simulación de ID listo\n            flow.set('asignarDatosToIDTLV2', false);  // Simulación de asignar datos a ID\n            if (flow.get('umaCorrecto') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 70);\n            } else if (flow.get('umaInCorrecto') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 90);\n            }\n            break;\n\n        case 70: // 70_CompararOk\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 70);\n            if (flow.get('baseDatosOkTLV2') === true) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 80);\n            }\n            break;\n\n\n\n        case 90: // 90_CompararError\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 90);\n            node.warn(\"Error en la comparación de datos.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 1000);\n            }, 500);\n            break;\n\n        case 100: // 100_CheckTarea\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 100);\n            flow.set('checkTipoTareaTLV2', true);\n\n            let tipoTarea = flow.get('tipoTareaTLV2Chekeada');\n            let trasbordoDoneTLV2 = flow.get('trasbordoDoneTLV2');\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            let finOrdenEstado100 = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\n            let finOrdenResultado100 = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n            if ((tipoTarea === 'trasbordoTLV2') && (trasbordoDoneTLV2 === false)) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 110);\n            } else if ((tipoTarea === 'depositoTLV2') && (finOrdenEstado100 === 0) && (finOrdenResultado100 === 0)) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 120);\n            } else if ((tipoTarea === 'extraccionTLV2') && (finOrdenEstado100 === 0) && (finOrdenResultado100 === 0)) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 130);\n            }\n            break;\n\n        case 110: // 110_tareaTrasbordo\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 110);\n            flow.set('escribirVariablesTrasbordo', true);  // Variable de flujo para tarea de trasbordo\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 140);\n            }, 500);\n            break;\n\n        case 120: // 120_tareaDeposito\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 120);\n            flow.set('escribirVariablesDeposito', true);  // Variable de flujo para tarea de depósito\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 140);\n            }, 500);\n            break;\n\n\n\n\n        case 130: // 130_tareaExtraccion\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 130);\n            flow.set('escribirVariablesExtraccion', true);  // Variable de flujo para tarea de extracción\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 140);\n            }, 500);\n            break;\n\n        case 140: // 140_EscribirVariablesIntermediasOrdenTLV2\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 140);\n            flow.set('escribirVariablesIntermedias', true);  // Variable de flujo para escribir variables intermedias\n            if (flow.get('variablesIntermediasEscritas')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 150);\n            }\n            break;\n\n        case 150: // 150_VariablesIntermediasEscritasOrdenTLV2\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 150);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 160);\n            }, 500);\n            break;\n\n        case 160: // 160_EscribirVarToPLC\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 160);\n            flow.set('DatosPlcCorrectosTLV2', false);\n            flow.set('DatosIncorrectosPlcTLV2', false);\n            flow.set('escribirVarToPLC_OrdenTLV2', true);\n            flow.set('variablesIntermediasEscritas', true);\n            flow.set(\"repeatWritePLC\", false);\n            if (flow.get('variablesOrdenTLV2_PLCEscritas')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 170);\n            }\n            break;\n\n        case 170: // 170_Verificar\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 170);\n            flow.set('verificarVarToPLC_OrdenTLV2', true);\n            if (flow.get('DatosPlcCorrectosTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 180);\n            } else if (flow.get('DatosIncorrectosPlcTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 190);\n            }\n            break;\n        case 180: // 180_VariablesOK\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 180);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 200);\n            }, 500);\n            break;\n        case 190: // 190_VariablesPlcNoOk\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 190);\n            if (flow.get('DatosPlcCorrectosTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 200);\n            } else if (flow.get('repeatWritePLC')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 200);\n            }\n            break;\n\n        case 200: // 200_OrdenToPLC\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 200);\n            flow.set('escribirVarToPLC_EjecutarOrdenTLV2', true);\n            if (flow.get('ordenEjecutadaTareaTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 210);\n            }\n            break;\n\n        case 210: // 210_OrdenOK\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 210);\n            flow.set('ordenEjecutadaTareaTLV2', false);\n            let tareaTLV2 = global.get(\"tareaTLV2\");\n            let origenEstacion = tareaTLV2.origen.estacion;\n            let tipoTarea210 = flow.get('tipoTareaTLV2Chekeada');\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            let finOrdenEstado210 = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\n            let finOrdenResultado210 = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n            if (tipoTarea210 === 'trasbordoTLV2') {\n                if ((finOrdenEstado210 === 2) && (finOrdenResultado210 === 5)) {\n                    flow.set('trasbordoDoneTLV2', true);\n                    global.set('stateMachineEventStageEjecutarTareaTLV2', 100);\n                }else if ((finOrdenEstado210 === 2) && (finOrdenResultado210 === 6)) {\n                    //flow.set('trasbordoDoneTLV2', true);\n                    global.set('stateMachineEventStageEjecutarTareaTLV2', 100);\n                }\n\n  \n            } else if ((origenEstacion.startsWith(\"TLV\")) && (tipoTarea210 === 'depositoTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            } else {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 220);\n            }\n            break;\n\n\n        case 220: // 220_waitTLV2_inPosition\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 220);\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Esperando que TLV2 esté en posición...\" });\n            flow.set('verificarPosicionActualTLV2', true);\n            if (flow.get('TLV2_inPosition')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 230);\n            }\n            break;\n\n        case 230: // 230_TLV2_inPosition\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 230);\n            flow.set('verificarPosicionActualTLV2', false);\n            node.warn(\"TLV2 está en posición.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 240);\n            }, 500);\n            break;\n\n        case 240: // 240_sacandoPalas\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 240);\n            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Sacando palas...\" });\n            flow.set('verificarPalasAfueraTLV2', true);\n            if (flow.get('PalasAfueraTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 250);\n            } else if (global.get('errorDepositoTLV2') || global.get('errorExtraccionTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            }\n            break;\n\n        case 250: // 250_PalasAfuera\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 250);\n            flow.set('verificarPalasAfueraTLV2', false);\n            node.warn(\"Palas fuera.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 260);\n            }, 500);\n            break;\n\n        case 260: // 260_cargandoPallet\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 260);\n            node.status({ fill: \"blue\", shape: \"dot\", text: \"Cargando pallet...\" });\n            flow.set('verificarPalasAdentroTLV2', true);\n            if (flow.get('palletCargado')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 270);\n            }\n            break;\n\n        case 270: // 270_palletCargado\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 270);\n            flow.set('verificarPalasAdentroTLV2', false);\n             global.set('resultadoTLV-2_palletCargado', \"1111\");\n            flow.set('enviarTramapalletCargado', true);\n            node.warn(\"Pallet cargado.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 274);\n            }, 500);\n            break;\n\n        case 274: // 274_tramapalletCargadoEnviada\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 274);\n\n            if (flow.get('tramapalletCargadoEnviada')) {\n                setTimeout(() => {\n                    global.set('stateMachineEventStageEjecutarTareaTLV2', 275);\n                }, 500);\n            }\n            break;\n\n\n        case 275: // 275_enviarTramaPalletCargado\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 275);\n\n            let resultadoTLV_2_palletCargado = global.get('resultadoTLV-2_palletCargado');\n\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            // let finOrdenEstado286 = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\n            // let finOrdenResultado286 = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n           // if (resultadoTLV_1_palletCargado === \"00000000\") {\n            if (resultadoTLV_2_palletCargado.startsWith(\"0000\")) {    \n                global.set(\"permitirFinOrdenPEP\", true);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            } else if (resultadoTLV_2_palletCargado === \"0001\") {\n                flow.set('enviarTramapalletCargado', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 270);\n            } else if (resultadoTLV_2_palletCargado === \"0002\") {\n                flow.set('enviarTramapalletCargado', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 270);\n            } else if (resultadoTLV_2_palletCargado === \"0006\") {\n                flow.set('enviarTramapalletCargado', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 270);\n            } else if ( global.get('repeatTramaCargaTLV2')) {\n                flow.set('enviarTramapalletCargado', false);\n                global.set('repeatTramaCargaTLV2', false);\n\n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 270);\n            } else if ( global.get('abortTramaCargaTLV2')) {\n                flow.set('enviarTramapalletCargado', false);\n                global.set('abortTramaCargaTLV2', false);\n                \n                flow.set('tramapalletCargadoEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            }\n            break;\n\n\n\n\n        case 280: // 280_FinOrden\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            global.set('resultadoTLV-2_finOrden', \"1111\");\n\n            flow.set('verificarFinOrdenTLV2', true);\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Fin de orden ejecutada.\" });\n            if (flow.get('finOrdenOK')) {\n                flow.set('enviarTramaFinOrden', true);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 285);\n            }\n            break;\n\n        case 285: // 285_enviarTramaFinOrden\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 285);\n\n\n            if (flow.get('tramaFinOrdenEnviada')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 286);\n            }\n            break;\n\n        case 286: // 285_waitRespuestaTramaFinOrden\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 286);\n\n\n            //  global.set(\"eventoLanzadoTLV2\", \"palletCargado\");\n\n\n            let resultadoTLV_2_finOrden = global.get('resultadoTLV-2_finOrden');\n\n            // Obtener las variables del PLC relacionadas con el fin de la orden\n            // let finOrdenEstado286 = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\n            // let finOrdenResultado286 = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n            if (resultadoTLV_2_finOrden.startsWith(\"0000\")) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 290);\n            } else if (resultadoTLV_2_finOrden === \"0001\") {\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            } else if (resultadoTLV_2_finOrden === \"0002\") {\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            } else if (resultadoTLV_2_finOrden === \"0006\") {\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            }  else if ( global.get('repeatTramaFinOrdenTLV2')) {\n                global.set('repeatTramaFinOrdenTLV2', false);\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 280);\n            } else if ( global.get('abortTramaFinOrdenTLV2')) {\n                global.set('abortTramaFinOrdenTLV2', false);\n                flow.set('enviarTramaFinOrden', false);\n                flow.set('finOrdenOK', false);\n                flow.set('tramaFinOrdenEnviada', false);\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 290);\n            }\n            break;\n\n\n\n        case 290: // 290_FinOrdenEjecutada\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 290);\n            flow.set('verificarFinOrdenTLV2', false);\n            flow.set('finOrdenOK', false);\n            node.warn(\"Orden ejecutada correctamente.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 300);\n            }, 500);\n            break;\n\n        case 300: // 300_ResetVarPLC\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 300);\n            node.status({ fill: \"blue\", shape: \"dot\", text: \"Reseteando variables PLC...\" });\n            flow.set('resetVarOrdenTLV2', true);\n            if (flow.get('variablesreseteadasTLV2')) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 310);\n            }\n            break;\n\n        case 310: // 310_ResetVarPLC_OK\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 310);\n            flow.set('resetVarOrdenTLV2', false);\n            flow.set('variablesreseteadasTLV2', false);\n            node.warn(\"Orden ejecutada correctamente.\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 900);\n            }, 500);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 1000);\n            }, 500);\n            break;\n\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 1000);\n            if (global.get('stateMachineEventStageTareaGenTLV2') === 20) {\n                global.set('stateMachineEventStageEjecutarTareaTLV2', 0);\n            }\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageEjecutarTareaTLV2', 0);\n    }\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "586be23c09a08220",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "7fd795bb6a18e461",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('enviarTramapalletCargado') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('enviarTramapalletCargado', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3540,
        "wires": [
            [
                "564824ba43fd6b9f"
            ]
        ]
    },
    {
        "id": "564824ba43fd6b9f",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "7fd795bb6a18e461",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV2\nlet tareaTLV2 = global.get('tareaTLV2');\n\nif (!tareaTLV2) {\n    node.warn(\"No se ha encontrado la tarea TLV2.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV2\nlet origen = tareaTLV2.origen;\nlet destino = tareaTLV2.destino;\nlet datosAdicionales = tareaTLV2.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV2 desde la variable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV2\nlet zActual = nuevoRegistroTLV2[\"COORD_Z_ACTUAL\"];\n\n// Inicializamos la variable de flujo palletCargado en false\nflow.set('palletCargado', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada');\nvar xOrigenOrdenEventocarga = 0;  // X siempre será 999 para deposito\nvar yOrigenOrdenEventocarga = 0;  // Y siempre será 1 para deposito\nvar zOrigenOrdenEventocarga = 0;\n\nif (tipoTarea === 'extraccionTLV2') {\n    // En depósito, comparar solo la coordenada Z\n    var zOrigenOrden = 0;\n\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV2');\n    var xOrigenOrden = flow.get('x_OrigenOrdenTLV2');\n    var yOrigenOrden = flow.get('y_OrigenOrdenTLV2');\n    xOrigenOrdenEventocarga = xOrigenOrden;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = yOrigenOrden;  // Y siempre será 1 para deposito\n     zOrigenOrdenEventocarga = flow.get('z_OrigenOrdenTLV2');\n\n\n\n} else if (tipoTarea === 'depositoTLV2') {\n    // En extracción, comparar solo la coordenada Z con un valor fijo de 0\n    var zOrigenOrden = 0;  // Z siempre será 0 para extracción\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV2');\n    xOrigenOrdenEventocarga = 999;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = 1;  // Y siempre será 1 para deposito\n    zOrigenOrdenEventocarga = 1 ;\n\n\n\n}\n\n// Si palletCargado está en true, ejecutar la lógica adicional\nif (true) {\n    // Definir las variables globales para TLV2\n    global.set(\"OperacionesEncadenadas_SIMO_TLV2\", 1); // Dinámico: indica qué partes enviar para TLV2\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV2\n    global.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV2\n    global.set(\"Equipamiento_SIMO_TLV2\", \"TLV-2\");     // Equipamiento específico para TLV2 (rellenar con espacios a la izquierda si es necesario)\n\n    // Definir las variables y constantes para el evento en TLV2\n    global.set(\"CantidadEventos_SIMO_Event_TLV2\", 1);\n    global.set(\"TipoEstacion_SIMO_Event_TLV2\", 1);  // Tipo de estación TLV2\n    global.set(\"NumeroEstacion_SIMO_Event_TLV2\", 2); // Número de estación TLV2\n    global.set(\"NumeroMovimiento_SIMO_Event_TLV2\", datosAdicionales.numeroTransporte); // Número de movimiento para el evento\n    global.set(\"TipoEvento_SIMO_Event_TLV2\", 1);    // Tipo de evento\n    global.set(\"Flags_SIMO_Event_TLV2\", \"0000065536\");  // Flags para el evento\n    global.set(\"Datos_SIMO_Event_TLV2\", \" \");    // Datos del evento (rellenar con espacios si es necesario)\n    global.set(\"Peso_SIMO_Event_TLV2\", 50);        // Peso para el evento\n    global.set(\"TipoContenedor_SIMO_Event_TLV2\", datosAdicionales.tipoContenedor);\n    global.set(\"TipoAltura_SIMO_Event_TLV2\", 1);\n    global.set(\"XLogica_SIMO_Event_TLV2\", xOrigenOrdenEventocarga);      // Coordenada X lógica para TLV2\n    global.set(\"YLogica_SIMO_Event_TLV2\", yOrigenOrdenEventocarga);      // Coordenada Y lógica para TLV2\n    global.set(\"XLocal_SIMO_Event_TLV2\", 1);        // Coordenada X local para TLV2\n    global.set(\"YLocal_SIMO_Event_TLV2\", 0);       // Coordenada Y local para TLV2\n    global.set(\"Lado_SIMO_Event_TLV2\", zOrigenOrdenEventocarga);          // Lado para TLV2\n    global.set(\"Profundidad_SIMO_Event_TLV2\", 1);   // Profundidad para TLV2\n    global.set(\"Pasillo_SIMO_Event_TLV2\", pasilloOrigenOrden);       // Pasillo para TLV2\n\n    for (let j = 1; j <= 10; j++) {\n        global.set(`Aux0${j}_SIMO_Event_TLV2`, 0);  // Variables auxiliares para el evento en TLV2\n    }\n\n    global.set(\"eventoLanzadoTLV-2\", \"palletCargado\");\n\n        msg.topic = `\n        UPDATE movimientosPIE1\n        SET estado = 'finish', fechaFin = NOW()\n        WHERE uma = '${datosAdicionales.umaContenedor}';\n    `;\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set('TLV2SimoEvent', true);  \n    flow.set('tramapalletCargadoEnviada', true);  \n\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 3580,
        "wires": [
            [
                "cb2fbd2c0a87e89a"
            ]
        ]
    },
    {
        "id": "032032a657ba0e1b",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV2\nlet tareaTLV2 = global.get('tareaTLV2');\n\nif (!tareaTLV2) {\n    node.warn(\"No se ha encontrado la tarea TLV2.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV2\nlet origen = tareaTLV2.origen;\nlet destino = tareaTLV2.destino;\nlet datosAdicionales = tareaTLV2.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV2 desde la variable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener la variable Z del traslo desde nuevoRegistroTLV2\nlet zActual = nuevoRegistroTLV2[\"COORD_Z_ACTUAL\"];\n\n// Inicializamos la variable de flujo palletCargado en false\nflow.set('palletCargado', false);\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada');\nvar xOrigenOrdenEventocarga = 0;  // X siempre será 999 para deposito\nvar yOrigenOrdenEventocarga = 0;  // Y siempre será 1 para deposito\nvar zOrigenOrdenEventocarga = 0;\n\nif (tipoTarea === 'extraccionTLV2') {\n    // En depósito, comparar solo la coordenada Z\n    var zOrigenOrden = 0;\n\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV2');\n    var xOrigenOrden = flow.get('x_OrigenOrdenTLV2');\n    var yOrigenOrden = flow.get('y_OrigenOrdenTLV2');\n    xOrigenOrdenEventocarga = xOrigenOrden;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = yOrigenOrden;  // Y siempre será 1 para deposito\n     zOrigenOrdenEventocarga = flow.get('z_OrigenOrdenTLV2');\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV2 coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('palletCargado', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV2 NO coincide con la coordenada Z de la tarea de depósito.\");\n        flow.set('palletCargado', false); // Si no coincide, establecer en false\n    }\n\n} else if (tipoTarea === 'depositoTLV2') {\n    // En extracción, comparar solo la coordenada Z con un valor fijo de 0\n    var zOrigenOrden = 0;  // Z siempre será 0 para extracción\n    var pasilloOrigenOrden = flow.get('pasilloOrigenOrdenTLV2');\n    xOrigenOrdenEventocarga = 999;  // X siempre será 999 para deposito\n    yOrigenOrdenEventocarga = 1;  // Y siempre será 1 para deposito\n    zOrigenOrdenEventocarga = 1 ;\n\n\n    if (zActual === zOrigenOrden) {\n        node.warn(\"La coordenada Z actual del TLV2 coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('palletCargado', true); // Si coincide, establecer en true\n    } else {\n        node.warn(\"La coordenada Z actual del TLV2 NO coincide con la coordenada Z de la tarea de extracción.\");\n        flow.set('palletCargado', false); // Si no coincide, establecer en false\n    }\n}\n\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "413c4606763e232b",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "d6c4eb345182fc79",
        "name": "Verify PLC",
        "func": "// Obtener la tarea almacenada en la variable global tareaTLV2\nlet tareaTLV2 = global.get('tareaTLV2');\n\nif (!tareaTLV2) {\n    node.warn(\"No se ha encontrado la tarea TLV2.\");\n    return;\n}\n\n// Obtener los datos de origen y destino desde tareaTLV2\nlet origen = tareaTLV2.origen;\nlet destino = tareaTLV2.destino;\nlet datosAdicionales = tareaTLV2.datosAdicionales;\n\n// Obtener el nuevo registro actual del TLV2 desde la variable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables del PLC relacionadas con el fin de la orden\nlet finOrdenEstado = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n// Verificar los valores de finOrdenEstado y finOrdenResultado\nif (finOrdenResultado === 1 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 1, Estado: 2. Acción 1 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 1 y el estado es 2\n    // Obtener la variable dinámica de operaciones encadenadas para TLV2\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV2\", 2); // Dinámico: indica qué partes enviar para TLV2\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV2\nglobal.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV2\nglobal.set(\"Equipamiento_SIMO_TLV2\", \"TLV-2\");     // Equipamiento específico para TLV2 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el fin de movimiento en TLV2\nglobal.set(\"CantidadFinesMov_SIMO_TLV2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV2\", 0);    // Tipo de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV2\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV2\", datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV2\nglobal.set(\"UMA_SIMO_Fin_TLV2\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV2\nglobal.set(\"CodigoError_SIMO_Fin_TLV2\", 0);     // Código de error para el fin de movimiento en TLV2\nglobal.set(\"Auxiliar_SIMO_Fin_TLV2\", 0);        // Auxiliar para el fin de movimiento en TLV2\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV2\", datosAdicionales.tipoContenedor);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV2\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV2\", destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV2\nglobal.set(\"YLogica_SIMO_Fin_TLV2\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV2\nglobal.set(\"XLocal_SIMO_Fin_TLV2\", 1);          // Coordenada X local para el fin de movimiento en TLV2\nglobal.set(\"YLocal_SIMO_Fin_TLV2\", 0);         // Coordenada Y local para el fin de movimiento en TLV2\nglobal.set(\"Lado_SIMO_Fin_TLV2\", destino.lado);            // Lado para el fin de movimiento en TLV2\nglobal.set(\"Profundidad_SIMO_Fin_TLV2\", 1);     // Profundidad para el fin de movimiento en TLV2\nglobal.set(\"Pasillo_SIMO_Fin_TLV2\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV2`, 0);    // Variables auxiliares para el fin de movimiento en TLV2\n}\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n    global.set('TLV2SimoEvent', true); \n    global.set('errorDepositoTLV2', false);\n    global.set('errorExtraccionTLV2', false);\n    flow.set('tramaFinOrdenEnviada', true);\n\n} else if (finOrdenResultado === 2 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 2, Estado: 2. Acción 2 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 2 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV2\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV2\", 2); // Dinámico: indica qué partes enviar para TLV2\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV2\nglobal.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV2\nglobal.set(\"Equipamiento_SIMO_TLV2\", \"TLV-2\");     // Equipamiento específico para TLV2 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el fin de movimiento en TLV2\nglobal.set(\"CantidadFinesMov_SIMO_TLV2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV2\", 10);    // Tipo de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV2\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV2\",  datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV2\nglobal.set(\"UMA_SIMO_Fin_TLV2\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV2\nglobal.set(\"CodigoError_SIMO_Fin_TLV2\", 0);     // Código de error para el fin de movimiento en TLV2\nglobal.set(\"Auxiliar_SIMO_Fin_TLV2\", 0);        // Auxiliar para el fin de movimiento en TLV2\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV2\", datosAdicionales.tipoContenedor);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV2\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV2\",  destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV2\nglobal.set(\"YLogica_SIMO_Fin_TLV2\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV2\nglobal.set(\"XLocal_SIMO_Fin_TLV2\", 1);          // Coordenada X local para el fin de movimiento en TLV2\nglobal.set(\"YLocal_SIMO_Fin_TLV2\", 0);         // Coordenada Y local para el fin de movimiento en TLV2\nglobal.set(\"Lado_SIMO_Fin_TLV2\", destino.lado);            // Lado para el fin de movimiento en TLV2\nglobal.set(\"Profundidad_SIMO_Fin_TLV2\", 1);     // Profundidad para el fin de movimiento en TLV2\nglobal.set(\"Pasillo_SIMO_Fin_TLV2\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV2`, 0);    // Variables auxiliares para el fin de movimiento en TLV2\n}\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n    global.set('TLV2SimoEvent', true);\n    global.set('errorDepositoTLV2', false);\n    global.set('errorExtraccionTLV2', false);\n    flow.set('tramaFinOrdenEnviada', true);\n\n   // Establecer las variables globales adicionales según el destino.pasillo\n    let pasillo = destino.pasillo;\n    global.set(`lanzarBusquedaMesaSalida${pasillo}`, true);\n    global.set(`numMovMesaSalida${pasillo}`, datosAdicionales.numeroTransporte);\n    global.set(`umaContenedorMesaSalida${pasillo}`, datosAdicionales.umaContenedor);\n    global.set(`tipoContenedorMesaSalida${pasillo}`, datosAdicionales.tipoContenedor);\n\n\n    \n} else if (finOrdenResultado === 3 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 3, Estado: 2. Acción 3 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 5 y el estado es 2\n       // Obtener la variable dinámica de operaciones encadenadas para TLV2\nglobal.set(\"OperacionesEncadenadas_SIMO_TLV2\", 2); // Dinámico: indica qué partes enviar para TLV2\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV2\nglobal.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV2\nglobal.set(\"Equipamiento_SIMO_TLV2\", \"TLV-2\");     // Equipamiento específico para TLV2 (rellenar con espacios a la izquierda si es necesario)\n\n// Definir las variables y constantes para el fin de movimiento en TLV2\nglobal.set(\"CantidadFinesMov_SIMO_TLV2\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_TLV2\", 0);    // Tipo de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroEstacion_SIMO_Fin_TLV2\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV2\nglobal.set(\"NumeroMovimiento_SIMO_Fin_TLV2\", datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV2\nglobal.set(\"UMA_SIMO_Fin_TLV2\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV2\nglobal.set(\"CodigoError_SIMO_Fin_TLV2\", 1);     // Código de error para el fin de movimiento en TLV2\nglobal.set(\"Auxiliar_SIMO_Fin_TLV2\", 0);        // Auxiliar para el fin de movimiento en TLV2\nglobal.set(\"TipoContenedor_SIMO_Fin_TLV2\", datosAdicionales.tipoContenedor);\nglobal.set(\"TipoAltura_SIMO_Fin_TLV2\", 1);\nglobal.set(\"XLogica_SIMO_Fin_TLV2\", destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV2\nglobal.set(\"YLogica_SIMO_Fin_TLV2\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV2\nglobal.set(\"XLocal_SIMO_Fin_TLV2\", 1);          // Coordenada X local para el fin de movimiento en TLV2\nglobal.set(\"YLocal_SIMO_Fin_TLV2\", 0);         // Coordenada Y local para el fin de movimiento en TLV2\nglobal.set(\"Lado_SIMO_Fin_TLV2\", destino.lado);            // Lado para el fin de movimiento en TLV2\nglobal.set(\"Profundidad_SIMO_Fin_TLV2\", 1);     // Profundidad para el fin de movimiento en TLV2\nglobal.set(\"Pasillo_SIMO_Fin_TLV2\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_TLV2`, 0);    // Variables auxiliares para el fin de movimiento en TLV2\n}\n   \n   \n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n    global.set('TLV2SimoEvent', true); \n    global.set('errorDepositoTLV2', true);\n    flow.set('tramaFinOrdenEnviada', true);\n\n} else if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n    node.warn(\"Resultado: 4, Estado: 2. Acción 4 ejecutada.\");\n    // Realiza la acción correspondiente cuando el resultado es 5 y el estado es 2\n    // Obtener la variable dinámica de operaciones encadenadas para TLV2\n    global.set(\"OperacionesEncadenadas_SIMO_TLV2\", 2); // Dinámico: indica qué partes enviar para TLV2\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV2\n    global.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV2\n    global.set(\"Equipamiento_SIMO_TLV2\", \"TLV-2\");     // Equipamiento específico para TLV2 (rellenar con espacios a la izquierda si es necesario)\n\n    // Definir las variables y constantes para el fin de movimiento en TLV2\n    global.set(\"CantidadFinesMov_SIMO_TLV2\", 1);\n    global.set(\"TipoEstacion_SIMO_Fin_TLV2\", 0);    // Tipo de estación para el fin de movimiento en TLV2\n    global.set(\"NumeroEstacion_SIMO_Fin_TLV2\", destino.pasillo);  // Número de estación para el fin de movimiento en TLV2\n    global.set(\"NumeroMovimiento_SIMO_Fin_TLV2\", datosAdicionales.numeroTransporte); // Número de movimiento para el fin de movimiento en TLV2\n    global.set(\"UMA_SIMO_Fin_TLV2\", datosAdicionales.umaContenedor);    // UMA (Unidad de manejo) para TLV2\n    global.set(\"CodigoError_SIMO_Fin_TLV2\", 2);     // Código de error para el fin de movimiento en TLV2\n    global.set(\"Auxiliar_SIMO_Fin_TLV2\", 0);        // Auxiliar para el fin de movimiento en TLV2\n    global.set(\"TipoContenedor_SIMO_Fin_TLV2\", datosAdicionales.tipoContenedor);\n    global.set(\"TipoAltura_SIMO_Fin_TLV2\", 1);\n    global.set(\"XLogica_SIMO_Fin_TLV2\", destino.xActual);        // Coordenada X lógica para el fin de movimiento en TLV2\n    global.set(\"YLogica_SIMO_Fin_TLV2\", destino.yActual);        // Coordenada Y lógica para el fin de movimiento en TLV2\n    global.set(\"XLocal_SIMO_Fin_TLV2\", 1);          // Coordenada X local para el fin de movimiento en TLV2\n    global.set(\"YLocal_SIMO_Fin_TLV2\", 0);         // Coordenada Y local para el fin de movimiento en TLV2\n    global.set(\"Lado_SIMO_Fin_TLV2\", destino.lado);            // Lado para el fin de movimiento en TLV2\n    global.set(\"Profundidad_SIMO_Fin_TLV2\", 1);     // Profundidad para el fin de movimiento en TLV2\n    global.set(\"Pasillo_SIMO_Fin_TLV2\", destino.pasillo);         // Pasillo para el fin de movimiento en TLV2\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Fin_TLV2`, 0);    // Variables auxiliares para el fin de movimiento en TLV2\n    }\n\n\n    // Además, establecer TLV2SimoEvent como true\n    global.set(\"eventoLanzadoTLV-2\", \"finOrden\");\n    global.set('TLV2SimoEvent', true);\n    global.set('errorExtraccionTLV2', true);\n    flow.set('tramaFinOrdenEnviada', true);\n\n} else {\n    node.warn(\"Condiciones no coinciden. Ninguna acción ejecutada.\");\n    flow.set('tramaFinOrdenEnviada', false);\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 3960,
        "wires": [
            [
                "20b3116b47019d51"
            ]
        ]
    },
    {
        "id": "b371593cf29a017e",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "d6c4eb345182fc79",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('enviarTramaFinOrden') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('enviarTramaFinOrden', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n\n    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3960,
        "wires": [
            [
                "413c4606763e232b"
            ]
        ]
    },
    {
        "id": "a5e1f2488907d19d",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "name": "180",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV2', 180)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3552fa7362cd9fe5",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 720,
        "wires": [
            [
                "a5e1f2488907d19d"
            ]
        ]
    },
    {
        "id": "91892589f9da38a1",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "repeatTramaCargaTLV2",
        "func": "global.set('repeatTramaCargaTLV2', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7bf6671b5c9a122f",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "91892589f9da38a1"
            ]
        ]
    },
    {
        "id": "100ce1e3eff745fe",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "0adc54d7671d15f9"
            ]
        ]
    },
    {
        "id": "0adc54d7671d15f9",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "abortTramaCargaTLV2",
        "func": "global.set('abortTramaCargaTLV2', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "76a31c615e1c4e76",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "repeatTramaFinOrdenTLV2",
        "func": "global.set('repeatTramaFinOrdenTLV2', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a8dcb0b26b7d5802",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "76a31c615e1c4e76"
            ]
        ]
    },
    {
        "id": "f2f6a37a67a91ea2",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "6cb44562987b62b2"
            ]
        ]
    },
    {
        "id": "6cb44562987b62b2",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "77d22cc2510905ed",
        "name": "abortTramaFinOrdenTLV2",
        "func": "global.set('abortTramaFinOrdenTLV2', true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6cc86788e53975a9",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 850,
        "y": 800,
        "wires": [
            [
                "8d5bb641d09138df"
            ]
        ]
    },
    {
        "id": "6f30a3b09fce9691",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "36465cac5e18f83e",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 850,
        "y": 1520,
        "wires": [
            [
                "c7eeff13580e91cf"
            ]
        ]
    },
    {
        "id": "69360a621403e7e8",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "3c5def14bd172264",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 1740,
        "wires": [
            [
                "eee407ea594f845e"
            ]
        ]
    },
    {
        "id": "bc9b36958a5bcbb5",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "e245e19170e3c274",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 2340,
        "wires": [
            [
                "84713a822553e94e"
            ]
        ]
    },
    {
        "id": "5190fdff86050fec",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "ca5c597380302641",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 2560,
        "wires": [
            [
                "c5ee7d8a613e6610"
            ]
        ]
    },
    {
        "id": "c1894c49e2173dcc",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "48ff8069408aa495",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 3020,
        "wires": [
            [
                "1846eb6d2d2928f1"
            ]
        ]
    },
    {
        "id": "d71ef268046addb7",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "5bba435ad44c6a54",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3200,
        "wires": [
            [
                "fbebc098ece054ae"
            ]
        ]
    },
    {
        "id": "b2b24f04193bb7be",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "0bb3e29d582ab885",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3400,
        "wires": [
            [
                "c7aa340d5170e073"
            ]
        ]
    },
    {
        "id": "46971330cffa7aab",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "7fd795bb6a18e461",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 3540,
        "wires": [
            [
                "586be23c09a08220"
            ]
        ]
    },
    {
        "id": "b1df259b3921711d",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "d36f313e7d511c76",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3740,
        "wires": [
            [
                "aa029a6fd75d1de9"
            ]
        ]
    },
    {
        "id": "6adac14109063798",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "d6c4eb345182fc79",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 3900,
        "wires": [
            [
                "b371593cf29a017e"
            ]
        ]
    },
    {
        "id": "bb5cbd47ef7223af",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "78f53fc2b0ab41f3",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 4120,
        "wires": [
            [
                "b77e26f207fb6638"
            ]
        ]
    },
    {
        "id": "7c0c91e6d234fe90",
        "type": "mysql",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1450,
        "y": 300,
        "wires": [
            [
                "fc18c107a726d2ed"
            ]
        ]
    },
    {
        "id": "11b136652d3749f3",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "set",
        "func": "   flow.set('idListoTLV2', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3f626f6a8a7a411a",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaTLV2\nvar tareaTLV2 = global.get('tareaTLV2');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV2 === 'undefined') {\n    node.error(\"Error: tareaTLV2 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV2\nvar movNumber = tareaTLV2.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV2.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV2.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion =  tareaTLV2.destino.estacion;\nvar pasillo = tareaTLV2.destino.pasillo; // Siempre tomamos pasillo de destino\n\n// Verificar si movNumber, uma y tipoCont están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof tipoCont === 'undefined') {\n    node.error(\"movNumber, uma o tipoCont no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para la inserción\n\n    msg.topic = `\n        INSERT INTO movimientosTLVsPSPs (estacion, destino, movNumber, uma, pasillo, fechaInicio, aux1)\n        VALUES ('TLV2', '${destinoEstacion}', '${movNumber}', '${uma}', '${pasillo}', NOW(),  '${tipoCont}');\n    `;\n\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 300,
        "wires": [
            [
                "7c0c91e6d234fe90"
            ]
        ]
    },
    {
        "id": "e21bbe3a83d011b8",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 320,
        "wires": [
            [
                "5d969f6518695407"
            ]
        ]
    },
    {
        "id": "b07ad136e7c59101",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 970,
        "y": 420,
        "wires": [
            [
                "3f626f6a8a7a411a"
            ]
        ]
    },
    {
        "id": "fc18c107a726d2ed",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaTLV2\nvar tareaTLV2 = global.get('tareaTLV2');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV2 === 'undefined') {\n    node.error(\"Error: tareaTLV2 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV2\nvar movNumber = tareaTLV2.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV2.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV2.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaTLV2.destino.estacion;\nvar pasillo = tareaTLV2.destino.pasillo; // Siempre tomamos pasillo de destino\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n\n    msg.topic = `\n        SELECT id FROM movimientosTLVsPSPs\n        WHERE movNumber = '${movNumber}' AND uma = '${uma}'\n        ORDER BY id DESC LIMIT 1;\n    `\n\n\nnode.warn(\"Consulta SQL generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 380,
        "wires": [
            [
                "7c1aaac52c28b974"
            ]
        ]
    },
    {
        "id": "7c1aaac52c28b974",
        "type": "mysql",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1370,
        "y": 440,
        "wires": [
            [
                "7c964d417e3cbf24",
                "463362ca860ee3ea"
            ]
        ]
    },
    {
        "id": "7c964d417e3cbf24",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "matriculaPLC",
        "func": "if (msg.payload && msg.payload.length > 0) {\n\n    let idEncontrado = msg.payload[0].id;\n\n    flow.set('matActualOrdenTLV2', idEncontrado);\n    node.warn(`ID encontrado: ${idEncontrado}`);\n    \n} else {\n    node.warn(\"No se encontró ningún ID para el movNumber y uma especificados.\");\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 520,
        "wires": [
            [
                "11b136652d3749f3"
            ]
        ]
    },
    {
        "id": "463362ca860ee3ea",
        "type": "debug",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "debug 195",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 440,
        "wires": []
    },
    {
        "id": "5d969f6518695407",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV2' está en true\nlet validar = flow.get('buscarIdOrdenTLV2');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV2...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenTLV2', false);\n    node.warn(\"Variable 'buscarIdOrdenTLV2' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV2' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "3f626f6a8a7a411a"
            ]
        ]
    },
    {
        "id": "5d63a04374b1a5f6",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "TRUNCATE movimientosTLVsPSPS",
        "func": "msg.topic = \"TRUNCATE TABLE movimientosTLVsPSPS;\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 520,
        "wires": [
            [
                "77162a66555b91ab"
            ]
        ]
    },
    {
        "id": "4c0bfd9dcc2741df",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 520,
        "wires": [
            [
                "5d63a04374b1a5f6"
            ]
        ]
    },
    {
        "id": "77162a66555b91ab",
        "type": "mysql",
        "z": "1e64cec7f3d8de56",
        "g": "195df12e2c781ddf",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1130,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "dc5f36d70ebb959d",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "updateTabla",
        "func": "// Obtener la tarea desde la variable global tareaTLV2\nvar tareaTLV2 = global.get('tareaTLV2');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV2 === 'undefined') {\n    node.error(\"Error: tareaTLV2 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV2\nvar movNumber = tareaTLV2.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV2.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV2.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaTLV2.destino.estacion;\nvar pasillo = tareaTLV2.destino.pasillo; // Siempre tomamos pasillo de destino\nvar xOrigen = tareaTLV2.origen.xActual; // \nvar yOrigen = tareaTLV2.origen.yActual; // \nvar ladoOrigen = tareaTLV2.origen.lado; // \nvar xDestino = tareaTLV2.destino.xActual; // \nvar yDestino = tareaTLV2.destino.yActual; // \nvar ladoDestino = tareaTLV2.destino.lado; // \n\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada');\nlet idEncontrado = flow.get('matActualOrdenTLV2'); // Obtener el ID de la variable de flujo\n\n// Verificar si el ID está definido\nif (typeof idEncontrado === 'undefined' || idEncontrado === null) {\n    node.error(\"El ID matActualOrdenTLV2 no está definido\");\n    return null;\n}\n\nif (tipoTarea === 'depositoTLV2') {\n\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xDestino}', y = '${yDestino}', lado = '${ladoDestino}', estado = 'inProcess'\n        WHERE id = ${idEncontrado};\n        `;\n \n  \n  return msg;\n \n} else if (tipoTarea === 'extraccionTLV2'  ){\n   \n        // Generar la consulta SQL para actualizar el registro con estado \"finish\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xOrigen}', y = '${yOrigen}', lado = '${ladoOrigen}', estado = 'inProcess'\n        WHERE id = ${idEncontrado};\n        `;\n  return msg;\n   \n} else {\n    return null; // No hacer nada si la tarea no es 'depositoTLV2'\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 840,
        "wires": [
            [
                "bd79e0bb531bb2e9"
            ]
        ]
    },
    {
        "id": "bd79e0bb531bb2e9",
        "type": "mysql",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1650,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "20b3116b47019d51",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "d6c4eb345182fc79",
        "name": "updateTabla",
        "func": "// Obtener la tarea desde la variable global tareaTLV2\nvar tareaTLV2 = global.get('tareaTLV2');\n\n// Verificar si la tarea está definida\nif (typeof tareaTLV2 === 'undefined') {\n    node.error(\"Error: tareaTLV2 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, tipoCont, destinoEstacion y pasillo desde tareaTLV2\nvar movNumber = tareaTLV2.datosAdicionales.numeroTransporte;\nvar uma = tareaTLV2.datosAdicionales.umaContenedor;\nvar tipoCont = tareaTLV2.datosAdicionales.tipoContenedor; // Valor que queremos insertar en 'aux1'\nvar destinoEstacion = tareaTLV2.destino.estacion;\nvar pasillo = tareaTLV2.destino.pasillo; // Siempre tomamos pasillo de destino\nvar xOrigen = tareaTLV2.origen.xActual; // \nvar yOrigen = tareaTLV2.origen.yActual; // \nvar ladoOrigen = tareaTLV2.origen.lado; // \nvar xDestino = tareaTLV2.destino.xActual; // \nvar yDestino = tareaTLV2.destino.yActual; // \nvar ladoDestino = tareaTLV2.destino.lado; // \n\n// Obtener el nuevo registro actual del TLV2 desde la variable global\nlet nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n\n// Obtener las variables del PLC relacionadas con el fin de la orden\nlet finOrdenEstado = nuevoRegistroTLV2[\"FIN_ORDEN_ESTADO\"];\nlet finOrdenResultado = nuevoRegistroTLV2[\"FIN_ORDEN_RESULTADO\"];\n\n\n\n// Verificar si la tarea es de depósito o extracción\nlet tipoTarea = flow.get('tipoTareaTLV2Chekeada');\nlet idEncontrado = flow.get('matActualOrdenTLV2'); // Obtener el ID de la variable de flujo\n\n// Verificar si el ID está definido\nif (typeof idEncontrado === 'undefined' || idEncontrado === null) {\n    node.error(\"El ID matActualOrdenTLV2 no está definido\");\n    return null;\n}\n\nif (tipoTarea === 'depositoTLV2') {\n    if (finOrdenResultado === 1 && finOrdenEstado === 2) {\n        // Generar la consulta SQL para actualizar el registro con estado \"finish\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xDestino}', y = '${yDestino}', lado = '${ladoDestino}', estado = 'finish', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    } else if (finOrdenResultado === 3 && finOrdenEstado === 2 ){\n\n        // Generar la consulta SQL para actualizar el registro con estado \"errorDep\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xDestino}', y = '${yDestino}', lado = '${ladoDestino}', estado = 'errorDep', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    }\n\n\n\n\n} else if (tipoTarea === 'extraccionTLV2'  ){\n    if (finOrdenResultado === 2 && finOrdenEstado === 2) {\n        // Generar la consulta SQL para actualizar el registro con estado \"finish\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xOrigen}', y = '${yOrigen}', lado = '${ladoOrigen}', estado = 'finish', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    } else if (finOrdenResultado === 4 && finOrdenEstado === 2) {\n\n        // Generar la consulta SQL para actualizar el registro con estado \"errorDep\"\n        msg.topic = `\n        UPDATE movimientosTLVsPSPs\n        SET x = '${xOrigen}', y = '${yOrigen}', lado = '${ladoOrigen}', estado = 'errorExt', fechaFin  = NOW()\n        WHERE id = ${idEncontrado};\n        `;\n        return msg;\n    }\n} else {\n    return null; // No hacer nada si la tarea no es 'depositoTLV2'\n}\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 3960,
        "wires": [
            [
                "3b78f810a51c6cfc"
            ]
        ]
    },
    {
        "id": "3b78f810a51c6cfc",
        "type": "mysql",
        "z": "1e64cec7f3d8de56",
        "g": "d6c4eb345182fc79",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1650,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "cb2fbd2c0a87e89a",
        "type": "mysql",
        "z": "1e64cec7f3d8de56",
        "g": "7fd795bb6a18e461",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1610,
        "y": 3580,
        "wires": [
            []
        ]
    },
    {
        "id": "5c384e42e96b28ec",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "PASILLO_ACTUAL_TLV2",
        "func": "var nuevoRegistroTLV2 = global.get(\"nuevoRegistroTLV2\");\n\nif (typeof nuevoRegistroTLV2 === 'undefined' || nuevoRegistroTLV2 === null) {\n    node.warn(\"No hay datos actuales de TLV2 disponibles.\");\n    return msg;\n}\n// Obtener el pasillo actual del registro TLV2\nvar pasilloActualTLV2 = nuevoRegistroTLV2[\"PASILLO_ACTUAL\"];\n\n// Obtener el tipo de tarea de  TLV2\n var tipoTareaTLV2Chekeada = flow.get('tipoTareaTLV2Chekeada');\n\n\n// Verificar que el pasillo sea un valor válido del 1 al 12\nif (typeof pasilloActualTLV2 === 'number' && pasilloActualTLV2 >= 1 && pasilloActualTLV2 <= 12 && tipoTareaTLV2Chekeada === 'depositoTLV2') {\n    msg.payload = pasilloActualTLV2; // Establecer el valor del pasillo actual en el payload\n    node.warn(`Pasillo actual detectado: ${pasilloActualTLV2}`); // Mensaje para depuración\n} else {\n    node.error(\"El pasillo actual no es válido o está fuera del rango 1-12.\");\n    msg.payload = 0; // Devolver null si el pasillo no es válido\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 980,
        "wires": [
            [
                "6de7e6528ffbfe1b"
            ]
        ]
    },
    {
        "id": "6de7e6528ffbfe1b",
        "type": "switch",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "11",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "12",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 13,
        "x": 1290,
        "y": 1080,
        "wires": [
            [
                "5f59d18be6d00d97"
            ],
            [
                "2ffb31e8766dedcf"
            ],
            [
                "53f6190e09dc0c9d"
            ],
            [
                "55a7b6b114b7368f"
            ],
            [
                "693f647b8b75f53c"
            ],
            [
                "9fbe6c300f8c0126"
            ],
            [
                "90819666511bdc84"
            ],
            [
                "e9f8526b6915e438"
            ],
            [
                "92140d4588ce57c9"
            ],
            [
                "5a5a522dd8d5123e"
            ],
            [
                "fb52baf177d2997d"
            ],
            [
                "c49514b0a7d4c1cc"
            ],
            []
        ]
    },
    {
        "id": "5f59d18be6d00d97",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP1",
        "mode": "link",
        "links": [
            "3145fc1c2e7ed744"
        ],
        "x": 1495,
        "y": 900,
        "wires": []
    },
    {
        "id": "2ffb31e8766dedcf",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP2",
        "mode": "link",
        "links": [
            "34767641d5ff0051"
        ],
        "x": 1535,
        "y": 920,
        "wires": []
    },
    {
        "id": "53f6190e09dc0c9d",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP3",
        "mode": "link",
        "links": [
            "06dbcc7fd7c5dc6b"
        ],
        "x": 1505,
        "y": 960,
        "wires": []
    },
    {
        "id": "55a7b6b114b7368f",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP4",
        "mode": "link",
        "links": [
            "4ceb02c87d43e0a0"
        ],
        "x": 1545,
        "y": 980,
        "wires": []
    },
    {
        "id": "693f647b8b75f53c",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP5",
        "mode": "link",
        "links": [
            "e5fbe9424eba984b"
        ],
        "x": 1505,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9fbe6c300f8c0126",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP6",
        "mode": "link",
        "links": [
            "4141f05dde2a069f"
        ],
        "x": 1545,
        "y": 1020,
        "wires": []
    },
    {
        "id": "90819666511bdc84",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP7",
        "mode": "link",
        "links": [
            "dec1a917ea1b2806"
        ],
        "x": 1515,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e9f8526b6915e438",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP8",
        "mode": "link",
        "links": [
            "6e4a7cc95bafb4da"
        ],
        "x": 1555,
        "y": 1080,
        "wires": []
    },
    {
        "id": "92140d4588ce57c9",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP9",
        "mode": "link",
        "links": [
            "eceb06f1dec2b7bd"
        ],
        "x": 1515,
        "y": 1120,
        "wires": []
    },
    {
        "id": "5a5a522dd8d5123e",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP10",
        "mode": "link",
        "links": [
            "800e1f67c3e236f9"
        ],
        "x": 1555,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fb52baf177d2997d",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP11",
        "mode": "link",
        "links": [
            "bbd3ad34e6f958b5"
        ],
        "x": 1515,
        "y": 1160,
        "wires": []
    },
    {
        "id": "c49514b0a7d4c1cc",
        "type": "link out",
        "z": "1e64cec7f3d8de56",
        "g": "1bcf2cb1b0a42810",
        "name": "AvPEP12",
        "mode": "link",
        "links": [
            "0423f8d4065ea597"
        ],
        "x": 1565,
        "y": 1200,
        "wires": []
    },
    {
        "id": "eef2fa8b99fbec28",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "100",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV2', 100)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "68cd2cb6fc53cf1a",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "eef2fa8b99fbec28"
            ]
        ]
    },
    {
        "id": "f0740e22245f0b31",
        "type": "function",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "40",
        "func": "global.set('stateMachineEventStageEjecutarTareaTLV2', 40)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "96f3502fe1245243",
        "type": "inject",
        "z": "1e64cec7f3d8de56",
        "g": "a168636adae803a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 760,
        "wires": [
            [
                "f0740e22245f0b31"
            ]
        ]
    },
    {
        "id": "7328cc6b3e8b7720",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "stateMachineEventStageTarea_PSP1-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP1`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "36d4041de20a6559",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "7328cc6b3e8b7720"
            ]
        ]
    },
    {
        "id": "da98132d7a95ad26",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "stateMachineEventStageTarea_PSP1-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP1`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "545410c82db9a73d",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "da98132d7a95ad26"
            ]
        ]
    },
    {
        "id": "cd83e6509b003d5e",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 780,
        "wires": [
            [
                "63bd5ece79642717"
            ]
        ]
    },
    {
        "id": "63bd5ece79642717",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet matActualOrdenPSP1 = flow.get('matActualOrdenPSP1');\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP1');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: matActualOrdenPSP1 };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP1Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 940,
        "wires": [
            [],
            [
                "ceb8b433f6d29ccc"
            ]
        ]
    },
    {
        "id": "541360be5adbdf44",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 860,
        "wires": [
            [
                "63bd5ece79642717"
            ]
        ]
    },
    {
        "id": "c97d680f58fde684",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 1020,
        "wires": [
            [
                "ceb8b433f6d29ccc"
            ]
        ]
    },
    {
        "id": "f26c7a969061cea7",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "variablesPLC_PSP1Escritas",
        "func": "flow.set(\"variablesPLC_PSP1Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "ceb8b433f6d29ccc",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 940,
        "wires": [
            [
                "3b5df8bccc8db3c3",
                "f26c7a969061cea7"
            ]
        ]
    },
    {
        "id": "3b5df8bccc8db3c3",
        "type": "s7comm write",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"4\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP1\"}",
        "s7Name": "Destino_salida_CT_PSP1",
        "topic": "",
        "name": "Destino_salida_CT_PSP1",
        "signalSetted": false,
        "x": 1450,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "595ab54f270f0f09",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f9e6acaba3340566",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP1\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP1', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 80,
        "wires": [
            [
                "cc9b3705fd0a5164"
            ]
        ]
    },
    {
        "id": "cc9b3705fd0a5164",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f9e6acaba3340566",
        "name": "checkTareaPSP1",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP1\nlet tareaPSP1 = global.get('tareaPSP1');\n\nif (!tareaPSP1) {\n    node.warn(\"No se ha encontrado la tarea PSP1.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP1\nlet destino = tareaPSP1.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP1\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP1', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP1Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP1: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP1', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP1Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP1: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP1Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP1. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b05a7be686a3f7a8",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "2a775d2df704492d"
            ]
        ]
    },
    {
        "id": "2a775d2df704492d",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP1_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1400,
        "wires": [
            [
                "71767363fbe7a5d7"
            ],
            [
                "3a085428754432a5",
                "443826e661986802"
            ]
        ]
    },
    {
        "id": "2218f2f61c45dcf9",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1320,
        "wires": [
            [
                "2a775d2df704492d"
            ]
        ]
    },
    {
        "id": "68f6378ba5c93183",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 1260,
        "wires": [
            [
                "71767363fbe7a5d7"
            ]
        ]
    },
    {
        "id": "443826e661986802",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "ordenPLC_PSP1_OK",
        "func": "flow.set(\"ordenPLC_PSP1_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "2d177ae6f74668f4",
        "type": "s7comm write",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"0\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP1\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP1",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP1",
        "signalSetted": false,
        "x": 1490,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "953f0621b55eb9c9",
        "type": "debug",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "debug 114",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1260,
        "wires": []
    },
    {
        "id": "71767363fbe7a5d7",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1360,
        "wires": [
            [
                "2d177ae6f74668f4"
            ]
        ]
    },
    {
        "id": "8e4b908c5dfb1ae8",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "stateMachineEventStageTarea_PSP1-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP1`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d43a5e97274d5d60",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "8e4b908c5dfb1ae8"
            ]
        ]
    },
    {
        "id": "c446ea093eeacb75",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "stateMachineEventStageTarea_PSP3-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP3`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "725e4189f41b81c8",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1980,
        "wires": [
            [
                "c446ea093eeacb75"
            ]
        ]
    },
    {
        "id": "07bcc9e70909969d",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "stateMachineEventStageTarea_PSP3-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP3`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "fc546e5ba0bcb1f7",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1900,
        "wires": [
            [
                "07bcc9e70909969d"
            ]
        ]
    },
    {
        "id": "09f2af83fa7735fe",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "stateMachineEventStageTarea_PSP3-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP3`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "33dec85144cbed5e",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2060,
        "wires": [
            [
                "09f2af83fa7735fe"
            ]
        ]
    },
    {
        "id": "3f30cce0a5f6080f",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "20cfd5ee33bb88c2",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP3\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP3', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP3' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1640,
        "wires": [
            [
                "36d0d327761c8019"
            ]
        ]
    },
    {
        "id": "36d0d327761c8019",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "20cfd5ee33bb88c2",
        "name": "checkTareaPSP3",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP3\nlet tareaPSP3 = global.get('tareaPSP3');\n\nif (!tareaPSP3) {\n    node.warn(\"No se ha encontrado la tarea PSP3.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP3\nlet destino = tareaPSP3.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP3\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP3', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP3Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP3: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP3', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP3Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP3: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP3Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP3. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "6bca5e334837654a",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 2340,
        "wires": [
            [
                "7a894a612013586a"
            ]
        ]
    },
    {
        "id": "7a894a612013586a",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP3');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP3Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2580,
        "wires": [
            [],
            [
                "c44e41c3d23cc728"
            ]
        ]
    },
    {
        "id": "8217270303f25021",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP3') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP3', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2420,
        "wires": [
            [
                "7a894a612013586a"
            ]
        ]
    },
    {
        "id": "b6e8062d64ac0f62",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 2360,
        "wires": [
            [
                "c44e41c3d23cc728"
            ]
        ]
    },
    {
        "id": "5f6fa0a5b271c879",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "variablesPLC_PSP3Escritas",
        "func": "flow.set(\"variablesPLC_PSP3Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "9f516186bcfc4499",
        "type": "debug",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "debug 131",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 2360,
        "wires": []
    },
    {
        "id": "c44e41c3d23cc728",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2500,
        "wires": [
            [
                "c7e8d68a879cd921",
                "5f6fa0a5b271c879"
            ]
        ]
    },
    {
        "id": "c7e8d68a879cd921",
        "type": "s7comm write",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"20\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP3\"}",
        "s7Name": "Destino_salida_CT_PSP3",
        "topic": "",
        "name": "Destino_salida_CT_PSP3",
        "signalSetted": false,
        "x": 1490,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "986b2ce837d0ac13",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 2720,
        "wires": [
            [
                "11e001f618fab933"
            ]
        ]
    },
    {
        "id": "d0879bddda16f98e",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP3') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP3', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2800,
        "wires": [
            [
                "11e001f618fab933"
            ]
        ]
    },
    {
        "id": "4d1bb31d4c197a9c",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 2740,
        "wires": [
            [
                "81d6960b5e71130b"
            ]
        ]
    },
    {
        "id": "9eba16525246f058",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "ordenPLC_PSP3_OK",
        "func": "flow.set(\"ordenPLC_PSP3_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "e49c3e83c7c5d881",
        "type": "s7comm write",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"16\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP3\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP3",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP3",
        "signalSetted": false,
        "x": 1490,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "99e3c9c0308f8d12",
        "type": "debug",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "debug 132",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2740,
        "wires": []
    },
    {
        "id": "81d6960b5e71130b",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 2840,
        "wires": [
            [
                "e49c3e83c7c5d881"
            ]
        ]
    },
    {
        "id": "3a085428754432a5",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1420,
        "wires": [
            [
                "e1ba342dd91a5f19"
            ]
        ]
    },
    {
        "id": "e1ba342dd91a5f19",
        "type": "s7comm write",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"5\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP1\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP1",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP1",
        "signalSetted": false,
        "x": 1490,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "11e001f618fab933",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP3_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2860,
        "wires": [
            [
                "81d6960b5e71130b"
            ],
            [
                "9eba16525246f058",
                "e0bb66056053ba20"
            ]
        ]
    },
    {
        "id": "e0bb66056053ba20",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2880,
        "wires": [
            [
                "c5cac29bdd54fccd"
            ]
        ]
    },
    {
        "id": "c5cac29bdd54fccd",
        "type": "s7comm write",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"21\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP3\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP3",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP3",
        "signalSetted": false,
        "x": 1490,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "326c69e4ea92eaec",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "f04c69b1abad55cb"
            ]
        ]
    },
    {
        "id": "d335dc4e0df7ada6",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1780,
        "wires": [
            [
                "f2426e9a5d72bf0a"
            ]
        ]
    },
    {
        "id": "077b624834015732",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "f9e6acaba3340566",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "595ab54f270f0f09"
            ]
        ]
    },
    {
        "id": "4e4e34390f9831d9",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "02e742e3fd9b7bb4",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "541360be5adbdf44"
            ]
        ]
    },
    {
        "id": "a9fa2ed4f6212a6c",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "6ed37191e4ea4b42",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1420,
        "wires": [
            [
                "2218f2f61c45dcf9"
            ]
        ]
    },
    {
        "id": "e24a2b1d1fb3a6d5",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "20cfd5ee33bb88c2",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1660,
        "wires": [
            [
                "3f30cce0a5f6080f"
            ]
        ]
    },
    {
        "id": "ff8314c14fe18929",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "a540f56a6f48836c",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2460,
        "wires": [
            [
                "8217270303f25021"
            ]
        ]
    },
    {
        "id": "3de83f1c2dd3b060",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "f63ed13ef3a5bf96",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2780,
        "wires": [
            [
                "d0879bddda16f98e"
            ]
        ]
    },
    {
        "id": "f04c69b1abad55cb",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "91c4c6490c63a7ec",
        "name": "fsmPSP1",
        "func": "// Máquina de estados para PSP1\nfunction maquinaEstadosPSP1() {\n    // Obtener el estado actual para PSP1\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP1') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP1 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP1', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP1(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP1', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP1', false);\n            flow.set('variablesPSP1Escritas', false);\n            flow.set('escribirVariablesPLC_PSP1', false);\n            flow.set('variablesPLC_PSP1Escritas', false);\n            flow.set('verificarVariablesPLC_PSP1', false);\n            flow.set('variablesOkPLC_PSP1', false);\n            flow.set('ejecutarTareaPSP1', false);\n            flow.set('ordenPLC_PSP1_OK', false);\n            flow.set('idListoPSP1', false);\n            flow.set('buscarIdOrdenPSP1', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP1(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP1', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP1');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP1', true);\n                setStateMachineEventStageNumberPSP1(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP1', `21_buscarID`);\n            let idListo = flow.get('idListoPSP1');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP1(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP1', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP1', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP1(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP1', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP1Escritas') === true) {\n                setStateMachineEventStageNumberPSP1(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP1', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP1', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP1(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP1', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP1Escritas') === true) {\n                setStateMachineEventStageNumberPSP1(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP1', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP1', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP1') === true) {\n                setStateMachineEventStageNumberPSP1(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP1(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP1', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP1(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP1', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP1(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP1', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP1\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP1(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP1', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP1_OK') === true) {\n                setStateMachineEventStageNumberPSP1(900, `900_RegistrarCiclo`);\n                resetTareaPSP1();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP1', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP1(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP1', `1000_FinCiclo`);\n             global.set('datosListosPSP1', false); // Resetear datos listos para PSP1\n            setTimeout(() => setStateMachineEventStageNumberPSP1(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP1(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP1\nconst setStateMachineEventStageNumberPSP1 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP1', num);\n    flow.set('stateMachineCurrentStateTarea_PSP1', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP1\nconst resetTareaPSP1 = () => {\n    global.set('datosListosPSP1', false);\n};\n\n// Llamada inicial para PSP1\nmaquinaEstadosPSP1();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "dcbcef8363afd94e",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "69bfed3e29726c9c",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP1');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP1', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP1' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "bd4bcabad528a559"
            ]
        ]
    },
    {
        "id": "2b6dc5a5d2bce919",
        "type": "mysql",
        "z": "3f5b05842fb56c90",
        "g": "69bfed3e29726c9c",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "fad93cdf0ac34c91"
            ]
        ]
    },
    {
        "id": "fad93cdf0ac34c91",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "69bfed3e29726c9c",
        "name": "set",
        "func": " flow.set('idListoPSP1', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "bd4bcabad528a559",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "69bfed3e29726c9c",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP1\nvar tareaPSP1 = global.get('tareaPSP1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP1 === 'undefined') {\n    node.error(\"Error: tareaPSP1 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP1\nvar movNumber = tareaPSP1.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP1.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP1.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP1';\n`;\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "2b6dc5a5d2bce919"
            ]
        ]
    },
    {
        "id": "1759c181a040f9b7",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "69bfed3e29726c9c",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "dcbcef8363afd94e"
            ]
        ]
    },
    {
        "id": "f2426e9a5d72bf0a",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "7c0f3464b328bbf2",
        "name": "fsmPSP3",
        "func": "// Máquina de estados para PSP3\nfunction maquinaEstadosPSP3() {\n    // Obtener el estado actual para PSP3\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP3') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP3 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP3', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP3(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP3', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP3', false);\n            flow.set('variablesPSP3Escritas', false);\n            flow.set('escribirVariablesPLC_PSP3', false);\n            flow.set('variablesPLC_PSP3Escritas', false);\n            flow.set('verificarVariablesPLC_PSP3', false);\n            flow.set('variablesOkPLC_PSP3', false);\n            flow.set('ejecutarTareaPSP3', false);\n            flow.set('ordenPLC_PSP3_OK', false);\n            flow.set('idListoPSP3', false);\n            flow.set('buscarIdOrdenPSP3', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP3(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP3', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP3');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP3', true);\n                setStateMachineEventStageNumberPSP3(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP3', `21_buscarID`);\n            let idListo = flow.get('idListoPSP3');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP3(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP3', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP3', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP3(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP3', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP3Escritas') === true) {\n                setStateMachineEventStageNumberPSP3(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP3', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP3', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP3(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP3', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP3Escritas') === true) {\n                setStateMachineEventStageNumberPSP3(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP3', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP3', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP3') === true) {\n                setStateMachineEventStageNumberPSP3(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP3(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP3', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP3(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP3', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP3(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP3', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP3\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP3(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP3', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP3_OK') === true) {\n                setStateMachineEventStageNumberPSP3(900, `900_RegistrarCiclo`);\n                resetTareaPSP3();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP3', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP3(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP3', `1000_FinCiclo`);\n             global.set('datosListosPSP3', false); // Resetear datos listos para PSP3\n            setTimeout(() => setStateMachineEventStageNumberPSP3(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP3(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP3\nconst setStateMachineEventStageNumberPSP3 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP3', num);\n    flow.set('stateMachineCurrentStateTarea_PSP3', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP3\nconst resetTareaPSP3 = () => {\n    global.set('datosListosPSP3', false);\n};\n\n// Llamada inicial para PSP3\nmaquinaEstadosPSP3();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "6c18208eee226158",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "69bfed3e29726c9c",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "bd4bcabad528a559"
            ]
        ]
    },
    {
        "id": "32d3b680a0cca12a",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "369e46fa8f25be17",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP3');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP3', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP3' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1820,
        "wires": [
            [
                "9ff8b007e91b185d"
            ]
        ]
    },
    {
        "id": "c4cdc8f8d0b3c2a5",
        "type": "mysql",
        "z": "3f5b05842fb56c90",
        "g": "369e46fa8f25be17",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1170,
        "y": 1900,
        "wires": [
            [
                "5c9558fc42b58029"
            ]
        ]
    },
    {
        "id": "5c9558fc42b58029",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "369e46fa8f25be17",
        "name": "set",
        "func": " flow.set('idListoPSP3', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "9ff8b007e91b185d",
        "type": "function",
        "z": "3f5b05842fb56c90",
        "g": "369e46fa8f25be17",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP3\nvar tareaPSP3 = global.get('tareaPSP3');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP3 === 'undefined') {\n    node.error(\"Error: tareaPSP3 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP3\nvar movNumber = tareaPSP3.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP3.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP3.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP3';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1900,
        "wires": [
            [
                "c4cdc8f8d0b3c2a5"
            ]
        ]
    },
    {
        "id": "9c811746b4dd0bdd",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "369e46fa8f25be17",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1920,
        "wires": [
            [
                "32d3b680a0cca12a"
            ]
        ]
    },
    {
        "id": "9b960692451adcea",
        "type": "inject",
        "z": "3f5b05842fb56c90",
        "g": "369e46fa8f25be17",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 2020,
        "wires": [
            [
                "9ff8b007e91b185d"
            ]
        ]
    },
    {
        "id": "3b1d814c88a2437c",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "stateMachineEventStageTarea_PSP5-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP5`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "bd69482a950af46a",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "3b1d814c88a2437c"
            ]
        ]
    },
    {
        "id": "90c72b7d961f5653",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "stateMachineEventStageTarea_PSP5-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP5`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "df7572995952c143",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "90c72b7d961f5653"
            ]
        ]
    },
    {
        "id": "c6909d486382b9b3",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "stateMachineEventStageTarea_PSP5-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP5`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "86954211b102782c",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "c6909d486382b9b3"
            ]
        ]
    },
    {
        "id": "158e4097c8d8f2c8",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "bcae445a38804066",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP5\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP5', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP5' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 80,
        "wires": [
            [
                "866af4918c410e12"
            ]
        ]
    },
    {
        "id": "866af4918c410e12",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "bcae445a38804066",
        "name": "checkTareaPSP5",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP5\nlet tareaPSP5 = global.get('tareaPSP5');\n\nif (!tareaPSP5) {\n    node.warn(\"No se ha encontrado la tarea PSP5.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP5\nlet destino = tareaPSP5.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP5\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP5', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP5Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP5: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP5', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP5Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP5: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP5Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP5. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c1a9386dbafe2589",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 920,
        "wires": [
            [
                "e03b4af4ceb37f4f"
            ]
        ]
    },
    {
        "id": "e03b4af4ceb37f4f",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP5');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP5Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1160,
        "wires": [
            [],
            [
                "4bff04d7e0b26223"
            ]
        ]
    },
    {
        "id": "3d02edff7bb59a3d",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP5') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP5', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "e03b4af4ceb37f4f"
            ]
        ]
    },
    {
        "id": "b4b194a81fcc9e95",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 940,
        "wires": [
            [
                "4bff04d7e0b26223"
            ]
        ]
    },
    {
        "id": "95d550ad14a00320",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "variablesPLC_PSP5Escritas",
        "func": "flow.set(\"variablesPLC_PSP5Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "b1063302f8b6bc07",
        "type": "debug",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "debug 135",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 940,
        "wires": []
    },
    {
        "id": "4bff04d7e0b26223",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1080,
        "wires": [
            [
                "8c80050cb26a9a15",
                "95d550ad14a00320"
            ]
        ]
    },
    {
        "id": "8c80050cb26a9a15",
        "type": "s7comm write",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"36\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP5\"}",
        "s7Name": "Destino_salida_CT_PSP5",
        "topic": "",
        "name": "Destino_salida_CT_PSP5",
        "signalSetted": false,
        "x": 1490,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "a02dcb1fad894856",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "e845573c70ad144a"
            ]
        ]
    },
    {
        "id": "a7962182969ab2c3",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP5') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP5', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1380,
        "wires": [
            [
                "e845573c70ad144a"
            ]
        ]
    },
    {
        "id": "6a2024c38364f167",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 1320,
        "wires": [
            [
                "a348499db94853fd"
            ]
        ]
    },
    {
        "id": "9e1755e6d82aa581",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "ordenPLC_PSP5_OK",
        "func": "flow.set(\"ordenPLC_PSP5_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "aee81e34523658af",
        "type": "s7comm write",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"32\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP5\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP5",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP5",
        "signalSetted": false,
        "x": 1510,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "8bbd1bbd6c4aa75e",
        "type": "debug",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "debug 136",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a348499db94853fd",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1420,
        "wires": [
            [
                "aee81e34523658af"
            ]
        ]
    },
    {
        "id": "d6c8220ec05964d3",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "stateMachineEventStageTarea_PSP7-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP7`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c5de6eb3f4ba80",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2020,
        "wires": [
            [
                "d6c8220ec05964d3"
            ]
        ]
    },
    {
        "id": "cbb12a5ac18bdcb9",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "stateMachineEventStageTarea_PSP7-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP7`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "da68b5ac3b70fca4",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1940,
        "wires": [
            [
                "cbb12a5ac18bdcb9"
            ]
        ]
    },
    {
        "id": "423b8d1d1a2f64ab",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "stateMachineEventStageTarea_PSP7-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP7`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "fc5a05bbbef18157",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2100,
        "wires": [
            [
                "423b8d1d1a2f64ab"
            ]
        ]
    },
    {
        "id": "78323ab3fe7c9be8",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ac33974ca35e89d3",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP7\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP7', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP7' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1680,
        "wires": [
            [
                "424b27d6f522c259"
            ]
        ]
    },
    {
        "id": "424b27d6f522c259",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ac33974ca35e89d3",
        "name": "checkTareaPSP7",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP7\nlet tareaPSP7 = global.get('tareaPSP7');\n\nif (!tareaPSP7) {\n    node.warn(\"No se ha encontrado la tarea PSP7.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP7\nlet destino = tareaPSP7.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP7\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP7', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP7Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP7: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP7', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP7Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP7: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP7Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP7. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "b37ee89cb3dd7822",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 2360,
        "wires": [
            [
                "619f83f3dd7d88aa"
            ]
        ]
    },
    {
        "id": "619f83f3dd7d88aa",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP7');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP7Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2600,
        "wires": [
            [],
            [
                "b0169eca3bd474ca"
            ]
        ]
    },
    {
        "id": "425204a1e8838f2f",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP7') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP7', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2440,
        "wires": [
            [
                "619f83f3dd7d88aa"
            ]
        ]
    },
    {
        "id": "2f70b8354cbac2d0",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 2380,
        "wires": [
            [
                "b0169eca3bd474ca"
            ]
        ]
    },
    {
        "id": "28b774ca3ecdc9be",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "variablesPLC_PSP7Escritas",
        "func": "flow.set(\"variablesPLC_PSP7Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "c9fb7b39cfd7e191",
        "type": "debug",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "debug 137",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 2380,
        "wires": []
    },
    {
        "id": "b0169eca3bd474ca",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2520,
        "wires": [
            [
                "1fa99cd247c39f20",
                "28b774ca3ecdc9be"
            ]
        ]
    },
    {
        "id": "1fa99cd247c39f20",
        "type": "s7comm write",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"52\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP7\"}",
        "s7Name": "Destino_salida_CT_PSP7",
        "topic": "",
        "name": "Destino_salida_CT_PSP7",
        "signalSetted": false,
        "x": 1490,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "e72c30283fa8f74c",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 2720,
        "wires": [
            [
                "509aa8606bda998b"
            ]
        ]
    },
    {
        "id": "349f9b58228b265e",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP7') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP7', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "509aa8606bda998b"
            ]
        ]
    },
    {
        "id": "a129fea1e8cc3c48",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 910,
        "y": 2740,
        "wires": [
            [
                "6b5703ab82850cdc"
            ]
        ]
    },
    {
        "id": "408cc007a2b8b34b",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "ordenPLC_PSP7_OK",
        "func": "flow.set(\"ordenPLC_PSP7_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "df9c68a37ebb7234",
        "type": "s7comm write",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"48\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP7\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP7",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP7",
        "signalSetted": false,
        "x": 1470,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "d683555c5552bf7c",
        "type": "debug",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "debug 138",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 2740,
        "wires": []
    },
    {
        "id": "6b5703ab82850cdc",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2840,
        "wires": [
            [
                "df9c68a37ebb7234"
            ]
        ]
    },
    {
        "id": "e845573c70ad144a",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP5_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1460,
        "wires": [
            [
                "a348499db94853fd"
            ],
            [
                "9e1755e6d82aa581",
                "bfada9808c8b8b4c"
            ]
        ]
    },
    {
        "id": "bfada9808c8b8b4c",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1500,
        "wires": [
            [
                "76f10ed758db1811"
            ]
        ]
    },
    {
        "id": "76f10ed758db1811",
        "type": "s7comm write",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"37\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP5\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP5",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP5",
        "signalSetted": false,
        "x": 1530,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "509aa8606bda998b",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP7_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2880,
        "wires": [
            [
                "6b5703ab82850cdc"
            ],
            [
                "408cc007a2b8b34b",
                "0b940ae650b158b3"
            ]
        ]
    },
    {
        "id": "0b940ae650b158b3",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2920,
        "wires": [
            [
                "0ce2ab96de627b70"
            ]
        ]
    },
    {
        "id": "0ce2ab96de627b70",
        "type": "s7comm write",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"53\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP7\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP7",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP7",
        "signalSetted": false,
        "x": 1490,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "60c70461b8ddcc38",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "2f9264a2f13fa879"
            ]
        ]
    },
    {
        "id": "ee2ca57ea1703772",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1820,
        "wires": [
            [
                "4c4d89e2b06b0fff"
            ]
        ]
    },
    {
        "id": "ae2d155df2a233f1",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "bcae445a38804066",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "158e4097c8d8f2c8"
            ]
        ]
    },
    {
        "id": "708c393dcf875894",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ba0d7f2ea8130e48",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 960,
        "wires": [
            [
                "3d02edff7bb59a3d"
            ]
        ]
    },
    {
        "id": "ed0ab53c8cc57e10",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ef82c2fea16d5978",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1360,
        "wires": [
            [
                "a7962182969ab2c3"
            ]
        ]
    },
    {
        "id": "3a07a9275b984578",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "ac33974ca35e89d3",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1680,
        "wires": [
            [
                "78323ab3fe7c9be8"
            ]
        ]
    },
    {
        "id": "74024d972e8d4cca",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "50c8c6e4abfe8cd0",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2420,
        "wires": [
            [
                "425204a1e8838f2f"
            ]
        ]
    },
    {
        "id": "62f04d5ee739abf3",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "fa81f2f669d055b2",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2900,
        "wires": [
            [
                "349f9b58228b265e"
            ]
        ]
    },
    {
        "id": "4c4d89e2b06b0fff",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "3fa57fbfb16a1cf3",
        "name": "fsmPSP7",
        "func": "// Máquina de estados para PSP7\nfunction maquinaEstadosPSP7() {\n    // Obtener el estado actual para PSP7\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP7') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP7 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP7', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP7(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP7', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP7', false);\n            flow.set('variablesPSP7Escritas', false);\n            flow.set('escribirVariablesPLC_PSP7', false);\n            flow.set('variablesPLC_PSP7Escritas', false);\n            flow.set('verificarVariablesPLC_PSP7', false);\n            flow.set('variablesOkPLC_PSP7', false);\n            flow.set('ejecutarTareaPSP7', false);\n            flow.set('ordenPLC_PSP7_OK', false);\n            flow.set('idListoPSP7', false);\n            flow.set('buscarIdOrdenPSP7', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP7(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP7', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP7');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP7', true);\n                setStateMachineEventStageNumberPSP7(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP7', `21_buscarID`);\n            let idListo = flow.get('idListoPSP7');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP7(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP7', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP7', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP7(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP7', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP7Escritas') === true) {\n                setStateMachineEventStageNumberPSP7(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP7', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP7', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP7(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP7', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP7Escritas') === true) {\n                setStateMachineEventStageNumberPSP7(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP7', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP7', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP7') === true) {\n                setStateMachineEventStageNumberPSP7(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP7(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP7', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP7(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP7', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP7(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP7', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP7\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP7(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP7', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP7_OK') === true) {\n                setStateMachineEventStageNumberPSP7(900, `900_RegistrarCiclo`);\n                resetTareaPSP7();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP7', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP7(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP7', `1000_FinCiclo`);\n             global.set('datosListosPSP7', false); // Resetear datos listos para PSP7\n            setTimeout(() => setStateMachineEventStageNumberPSP7(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP7(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP7\nconst setStateMachineEventStageNumberPSP7 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP7', num);\n    flow.set('stateMachineCurrentStateTarea_PSP7', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP7\nconst resetTareaPSP7 = () => {\n    global.set('datosListosPSP7', false);\n};\n\n// Llamada inicial para PSP7\nmaquinaEstadosPSP7();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "2f9264a2f13fa879",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5520edbd3f5870dc",
        "name": "fsmPSP5",
        "func": "// Máquina de estados para PSP5\nfunction maquinaEstadosPSP5() {\n    // Obtener el estado actual para PSP5\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP5') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP5 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP5', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP5(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP5', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP5', false);\n            flow.set('variablesPSP5Escritas', false);\n            flow.set('escribirVariablesPLC_PSP5', false);\n            flow.set('variablesPLC_PSP5Escritas', false);\n            flow.set('verificarVariablesPLC_PSP5', false);\n            flow.set('variablesOkPLC_PSP5', false);\n            flow.set('ejecutarTareaPSP5', false);\n            flow.set('ordenPLC_PSP5_OK', false);\n            flow.set('idListoPSP5', false);\n            flow.set('buscarIdOrdenPSP5', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP5(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP5', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP5');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP5', true);\n                setStateMachineEventStageNumberPSP5(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP5', `21_buscarID`);\n            let idListo = flow.get('idListoPSP5');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP5(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP5', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP5', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP5(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP5', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP5Escritas') === true) {\n                setStateMachineEventStageNumberPSP5(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP5', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP5', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP5(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP5', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP5Escritas') === true) {\n                setStateMachineEventStageNumberPSP5(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP5', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP5', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP5') === true) {\n                setStateMachineEventStageNumberPSP5(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP5(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP5', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP5(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP5', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP5(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP5', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP5\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP5(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP5', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP5_OK') === true) {\n                setStateMachineEventStageNumberPSP5(900, `900_RegistrarCiclo`);\n                resetTareaPSP5();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP5', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP5(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP5', `1000_FinCiclo`);\n             global.set('datosListosPSP5', false); // Resetear datos listos para PSP5\n            setTimeout(() => setStateMachineEventStageNumberPSP5(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP5(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP5\nconst setStateMachineEventStageNumberPSP5 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP5', num);\n    flow.set('stateMachineCurrentStateTarea_PSP5', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP5\nconst resetTareaPSP5 = () => {\n    global.set('datosListosPSP5', false);\n};\n\n// Llamada inicial para PSP5\nmaquinaEstadosPSP5();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "caeb7cc3fdc4ac92",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "cc8bbb3fe98bfc62",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP5');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP5', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP5' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            [
                "f8b7d7a3778273ce"
            ]
        ]
    },
    {
        "id": "e1a2b26e26733806",
        "type": "mysql",
        "z": "183127036e7cddc7",
        "g": "cc8bbb3fe98bfc62",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 420,
        "wires": [
            [
                "42c72f305de2afca"
            ]
        ]
    },
    {
        "id": "42c72f305de2afca",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "cc8bbb3fe98bfc62",
        "name": "set",
        "func": " flow.set('idListoPSP5', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f8b7d7a3778273ce",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "cc8bbb3fe98bfc62",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP5\nvar tareaPSP5 = global.get('tareaPSP5');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP5 === 'undefined') {\n    node.error(\"Error: tareaPSP5 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP5\nvar movNumber = tareaPSP5.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP5.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP5.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP5';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "e1a2b26e26733806"
            ]
        ]
    },
    {
        "id": "1ad7d520f7f14ded",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "cc8bbb3fe98bfc62",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 440,
        "wires": [
            [
                "caeb7cc3fdc4ac92"
            ]
        ]
    },
    {
        "id": "7c9bf0e833b82afe",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "cc8bbb3fe98bfc62",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 540,
        "wires": [
            [
                "f8b7d7a3778273ce"
            ]
        ]
    },
    {
        "id": "2a45ebbc31cc2332",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5d2677ee11fe8022",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP7');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP7', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP7' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1860,
        "wires": [
            [
                "819311a6e3914948"
            ]
        ]
    },
    {
        "id": "4805139499b753ca",
        "type": "mysql",
        "z": "183127036e7cddc7",
        "g": "5d2677ee11fe8022",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 1940,
        "wires": [
            [
                "4bd13c6cf6621773"
            ]
        ]
    },
    {
        "id": "4bd13c6cf6621773",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5d2677ee11fe8022",
        "name": "set",
        "func": " flow.set('idListoPSP7', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "819311a6e3914948",
        "type": "function",
        "z": "183127036e7cddc7",
        "g": "5d2677ee11fe8022",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP7\nvar tareaPSP7 = global.get('tareaPSP7');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP7 === 'undefined') {\n    node.error(\"Error: tareaPSP7 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP7\nvar movNumber = tareaPSP7.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP7.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP7.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP7';\n`;\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1940,
        "wires": [
            [
                "4805139499b753ca"
            ]
        ]
    },
    {
        "id": "8f2daae6e548dc42",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "5d2677ee11fe8022",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1960,
        "wires": [
            [
                "2a45ebbc31cc2332"
            ]
        ]
    },
    {
        "id": "391c09a78d22a02d",
        "type": "inject",
        "z": "183127036e7cddc7",
        "g": "5d2677ee11fe8022",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 2060,
        "wires": [
            [
                "819311a6e3914948"
            ]
        ]
    },
    {
        "id": "9fcdc6fc558b696b",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "stateMachineEventStageTarea_PSP9-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP9`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5ce16e09adcd5f2a",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "9fcdc6fc558b696b"
            ]
        ]
    },
    {
        "id": "777056b1f4ace48f",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "stateMachineEventStageTarea_PSP9-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP9`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e053301bacc4e548",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "777056b1f4ace48f"
            ]
        ]
    },
    {
        "id": "18efbc7f54254027",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "stateMachineEventStageTarea_PSP9-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP9`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "00cbf0599a28ff78",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "18efbc7f54254027"
            ]
        ]
    },
    {
        "id": "bc25b867b941d5ea",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "811df613b013231c",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP9\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP9', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP9' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 80,
        "wires": [
            [
                "963139f6ebb011d8"
            ]
        ]
    },
    {
        "id": "963139f6ebb011d8",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "811df613b013231c",
        "name": "checkTareaPSP5",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP9\nlet tareaPSP9 = global.get('tareaPSP9');\n\nif (!tareaPSP9) {\n    node.warn(\"No se ha encontrado la tarea PSP9.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP9\nlet destino = tareaPSP9.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP9\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP9', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP9Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP9: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP9', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP9Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP9: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP9Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP9. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b3c44919f276a19c",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 860,
        "wires": [
            [
                "b691885ae0456278"
            ]
        ]
    },
    {
        "id": "b691885ae0456278",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP9');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP9Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1100,
        "wires": [
            [],
            [
                "a8a80944e3988be4"
            ]
        ]
    },
    {
        "id": "8c03ef6ead2deecc",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP9') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP9', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 940,
        "wires": [
            [
                "b691885ae0456278"
            ]
        ]
    },
    {
        "id": "e06e2268817a32f1",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 880,
        "wires": [
            [
                "a8a80944e3988be4"
            ]
        ]
    },
    {
        "id": "761c5f9036286893",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "variablesPLC_PSP9Escritas",
        "func": "flow.set(\"variablesPLC_PSP9Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "626d84a7c4009eab",
        "type": "debug",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "debug 143",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 880,
        "wires": []
    },
    {
        "id": "a8a80944e3988be4",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1020,
        "wires": [
            [
                "68fb9572526c80d9",
                "761c5f9036286893"
            ]
        ]
    },
    {
        "id": "68fb9572526c80d9",
        "type": "s7comm write",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"68\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP9\"}",
        "s7Name": "Destino_salida_CT_PSP9",
        "topic": "",
        "name": "Destino_salida_CT_PSP9",
        "signalSetted": false,
        "x": 1490,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "01f9c51b6201b802",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 1220,
        "wires": [
            [
                "585abbc7aeafbc6b"
            ]
        ]
    },
    {
        "id": "0589d2e4cc2fcd2c",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP9') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP9', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "585abbc7aeafbc6b"
            ]
        ]
    },
    {
        "id": "3653b8d8f2c9cbbf",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 1240,
        "wires": [
            [
                "59a886e7347bfc86"
            ]
        ]
    },
    {
        "id": "e92a5c716a307270",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "ordenPLC_PSP9_OK",
        "func": "flow.set(\"ordenPLC_PSP9_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "fef8f56227d1afbf",
        "type": "s7comm write",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"64\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP9\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP9",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP9",
        "signalSetted": false,
        "x": 1510,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "defc63b209a31ab1",
        "type": "debug",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "debug 144",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1240,
        "wires": []
    },
    {
        "id": "59a886e7347bfc86",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1340,
        "wires": [
            [
                "fef8f56227d1afbf"
            ]
        ]
    },
    {
        "id": "b6f0f6df3cdfc109",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "stateMachineEventStageTarea_PSP11-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP11`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "854da75e13d889e4",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2200,
        "wires": [
            [
                "b6f0f6df3cdfc109"
            ]
        ]
    },
    {
        "id": "113f9acacf3b557a",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "stateMachineEventStageTarea_PSP11-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP11`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "ee221efb378cf088",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2120,
        "wires": [
            [
                "113f9acacf3b557a"
            ]
        ]
    },
    {
        "id": "08b426e6a64d09e1",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "stateMachineEventStageTarea_PSP11-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP11`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "d27418c5790ec305",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2280,
        "wires": [
            [
                "08b426e6a64d09e1"
            ]
        ]
    },
    {
        "id": "d330b8ca28eb2ebc",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "03584b19a9ee9f70",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP11\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP11', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP11' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1860,
        "wires": [
            [
                "b67b19fa979bf57a"
            ]
        ]
    },
    {
        "id": "b67b19fa979bf57a",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "03584b19a9ee9f70",
        "name": "checkTareaPSP11",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP11\nlet tareaPSP11 = global.get('tareaPSP11');\n\nif (!tareaPSP11) {\n    node.warn(\"No se ha encontrado la tarea PSP11.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP11\nlet destino = tareaPSP11.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP11\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP11', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP11Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP11: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP11', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP11Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP11: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP11Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP11. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "7f6ac5a4a5c3a39c",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 2560,
        "wires": [
            [
                "b661f114d751c4f0"
            ]
        ]
    },
    {
        "id": "b661f114d751c4f0",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP11');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP11Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2800,
        "wires": [
            [],
            [
                "1f63b9dfd75b16a3"
            ]
        ]
    },
    {
        "id": "e684cb5e05d824f1",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP11') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP11', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2640,
        "wires": [
            [
                "b661f114d751c4f0"
            ]
        ]
    },
    {
        "id": "b321910853bda327",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 2580,
        "wires": [
            [
                "1f63b9dfd75b16a3"
            ]
        ]
    },
    {
        "id": "5028a9dd658fed94",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "variablesPLC_PSP11Escritas",
        "func": "flow.set(\"variablesPLC_PSP11Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "dc8acee5475f588f",
        "type": "debug",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "debug 145",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 2580,
        "wires": []
    },
    {
        "id": "1f63b9dfd75b16a3",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2720,
        "wires": [
            [
                "6914182db8076041",
                "5028a9dd658fed94"
            ]
        ]
    },
    {
        "id": "6914182db8076041",
        "type": "s7comm write",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"84\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP11\"}",
        "s7Name": "Destino_salida_CT_PSP11",
        "topic": "",
        "name": "Destino_salida_CT_PSP11",
        "signalSetted": false,
        "x": 1500,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "c90dc026c407fd47",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 2920,
        "wires": [
            [
                "61808ae634f4cb52"
            ]
        ]
    },
    {
        "id": "e924726dd7fc9110",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP11') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP11', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 3000,
        "wires": [
            [
                "61808ae634f4cb52"
            ]
        ]
    },
    {
        "id": "200c175aaa8b9cdc",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 2940,
        "wires": [
            [
                "f9f73805da87a5c8"
            ]
        ]
    },
    {
        "id": "535d016a11cd1413",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "ordenPLC_PSP11_OK",
        "func": "flow.set(\"ordenPLC_PSP11_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "d3f141a80ef81d44",
        "type": "s7comm write",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"80\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP11\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP11",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP11",
        "signalSetted": false,
        "x": 1510,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "433e55b1ca1b0e3f",
        "type": "debug",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "debug 146",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2940,
        "wires": []
    },
    {
        "id": "f9f73805da87a5c8",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 3040,
        "wires": [
            [
                "d3f141a80ef81d44"
            ]
        ]
    },
    {
        "id": "585abbc7aeafbc6b",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP9_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1340,
        "wires": [
            [
                "59a886e7347bfc86"
            ],
            [
                "e92a5c716a307270",
                "9aef246b61dfc20f"
            ]
        ]
    },
    {
        "id": "9aef246b61dfc20f",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1400,
        "wires": [
            [
                "fff13f5f95b2971d"
            ]
        ]
    },
    {
        "id": "fff13f5f95b2971d",
        "type": "s7comm write",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"69\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP9\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP9",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP9",
        "signalSetted": false,
        "x": 1530,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "61808ae634f4cb52",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP11_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3060,
        "wires": [
            [
                "f9f73805da87a5c8"
            ],
            [
                "535d016a11cd1413",
                "bf8a19917dc48559"
            ]
        ]
    },
    {
        "id": "bf8a19917dc48559",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 3120,
        "wires": [
            [
                "c352ce6557a305e2"
            ]
        ]
    },
    {
        "id": "c352ce6557a305e2",
        "type": "s7comm write",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"85\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP11\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP11",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP11",
        "signalSetted": false,
        "x": 1520,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "ad531e41a0305ccd",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "4a289e6eb1013450"
            ]
        ]
    },
    {
        "id": "5f2345bf4a4784fe",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2020,
        "wires": [
            [
                "ab3f7349c3804316"
            ]
        ]
    },
    {
        "id": "0ad0a7c07c12e272",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "811df613b013231c",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 80,
        "wires": [
            [
                "bc25b867b941d5ea"
            ]
        ]
    },
    {
        "id": "6d89bd939dc2008f",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "3cdc9748647da7fd",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 920,
        "wires": [
            [
                "8c03ef6ead2deecc"
            ]
        ]
    },
    {
        "id": "172598e3151dadad",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "31c038a20e5bb68b",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1280,
        "wires": [
            [
                "0589d2e4cc2fcd2c"
            ]
        ]
    },
    {
        "id": "f0b9d60fab93ae43",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "03584b19a9ee9f70",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1880,
        "wires": [
            [
                "d330b8ca28eb2ebc"
            ]
        ]
    },
    {
        "id": "3016a0ea717106a3",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "f6ff23f63e4166b7",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2660,
        "wires": [
            [
                "e684cb5e05d824f1"
            ]
        ]
    },
    {
        "id": "e1e5ea7bbd7bc3fe",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "ca7ee928aec78ed6",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2980,
        "wires": [
            [
                "e924726dd7fc9110"
            ]
        ]
    },
    {
        "id": "4a289e6eb1013450",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "0c86f36287e2313f",
        "name": "fsmPSP9",
        "func": "// Máquina de estados para PSP9\nfunction maquinaEstadosPSP9() {\n    // Obtener el estado actual para PSP9\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP9') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP9 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP9', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP9(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP9', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP9', false);\n            flow.set('variablesPSP9Escritas', false);\n            flow.set('escribirVariablesPLC_PSP9', false);\n            flow.set('variablesPLC_PSP9Escritas', false);\n            flow.set('verificarVariablesPLC_PSP9', false);\n            flow.set('variablesOkPLC_PSP9', false);\n            flow.set('ejecutarTareaPSP9', false);\n            flow.set('ordenPLC_PSP9_OK', false);\n            flow.set('idListoPSP9', false);\n            flow.set('buscarIdOrdenPSP9', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP9(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP9', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP9');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP9', true);\n                setStateMachineEventStageNumberPSP9(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP9', `21_buscarID`);\n            let idListo = flow.get('idListoPSP9');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP9(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP9', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP9', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP9(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP9', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP9Escritas') === true) {\n                setStateMachineEventStageNumberPSP9(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP9', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP9', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP9(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP9', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP9Escritas') === true) {\n                setStateMachineEventStageNumberPSP9(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP9', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP9', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP9') === true) {\n                setStateMachineEventStageNumberPSP9(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP9(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP9', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP9(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP9', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP9(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP9', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP9\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP9(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP9', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP9_OK') === true) {\n                setStateMachineEventStageNumberPSP9(900, `900_RegistrarCiclo`);\n                resetTareaPSP9();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP9', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP9(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP9', `1000_FinCiclo`);\n             global.set('datosListosPSP9', false); // Resetear datos listos para PSP9\n            setTimeout(() => setStateMachineEventStageNumberPSP9(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP9(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP9\nconst setStateMachineEventStageNumberPSP9 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP9', num);\n    flow.set('stateMachineCurrentStateTarea_PSP9', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP9\nconst resetTareaPSP9 = () => {\n    global.set('datosListosPSP9', false);\n};\n\n// Llamada inicial para PSP9\nmaquinaEstadosPSP9();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ab3f7349c3804316",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "904378873328d525",
        "name": "fsmPSP11",
        "func": "// Máquina de estados para PSP11\nfunction maquinaEstadosPSP11() {\n    // Obtener el estado actual para PSP11\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP11') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP11 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP11', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP11(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP11', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP11', false);\n            flow.set('variablesPSP11Escritas', false);\n            flow.set('escribirVariablesPLC_PSP11', false);\n            flow.set('variablesPLC_PSP11Escritas', false);\n            flow.set('verificarVariablesPLC_PSP11', false);\n            flow.set('variablesOkPLC_PSP11', false);\n            flow.set('ejecutarTareaPSP11', false);\n            flow.set('ordenPLC_PSP11_OK', false);\n            flow.set('idListoPSP11', false);\n            flow.set('buscarIdOrdenPSP11', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP11(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP11', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP11');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP11', true);\n                setStateMachineEventStageNumberPSP11(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP11', `21_buscarID`);\n            let idListo = flow.get('idListoPSP11');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP11(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP11', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP11', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP11(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP11', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP11Escritas') === true) {\n                setStateMachineEventStageNumberPSP11(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP11', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP11', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP11(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP11', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP11Escritas') === true) {\n                setStateMachineEventStageNumberPSP11(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP11', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP11', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP11') === true) {\n                setStateMachineEventStageNumberPSP11(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP11(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP11', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP11(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP11', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP11(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP11', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP11\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP11(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP11', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP11_OK') === true) {\n                setStateMachineEventStageNumberPSP11(900, `900_RegistrarCiclo`);\n                resetTareaPSP11();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP11', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP11(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP11', `1000_FinCiclo`);\n             global.set('datosListosPSP11', false); // Resetear datos listos para PSP11\n            setTimeout(() => setStateMachineEventStageNumberPSP11(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP11(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP11\nconst setStateMachineEventStageNumberPSP11 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP11', num);\n    flow.set('stateMachineCurrentStateTarea_PSP11', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP11\nconst resetTareaPSP11 = () => {\n    global.set('datosListosPSP11', false);\n};\n\n// Llamada inicial para PSP11\nmaquinaEstadosPSP11();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "4c2e275edab753b7",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "6e27ade6f2345916",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP9');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP9', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP9' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "2ac3555fb919e6dd"
            ]
        ]
    },
    {
        "id": "3f49251ad52ab5d1",
        "type": "mysql",
        "z": "1373e2c202c57aa8",
        "g": "6e27ade6f2345916",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 340,
        "wires": [
            [
                "fc7e03642f1e3992"
            ]
        ]
    },
    {
        "id": "fc7e03642f1e3992",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "6e27ade6f2345916",
        "name": "set",
        "func": " flow.set('idListoPSP9', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2ac3555fb919e6dd",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "6e27ade6f2345916",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP9\nvar tareaPSP9 = global.get('tareaPSP9');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP9 === 'undefined') {\n    node.error(\"Error: tareaPSP9 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP9\nvar movNumber = tareaPSP9.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP9.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP9.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP9';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "3f49251ad52ab5d1"
            ]
        ]
    },
    {
        "id": "e9eeb54d47e25888",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "6e27ade6f2345916",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 360,
        "wires": [
            [
                "4c2e275edab753b7"
            ]
        ]
    },
    {
        "id": "af876c9a47a6b5c6",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "6e27ade6f2345916",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 460,
        "wires": [
            [
                "2ac3555fb919e6dd"
            ]
        ]
    },
    {
        "id": "d0651ce182a6882b",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "4c0387305bf45916",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP11');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP11', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP11' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2060,
        "wires": [
            [
                "c7155521da2d4f9d"
            ]
        ]
    },
    {
        "id": "40d6d5552dcb93ad",
        "type": "mysql",
        "z": "1373e2c202c57aa8",
        "g": "4c0387305bf45916",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 2140,
        "wires": [
            [
                "6f82cd968e9e2a07"
            ]
        ]
    },
    {
        "id": "6f82cd968e9e2a07",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "4c0387305bf45916",
        "name": "set",
        "func": " flow.set('idListoPSP11', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "c7155521da2d4f9d",
        "type": "function",
        "z": "1373e2c202c57aa8",
        "g": "4c0387305bf45916",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP11\nvar tareaPSP11 = global.get('tareaPSP11');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP11 === 'undefined') {\n    node.error(\"Error: tareaPSP11 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP11\nvar movNumber = tareaPSP11.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP11.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP11.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP11';\n`;\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2140,
        "wires": [
            [
                "40d6d5552dcb93ad"
            ]
        ]
    },
    {
        "id": "519f53bb0f4caa1d",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "4c0387305bf45916",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2160,
        "wires": [
            [
                "d0651ce182a6882b"
            ]
        ]
    },
    {
        "id": "ef955768db613b78",
        "type": "inject",
        "z": "1373e2c202c57aa8",
        "g": "4c0387305bf45916",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 2260,
        "wires": [
            [
                "c7155521da2d4f9d"
            ]
        ]
    },
    {
        "id": "1e38fb9fde19060c",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "stateMachineEventStageTarea_PSP2-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP2`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "1f8f1fe3c5bc252c",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 460,
        "wires": [
            [
                "1e38fb9fde19060c"
            ]
        ]
    },
    {
        "id": "fa05a6a2e791312f",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "stateMachineEventStageTarea_PSP2-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP2`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "59132ef2e539f371",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "fa05a6a2e791312f"
            ]
        ]
    },
    {
        "id": "e8ebd324af8383cd",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "stateMachineEventStageTarea_PSP2-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP2`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "37f99081ec0eddb4",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "e8ebd324af8383cd"
            ]
        ]
    },
    {
        "id": "7078c3c25b991764",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "9a5342aff6b85257",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP2\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP2', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP2' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 120,
        "wires": [
            [
                "b0f8060b659e21c6"
            ]
        ]
    },
    {
        "id": "b0f8060b659e21c6",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "9a5342aff6b85257",
        "name": "checkTareaPSP2",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP2\nlet tareaPSP2 = global.get('tareaPSP2');\n\nif (!tareaPSP2) {\n    node.warn(\"No se ha encontrado la tarea PSP2.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP2\nlet destino = tareaPSP2.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP2\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP2', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP2Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP2: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP2', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP2Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP2: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP2Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP2. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5b78067f1e9b4fba",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 880,
        "wires": [
            [
                "8dbc87250c23e4cc"
            ]
        ]
    },
    {
        "id": "8dbc87250c23e4cc",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP2');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP2Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1120,
        "wires": [
            [],
            [
                "b253ba66d9c6c452"
            ]
        ]
    },
    {
        "id": "73f48cb3abbcf6d4",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 960,
        "wires": [
            [
                "8dbc87250c23e4cc"
            ]
        ]
    },
    {
        "id": "f5e7ef62a13da151",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 900,
        "wires": [
            [
                "b253ba66d9c6c452"
            ]
        ]
    },
    {
        "id": "b9d12b88ea0b14a2",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "variablesPLC_PSP2Escritas",
        "func": "flow.set(\"variablesPLC_PSP2Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "4f447897b5a74081",
        "type": "debug",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "debug 118",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 900,
        "wires": []
    },
    {
        "id": "b253ba66d9c6c452",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1040,
        "wires": [
            [
                "cc6c7e4fc90b499c",
                "b9d12b88ea0b14a2"
            ]
        ]
    },
    {
        "id": "cc6c7e4fc90b499c",
        "type": "s7comm write",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"12\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP2\"}",
        "s7Name": "Destino_salida_CT_PSP2",
        "topic": "",
        "name": "Destino_salida_CT_PSP2",
        "signalSetted": false,
        "x": 1490,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "444111ca8a81d151",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 1260,
        "wires": [
            [
                "8412bb5133f56146"
            ]
        ]
    },
    {
        "id": "003bcd66193d65e7",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP2') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP2', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "8412bb5133f56146"
            ]
        ]
    },
    {
        "id": "6ee276e7adbb5896",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 1280,
        "wires": [
            [
                "3c5d92152be891bc"
            ]
        ]
    },
    {
        "id": "329983dc24cc276b",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "ordenPLC_PSP2_OK",
        "func": "flow.set(\"ordenPLC_PSP2_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "840b535d9efe1d70",
        "type": "s7comm write",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"8\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP2\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP2",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP2",
        "signalSetted": false,
        "x": 1510,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "b700637f8989c664",
        "type": "debug",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "debug 119",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3c5d92152be891bc",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1380,
        "wires": [
            [
                "840b535d9efe1d70"
            ]
        ]
    },
    {
        "id": "257b118a11e70f63",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "70e8f0c180e2590e"
            ]
        ]
    },
    {
        "id": "70e8f0c180e2590e",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "datosListosPSP2-->true",
        "func": "\n global.set('datosListosPSP2', true) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "48b7763c6cba9913",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "stateMachineEventStageTarea_PSP4-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP4`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "4a01048fd065c987",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1960,
        "wires": [
            [
                "48b7763c6cba9913"
            ]
        ]
    },
    {
        "id": "b413bd2048112e73",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "stateMachineEventStageTarea_PSP4-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP4`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "b1d28768303f2e67",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1880,
        "wires": [
            [
                "b413bd2048112e73"
            ]
        ]
    },
    {
        "id": "6a24b7b4319f248a",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "stateMachineEventStageTarea_PSP4-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP4`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "9cf9b9e857a66329",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2040,
        "wires": [
            [
                "6a24b7b4319f248a"
            ]
        ]
    },
    {
        "id": "c5996e724706a42c",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1800,
        "wires": [
            [
                "2f85162f2b553886"
            ]
        ]
    },
    {
        "id": "2f85162f2b553886",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "datosListosPSP4-->true",
        "func": "\nglobal.set('datosListosPSP4', true) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "68ca47d9a41f0648",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "1f767773e8e91daf",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP4\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP4', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP4' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1620,
        "wires": [
            [
                "92bb34d9ecbd7511"
            ]
        ]
    },
    {
        "id": "92bb34d9ecbd7511",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "1f767773e8e91daf",
        "name": "checkTareaPSP2",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP4\nlet tareaPSP4 = global.get('tareaPSP4');\n\nif (!tareaPSP4) {\n    node.warn(\"No se ha encontrado la tarea PSP4.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP4\nlet destino = tareaPSP4.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP4\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP4', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP4Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP4: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP4', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP4Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP4: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP4Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP4. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "9158b0596dd796b3",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 2380,
        "wires": [
            [
                "9a4533554c8d7e9b"
            ]
        ]
    },
    {
        "id": "9a4533554c8d7e9b",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP4');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP4Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2620,
        "wires": [
            [],
            [
                "4e1a4b7b42ca22d8"
            ]
        ]
    },
    {
        "id": "e16f12e9b6f21091",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP4') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP4', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2460,
        "wires": [
            [
                "9a4533554c8d7e9b"
            ]
        ]
    },
    {
        "id": "03377541c972500c",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 2400,
        "wires": [
            [
                "4e1a4b7b42ca22d8"
            ]
        ]
    },
    {
        "id": "0d3b28b0ef2c8c65",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "variablesPLC_PSP4Escritas",
        "func": "flow.set(\"variablesPLC_PSP4Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "20ff8e59bf94ad81",
        "type": "debug",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "debug 133",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 2400,
        "wires": []
    },
    {
        "id": "4e1a4b7b42ca22d8",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 2540,
        "wires": [
            [
                "deb51d87878ad11b",
                "0d3b28b0ef2c8c65"
            ]
        ]
    },
    {
        "id": "deb51d87878ad11b",
        "type": "s7comm write",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"28\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP4\"}",
        "s7Name": "Destino_salida_CT_PSP4",
        "topic": "",
        "name": "Destino_salida_CT_PSP4",
        "signalSetted": false,
        "x": 1490,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "51646704ed0701a9",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 2740,
        "wires": [
            [
                "5907e81fd733e8e0"
            ]
        ]
    },
    {
        "id": "9e535c4b4942da11",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP4') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP4', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2820,
        "wires": [
            [
                "5907e81fd733e8e0"
            ]
        ]
    },
    {
        "id": "ece5674ee1ce4afc",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 950,
        "y": 2760,
        "wires": [
            [
                "4b9c5a402db8b761"
            ]
        ]
    },
    {
        "id": "2848ff7e2cd05a36",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "ordenPLC_PSP4_OK",
        "func": "flow.set(\"ordenPLC_PSP4_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "4b54592a7f2d3fd2",
        "type": "s7comm write",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"24\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP4\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP4",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP4",
        "signalSetted": false,
        "x": 1510,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "7431ba7d03f85a14",
        "type": "debug",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "debug 134",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2760,
        "wires": []
    },
    {
        "id": "4b9c5a402db8b761",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 2860,
        "wires": [
            [
                "4b54592a7f2d3fd2"
            ]
        ]
    },
    {
        "id": "8412bb5133f56146",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP2_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "3c5d92152be891bc"
            ],
            [
                "329983dc24cc276b",
                "4859e4ca5dc394dd"
            ]
        ]
    },
    {
        "id": "4859e4ca5dc394dd",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1460,
        "wires": [
            [
                "71729d722676a230"
            ]
        ]
    },
    {
        "id": "71729d722676a230",
        "type": "s7comm write",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"13\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP2\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP2",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP2",
        "signalSetted": false,
        "x": 1530,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "5907e81fd733e8e0",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP4_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2900,
        "wires": [
            [
                "4b9c5a402db8b761"
            ],
            [
                "2848ff7e2cd05a36",
                "2415b6ebd8d6ad60"
            ]
        ]
    },
    {
        "id": "2415b6ebd8d6ad60",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 2940,
        "wires": [
            [
                "7adcd018ecf5f8fd"
            ]
        ]
    },
    {
        "id": "7adcd018ecf5f8fd",
        "type": "s7comm write",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"29\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP4\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP4",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP4",
        "signalSetted": false,
        "x": 1510,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "0e96cba9100beac1",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "1ebf4f9fa228cb8e"
            ]
        ]
    },
    {
        "id": "a7995a0b5ae9d86a",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1740,
        "wires": [
            [
                "c431a0dbfaf7ff91"
            ]
        ]
    },
    {
        "id": "659bdcf93b73bcd0",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "9a5342aff6b85257",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "7078c3c25b991764"
            ]
        ]
    },
    {
        "id": "bfc165bb2a8fcc6b",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "dc3eb14b99fb7288",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 940,
        "wires": [
            [
                "73f48cb3abbcf6d4"
            ]
        ]
    },
    {
        "id": "d5faa6c137c7abfe",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "bf3163ed112798e1",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1300,
        "wires": [
            [
                "003bcd66193d65e7"
            ]
        ]
    },
    {
        "id": "40fccbe2a718055c",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "1f767773e8e91daf",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1640,
        "wires": [
            [
                "68ca47d9a41f0648"
            ]
        ]
    },
    {
        "id": "27fa1ba8a25f58c1",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d340762b0f93fa84",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2420,
        "wires": [
            [
                "e16f12e9b6f21091"
            ]
        ]
    },
    {
        "id": "64c1b3e2773e36cb",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d65bebade15b7b4b",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2940,
        "wires": [
            [
                "9e535c4b4942da11"
            ]
        ]
    },
    {
        "id": "1ebf4f9fa228cb8e",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "a186c4ac5193be64",
        "name": "fsmPSP2",
        "func": "// Máquina de estados para PSP2\nfunction maquinaEstadosPSP2() {\n    // Obtener el estado actual para PSP2\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP2') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP2 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP2', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP2(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP2', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP2', false);\n            flow.set('variablesPSP2Escritas', false);\n            flow.set('escribirVariablesPLC_PSP2', false);\n            flow.set('variablesPLC_PSP2Escritas', false);\n            flow.set('verificarVariablesPLC_PSP2', false);\n            flow.set('variablesOkPLC_PSP2', false);\n            flow.set('ejecutarTareaPSP2', false);\n            flow.set('ordenPLC_PSP2_OK', false);\n            flow.set('idListoPSP2', false);\n            flow.set('buscarIdOrdenPSP2', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP2(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP2', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP2');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP2', true);\n                setStateMachineEventStageNumberPSP2(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP2', `21_buscarID`);\n            let idListo = flow.get('idListoPSP2');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP2(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP2', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP2', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP2(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP2', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP2Escritas') === true) {\n                setStateMachineEventStageNumberPSP2(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP2', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP2', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP2(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP2', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP2Escritas') === true) {\n                setStateMachineEventStageNumberPSP2(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP2', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP2', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP2') === true) {\n                setStateMachineEventStageNumberPSP2(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP2(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP2', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP2(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP2', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP2(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP2', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP2\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP2(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP2', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP2_OK') === true) {\n                setStateMachineEventStageNumberPSP2(900, `900_RegistrarCiclo`);\n                resetTareaPSP2();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP2', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP2(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP2', `1000_FinCiclo`);\n             global.set('datosListosPSP2', false); // Resetear datos listos para PSP2\n            setTimeout(() => setStateMachineEventStageNumberPSP2(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP2(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP2\nconst setStateMachineEventStageNumberPSP2 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP2', num);\n    flow.set('stateMachineCurrentStateTarea_PSP2', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP2\nconst resetTareaPSP2 = () => {\n    global.set('datosListosPSP2', false);\n};\n\n// Llamada inicial para PSP2\nmaquinaEstadosPSP2();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c431a0dbfaf7ff91",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "be551fd19e05c3bc",
        "name": "fsmPSP4",
        "func": "// Máquina de estados para PSP4\nfunction maquinaEstadosPSP4() {\n    // Obtener el estado actual para PSP4\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP4') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP4 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP4', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP4(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP4', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP4', false);\n            flow.set('variablesPSP4Escritas', false);\n            flow.set('escribirVariablesPLC_PSP4', false);\n            flow.set('variablesPLC_PSP4Escritas', false);\n            flow.set('verificarVariablesPLC_PSP4', false);\n            flow.set('variablesOkPLC_PSP4', false);\n            flow.set('ejecutarTareaPSP4', false);\n            flow.set('ordenPLC_PSP4_OK', false);\n            flow.set('idListoPSP4', false);\n            flow.set('buscarIdOrdenPSP4', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP4(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP4', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP4');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP4', true);\n                setStateMachineEventStageNumberPSP4(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP4', `21_buscarID`);\n            let idListo = flow.get('idListoPSP4');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP4(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP4', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP4', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP4(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP4', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP4Escritas') === true) {\n                setStateMachineEventStageNumberPSP4(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP4', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP4', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP4(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP4', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP4Escritas') === true) {\n                setStateMachineEventStageNumberPSP4(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP4', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP4', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP4') === true) {\n                setStateMachineEventStageNumberPSP4(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP4(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP4', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP4(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP4', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP4(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP4', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP4\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP4(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP4', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP4_OK') === true) {\n                setStateMachineEventStageNumberPSP4(900, `900_RegistrarCiclo`);\n                resetTareaPSP4();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP4', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP4(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP4', `1000_FinCiclo`);\n             global.set('datosListosPSP4', false); // Resetear datos listos para PSP4\n            setTimeout(() => setStateMachineEventStageNumberPSP4(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP4(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP4\nconst setStateMachineEventStageNumberPSP4 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP4', num);\n    flow.set('stateMachineCurrentStateTarea_PSP4', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP4\nconst resetTareaPSP4 = () => {\n    global.set('datosListosPSP4', false);\n};\n\n// Llamada inicial para PSP4\nmaquinaEstadosPSP4();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "e87dcfe0cee13699",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d9a6966f5c6dfec6",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP2');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP2', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP2' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            [
                "bf58254207abfe0f"
            ]
        ]
    },
    {
        "id": "f0bea7414cdff564",
        "type": "mysql",
        "z": "7fb99878331dcff5",
        "g": "d9a6966f5c6dfec6",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 420,
        "wires": [
            [
                "bd90439549be6e5f"
            ]
        ]
    },
    {
        "id": "bd90439549be6e5f",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d9a6966f5c6dfec6",
        "name": "set",
        "func": " flow.set('idListoPSP2', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "bf58254207abfe0f",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "d9a6966f5c6dfec6",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP2\nvar tareaPSP2 = global.get('tareaPSP2');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP2 === 'undefined') {\n    node.error(\"Error: tareaPSP2 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP2\nvar movNumber = tareaPSP2.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP2.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP2.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP2';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "f0bea7414cdff564"
            ]
        ]
    },
    {
        "id": "0ec78b7d685e2951",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d9a6966f5c6dfec6",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 440,
        "wires": [
            [
                "e87dcfe0cee13699"
            ]
        ]
    },
    {
        "id": "926f4afcf05781b5",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "d9a6966f5c6dfec6",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 540,
        "wires": [
            [
                "bf58254207abfe0f"
            ]
        ]
    },
    {
        "id": "071f5128826f26f5",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "3e25caa400166874",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP4');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP4', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP4' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1820,
        "wires": [
            [
                "5eeaf4f5733adb48"
            ]
        ]
    },
    {
        "id": "f39f8cfc7fcca8ad",
        "type": "mysql",
        "z": "7fb99878331dcff5",
        "g": "3e25caa400166874",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 1900,
        "wires": [
            [
                "a17b8a7f7a3245ba"
            ]
        ]
    },
    {
        "id": "a17b8a7f7a3245ba",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "3e25caa400166874",
        "name": "set",
        "func": " flow.set('idListoPSP4', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "5eeaf4f5733adb48",
        "type": "function",
        "z": "7fb99878331dcff5",
        "g": "3e25caa400166874",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP4\nvar tareaPSP4 = global.get('tareaPSP4');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP4 === 'undefined') {\n    node.error(\"Error: tareaPSP4 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP4\nvar movNumber = tareaPSP4.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP4.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP4.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP4';\n`;\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1900,
        "wires": [
            [
                "f39f8cfc7fcca8ad"
            ]
        ]
    },
    {
        "id": "a3241f88a78b5622",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "3e25caa400166874",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1920,
        "wires": [
            [
                "071f5128826f26f5"
            ]
        ]
    },
    {
        "id": "59453ac9e24b7cfe",
        "type": "inject",
        "z": "7fb99878331dcff5",
        "g": "3e25caa400166874",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 2020,
        "wires": [
            [
                "5eeaf4f5733adb48"
            ]
        ]
    },
    {
        "id": "ea9d296fabeec309",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "stateMachineEventStageTarea_PSP6-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP6`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b4d64cf96cd5d372",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "ea9d296fabeec309"
            ]
        ]
    },
    {
        "id": "df9eb30ecb597384",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "stateMachineEventStageTarea_PSP6->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP6`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "f827ba5c02a2bf44",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "df9eb30ecb597384"
            ]
        ]
    },
    {
        "id": "a912dbd4cf0d765d",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "stateMachineEventStageTarea_PSP6-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP6`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "b68f2fb4ca09cae6",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "a912dbd4cf0d765d"
            ]
        ]
    },
    {
        "id": "71f5131b945de642",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "76d7098ea8f3a030"
            ]
        ]
    },
    {
        "id": "76d7098ea8f3a030",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "datosListosPSP6->true",
        "func": "\nglobal.set('datosListosPSP6', true) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "1bcdb1745157446f",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "68c7d4ca89ec178d",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP6\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP6', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP6' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 100,
        "wires": [
            [
                "ba64e4ed2e7b8786"
            ]
        ]
    },
    {
        "id": "ba64e4ed2e7b8786",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "68c7d4ca89ec178d",
        "name": "checkTareaPSP6",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP6\nlet tareaPSP6 = global.get('tareaPSP6');\n\nif (!tareaPSP6) {\n    node.warn(\"No se ha encontrado la tarea PSP6.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP6\nlet destino = tareaPSP6.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP6\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP6', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP6Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP6: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP6', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP6Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP6: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP6Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP6. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3ee6dc895da584ad",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 800,
        "wires": [
            [
                "bfebc050bc9a8430"
            ]
        ]
    },
    {
        "id": "bfebc050bc9a8430",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP6');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP6Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1040,
        "wires": [
            [],
            [
                "bb25050350d87866"
            ]
        ]
    },
    {
        "id": "1137e914c1bf60bc",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP6') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP6', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 880,
        "wires": [
            [
                "bfebc050bc9a8430"
            ]
        ]
    },
    {
        "id": "f2c4edd1263353d2",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 820,
        "wires": [
            [
                "bb25050350d87866"
            ]
        ]
    },
    {
        "id": "5dc87d6c16399a5e",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "variablesPLC_PSP6Escritas",
        "func": "flow.set(\"variablesPLC_PSP6Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "544bc8f1254b4ffb",
        "type": "debug",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "debug 139",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 820,
        "wires": []
    },
    {
        "id": "bb25050350d87866",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 960,
        "wires": [
            [
                "a186a9a11acfab69",
                "5dc87d6c16399a5e"
            ]
        ]
    },
    {
        "id": "a186a9a11acfab69",
        "type": "s7comm write",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"44\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP6\"}",
        "s7Name": "Destino_salida_CT_PSP6",
        "topic": "",
        "name": "Destino_salida_CT_PSP6",
        "signalSetted": false,
        "x": 1470,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "092ff06fd78d796f",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "90207c4097dfcd62",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP6') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP6', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "6360f1d99a093f68"
            ]
        ]
    },
    {
        "id": "4b75d017cffaa325",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 1180,
        "wires": [
            [
                "3ec5533db40df141"
            ]
        ]
    },
    {
        "id": "0b65cf8dd2dec7d9",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "ordenPLC_PSP6_OK",
        "func": "flow.set(\"ordenPLC_PSP6_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "c55d113fef49e318",
        "type": "s7comm write",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"40\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP6\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP6",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP6",
        "signalSetted": false,
        "x": 1490,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "69ad15d59c7bd9f0",
        "type": "debug",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "debug 140",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3ec5533db40df141",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1280,
        "wires": [
            [
                "c55d113fef49e318"
            ]
        ]
    },
    {
        "id": "a4d997ae6d883a9b",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "stateMachineEventStageTarea_PSP8-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP8`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "7e4dc20cdeaa8f74",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2320,
        "wires": [
            [
                "a4d997ae6d883a9b"
            ]
        ]
    },
    {
        "id": "107ff0e8c4f49ad7",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "stateMachineEventStageTarea_PSP8-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP8`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "08a77a3cb1ae6728",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2240,
        "wires": [
            [
                "107ff0e8c4f49ad7"
            ]
        ]
    },
    {
        "id": "942deb709b921346",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "stateMachineEventStageTarea_PSP8-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP8`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "59f27f20c74e26eb",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2400,
        "wires": [
            [
                "942deb709b921346"
            ]
        ]
    },
    {
        "id": "9dc24992fcac31aa",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2160,
        "wires": [
            [
                "db8a7cc45143cba4"
            ]
        ]
    },
    {
        "id": "db8a7cc45143cba4",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "datosListosPSP8-->true",
        "func": "\nglobal.set('datosListosPSP8', true) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "50333afcd4e61dae",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "96535d8ca902241b",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP8\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP8', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP8' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1980,
        "wires": [
            [
                "6370bc9e5262e53f"
            ]
        ]
    },
    {
        "id": "6370bc9e5262e53f",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "96535d8ca902241b",
        "name": "checkTareaPSP8",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP8\nlet tareaPSP8 = global.get('tareaPSP8');\n\nif (!tareaPSP8) {\n    node.warn(\"No se ha encontrado la tarea PSP8.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP8\nlet destino = tareaPSP8.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP8\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP8', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP8Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP8: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP8', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP8Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP8: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP8Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP8. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "4d7c84219abee233",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 2700,
        "wires": [
            [
                "b90c6531ae989579"
            ]
        ]
    },
    {
        "id": "b90c6531ae989579",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP8');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP8Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2940,
        "wires": [
            [],
            [
                "4a475d607a968cd2"
            ]
        ]
    },
    {
        "id": "05c008ec0f76bc8e",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP8') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP8', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2780,
        "wires": [
            [
                "b90c6531ae989579"
            ]
        ]
    },
    {
        "id": "6d40899f3ae3c63a",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 2720,
        "wires": [
            [
                "4a475d607a968cd2"
            ]
        ]
    },
    {
        "id": "95f4dcd634efbd21",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "variablesPLC_PSP8Escritas",
        "func": "flow.set(\"variablesPLC_PSP8Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "4a475d607a968cd2",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2860,
        "wires": [
            [
                "0cc5722f7b302a5f",
                "95f4dcd634efbd21"
            ]
        ]
    },
    {
        "id": "0cc5722f7b302a5f",
        "type": "s7comm write",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"60\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP8\"}",
        "s7Name": "Destino_salida_CT_PSP8",
        "topic": "",
        "name": "Destino_salida_CT_PSP8",
        "signalSetted": false,
        "x": 1470,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "96d7ef1e2995225d",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "9e9decd161f5708b",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP8') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP8', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 3160,
        "wires": [
            [
                "6a6c7fbb993beeb9"
            ]
        ]
    },
    {
        "id": "610c63d1c74927e6",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 910,
        "y": 3100,
        "wires": [
            [
                "f9e68e56bea57f57"
            ]
        ]
    },
    {
        "id": "5ee574963a0e2564",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "ordenPLC_PSP8_OK",
        "func": "flow.set(\"ordenPLC_PSP8_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "d42fb8afb1a015aa",
        "type": "s7comm write",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"56\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP8\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP8",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP8",
        "signalSetted": false,
        "x": 1470,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "b51ea0c62cc481c9",
        "type": "debug",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "debug 142",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 3100,
        "wires": []
    },
    {
        "id": "f9e68e56bea57f57",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 3200,
        "wires": [
            [
                "d42fb8afb1a015aa"
            ]
        ]
    },
    {
        "id": "6360f1d99a093f68",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP6_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1320,
        "wires": [
            [
                "3ec5533db40df141"
            ],
            [
                "0b65cf8dd2dec7d9",
                "fedaa13668fdda0c"
            ]
        ]
    },
    {
        "id": "fedaa13668fdda0c",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1340,
        "wires": [
            [
                "90b3a5ecac34fe2f"
            ]
        ]
    },
    {
        "id": "90b3a5ecac34fe2f",
        "type": "s7comm write",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"45\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP6\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP6",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP6",
        "signalSetted": false,
        "x": 1490,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "6a6c7fbb993beeb9",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP8_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 3240,
        "wires": [
            [
                "f9e68e56bea57f57"
            ],
            [
                "5ee574963a0e2564",
                "7d4825f1f223ad28"
            ]
        ]
    },
    {
        "id": "7d4825f1f223ad28",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 3280,
        "wires": [
            [
                "34b99a3a93c9fde9"
            ]
        ]
    },
    {
        "id": "34b99a3a93c9fde9",
        "type": "s7comm write",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"61\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP8\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP8",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP8",
        "signalSetted": false,
        "x": 1490,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "96e44b46a2de7d41",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "cea13dd5d73d9ec6"
            ]
        ]
    },
    {
        "id": "7f46f81ca15ffbd3",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2100,
        "wires": [
            [
                "89fa7aa9ec3fa01e"
            ]
        ]
    },
    {
        "id": "a63863cf1bd06c0b",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "68c7d4ca89ec178d",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "1bcdb1745157446f"
            ]
        ]
    },
    {
        "id": "83fcb772e2307f77",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "de0b235864398fdd",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 840,
        "wires": [
            [
                "1137e914c1bf60bc"
            ]
        ]
    },
    {
        "id": "4d7f2bf3cab3b3e4",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "e0506c014636185c",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1200,
        "wires": [
            [
                "90207c4097dfcd62"
            ]
        ]
    },
    {
        "id": "13651e72a89d87bf",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "96535d8ca902241b",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1980,
        "wires": [
            [
                "50333afcd4e61dae"
            ]
        ]
    },
    {
        "id": "805090e0051eb51f",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "c54aa1f42c05d5fb",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2760,
        "wires": [
            [
                "05c008ec0f76bc8e"
            ]
        ]
    },
    {
        "id": "73d1e2df25a9d5d7",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "084a8bbe4463d715",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 3280,
        "wires": [
            [
                "9e9decd161f5708b"
            ]
        ]
    },
    {
        "id": "cea13dd5d73d9ec6",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "41fc70f7c3d5cc88",
        "name": "fsmPSP6",
        "func": "// Máquina de estados para PSP6\nfunction maquinaEstadosPSP6() {\n    // Obtener el estado actual para PSP6\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP6') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP6 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP6', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP6(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP6', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP6', false);\n            flow.set('variablesPSP6Escritas', false);\n            flow.set('escribirVariablesPLC_PSP6', false);\n            flow.set('variablesPLC_PSP6Escritas', false);\n            flow.set('verificarVariablesPLC_PSP6', false);\n            flow.set('variablesOkPLC_PSP6', false);\n            flow.set('ejecutarTareaPSP6', false);\n            flow.set('ordenPLC_PSP6_OK', false);\n            flow.set('idListoPSP6', false);\n            flow.set('buscarIdOrdenPSP6', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP6(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP6', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP6');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP6', true);\n                setStateMachineEventStageNumberPSP6(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP6', `21_buscarID`);\n            let idListo = flow.get('idListoPSP6');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP6(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP6', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP6', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP6(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP6', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP6Escritas') === true) {\n                setStateMachineEventStageNumberPSP6(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP6', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP6', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP6(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP6', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP6Escritas') === true) {\n                setStateMachineEventStageNumberPSP6(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP6', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP6', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP6') === true) {\n                setStateMachineEventStageNumberPSP6(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP6(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP6', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP6(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP6', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP6(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP6', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP6\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP6(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP6', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP6_OK') === true) {\n                setStateMachineEventStageNumberPSP6(900, `900_RegistrarCiclo`);\n                resetTareaPSP6();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP6', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP6(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP6', `1000_FinCiclo`);\n             global.set('datosListosPSP6', false); // Resetear datos listos para PSP6\n            setTimeout(() => setStateMachineEventStageNumberPSP6(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP6(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP6\nconst setStateMachineEventStageNumberPSP6 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP6', num);\n    flow.set('stateMachineCurrentStateTarea_PSP6', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP6\nconst resetTareaPSP6 = () => {\n    global.set('datosListosPSP6', false);\n};\n\n// Llamada inicial para PSP6\nmaquinaEstadosPSP6();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "89fa7aa9ec3fa01e",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "2d208fae9c20d792",
        "name": "fsmPSP8",
        "func": "// Máquina de estados para PSP8\nfunction maquinaEstadosPSP8() {\n    // Obtener el estado actual para PSP8\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP8') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP8 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP8', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP8(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP8', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP8', false);\n            flow.set('variablesPSP8Escritas', false);\n            flow.set('escribirVariablesPLC_PSP8', false);\n            flow.set('variablesPLC_PSP8Escritas', false);\n            flow.set('verificarVariablesPLC_PSP8', false);\n            flow.set('variablesOkPLC_PSP8', false);\n            flow.set('ejecutarTareaPSP8', false);\n            flow.set('ordenPLC_PSP8_OK', false);\n            flow.set('idListoPSP8', false);\n            flow.set('buscarIdOrdenPSP8', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP8(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP8', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP8');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP8', true);\n                setStateMachineEventStageNumberPSP8(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP8', `21_buscarID`);\n            let idListo = flow.get('idListoPSP8');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP8(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP8', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP8', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP8(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP8', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP8Escritas') === true) {\n                setStateMachineEventStageNumberPSP8(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP8', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP8', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP8(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP8', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP8Escritas') === true) {\n                setStateMachineEventStageNumberPSP8(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP8', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP8', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP8') === true) {\n                setStateMachineEventStageNumberPSP8(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP8(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP8', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP8(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP8', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP8(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP8', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP8\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP8(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP8', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP8_OK') === true) {\n                setStateMachineEventStageNumberPSP8(900, `900_RegistrarCiclo`);\n                resetTareaPSP8();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP8', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP8(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP8', `1000_FinCiclo`);\n             global.set('datosListosPSP8', false); // Resetear datos listos para PSP8\n            setTimeout(() => setStateMachineEventStageNumberPSP8(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP8(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP8\nconst setStateMachineEventStageNumberPSP8 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP8', num);\n    flow.set('stateMachineCurrentStateTarea_PSP8', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP8\nconst resetTareaPSP8 = () => {\n    global.set('datosListosPSP8', false);\n};\n\n// Llamada inicial para PSP8\nmaquinaEstadosPSP8();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "029458561e299bae",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "61e11471d24e5acf",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP6');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP6', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP6' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "cf89b5f87fed3657"
            ]
        ]
    },
    {
        "id": "aa0619374b3e7272",
        "type": "mysql",
        "z": "6a4583e29f652d9b",
        "g": "61e11471d24e5acf",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1150,
        "y": 380,
        "wires": [
            [
                "f2a9ccc8fb4489d4"
            ]
        ]
    },
    {
        "id": "f2a9ccc8fb4489d4",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "61e11471d24e5acf",
        "name": "set",
        "func": " flow.set('idListoPSP6', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "cf89b5f87fed3657",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "61e11471d24e5acf",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP6\nvar tareaPSP6 = global.get('tareaPSP6');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP6 === 'undefined') {\n    node.error(\"Error: tareaPSP6 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP6\nvar movNumber = tareaPSP6.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP6.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP6.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP6';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 380,
        "wires": [
            [
                "aa0619374b3e7272"
            ]
        ]
    },
    {
        "id": "faa4c66e9a39ee19",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "61e11471d24e5acf",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "029458561e299bae"
            ]
        ]
    },
    {
        "id": "f8a3c59ae2e7545e",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "61e11471d24e5acf",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 500,
        "wires": [
            [
                "cf89b5f87fed3657"
            ]
        ]
    },
    {
        "id": "6329772e36992207",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "7d45ac69153c7fa0",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP8');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP8', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP8' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2160,
        "wires": [
            [
                "430d3226f95a8bb4"
            ]
        ]
    },
    {
        "id": "0af77d120d604083",
        "type": "mysql",
        "z": "6a4583e29f652d9b",
        "g": "7d45ac69153c7fa0",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1170,
        "y": 2240,
        "wires": [
            [
                "9eed49fc3c0bec2f"
            ]
        ]
    },
    {
        "id": "9eed49fc3c0bec2f",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "7d45ac69153c7fa0",
        "name": "set",
        "func": " flow.set('idListoPSP8', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "430d3226f95a8bb4",
        "type": "function",
        "z": "6a4583e29f652d9b",
        "g": "7d45ac69153c7fa0",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP8\nvar tareaPSP8 = global.get('tareaPSP8');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP8 === 'undefined') {\n    node.error(\"Error: tareaPSP8 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP8\nvar movNumber = tareaPSP8.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP8.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP8.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP8';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2240,
        "wires": [
            [
                "0af77d120d604083"
            ]
        ]
    },
    {
        "id": "efcccddc8c064560",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "7d45ac69153c7fa0",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2260,
        "wires": [
            [
                "6329772e36992207"
            ]
        ]
    },
    {
        "id": "71fbc149c4dd4afc",
        "type": "inject",
        "z": "6a4583e29f652d9b",
        "g": "7d45ac69153c7fa0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 2360,
        "wires": [
            [
                "430d3226f95a8bb4"
            ]
        ]
    },
    {
        "id": "b66b874dd4a7995b",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "stateMachineEventStageTarea_PSP10-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP10`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "94255fa1f8789794",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "b66b874dd4a7995b"
            ]
        ]
    },
    {
        "id": "b029ac3d7125b2ba",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "stateMachineEventStageTarea_PSP10->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP10`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d53d41c074b5ca69",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "b029ac3d7125b2ba"
            ]
        ]
    },
    {
        "id": "8f05a34149ec8da5",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "stateMachineEventStageTarea_PSP10-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP10`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5007ea3f7592d9d4",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "8f05a34149ec8da5"
            ]
        ]
    },
    {
        "id": "893cb7f9aad143ed",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "634d990bc77e3276"
            ]
        ]
    },
    {
        "id": "634d990bc77e3276",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "datosListosPSP10->true",
        "func": "\nglobal.set('datosListosPSP10', true) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c67085e07767b718",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "35535126cad29869",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP10\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP10', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP10' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 100,
        "wires": [
            [
                "b8ed8178a5217904"
            ]
        ]
    },
    {
        "id": "b8ed8178a5217904",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "35535126cad29869",
        "name": "checkTareaPSP10",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP10\nlet tareaPSP10 = global.get('tareaPSP10');\n\nif (!tareaPSP10) {\n    node.warn(\"No se ha encontrado la tarea PSP10.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP10\nlet destino = tareaPSP10.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP10\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP10', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP10Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP10: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP10', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP10Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP10: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP10Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP10. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "1eb7f9c212ccae2b",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 980,
        "wires": [
            [
                "8955b6c2df9c7f50"
            ]
        ]
    },
    {
        "id": "8955b6c2df9c7f50",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP10');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP10Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1220,
        "wires": [
            [],
            [
                "0f327f5996b6b40a"
            ]
        ]
    },
    {
        "id": "0f1d47cf0a7ea55e",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP10') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP10', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1060,
        "wires": [
            [
                "8955b6c2df9c7f50"
            ]
        ]
    },
    {
        "id": "5dc2f7022219726f",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 1000,
        "wires": [
            [
                "0f327f5996b6b40a"
            ]
        ]
    },
    {
        "id": "0f4a9c056de1034f",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "variablesPLC_PSP10Escritas",
        "func": "flow.set(\"variablesPLC_PSP10Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "c7860c821add9efc",
        "type": "debug",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "debug 147",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0f327f5996b6b40a",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1140,
        "wires": [
            [
                "ebdf01d7aae737e8",
                "0f4a9c056de1034f"
            ]
        ]
    },
    {
        "id": "ebdf01d7aae737e8",
        "type": "s7comm write",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"76\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP10\"}",
        "s7Name": "Destino_salida_CT_PSP10",
        "topic": "",
        "name": "Destino_salida_CT_PSP10",
        "signalSetted": false,
        "x": 1480,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "954df9bac6fc37be",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 1400,
        "wires": [
            [
                "d84f6e76e5835cd4"
            ]
        ]
    },
    {
        "id": "7b9b0289ed07409e",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP10') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP10', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1480,
        "wires": [
            [
                "d84f6e76e5835cd4"
            ]
        ]
    },
    {
        "id": "928242214df8edd1",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 910,
        "y": 1420,
        "wires": [
            [
                "83d94df3a2b4ac5b"
            ]
        ]
    },
    {
        "id": "22d6ace7e75c6476",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "ordenPLC_PSP10_OK",
        "func": "flow.set(\"ordenPLC_PSP10_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "b65b543c854b67c9",
        "type": "s7comm write",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"72\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP10\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP10",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP10",
        "signalSetted": false,
        "x": 1470,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "cf52c3d0328e22a6",
        "type": "debug",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "debug 148",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1420,
        "wires": []
    },
    {
        "id": "83d94df3a2b4ac5b",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1520,
        "wires": [
            [
                "b65b543c854b67c9"
            ]
        ]
    },
    {
        "id": "1c6305e8aab2471d",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "stateMachineEventStageTarea_PSP12-->30",
        "func": "flow.set(`stateMachineEventStageTarea_PSP12`, 30);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "db59b942fe8d8264",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "set30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2140,
        "wires": [
            [
                "1c6305e8aab2471d"
            ]
        ]
    },
    {
        "id": "9634c5f66a138b8a",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "stateMachineEventStageTarea_PSP12-->0",
        "func": "flow.set(`stateMachineEventStageTarea_PSP12`, 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "06e44aa03d360335",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "set0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2060,
        "wires": [
            [
                "9634c5f66a138b8a"
            ]
        ]
    },
    {
        "id": "fc93a023acfe7dac",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "stateMachineEventStageTarea_PSP12-->900",
        "func": "flow.set(`stateMachineEventStageTarea_PSP12`,900);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "45317c16ec6fcce7",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "set900",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2220,
        "wires": [
            [
                "fc93a023acfe7dac"
            ]
        ]
    },
    {
        "id": "01be317b120ee070",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1980,
        "wires": [
            [
                "e3711fc29ba14c22"
            ]
        ]
    },
    {
        "id": "e3711fc29ba14c22",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "datosListosPSP12-->true",
        "func": "\nglobal.set('datosListosPSP12', true) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "4c80bcf2a093c7fc",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "ed68071dbded8d91",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get(\"escribirVariablesPSP12\");\n\n\nif (validar ) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n  flow.set('escribirVariablesPSP12', false);\n\n // node.warn(\"Variables 'escribirVariablesPSP12' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1800,
        "wires": [
            [
                "97421ba9ad308016"
            ]
        ]
    },
    {
        "id": "97421ba9ad308016",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "ed68071dbded8d91",
        "name": "checkTareaPSP12",
        "func": "// Obtener la tarea almacenada en la variable global tareaPSP12\nlet tareaPSP12 = global.get('tareaPSP12');\n\nif (!tareaPSP12) {\n    node.warn(\"No se ha encontrado la tarea PSP12.\");\n    return;\n}\n\n// Obtener los datos del destino desde tareaPSP12\nlet destino = tareaPSP12.destino;\n\n// Verificar el destino y asignar el valor correspondiente a destinoFinalTareaPSP12\nif (destino.estacion === 'PIS2') {\n    flow.set('destinoFinalTareaPSP12', 1);  // Asignar 1 si el destino es PIS2\n    flow.set('variablesPSP12Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP12: PIS2 (1)\");\n} else if (destino.estacion === 'PIS3') {\n    flow.set('destinoFinalTareaPSP12', 2);  // Asignar 2 si el destino es PIS3\n    flow.set('variablesPSP12Escritas', true) ;\n    node.warn(\"Destino final asignado para PSP12: PIS3 (2)\");\n} else {\n    flow.set('variablesPSP12Escritas', false) ;\n    node.warn(\"Destino no reconocido para PSP12. No se ha asignado ningún valor.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "25ee184887d5e1aa",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 2540,
        "wires": [
            [
                "864af3eabc93721d"
            ]
        ]
    },
    {
        "id": "864af3eabc93721d",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Destino_salida_CT = flow.get('destinoFinalTareaPSP12');\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Destino_salida_CT };       // Salida 3: x_Destino\n\nflow.set('variablesPLC_PSP12Escritas', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2780,
        "wires": [
            [],
            [
                "1f40089f821302df"
            ]
        ]
    },
    {
        "id": "f5f55c722fad4551",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('escribirVariablesPLC_PSP12') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('escribirVariablesPLC_PSP12', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2620,
        "wires": [
            [
                "864af3eabc93721d"
            ]
        ]
    },
    {
        "id": "5ad27975db28d101",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 2560,
        "wires": [
            [
                "1f40089f821302df"
            ]
        ]
    },
    {
        "id": "b1c9aa37192b1b95",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "variablesPLC_PSP12Escritas",
        "func": "flow.set(\"variablesPLC_PSP12Escritas\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "43ec6aff9c8347d1",
        "type": "debug",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "debug 149",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2560,
        "wires": []
    },
    {
        "id": "1f40089f821302df",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "Destino_salida_CT",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2700,
        "wires": [
            [
                "283e133d145de846",
                "b1c9aa37192b1b95"
            ]
        ]
    },
    {
        "id": "283e133d145de846",
        "type": "s7comm write",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"92\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Destino_salida_CT_PSP12\"}",
        "s7Name": "Destino_salida_CT_PSP12",
        "topic": "",
        "name": "Destino_salida_CT_PSP12",
        "signalSetted": false,
        "x": 1480,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "1ba773f772aa8ae2",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "1cc9b8093e0e5223",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "Start",
        "func": "\n\n// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (flow.get('ejecutarTareaPSP12') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n  flow.set('ejecutarTareaPSP12', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3000,
        "wires": [
            [
                "b34c6c4cb6d48f3d"
            ]
        ]
    },
    {
        "id": "62d2dd2446d05f9d",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 930,
        "y": 2940,
        "wires": [
            [
                "4e1a6d4ff0377731"
            ]
        ]
    },
    {
        "id": "00a0d138203010d7",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "ordenPLC_PSP12_OK",
        "func": "flow.set(\"ordenPLC_PSP12_OK\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "cec72afb6fecc789",
        "type": "s7comm write",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"88\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_datos_prep_PLC_PSP12\"}",
        "s7Name": "Flag_datos_prep_PLC_PSP12",
        "topic": "",
        "name": "Flag_datos_prep_PLC_PSP12",
        "signalSetted": false,
        "x": 1490,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "72517f152de4db94",
        "type": "debug",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "debug 150",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2940,
        "wires": []
    },
    {
        "id": "4e1a6d4ff0377731",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 3040,
        "wires": [
            [
                "cec72afb6fecc789"
            ]
        ]
    },
    {
        "id": "d84f6e76e5835cd4",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP10_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1560,
        "wires": [
            [
                "83d94df3a2b4ac5b"
            ],
            [
                "22d6ace7e75c6476",
                "b1ad7012f44ed95c"
            ]
        ]
    },
    {
        "id": "b1ad7012f44ed95c",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1580,
        "wires": [
            [
                "085b2039a47a34d6"
            ]
        ]
    },
    {
        "id": "085b2039a47a34d6",
        "type": "s7comm write",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"77\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP10\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP10",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP10",
        "signalSetted": false,
        "x": 1480,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "b34c6c4cb6d48f3d",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Flag_datos_prep_PLC = 0;\nlet Flag_destino_prep_SGA = 1;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_destino_prep_SGA };       // Salida 3: x_Destino\n\nflow.set('ordenPLC_PSP12_OK', false);\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 3060,
        "wires": [
            [
                "4e1a6d4ff0377731"
            ],
            [
                "00a0d138203010d7",
                "dac9b7eace463ed2"
            ]
        ]
    },
    {
        "id": "dac9b7eace463ed2",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "Flag_destino_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 3120,
        "wires": [
            [
                "c34c562be1ea48d3"
            ]
        ]
    },
    {
        "id": "c34c562be1ea48d3",
        "type": "s7comm write",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"117\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"93\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Flag_destino_prep_SGA_PSP12\"}",
        "s7Name": "Flag_destino_prep_SGA_PSP12",
        "topic": "",
        "name": "Flag_destino_prep_SGA_PSP12",
        "signalSetted": false,
        "x": 1500,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "8cd0d28f5dfcb9b4",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "1b768853a51aa52d"
            ]
        ]
    },
    {
        "id": "cba48a69963c798d",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1880,
        "wires": [
            [
                "6b974431ed1f67e4"
            ]
        ]
    },
    {
        "id": "269a20eb508cbdbd",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "35535126cad29869",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "c67085e07767b718"
            ]
        ]
    },
    {
        "id": "5954bd6708a67144",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "33d35d24a5d4850a",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "0f1d47cf0a7ea55e"
            ]
        ]
    },
    {
        "id": "da8ebd620c5689f3",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "1f0f56dedd60df8a",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1600,
        "wires": [
            [
                "7b9b0289ed07409e"
            ]
        ]
    },
    {
        "id": "bcb61f681bfdf684",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "ed68071dbded8d91",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1820,
        "wires": [
            [
                "4c80bcf2a093c7fc"
            ]
        ]
    },
    {
        "id": "695705cc67391dc4",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "efac22bb0f9cc3da",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2600,
        "wires": [
            [
                "f5f55c722fad4551"
            ]
        ]
    },
    {
        "id": "613ab6f651a2f573",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "d9a7b89e0b340648",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2980,
        "wires": [
            [
                "1cc9b8093e0e5223"
            ]
        ]
    },
    {
        "id": "1b768853a51aa52d",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "e8cb1161d9106dfe",
        "name": "fsmPSP10",
        "func": "// Máquina de estados para PSP10\nfunction maquinaEstadosPSP10() {\n    // Obtener el estado actual para PSP10\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP10') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP10 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP10', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP10(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP10', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP10', false);\n            flow.set('variablesPSP10Escritas', false);\n            flow.set('escribirVariablesPLC_PSP10', false);\n            flow.set('variablesPLC_PSP10Escritas', false);\n            flow.set('verificarVariablesPLC_PSP10', false);\n            flow.set('variablesOkPLC_PSP10', false);\n            flow.set('ejecutarTareaPSP10', false);\n            flow.set('ordenPLC_PSP10_OK', false);\n            flow.set('idListoPSP10', false);\n            flow.set('buscarIdOrdenPSP10', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP10(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP10', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP10');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP10', true);\n                setStateMachineEventStageNumberPSP10(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP10', `21_buscarID`);\n            let idListo = flow.get('idListoPSP10');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP10(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP10', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP10', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP10(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP10', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP10Escritas') === true) {\n                setStateMachineEventStageNumberPSP10(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP10', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP10', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP10(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP10', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP10Escritas') === true) {\n                setStateMachineEventStageNumberPSP10(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP10', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP10', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP10') === true) {\n                setStateMachineEventStageNumberPSP10(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP10(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP10', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP10(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP10', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP10(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP10', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP10\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP10(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP10', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP10_OK') === true) {\n                setStateMachineEventStageNumberPSP10(900, `900_RegistrarCiclo`);\n                resetTareaPSP10();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP10', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP10(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP10', `1000_FinCiclo`);\n             global.set('datosListosPSP10', false); // Resetear datos listos para PSP10\n            setTimeout(() => setStateMachineEventStageNumberPSP10(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP10(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP10\nconst setStateMachineEventStageNumberPSP10 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP10', num);\n    flow.set('stateMachineCurrentStateTarea_PSP10', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP10\nconst resetTareaPSP10 = () => {\n    global.set('datosListosPSP10', false);\n};\n\n// Llamada inicial para PSP10\nmaquinaEstadosPSP10();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6b974431ed1f67e4",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "bd0f546e9f819d95",
        "name": "fsmPSP12",
        "func": "// Máquina de estados para PSP12\nfunction maquinaEstadosPSP12() {\n    // Obtener el estado actual para PSP12\n    let estadoActual = flow.get('stateMachineEventStageTarea_PSP12') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `PSP12 - Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_ReposoPSP\n            flow.set('stateMachineCurrentStateTarea_PSP12', `00_ReposoPSP`);\n            setTimeout(() => setStateMachineEventStageNumberPSP12(10, `10_InicioPSP`), 100);\n            break;\n\n        case 10: // 10_InicioPSP\n            flow.set('stateMachineCurrentStateTarea_PSP12', `10_InicioPSP`);\n            flow.set('escribirVariablesPSP12', false);\n            flow.set('variablesPSP12Escritas', false);\n            flow.set('escribirVariablesPLC_PSP12', false);\n            flow.set('variablesPLC_PSP12Escritas', false);\n            flow.set('verificarVariablesPLC_PSP12', false);\n            flow.set('variablesOkPLC_PSP12', false);\n            flow.set('ejecutarTareaPSP12', false);\n            flow.set('ordenPLC_PSP12_OK', false);\n            flow.set('idListoPSP12', false);\n            flow.set('buscarIdOrdenPSP12', false);\n            setTimeout(() => setStateMachineEventStageNumberPSP12(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 20: // 20_CheckTareaPSP\n            flow.set('stateMachineCurrentStateTarea_PSP12', `20_CheckTareaPSP`);\n            let tareaListos = global.get('datosListosPSP12');\n\n            if (tareaListos === true) {\n                 flow.set('buscarIdOrdenPSP12', true);\n                setStateMachineEventStageNumberPSP12(21, `21_buscarID`);\n            }\n            break;\n\n\n        case 21: // 21_buscarID\n            flow.set('stateMachineCurrentStateTarea_PSP12', `21_buscarID`);\n            let idListo = flow.get('idListoPSP12');\n\n            if (idListo === true) {\n                setStateMachineEventStageNumberPSP12(30, `30_EscribirVariables`);\n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            flow.set('stateMachineCurrentStateTarea_PSP12', `30_EscribirVariables`);\n            flow.set('escribirVariablesPSP12', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP12(40, `40_VariablesEscritas`), 100);\n            break;\n\n        case 40: // 40_VariablesEscritas\n            flow.set('stateMachineCurrentStateTarea_PSP12', `40_VariablesEscritas`);\n            if (flow.get('variablesPSP12Escritas') === true) {\n                setStateMachineEventStageNumberPSP12(50, `50_EscribirVariablesPLC`);\n            } \n            break;\n\n        case 50: // 50_EscribirVariablesPLC\n            flow.set('stateMachineCurrentStateTarea_PSP12', `50_EscribirVariablesPLC`);\n            flow.set('escribirVariablesPLC_PSP12', true);  // Establecer variable de flujo para escribir variables\n            setTimeout(() => setStateMachineEventStageNumberPSP12(60, `60_VariablesEscritasPLC`), 100);\n            break;\n\n        case 60: // 60_VariablesEscritasPLC\n            flow.set('stateMachineCurrentStateTarea_PSP12', `60_VariablesEscritasPLC`);\n            if (flow.get('variablesPLC_PSP12Escritas') === true) {\n                setStateMachineEventStageNumberPSP12(80, `80_VariablesOk`);\n            } \n            break;\n\n        case 70: // 70_Verificar\n            flow.set('stateMachineCurrentStateTarea_PSP12', `70_Verificar`);\n              flow.set('verificarVariablesPLC_PSP12', true);  // Establecer variable de flujo para escribir variables\n            if (flow.get('variablesOkPLC_PSP12') === true) {\n                setStateMachineEventStageNumberPSP12(80, `80_VariablesOk`);\n            } else {\n                setStateMachineEventStageNumberPSP12(90, `90_VariablesError`);\n            }\n            break;\n\n        case 80: // 80_VariablesOk\n            flow.set('stateMachineCurrentStateTarea_PSP12', `80_VariablesOk`);\n            setTimeout(() => setStateMachineEventStageNumberPSP12(100, `100_EjecutarOrden`), 100);\n            break;\n\n        case 90: // 90_VariablesError\n            flow.set('stateMachineCurrentStateTarea_PSP12', `90_VariablesError`);\n            setTimeout(() => setStateMachineEventStageNumberPSP12(20, `20_CheckTareaPSP`), 100);\n            break;\n\n        case 100: // 100_EjecutarOrden\n            flow.set('stateMachineCurrentStateTarea_PSP12', `100_EjecutarOrden`);\n            flow.set(\"ejecutarTareaPSP12\", true);\n            setTimeout(() => setStateMachineEventStageNumberPSP12(110, `110_OrdenOk`), 100);\n            break;\n\n        case 110: // 110_OrdenOk\n            flow.set('stateMachineCurrentStateTarea_PSP12', `110_OrdenOk`);\n            if (flow.get('ordenPLC_PSP12_OK') === true) {\n                setStateMachineEventStageNumberPSP12(900, `900_RegistrarCiclo`);\n                resetTareaPSP12();\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP12', `900_RegistrarCiclo`);\n            setTimeout(() => setStateMachineEventStageNumberPSP12(1000, `1000_FinCiclo`), 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            flow.set('stateMachineCurrentStateTarea_PSP12', `1000_FinCiclo`);\n             global.set('datosListosPSP12', false); // Resetear datos listos para PSP12\n            setTimeout(() => setStateMachineEventStageNumberPSP12(0, `00_ReposoPSP`), 100);\n            break;\n\n        default:\n            setStateMachineEventStageNumberPSP12(0, `00_ReposoPSP`);\n            break;\n    }\n}\n\n// Función para actualizar el estado actual de la FSM para PSP12\nconst setStateMachineEventStageNumberPSP12 = (num, stateName) => {\n    flow.set('stateMachineEventStageTarea_PSP12', num);\n    flow.set('stateMachineCurrentStateTarea_PSP12', stateName);\n};\n\n\n\n// Función para resetear la tarea de PSP12\nconst resetTareaPSP12 = () => {\n    global.set('datosListosPSP12', false);\n};\n\n// Llamada inicial para PSP12\nmaquinaEstadosPSP12();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "36583885f14b2cd1",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d520e8e146f126c3",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP10');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP10', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP10' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            [
                "eb9b3613a83d7640"
            ]
        ]
    },
    {
        "id": "8a7de2ede083792f",
        "type": "mysql",
        "z": "6e675624204e9941",
        "g": "d520e8e146f126c3",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 380,
        "wires": [
            [
                "e9da14ab74d9f4e1"
            ]
        ]
    },
    {
        "id": "e9da14ab74d9f4e1",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d520e8e146f126c3",
        "name": "set",
        "func": " flow.set('idListoPSP10', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "eb9b3613a83d7640",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "d520e8e146f126c3",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP10\nvar tareaPSP10 = global.get('tareaPSP10');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP10 === 'undefined') {\n    node.error(\"Error: tareaPSP10 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP10\nvar movNumber = tareaPSP10.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP10.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP10.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP10';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "8a7de2ede083792f"
            ]
        ]
    },
    {
        "id": "a7adc8b9e595f0bb",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "d520e8e146f126c3",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 400,
        "wires": [
            [
                "36583885f14b2cd1"
            ]
        ]
    },
    {
        "id": "81e5066cd279e986",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "d520e8e146f126c3",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 500,
        "wires": [
            [
                "eb9b3613a83d7640"
            ]
        ]
    },
    {
        "id": "3b09969aaaf5c312",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "eb84e41077a17994",
        "name": "Start",
        "func": "// Verificar si la variable global 'validarVariablesTareaTLV1' está en true\nlet validar = flow.get('buscarIdOrdenPSP12');\n\nif (validar === true) {\n    // Disparar el flujo o acción correspondiente\n   // node.warn(\"Disparando el flujo de validación de variables para TLV1...\");\n\n    // Aquí puedes poner el código o función para ejecutar el flujo que necesitas\n    // Por ejemplo, puedes enviar un mensaje o disparar un evento:\n    msg.payload ={};\n\n    // Después de disparar el flujo, poner la variable a false\n   flow.set('buscarIdOrdenPSP12', false);\n    node.warn(\"Variable 'buscarIdOrdenPSP12' puesta en false.\");\n} else {\n   // node.warn(\"La variable 'validarVariablesTareaTLV1' no está en true, no se dispara el flujo.\");\n  msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n    \n    \n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2000,
        "wires": [
            [
                "c0aa9965f04ec325"
            ]
        ]
    },
    {
        "id": "8f2e79c2415df3fc",
        "type": "mysql",
        "z": "6e675624204e9941",
        "g": "eb84e41077a17994",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1190,
        "y": 2080,
        "wires": [
            [
                "c5c984393b57b081"
            ]
        ]
    },
    {
        "id": "c5c984393b57b081",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "eb84e41077a17994",
        "name": "set",
        "func": " flow.set('idListoPSP12', true); \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "c0aa9965f04ec325",
        "type": "function",
        "z": "6e675624204e9941",
        "g": "eb84e41077a17994",
        "name": "Generate SQL Insert",
        "func": "// Obtener la tarea desde la variable global tareaPSP12\nvar tareaPSP12 = global.get('tareaPSP12');\n\n// Verificar si la tarea está definida\nif (typeof tareaPSP12 === 'undefined') {\n    node.error(\"Error: tareaPSP12 no está definida\", msg);\n    return null;\n}\n\n// Obtener los valores de movNumber, uma, destinoEstacion desde tareaPSP12\nvar movNumber = tareaPSP12.datosAdicionales.numeroTransporte;\nvar uma = tareaPSP12.datosAdicionales.umaContenedor;\nvar destinoEstacion = tareaPSP12.destino.estacion;\n\n// Verificar si movNumber, uma y destinoEstacion están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined' || typeof destinoEstacion === 'undefined') {\n    node.error(\"movNumber, uma o destinoEstacion no están definidos\", msg);\n    return null;\n}\n\n// Preparar la consulta para actualizar los valores en la tabla\nmsg.topic = `\n    UPDATE movimientosTLVsPSPs\n    SET destino = '${destinoEstacion}', movNumber = '${movNumber}', estado = 'inProcess'\n    WHERE uma = '${uma}' AND destino = 'PSP12';\n`;\n\n// Registrar la consulta para depuración\nnode.warn(\"Consulta UPDATE generada: \" + msg.topic);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2080,
        "wires": [
            [
                "8f2e79c2415df3fc"
            ]
        ]
    },
    {
        "id": "06ac831a81a980d3",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "eb84e41077a17994",
        "name": "1Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 2100,
        "wires": [
            [
                "3b09969aaaf5c312"
            ]
        ]
    },
    {
        "id": "8af2f1a8ae793aac",
        "type": "inject",
        "z": "6e675624204e9941",
        "g": "eb84e41077a17994",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 2200,
        "wires": [
            [
                "c0aa9965f04ec325"
            ]
        ]
    },
    {
        "id": "097e76b833e3427a",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP11`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida11`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida11`, false);\n            node.warn(`PSP11: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida11 en false.`);\n        } else {\n           // node.warn(`PSP11: No se realizó ningún cambio. datosListosPSP11 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 4000,
        "wires": [
            []
        ]
    },
    {
        "id": "59f1427b9d44730e",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 4000,
        "wires": [
            [
                "097e76b833e3427a"
            ]
        ]
    },
    {
        "id": "2d8dcd5e9d9dfce8",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP11') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 11;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida11`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP11`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP11`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP11`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP11`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP11`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP11`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP11`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP11`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP11`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP11`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP11`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP11`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP11`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP11`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP11`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP11Escritas', true);\n    \n    node.warn(\"Variables para PSP11 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP11.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 4120,
        "wires": [
            []
        ]
    },
    {
        "id": "054f2a88598d1809",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 4120,
        "wires": [
            [
                "2d8dcd5e9d9dfce8"
            ]
        ]
    },
    {
        "id": "6631b8564d3866cf",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida11 = global.get('lanzarBusquedaMesaSalida11') || false;\nlet datosListosPSP11 = global.get('datosListosPSP11') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP11' está en false\nif (lanzarBusquedaMesaSalida11 === true && datosListosPSP11 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP11 = flow.get('timerStartedPSP11') || false;\n    let timeElapsedPSP11 = flow.get('timeElapsedPSP11') || 0;\n\n    if (!timerStartedPSP11) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP11', true);\n        flow.set('timeElapsedPSP11', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP11\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP11 = Date.now();\n        let elapsedTimePSP11 = currentTimePSP11 - timeElapsedPSP11;\n\n        if (elapsedTimePSP11 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP11', true);\n            node.warn(\"Lanzando búsqueda PSP11\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP11', Date.now());\n          //  flow.set('lanzarBusqPSP11', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP11', false);\n    flow.set('timeElapsedPSP11', 0);\n    flow.set('lanzarBusqPSP11', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP11.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 4060,
        "wires": [
            []
        ]
    },
    {
        "id": "ec5908715a7afa9c",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 4060,
        "wires": [
            [
                "6631b8564d3866cf"
            ]
        ]
    },
    {
        "id": "0c8857fafd9d16e5",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "function 73",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP11', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 4180,
        "wires": [
            []
        ]
    },
    {
        "id": "73e00650be77482f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4180,
        "wires": [
            [
                "0c8857fafd9d16e5"
            ]
        ]
    },
    {
        "id": "24943b2967c55daa",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "function 74",
        "func": " global.set('lanzarBusquedaMesaSalida11', true);\n global.set('datosListosPSP11', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 4240,
        "wires": [
            []
        ]
    },
    {
        "id": "4f7a52df5a255680",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4240,
        "wires": [
            [
                "24943b2967c55daa"
            ]
        ]
    },
    {
        "id": "4b245ddd49308bce",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP5') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 5;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida5`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP5`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP5`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP5`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP5`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP5`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP5`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP5`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP5`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP5`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP5`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP5`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP5`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP5`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP5`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP5`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP5Escritas', true);\n    \n    node.warn(\"Variables para PSP5 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP5.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "093727852c149960",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1780,
        "wires": [
            [
                "4b245ddd49308bce"
            ]
        ]
    },
    {
        "id": "61e04de0bf1bf040",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida5') || false;\nlet datosListosPSP5 = global.get('datosListosPSP5') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP5' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP5 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP5 = flow.get('timerStartedPSP5') || false;\n    let timeElapsedPSP5 = flow.get('timeElapsedPSP5') || 0;\n\n    if (!timerStartedPSP5) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP5', true);\n        flow.set('timeElapsedPSP5', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP5\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP5 = Date.now();\n        let elapsedTimePSP5 = currentTimePSP5 - timeElapsedPSP5;\n\n        if (elapsedTimePSP5 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP5', true);\n            node.warn(\"Lanzando búsqueda PSP5\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP5', Date.now());\n          //  flow.set('lanzarBusqPSP5', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP5', false);\n    flow.set('timeElapsedPSP5', 0);\n    flow.set('lanzarBusqPSP5', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP5.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "246d1bad4149583f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1720,
        "wires": [
            [
                "61e04de0bf1bf040"
            ]
        ]
    },
    {
        "id": "75b22e059aa6e9f8",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1660,
        "wires": [
            [
                "90dfc0b69a0817d9"
            ]
        ]
    },
    {
        "id": "90dfc0b69a0817d9",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP5`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida5`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida5`, false);\n            node.warn(`PSP5: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida5 en false.`);\n        } else {\n           // node.warn(`PSP5: No se realizó ningún cambio. datosListosPSP5 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "6af758a3fa3057fe",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1840,
        "wires": [
            [
                "67846ac55ae60f18"
            ]
        ]
    },
    {
        "id": "67846ac55ae60f18",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP5', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "77dd8c0dbf3cd77e",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1900,
        "wires": [
            [
                "eaeb739f92f1e643"
            ]
        ]
    },
    {
        "id": "eaeb739f92f1e643",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "lanzarBusquedaMesaSalida5",
        "func": " global.set('lanzarBusquedaMesaSalida5', true);\n global.set('datosListosPSP5', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "96e239a5f8842d5f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1940,
        "wires": [
            [
                "0019d25fb51f568c"
            ]
        ]
    },
    {
        "id": "0019d25fb51f568c",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "lanzarBusquedaMesaSalida5",
        "func": " global.set('lanzarBusquedaMesaSalida5', false);\n global.set('datosListosPSP5', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "5fc3626c4c05b9bf",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "function 75",
        "func": " global.set('lanzarBusquedaMesaSalida11', false);\n global.set('datosListosPSP11', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 4300,
        "wires": [
            []
        ]
    },
    {
        "id": "c6dbafb0a663caaa",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4300,
        "wires": [
            [
                "5fc3626c4c05b9bf"
            ]
        ]
    },
    {
        "id": "af194c8fe33a5225",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP2') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 2;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida2`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP2`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP2`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP2`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP2`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP2`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP2`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP2`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP2`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP2`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP2`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP2`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP2`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP2`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP2`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP2`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP2Escritas', true);\n    \n    node.warn(\"Variables para PSP2 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP2.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "13c24ae6fe61d602",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 580,
        "wires": [
            [
                "af194c8fe33a5225"
            ]
        ]
    },
    {
        "id": "945f775ee87c9db5",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida2') || false;\nlet datosListosPSP2 = global.get('datosListosPSP2') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP2' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP2 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP2 = flow.get('timerStartedPSP2') || false;\n    let timeElapsedPSP2 = flow.get('timeElapsedPSP2') || 0;\n\n    if (!timerStartedPSP2) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP2', true);\n        flow.set('timeElapsedPSP2', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP2\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP2 = Date.now();\n        let elapsedTimePSP2 = currentTimePSP2 - timeElapsedPSP2;\n\n        if (elapsedTimePSP2 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP2', true);\n            node.warn(\"Lanzando búsqueda PSP2\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP2', Date.now());\n          //  flow.set('lanzarBusqPSP2', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP2', false);\n    flow.set('timeElapsedPSP2', 0);\n    flow.set('lanzarBusqPSP2', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP2.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f7e93d2623c5f054",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "945f775ee87c9db5"
            ]
        ]
    },
    {
        "id": "f0eda99c0f56cb71",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 460,
        "wires": [
            [
                "95b66a776cf788b1"
            ]
        ]
    },
    {
        "id": "95b66a776cf788b1",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP2`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida2`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida2`, false);\n            node.warn(`PSP2: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida2 en false.`);\n        } else {\n           // node.warn(`PSP2: No se realizó ningún cambio. datosListosPSP2 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c7be3aeaf6af3150",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "2a0e4088bd4c8945"
            ]
        ]
    },
    {
        "id": "2a0e4088bd4c8945",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP2', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "708f912409aa85dd",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "7956bd42f95e5ace"
            ]
        ]
    },
    {
        "id": "7956bd42f95e5ace",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "lanzarBusquedaMesaSalida2",
        "func": " global.set('lanzarBusquedaMesaSalida2', true);\n global.set('datosListosPSP2', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "89771c0b6ccb9537",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "7a807fdbfd0e9e15"
            ]
        ]
    },
    {
        "id": "7a807fdbfd0e9e15",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "lanzarBusquedaMesaSalida2",
        "func": " global.set('lanzarBusquedaMesaSalida2', false);\n global.set('datosListosPSP2', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1b4e3d5b7f9fd18a",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP1') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 1;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida1`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP1`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP1`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP1`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP1`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP1`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP1`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP1`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP1`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP1`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP1`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP1`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP1`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP1`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP1`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP1`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP1Escritas', true);\n    \n    node.warn(\"Variables para PSP1 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP1.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bdbe3bb9c64e06bc",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 180,
        "wires": [
            [
                "1b4e3d5b7f9fd18a"
            ]
        ]
    },
    {
        "id": "ac31fe0a6d3a63b6",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "fsmBusquedaPSP1",
        "func": "// Máquina de estados con switch-case para PSP1\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP1: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP1', false);\n            flow.set('PSP1SimoEvent', false);\n            flow.set('variablesPSP1Escritas', false);\n            flow.set('escribirVariablesPSP1', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP1', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP1', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP1') === false &&\n              //  flow.get('PSP1SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP1') === false &&\n               // flow.get('variablesPSP1Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP1', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP1', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP1') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP1', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP1', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP1', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP1Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP1', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP1', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP1', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP1', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP1SimoEvent', true);  // Establece PSP1SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP1', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP1', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP1SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP1', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP1', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP1', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP1', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP1', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP1', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP1', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP1', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6edb518a37e4214b",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida1') || false;\nlet datosListosPSP1 = global.get('datosListosPSP1') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP1' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP1 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP1 = flow.get('timerStartedPSP1') || false;\n    let timeElapsedPSP1 = flow.get('timeElapsedPSP1') || 0;\n\n    if (!timerStartedPSP1) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP1', true);\n        flow.set('timeElapsedPSP1', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP1\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP1 = Date.now();\n        let elapsedTimePSP1 = currentTimePSP1 - timeElapsedPSP1;\n\n        if (elapsedTimePSP1 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP1', true);\n            node.warn(\"Lanzando búsqueda PSP1\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP1', Date.now());\n          //  flow.set('lanzarBusqPSP1', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP1', false);\n    flow.set('timeElapsedPSP1', 0);\n    flow.set('lanzarBusqPSP1', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP1.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "30f59557730b5763",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "6edb518a37e4214b"
            ]
        ]
    },
    {
        "id": "5cb96ff3a608698a",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 60,
        "wires": [
            [
                "ced72fee35351ba5"
            ]
        ]
    },
    {
        "id": "ced72fee35351ba5",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP1`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida1`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida1`, false);\n            node.warn(`PSP1: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida1 en false.`);\n        } else {\n           // node.warn(`PSP1: No se realizó ningún cambio. datosListosPSP1 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "fc1584496ed1fb76",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "5630e05348bc357d"
            ]
        ]
    },
    {
        "id": "5630e05348bc357d",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP1', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9c3880b0205043d7",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "0cedd08e2e901432"
            ]
        ]
    },
    {
        "id": "0cedd08e2e901432",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "lanzarBusquedaMesaSalida1",
        "func": " global.set('lanzarBusquedaMesaSalida1', true);\n global.set('datosListosPSP1', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "fe7c040df1c67dd9",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "a71b2f611165c7e9"
            ]
        ]
    },
    {
        "id": "a71b2f611165c7e9",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "lanzarBusquedaMesaSalida1",
        "func": " global.set('lanzarBusquedaMesaSalida1', false);\n global.set('datosListosPSP1', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e756ea2280c69c48",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP3') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 3;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida3`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP3`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP3`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP3`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP3`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP3`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP3`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP3`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP3`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP3`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP3`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP3`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP3`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP3`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP3`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP3`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP3Escritas', true);\n    \n    node.warn(\"Variables para PSP3 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP3.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "a00256e2a4eeed5f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 980,
        "wires": [
            [
                "e756ea2280c69c48"
            ]
        ]
    },
    {
        "id": "96b6dcbc1ff4fb0c",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida3') || false;\nlet datosListosPSP3 = global.get('datosListosPSP3') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP3' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP3 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP3 = flow.get('timerStartedPSP3') || false;\n    let timeElapsedPSP3 = flow.get('timeElapsedPSP3') || 0;\n\n    if (!timerStartedPSP3) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP3', true);\n        flow.set('timeElapsedPSP3', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP3\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP3 = Date.now();\n        let elapsedTimePSP3 = currentTimePSP3 - timeElapsedPSP3;\n\n        if (elapsedTimePSP3 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP3', true);\n            node.warn(\"Lanzando búsqueda PSP3\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP3', Date.now());\n          //  flow.set('lanzarBusqPSP3', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP3', false);\n    flow.set('timeElapsedPSP3', 0);\n    flow.set('lanzarBusqPSP3', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP3.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "5d725afdc874741f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 920,
        "wires": [
            [
                "96b6dcbc1ff4fb0c"
            ]
        ]
    },
    {
        "id": "79589cc790299ee0",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 860,
        "wires": [
            [
                "b8db447299f21f24"
            ]
        ]
    },
    {
        "id": "b8db447299f21f24",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP3`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida3`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida3`, false);\n            node.warn(`PSP3: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida3 en false.`);\n        } else {\n           // node.warn(`PSP3: No se realizó ningún cambio. datosListosPSP3 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "56be62c165f170a9",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1040,
        "wires": [
            [
                "532d1d884e63d930"
            ]
        ]
    },
    {
        "id": "532d1d884e63d930",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP3', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "dab6d5269784d24b",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "f07abd94df5e37d8"
            ]
        ]
    },
    {
        "id": "f07abd94df5e37d8",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "lanzarBusquedaMesaSalida3",
        "func": " global.set('lanzarBusquedaMesaSalida3', true);\n global.set('datosListosPSP3', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "dd6559469fdbf245",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "73e07565742d46bd"
            ]
        ]
    },
    {
        "id": "73e07565742d46bd",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "lanzarBusquedaMesaSalida3",
        "func": " global.set('lanzarBusquedaMesaSalida3', false);\n global.set('datosListosPSP3', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "0fa103d7bc4fd6ca",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP4') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 4;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida4`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP4`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP4`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP4`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP4`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP4`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP4`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP4`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP4`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP4`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP4`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP4`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP4`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP4`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP4`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP4`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP4Escritas', true);\n    \n    node.warn(\"Variables para PSP4 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP4.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "b7a8c8a9fa8c7257",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "0fa103d7bc4fd6ca"
            ]
        ]
    },
    {
        "id": "07763cb7c025a508",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida4') || false;\nlet datosListosPSP4 = global.get('datosListosPSP4') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP4' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP4 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP4 = flow.get('timerStartedPSP4') || false;\n    let timeElapsedPSP4 = flow.get('timeElapsedPSP4') || 0;\n\n    if (!timerStartedPSP4) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP4', true);\n        flow.set('timeElapsedPSP4', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP4\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP4 = Date.now();\n        let elapsedTimePSP4 = currentTimePSP4 - timeElapsedPSP4;\n\n        if (elapsedTimePSP4 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP4', true);\n            node.warn(\"Lanzando búsqueda PSP4\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP4', Date.now());\n          //  flow.set('lanzarBusqPSP4', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP4', false);\n    flow.set('timeElapsedPSP4', 0);\n    flow.set('lanzarBusqPSP4', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP4.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "50f538579d973b45",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 1320,
        "wires": [
            [
                "07763cb7c025a508"
            ]
        ]
    },
    {
        "id": "6284516e0793aedf",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1260,
        "wires": [
            [
                "f1f39776e9df9cdc"
            ]
        ]
    },
    {
        "id": "f1f39776e9df9cdc",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP4`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida4`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida4`, false);\n            node.warn(`PSP4: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida4 en false.`);\n        } else {\n           // node.warn(`PSP4: No se realizó ningún cambio. datosListosPSP4 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "675c47e31309cc1f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1440,
        "wires": [
            [
                "4f59f6449d45c38b"
            ]
        ]
    },
    {
        "id": "4f59f6449d45c38b",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP4', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "2338ae89cfa25a80",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1500,
        "wires": [
            [
                "a25dc557678e7280"
            ]
        ]
    },
    {
        "id": "a25dc557678e7280",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "lanzarBusquedaMesaSalida4",
        "func": " global.set('lanzarBusquedaMesaSalida4', true);\n global.set('datosListosPSP4', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "48ed79c3de2ab7cd",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1540,
        "wires": [
            [
                "802301fc2d9b6d60"
            ]
        ]
    },
    {
        "id": "802301fc2d9b6d60",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "lanzarBusquedaMesaSalida4",
        "func": " global.set('lanzarBusquedaMesaSalida4', false);\n global.set('datosListosPSP4', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "08fa6008e5e58d97",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP6') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 6;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida6`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP6`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP6`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP6`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP6`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP6`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP6`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP6`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP6`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP6`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP6`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP6`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP6`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP6`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP6`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP6`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP6Escritas', true);\n    \n    node.warn(\"Variables para PSP6 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP6.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "46d71d4f597a0f3d",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2180,
        "wires": [
            [
                "08fa6008e5e58d97"
            ]
        ]
    },
    {
        "id": "f54f48498a336e30",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida6') || false;\nlet datosListosPSP6 = global.get('datosListosPSP6') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP6' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP6 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP6 = flow.get('timerStartedPSP6') || false;\n    let timeElapsedPSP6 = flow.get('timeElapsedPSP6') || 0;\n\n    if (!timerStartedPSP6) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP6', true);\n        flow.set('timeElapsedPSP6', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP6\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP6 = Date.now();\n        let elapsedTimePSP6 = currentTimePSP6 - timeElapsedPSP6;\n\n        if (elapsedTimePSP6 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP6', true);\n            node.warn(\"Lanzando búsqueda PSP6\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP6', Date.now());\n          //  flow.set('lanzarBusqPSP6', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP6', false);\n    flow.set('timeElapsedPSP6', 0);\n    flow.set('lanzarBusqPSP6', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP6.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "144c3e4496178811",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2120,
        "wires": [
            [
                "f54f48498a336e30"
            ]
        ]
    },
    {
        "id": "8a52f81f1c87f3e6",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2060,
        "wires": [
            [
                "7a4f59152de822e8"
            ]
        ]
    },
    {
        "id": "7a4f59152de822e8",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP6`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida6`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida6`, false);\n            node.warn(`PSP6: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida6 en false.`);\n        } else {\n           // node.warn(`PSP6: No se realizó ningún cambio. datosListosPSP6 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "db3754a235f23b14",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2240,
        "wires": [
            [
                "6a692c9f54287ef6"
            ]
        ]
    },
    {
        "id": "6a692c9f54287ef6",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP6', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "1fad702c654fe05f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2300,
        "wires": [
            [
                "b9e4ea21c1d1d539"
            ]
        ]
    },
    {
        "id": "b9e4ea21c1d1d539",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "lanzarBusquedaMesaSalida6",
        "func": " global.set('lanzarBusquedaMesaSalida6', true);\n global.set('datosListosPSP6', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "d9dc8391bcb145e0",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2340,
        "wires": [
            [
                "71d14cdace122a59"
            ]
        ]
    },
    {
        "id": "71d14cdace122a59",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "lanzarBusquedaMesaSalida6",
        "func": " global.set('lanzarBusquedaMesaSalida6', false);\n global.set('datosListosPSP6', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "2074df3dd556f370",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP7') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 7;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida7`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP7`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP7`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP7`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP7`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP7`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP7`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP7`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP7`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP7`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP7`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP7`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP7`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP7`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP7`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP7`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP7Escritas', true);\n    \n    node.warn(\"Variables para PSP7 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP7.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "e9470d7a285f5ab5",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2580,
        "wires": [
            [
                "2074df3dd556f370"
            ]
        ]
    },
    {
        "id": "d8cd5392ea4b2e36",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida7') || false;\nlet datosListosPSP7 = global.get('datosListosPSP7') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP7' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP7 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP7 = flow.get('timerStartedPSP7') || false;\n    let timeElapsedPSP7 = flow.get('timeElapsedPSP7') || 0;\n\n    if (!timerStartedPSP7) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP7', true);\n        flow.set('timeElapsedPSP7', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP7\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP7 = Date.now();\n        let elapsedTimePSP7 = currentTimePSP7 - timeElapsedPSP7;\n\n        if (elapsedTimePSP7 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP7', true);\n            node.warn(\"Lanzando búsqueda PSP7\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP7', Date.now());\n          //  flow.set('lanzarBusqPSP7', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP7', false);\n    flow.set('timeElapsedPSP7', 0);\n    flow.set('lanzarBusqPSP7', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP7.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "fcac8557f9f99d83",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2520,
        "wires": [
            [
                "d8cd5392ea4b2e36"
            ]
        ]
    },
    {
        "id": "d53e3fe23640fb4a",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2460,
        "wires": [
            [
                "714d733d346a6aff"
            ]
        ]
    },
    {
        "id": "714d733d346a6aff",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP7`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida7`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida7`, false);\n            node.warn(`PSP7: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida7 en false.`);\n        } else {\n           // node.warn(`PSP7: No se realizó ningún cambio. datosListosPSP7 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "bb2c29210a77df78",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2640,
        "wires": [
            [
                "d5f73db5a672cac7"
            ]
        ]
    },
    {
        "id": "d5f73db5a672cac7",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP7', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "a5bfca7db3dfce08",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2700,
        "wires": [
            [
                "831b9eb01b14f0b8"
            ]
        ]
    },
    {
        "id": "831b9eb01b14f0b8",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "lanzarBusquedaMesaSalida7",
        "func": " global.set('lanzarBusquedaMesaSalida7', true);\n global.set('datosListosPSP7', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2700,
        "wires": [
            []
        ]
    },
    {
        "id": "5071c270e56b0451",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2740,
        "wires": [
            [
                "1c6b9d3e4d0ae802"
            ]
        ]
    },
    {
        "id": "1c6b9d3e4d0ae802",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "lanzarBusquedaMesaSalida7",
        "func": " global.set('lanzarBusquedaMesaSalida7', false);\n global.set('datosListosPSP7', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "eea98515b10d1e01",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP8') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 8;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida8`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP8`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP8`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP8`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP8`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP8`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP8`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP8`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP8`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP8`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP8`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP8`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP8`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP8`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP8`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP8`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP8Escritas', true);\n    \n    node.warn(\"Variables para PSP8 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP8.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "6c456e5936319995",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2960,
        "wires": [
            [
                "eea98515b10d1e01"
            ]
        ]
    },
    {
        "id": "a0723bbcdb1c8f43",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida8') || false;\nlet datosListosPSP8 = global.get('datosListosPSP8') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP8' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP8 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP8 = flow.get('timerStartedPSP8') || false;\n    let timeElapsedPSP8 = flow.get('timeElapsedPSP8') || 0;\n\n    if (!timerStartedPSP8) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP8', true);\n        flow.set('timeElapsedPSP8', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP8\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP8 = Date.now();\n        let elapsedTimePSP8 = currentTimePSP8 - timeElapsedPSP8;\n\n        if (elapsedTimePSP8 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP8', true);\n            node.warn(\"Lanzando búsqueda PSP8\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP8', Date.now());\n          //  flow.set('lanzarBusqPSP8', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP8', false);\n    flow.set('timeElapsedPSP8', 0);\n    flow.set('lanzarBusqPSP8', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP8.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "bf79c45e6cad5a18",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 2900,
        "wires": [
            [
                "a0723bbcdb1c8f43"
            ]
        ]
    },
    {
        "id": "d202c578a91ad384",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2840,
        "wires": [
            [
                "802190637681a825"
            ]
        ]
    },
    {
        "id": "802190637681a825",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP8`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida8`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida8`, false);\n            node.warn(`PSP8: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida8 en false.`);\n        } else {\n           // node.warn(`PSP8: No se realizó ningún cambio. datosListosPSP8 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "c73e06404d0a7451",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3020,
        "wires": [
            [
                "cea1b8f594b55d89"
            ]
        ]
    },
    {
        "id": "cea1b8f594b55d89",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP8', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3020,
        "wires": [
            []
        ]
    },
    {
        "id": "01e4b7e92b62deab",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3080,
        "wires": [
            [
                "c544d6cbd6e46d74"
            ]
        ]
    },
    {
        "id": "c544d6cbd6e46d74",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "lanzarBusquedaMesaSalida8",
        "func": " global.set('lanzarBusquedaMesaSalida8', true);\n global.set('datosListosPSP8', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "47eecc00b3af86cc",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3120,
        "wires": [
            [
                "5b441746e814c91d"
            ]
        ]
    },
    {
        "id": "5b441746e814c91d",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "lanzarBusquedaMesaSalida8",
        "func": " global.set('lanzarBusquedaMesaSalida8', false);\n global.set('datosListosPSP8', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "adea5aac0d4121a9",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP9') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 9;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida9`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP9`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP9`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP9`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP9`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP9`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP9`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP9`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP9`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP9`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP9`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP9`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP9`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP9`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP9`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP9`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP9Escritas', true);\n    \n    node.warn(\"Variables para PSP9 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP9.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "9b764cc265f0eb0b",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 3360,
        "wires": [
            [
                "adea5aac0d4121a9"
            ]
        ]
    },
    {
        "id": "5f1b2d0b19ecf429",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida9') || false;\nlet datosListosPSP9 = global.get('datosListosPSP9') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP9' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP9 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP9 = flow.get('timerStartedPSP9') || false;\n    let timeElapsedPSP9 = flow.get('timeElapsedPSP9') || 0;\n\n    if (!timerStartedPSP9) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP9', true);\n        flow.set('timeElapsedPSP9', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP9\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP9 = Date.now();\n        let elapsedTimePSP9 = currentTimePSP9 - timeElapsedPSP9;\n\n        if (elapsedTimePSP9 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP9', true);\n            node.warn(\"Lanzando búsqueda PSP9\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP9', Date.now());\n          //  flow.set('lanzarBusqPSP9', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP9', false);\n    flow.set('timeElapsedPSP9', 0);\n    flow.set('lanzarBusqPSP9', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP9.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "6e1b93178552ec49",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 3300,
        "wires": [
            [
                "5f1b2d0b19ecf429"
            ]
        ]
    },
    {
        "id": "9f81673dadfd185f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 3240,
        "wires": [
            [
                "d935e53fe5baaf15"
            ]
        ]
    },
    {
        "id": "d935e53fe5baaf15",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP9`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida9`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida9`, false);\n            node.warn(`PSP9: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida9 en false.`);\n        } else {\n           // node.warn(`PSP9: No se realizó ningún cambio. datosListosPSP9 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "f63f9f1101c756ce",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3420,
        "wires": [
            [
                "8a19ddb1f0419fb2"
            ]
        ]
    },
    {
        "id": "8a19ddb1f0419fb2",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP9', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "98f8e03a3d1dbabd",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3480,
        "wires": [
            [
                "0ea6f0c6d8a6241d"
            ]
        ]
    },
    {
        "id": "0ea6f0c6d8a6241d",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "lanzarBusquedaMesaSalida9",
        "func": " global.set('lanzarBusquedaMesaSalida9', true);\n global.set('datosListosPSP9', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3480,
        "wires": [
            []
        ]
    },
    {
        "id": "ab9af9c760c12793",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3520,
        "wires": [
            [
                "97b391d4450395c2"
            ]
        ]
    },
    {
        "id": "97b391d4450395c2",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "lanzarBusquedaMesaSalida9",
        "func": " global.set('lanzarBusquedaMesaSalida9', false);\n global.set('datosListosPSP9', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "4015211767b41cb4",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP10') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 10;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida10`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP10`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP10`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP10`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP10`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP10`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP10`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP10`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP10`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP10`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP10`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP10`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP10`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP10`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP10`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP10`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP10Escritas', true);\n    \n    node.warn(\"Variables para PSP10 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP10.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 3740,
        "wires": [
            []
        ]
    },
    {
        "id": "6f19365a3a254076",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 3740,
        "wires": [
            [
                "4015211767b41cb4"
            ]
        ]
    },
    {
        "id": "b379b428d6537839",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida = global.get('lanzarBusquedaMesaSalida10') || false;\nlet datosListosPSP10 = global.get('datosListosPSP10') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP10' está en false\nif (lanzarBusquedaMesaSalida === true && datosListosPSP10 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP10 = flow.get('timerStartedPSP10') || false;\n    let timeElapsedPSP10 = flow.get('timeElapsedPSP10') || 0;\n\n    if (!timerStartedPSP10) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP10', true);\n        flow.set('timeElapsedPSP10', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP10\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP10 = Date.now();\n        let elapsedTimePSP10 = currentTimePSP10 - timeElapsedPSP10;\n\n        if (elapsedTimePSP10 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP10', true);\n            node.warn(\"Lanzando búsqueda PSP10\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP10', Date.now());\n          //  flow.set('lanzarBusqPSP10', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP10', false);\n    flow.set('timeElapsedPSP10', 0);\n    flow.set('lanzarBusqPSP10', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP10.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3680,
        "wires": [
            []
        ]
    },
    {
        "id": "044dde31a1c2b008",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 3680,
        "wires": [
            [
                "b379b428d6537839"
            ]
        ]
    },
    {
        "id": "b1017d2d03f0ec27",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 3620,
        "wires": [
            [
                "b31ddca7097bdb21"
            ]
        ]
    },
    {
        "id": "b31ddca7097bdb21",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP10`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida10`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida10`, false);\n            node.warn(`PSP10: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida10 en false.`);\n        } else {\n           // node.warn(`PSP10: No se realizó ningún cambio. datosListosPSP10 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3620,
        "wires": [
            []
        ]
    },
    {
        "id": "f192be7abd2d27a7",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3800,
        "wires": [
            [
                "aa39dfaea25ced71"
            ]
        ]
    },
    {
        "id": "aa39dfaea25ced71",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP10', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 3800,
        "wires": [
            []
        ]
    },
    {
        "id": "01c7fd19a983366c",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3860,
        "wires": [
            [
                "be8a4f73d71b0c65"
            ]
        ]
    },
    {
        "id": "be8a4f73d71b0c65",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "lanzarBusquedaMesaSalida10",
        "func": " global.set('lanzarBusquedaMesaSalida10', true);\n global.set('datosListosPSP10', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3860,
        "wires": [
            []
        ]
    },
    {
        "id": "e6eb855f34a6f52c",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3900,
        "wires": [
            [
                "1e0d760faecd9106"
            ]
        ]
    },
    {
        "id": "1e0d760faecd9106",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "lanzarBusquedaMesaSalida10",
        "func": " global.set('lanzarBusquedaMesaSalida10', false);\n global.set('datosListosPSP10', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3900,
        "wires": [
            []
        ]
    },
    {
        "id": "ed64cbf404faa1bf",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'escribirVariablesPSP1' está en true\nif (flow.get('escribirVariablesPSP12') === true) {\n    \n    // Número de pasillo para PSP1 (por defecto será 1)\n    let pasillo = 12;\n\n    // Obtener el número de movimiento desde la variable global correspondiente a PSP1\n    let numMovMesaSalida = global.get(`numMovMesaSalida12`);\n\n    // **Escribir las variables para PSP1**\n    \n    // Obtener la variable dinámica de operaciones encadenadas para PSP1\n    global.set(`OperacionesEncadenadas_SIMO_PSP12`, 4); // Dinámico: indica qué partes enviar para PSP1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PSP1\n    global.set(`NumeroAlmacen_SIMO_PSP12`, 20001);      // Número de Almacén para PSP1\n    global.set(`Equipamiento_SIMO_PSP12`, ` `);   // Equipamiento específico para PSP1\n\n    // **Definir las variables y constantes para la búsqueda en PSP1**\n    global.set(`CantidadMovimientos_SIMO_Busq_PSP12`, 0);  // Número de movimientos en la búsqueda\n    global.set(`NumeroMovimiento_SIMO_Busq_PSP12`, numMovMesaSalida); // Número de movimiento desde la variable global\n    global.set(`TipoEstacion_SIMO_Busq_PSP12`, 10);         // Tipo de estación para PSP1\n    global.set(`NumeroEstacion_SIMO_Busq_PSP12`, pasillo);  // Número de estación para la búsqueda en PSP1\n    global.set(`XActual_SIMO_Busq_PSP12`, 999);             // Coordenada X actual\n    global.set(`YActual_SIMO_Busq_PSP12`, 1);               // Coordenada Y actual\n    global.set(`Lado_SIMO_Busq_PSP12`, 0);                  // Lado\n    global.set(`Pasillo_SIMO_Busq_PSP12`, pasillo);         // Pasillo\n  global.set(`Status_SIMO_Busq_PSP12`, \"S\");                // Estado\n    global.set(`Ocupacion_SIMO_Busq_PSP12`, 0);             // Ocupación\n    global.set(`Capacidad_SIMO_Busq_PSP12`, 1);             // Capacidad\n\n    // Variables auxiliares para la búsqueda en PSP1\n    for (let j = 1; j <= 8; j++) {  \n        global.set(`Aux0${j}_SIMO_Busq_PSP12`, 0);  // Asignar variables auxiliares\n    }\n\n    // Establecer la variable de flujo 'variablesPSP1Escritas' en true\n    flow.set('variablesPSP12Escritas', true);\n    \n    node.warn(\"Variables para PSP12 escritas correctamente.\");\n} else {\n  //  node.warn(\"No se activó la escritura de variables para PSP12.\");\n}\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 4540,
        "wires": [
            []
        ]
    },
    {
        "id": "c7b97c0a652264fd",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 4540,
        "wires": [
            [
                "ed64cbf404faa1bf"
            ]
        ]
    },
    {
        "id": "a340cc98fa6ce67c",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "CheckPSP",
        "func": "// Verificar el estado de las variables de flujo\nlet lanzarBusquedaMesaSalida11 = global.get('lanzarBusquedaMesaSalida12') || false;\nlet datosListosPSP12 = global.get('datosListosPSP12') || false;\n\n// Si 'lanzarBusquedaMesaSalida2' está en true y 'datosListosPSP12' está en false\nif (lanzarBusquedaMesaSalida11 === true && datosListosPSP12 === false) {  //\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStartedPSP12 = flow.get('timerStartedPSP12') || false;\n    let timeElapsedPSP12 = flow.get('timeElapsedPSP12') || 0;\n\n    if (!timerStartedPSP12) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedPSP12', true);\n        flow.set('timeElapsedPSP12', Date.now());\n       // node.warn(\"Temporizador iniciado para PSP12\");\n    } else {\n        // Verificar si han pasado 45 segundos\n        let currentTimePSP12 = Date.now();\n        let elapsedTimePSP12 = currentTimePSP12 - timeElapsedPSP12;\n\n        if (elapsedTimePSP12 >= 5000) {  // 45000 ms = 45 segundos\n            // Cumplimos las condiciones durante 45 segundos, lanzar búsqueda\n            flow.set('lanzarBusqPSP12', true);\n            node.warn(\"Lanzando búsqueda PSP12\");\n\n            // Reiniciar el temporizador\n            flow.set('timeElapsedPSP12', Date.now());\n          //  flow.set('lanzarBusqPSP12', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedPSP12', false);\n    flow.set('timeElapsedPSP12', 0);\n    flow.set('lanzarBusqPSP12', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para PSP12.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 4480,
        "wires": [
            []
        ]
    },
    {
        "id": "04d2b7385022b1e6",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "CheckPSP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 4480,
        "wires": [
            [
                "a340cc98fa6ce67c"
            ]
        ]
    },
    {
        "id": "a6cf5684923122fb",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "ResetLanzarBusqueda",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 4420,
        "wires": [
            [
                "ce955b7d6cea90d6"
            ]
        ]
    },
    {
        "id": "ce955b7d6cea90d6",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "CheckPSP",
        "func": "\n        let datosListosPSP = global.get(`datosListosPSP12`) || false;\n        let lanzarBusquedaMesaSalida = global.get(`lanzarBusquedaMesaSalida12`) || false;\n\n        // Si 'datosListosPSPXX' es true, establecer 'lanzarBusquedaMesaSalidaXX' en false\n        if ((datosListosPSP === true) && (lanzarBusquedaMesaSalida === true)) {\n            global.set(`lanzarBusquedaMesaSalida12`, false);\n            node.warn(`PSP12: datosListosPSP es true. Estableciendo lanzarBusquedaMesaSalida12 en false.`);\n        } else {\n           // node.warn(`PSP12: No se realizó ningún cambio. datosListosPSP12 es false.`);\n        }\n\n// Devolver el mensaje para seguir con el flujo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 4420,
        "wires": [
            []
        ]
    },
    {
        "id": "5daee391f0c4131f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4600,
        "wires": [
            [
                "0e114574a07e3ec2"
            ]
        ]
    },
    {
        "id": "0e114574a07e3ec2",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "stateMachineEventLanzarBusqStagePSP12-->30",
        "func": " global.set('stateMachineEventLanzarBusqStagePSP12', 30);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 4600,
        "wires": [
            []
        ]
    },
    {
        "id": "e5c201d9a50008b2",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4660,
        "wires": [
            [
                "614bb16cc50789d7"
            ]
        ]
    },
    {
        "id": "614bb16cc50789d7",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "'lanzarBusquedaMesaSalida12', true",
        "func": " global.set('lanzarBusquedaMesaSalida12', true);\n global.set('datosListosPSP12', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 4660,
        "wires": [
            []
        ]
    },
    {
        "id": "b1aa6d3ff60976bc",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "'lanzarBusquedaMesaSalida12', false",
        "func": " global.set('lanzarBusquedaMesaSalida12', false);\n global.set('datosListosPSP12', false) ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 4720,
        "wires": [
            []
        ]
    },
    {
        "id": "5a9369dc1d675582",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 4720,
        "wires": [
            [
                "b1aa6d3ff60976bc"
            ]
        ]
    },
    {
        "id": "eccd18eda337f72e",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "fsmBusquedaPSP2",
        "func": "// Máquina de estados con switch-case para PSP2\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP2: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP2', false);\n            flow.set('PSP2SimoEvent', false);\n            flow.set('variablesPSP2Escritas', false);\n            flow.set('escribirVariablesPSP2', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP2', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP2', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP2') === false &&\n               // flow.get('PSP2SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP2') === false &&\n              //  flow.get('variablesPSP2Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP2', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP2', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP2') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP2', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP2', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP2', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP2Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP2', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP2', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP2', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP2', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP2SimoEvent', true);  // Establece PSP2SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP2', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP2', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP2SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP2', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP2', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP2', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP2', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP2', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP2', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP2', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP2', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "83f86ce7a6c131fd",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "fsmBusquedaPSP3",
        "func": "// Máquina de estados con switch-case para PSP3\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP3') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP3: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP3', false);\n            flow.set('PSP3SimoEvent', false);\n            flow.set('variablesPSP3Escritas', false);\n            flow.set('escribirVariablesPSP3', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP3', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP3', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP3') === false &&\n               // flow.get('PSP3SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP3') === false &&\n              //  flow.get('variablesPSP3Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP3', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP3', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP3') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP3', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP3', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP3', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP3Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP3', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP3', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP3', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP3', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP3SimoEvent', true);  // Establece PSP3SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP3', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP3', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP3SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP3', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP3', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP3', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP3', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP3', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP3', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP3', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP3', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c6864828496d551e",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "fsmBusquedaPSP4",
        "func": "// Máquina de estados con switch-case para PSP4\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP4') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP4: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP4', false);\n            flow.set('PSP4SimoEvent', false);\n            flow.set('variablesPSP4Escritas', false);\n            flow.set('escribirVariablesPSP4', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP4', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP4', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP4') === false &&\n               // flow.get('PSP4SimoEvent') === false &&\n              //  flow.get('escribirVariablesPSP4') === false &&\n               //flow.get('variablesPSP4Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP4', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP4', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP4') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP4', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP4', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP4', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP4Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP4', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP4', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP4', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP4', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP4SimoEvent', true);  // Establece PSP4SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP4', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP4', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP4SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP4', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP4', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP4', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP4', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP4', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP4', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP4', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP4', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "65329b20268a4991",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "fsmBusquedaPSP5",
        "func": "// Máquina de estados con switch-case para PSP5\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP5') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP5: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP5', false);\n            flow.set('PSP5SimoEvent', false);\n            flow.set('variablesPSP5Escritas', false);\n            flow.set('escribirVariablesPSP5', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP5', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP5', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP5') === false &&\n               // flow.get('PSP5SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP5') === false &&\n                //flow.get('variablesPSP5Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP5', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP5', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP5') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP5', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP5', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP5', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP5Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP5', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP5', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP5', 50);\n               \n            }, 1000);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP5', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP5SimoEvent', true);  // Establece PSP5SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP5', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP5', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP5SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP5', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP5', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP5', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP5', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP5', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP5', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP5', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP5', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "3a5dd8c00ac442ec",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "208adb638e3bd7a3",
        "name": "fsmBusquedaPSP6",
        "func": "// Máquina de estados con switch-case para PSP6\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP6') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP6: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP6', false);\n            flow.set('PSP6SimoEvent', false);\n            flow.set('variablesPSP6Escritas', false);\n            flow.set('escribirVariablesPSP6', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP6', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP6', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP6') === false &&\n               // flow.get('PSP6SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP6') === false &&\n              //  flow.get('variablesPSP6Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP6', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP6', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP6') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP6', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP6', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP6', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP6Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP6', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP6', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP6', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP6', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP6SimoEvent', true);  // Establece PSP6SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP6', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP6', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP6SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP6', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP6', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP6', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP6', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP6', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP6', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP6', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP6', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "559bddd432f128b2",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "fsmBusquedaPSP7",
        "func": "// Máquina de estados con switch-case para PSP7\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP7') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP7: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP7', false);\n            flow.set('PSP7SimoEvent', false);\n            flow.set('variablesPSP7Escritas', false);\n            flow.set('escribirVariablesPSP7', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP7', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP7', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP7') === false &&\n               // flow.get('PSP7SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP7') === false &&\n               // flow.get('variablesPSP7Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP7', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP7', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP7') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP7', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP7', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP7', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP7Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP7', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP7', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP7', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP7', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP7SimoEvent', true);  // Establece PSP7SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP7', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP7', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP7SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP7', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP7', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP7', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP7', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP7', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP7', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP7', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP7', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "9ca139ab691f2c12",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "fsmBusquedaPSP8",
        "func": "// Máquina de estados con switch-case para PSP8\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP8') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP8: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP8', false);\n            flow.set('PSP8SimoEvent', false);\n            flow.set('variablesPSP8Escritas', false);\n            flow.set('escribirVariablesPSP8', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP8', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP8', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP8') === false &&\n              //  flow.get('PSP8SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP8') === false &&\n               // flow.get('variablesPSP8Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP8', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP8', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP8') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP8', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP8', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP8', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP8Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP8', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP8', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP8', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP8', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP8SimoEvent', true);  // Establece PSP8SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP8', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP8', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP8SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP8', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP8', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP8', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP8', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP8', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP8', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP8', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP8', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "23d0fb03f07a0df4",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "fsmBusquedaPSP9",
        "func": "// Máquina de estados con switch-case para PSP9\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP9') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP9: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP9', false);\n            flow.set('PSP9SimoEvent', false);\n            flow.set('variablesPSP9Escritas', false);\n            flow.set('escribirVariablesPSP9', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP9', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP9', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n              //  flow.get('lanzarBusqPSP9') === false &&\n             //   flow.get('PSP9SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP9') === false &&\n              //  flow.get('variablesPSP9Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP9', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP9', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP9') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP9', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP9', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP9', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP9Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP9', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP9', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP9', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP9', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP9SimoEvent', true);  // Establece PSP9SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP9', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP9', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP9SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP9', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP9', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP9', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP9', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP9', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP9', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP9', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP9', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "197495869b35c8d1",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "47495e066626cbe9",
        "name": "fsmBusquedaPSP10",
        "func": "// Máquina de estados con switch-case para PSP10\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP10') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP10: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP10', false);\n            flow.set('PSP10SimoEvent', false);\n            flow.set('variablesPSP10Escritas', false);\n            flow.set('escribirVariablesPSP10', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP10', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP10', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n              //  flow.get('lanzarBusqPSP10') === false &&\n              //  flow.get('PSP10SimoEvent') === false &&\n               // flow.get('escribirVariablesPSP10') === false &&\n              //  flow.get('variablesPSP10Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP10', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP10', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP10') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP10', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP10', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP10', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP10Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP10', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP10', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP10', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP10', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP10SimoEvent', true);  // Establece PSP10SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP10', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP10', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP10SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP10', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP10', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP10', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP10', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP10', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP10', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP10', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP10', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "a30cb9c84ca03bd4",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "fsmBusquedaPSP11",
        "func": "// Máquina de estados con switch-case para PSP11\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP11') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP11: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP11', false);\n            flow.set('PSP11SimoEvent', false);\n            flow.set('variablesPSP11Escritas', false);\n            flow.set('escribirVariablesPSP11', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP11', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP11', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n               // flow.get('lanzarBusqPSP11') === false &&\n              //  flow.get('PSP11SimoEvent') === false &&\n              //  flow.get('escribirVariablesPSP11') === false &&\n              //  flow.get('variablesPSP11Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP11', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP11', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP11') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP11', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP11', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP11', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP11Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP11', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP11', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP11', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP11', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP11SimoEvent', true);  // Establece PSP11SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP11', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP11', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP11SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP11', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP11', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP11', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP11', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP11', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP11', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP11', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP11', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 4040,
        "wires": [
            []
        ]
    },
    {
        "id": "3fd67d068f48ee0d",
        "type": "function",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "fsmBusquedaPSP12",
        "func": "// Máquina de estados con switch-case para PSP12\n\n    let estadoActual = global.get('stateMachineEventLanzarBusqStagePSP12') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual PSP12: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n            flow.set('lanzarBusqPSP12', false);\n            flow.set('PSP12SimoEvent', false);\n            flow.set('variablesPSP12Escritas', false);\n            flow.set('escribirVariablesPSP12', false); \n            \n            // Asignar estado\n            global.set('stateMachineEventLanzarBusqStagePSP12', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventLanzarBusqStagePSP12', 10);\n            // Verificar si todos los resets se han hecho correctamente\n            if (\n              //  flow.get('lanzarBusqPSP12') === false &&\n              //  flow.get('PSP12SimoEvent') === false &&\n              //  flow.get('escribirVariablesPSP12') === false &&\n               // flow.get('variablesPSP12Escritas') === false &&\n                global.get(\"mecActivado\") === true\n            ) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP12', 20);\n                   \n                }, 100);\n            }\n            break;\n\n        case 20: // 20_CheckBusquedaMesaSalida\n            global.set('stateMachineEventLanzarBusqStagePSP12', 20);\n            // Simula la verificación de si lanzarBusquedaMesaSalida1 está en true\n            if (flow.get('lanzarBusqPSP12') === true) {\n                global.set('stateMachineEventLanzarBusqStagePSP12', 30);\n               \n            } \n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventLanzarBusqStagePSP12', 30);\n            // Simula la escritura de variables\n            flow.set('escribirVariablesPSP12', true);  // Marca las variables como escritas correctamente.\n\n            if (flow.get('variablesPSP12Escritas') === true) {\n               global.set('stateMachineEventLanzarBusqStagePSP12', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventLanzarBusqStagePSP12', 40);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP12', 50);\n               \n            }, 100);\n            break;\n\n        case 50: // 50_LanzarEvento\n           global.set('stateMachineEventLanzarBusqStagePSP12', 50);\n            // Simula el lanzamiento del evento\n            global.set('PSP12SimoEvent', true);  // Establece PSP12SimoEvent como true.\n\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP12', 60);\n               \n            }, 100);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventLanzarBusqStagePSP12', 60);;\n            // Verificar si el evento se lanzó correctamente\n            if (global.get('PSP12SimoEvent') === false) {\n                setTimeout(() => {\n                    global.set('stateMachineEventLanzarBusqStagePSP12', 70);\n                   \n                }, 100);\n            } \n            break;\n\n        case 70: // 70_EventoOK\n            global.set('stateMachineEventLanzarBusqStagePSP12', 70);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP12', 900);\n               \n            }, 100);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           global.set('stateMachineEventLanzarBusqStagePSP12', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventLanzarBusqStagePSP12', 1000);\n               \n            }, 100);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventLanzarBusqStagePSP12', 1000);\n            setTimeout(() => {\n               global.set('stateMachineEventLanzarBusqStagePSP12', 0);\n               \n            }, 100);\n            break;\n\n        default:\n           global.set('stateMachineEventLanzarBusqStagePSP12', 0);\n           \n    }\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 4440,
        "wires": [
            []
        ]
    },
    {
        "id": "7da2df1c50278ba6",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "d2f302f22cfc8616",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "ac31fe0a6d3a63b6"
            ]
        ]
    },
    {
        "id": "c6588eaa8615de62",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "32932b4401b7031b",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "eccd18eda337f72e"
            ]
        ]
    },
    {
        "id": "44e2979370b7edc7",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "af0425c692f43625",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "83f86ce7a6c131fd"
            ]
        ]
    },
    {
        "id": "861fb1b05bbe6d3f",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "f50ae5fac643193f",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1360,
        "wires": [
            [
                "c6864828496d551e"
            ]
        ]
    },
    {
        "id": "5ab917c88f4b0e27",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "4974ffee0926ae72",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1740,
        "wires": [
            [
                "65329b20268a4991"
            ]
        ]
    },
    {
        "id": "65079ef04e4a8a07",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 102.39999389648438,
        "y": 2174.800048828125,
        "wires": [
            [
                "3a5dd8c00ac442ec"
            ]
        ]
    },
    {
        "id": "1756d5deb4f972da",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "837f96f04319defe",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 2520,
        "wires": [
            [
                "559bddd432f128b2"
            ]
        ]
    },
    {
        "id": "ba3aa56b25c5d5ab",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "03b5932ae01d1d75",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2860,
        "wires": [
            [
                "9ca139ab691f2c12"
            ]
        ]
    },
    {
        "id": "147e127175f35be9",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "0e929f8e3fb0c66c",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3280,
        "wires": [
            [
                "23d0fb03f07a0df4"
            ]
        ]
    },
    {
        "id": "28ca46bd1377b194",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 111.39999389648438,
        "y": 3669.400146484375,
        "wires": [
            [
                "197495869b35c8d1"
            ]
        ]
    },
    {
        "id": "3565494c2b03dd66",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "5c84368d9a919f87",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 4040,
        "wires": [
            [
                "a30cb9c84ca03bd4"
            ]
        ]
    },
    {
        "id": "7a2dc21dac5114f5",
        "type": "inject",
        "z": "cdbaef789409ba8a",
        "g": "b77f5ce407f7520b",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 4440,
        "wires": [
            [
                "3fd67d068f48ee0d"
            ]
        ]
    },
    {
        "id": "5636afb75a5b32ca",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "9d484b3eab3adfe9",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 80,
        "wires": [
            [
                "d0380e223ed3b779"
            ]
        ]
    },
    {
        "id": "25283a81d8bb8901",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "cf9dcb75b66bba25",
        "name": "FSM",
        "func": "\n\n\n\n// Función principal para la máquina de estados simplificada\n\n    let estadoActual = global.get('stateMachineEventStageMesas') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n          //  node.warn(\"Estado 00_Reposo\");\n            global.set('variablesValidadasMesas', false);\n            global.set('variablesErroneasMesas', false);\n            global.set('idListoMesas', false);\n            global.set('finMovInProgress', false);\n            global.set('finMovLanzado', false);\n            node.warn(\"Variables globales reseteadas para las Mesas.\");\n            setTimeout(() => {\n               global.set('stateMachineEventStageMesas', 10);\n            }, 1000);\n            break;\n\n        case 10: // 10_Inicio\n           // node.warn(\"Estado 10_Inicio\");\n            if ( global.get('variablesValidadasMesas') === false &&\n                 global.get('variablesErroneasMesas') === false &&\n                 global.get('idListoMesas') === false &&\n                 global.get('finMovInProgress') === false &&\n                 global.get('finMovLanzado') === false) {\n                 global.set('stateMachineEventStageMesas', 20);\n            }\n            break;\n\n        case 20: // 20_CheckFinMovMesas\n           // node.warn(\"Estado 20_CheckFinMovMesas\");\n            // Verificar si alguna de las variables 'finMovMesaEntradaX' está en true\n            for (let i = 1; i <= 12; i++) {\n                if (global.get(`finMovMesaEntrada${i}`) === true) {\n                    global.set('mesaEnProgreso', i); // Almacenar el número de la mesa en progreso\n                     global.set('stateMachineEventStageMesas', 30);\n                    return; // Salir del bucle y de la función para evitar múltiples llamadas\n                }\n            }\n            break;\n\n        case 30: // 30_FinMovInProgress\n            let mesaActual = global.get('mesaEnProgreso');\n          //  node.warn(`Estado 30_FinMovInProgress - Trabajando en Mesa ${mesaActual}`);\n            //if (global.get('finMovInProgress') === true) {\n                 global.set('stateMachineEventStageMesas', 40);\n           // }\n            break;\n\n        case 40: // 40_FinMovLanzado\n          //  node.warn(\"Estado 40_FinMovLanzado\");\n            if (global.get('finMovLanzado') === true) {\n                 global.set('stateMachineEventStageMesas', 900);\n            }\n            break;\n\n        case 900: // 900_RegistrarCiclo\n           // node.warn(\"Estado 900_RegistrarCiclo\");\n            setTimeout(() => {\n               global.set('stateMachineEventStageMesas', 1000);\n            }, 1000);\n            break;\n\n        case 1000: // 1000_FinCiclo\n          //  node.warn(\"Estado 1000_FinCiclo\");\n            setTimeout(() => {\n               global.set('stateMachineEventStageMesas', 0);\n            }, 1000);\n            break;\n\n        default:\n          //  node.warn(\"Estado desconocido, reiniciando...\");\n               global.set('stateMachineEventStageMesas', 0);\n    }\n;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d204987c4f2e1992",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "329140f15b6a1004",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "1ab0f97b46b7971e"
            ]
        ]
    },
    {
        "id": "2017e38b04d548e6",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "138c36abd43ab40d",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "3e5927ba8d1734f1"
            ]
        ]
    },
    {
        "id": "d55ee063e7834a32",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "ef5547fe5fb846c3",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 520,
        "wires": [
            [
                "13680137f4e62ee1"
            ]
        ]
    },
    {
        "id": "d8026d139c92f2f5",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "1a65f7edf4d7659a",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 660,
        "wires": [
            [
                "af3293a935250d0a"
            ]
        ]
    },
    {
        "id": "a2cd6c6cea1c4bb5",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "5b054d75830dfae9",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 800,
        "wires": [
            [
                "274f2e0a8c4a4540"
            ]
        ]
    },
    {
        "id": "c81169a90a4be374",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "35d3e8b4a2d034fd",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 940,
        "wires": [
            [
                "04b3d9a5cc517af4"
            ]
        ]
    },
    {
        "id": "d70578ffdf1f3dbb",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "3bbbd3ff32462ba6",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "767e8f3a8dbe762c"
            ]
        ]
    },
    {
        "id": "96623d3249fe313b",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "e0c347c2f029c108",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1220,
        "wires": [
            [
                "1db36d544381767b"
            ]
        ]
    },
    {
        "id": "ef9465507aab9664",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "70c7fd887fdbdd64",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1360,
        "wires": [
            [
                "f1abda62fd96c736"
            ]
        ]
    },
    {
        "id": "f36c6e7c8a9deada",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "e967a76b1ddaa588",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1500,
        "wires": [
            [
                "41e5b031df79019e"
            ]
        ]
    },
    {
        "id": "bceca1853ce18729",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "22a2f06d5eb18075",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1640,
        "wires": [
            [
                "87fe40ee076a3dd3"
            ]
        ]
    },
    {
        "id": "f1490ab7011aa194",
        "type": "function",
        "z": "079543c895cc9aec",
        "name": "VariablesInit",
        "func": "// Inicializar las variables para todas las mesas (del 1 al 12)\nfor (let i = 1; i <= 12; i++) {\n    // Inicializar las variables de estado booleanas en false\n    global.set(`finMovMesaEntrada${i}`, false);\n    global.set(`eventoCargaMesa${i}`, false);\n\n    // Inicializar las variables de tipo numérico en 0\n    global.set(`MatCargadaMesa${i}EnTraslo`, 0);\n    global.set(`numID_MesaEntrada${i}`, 0);\n\n    // Opcional: Avisar que las variables han sido inicializadas para cada mesa\n    node.warn(`Variables inicializadas para Mesa ${i}: finMovMesaEntrada${i} = false, eventoCargaMesa${i} = false, MatCargadaMesa${i}EnTraslo = 0, numID_MesaEntrada${i} = 0`);\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "68b2d8d32ac53fd8",
        "type": "inject",
        "z": "079543c895cc9aec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "f1490ab7011aa194"
            ]
        ]
    },
    {
        "id": "cd2cfc43650fcd2d",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "9d484b3eab3adfe9",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n    node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n    node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n\n// Definir las variables dinámicamente para TLvs\nlet pasilloactualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloactualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\n\n// Definir las variables dinámicamente para la Mesa 1\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_1_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_1_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 1\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa1');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa1');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada1 en true\n    global.set('finMovMesaEntrada1', true);\n\n\n    global.set('numID_MesaEntrada1', MesaEntrada_Posicion_Recogida_Traslo);\n    \n    // Aviso: Fin de movimiento activado para Mesa 1\n    node.warn('Fin de movimiento activado para Mesa 1');\n    \n    // Aviso: Valor de entrega actualizado para Mesa 1\n    node.warn(`El valor de entrega para Mesa 1 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n    \n    // Aviso: Fin de movimiento activado para Mesa 1\n    node.warn('Fin de movimiento activado para Mesa 1 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n  //  global.set('finMovMesaEntrada1', false);\n\n\n}\n\n\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa1', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa1', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d78a793eba1e2d8d",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "329140f15b6a1004",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_2_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_2_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 2\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa2');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa2');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada2 en true\n    global.set('finMovMesaEntrada2', true);\n\n    // Actualizar numID para Mesa 2\n    global.set('numID_MesaEntrada2', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 2\n    node.warn('Fin de movimiento activado para Mesa 2');\n\n    // Aviso: Valor de entrega actualizado para Mesa 2\n    node.warn(`El valor de entrega para Mesa 2 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 2\n    node.warn('Fin de movimiento activado para Mesa 2 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada2', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa2', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa2', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ac26eb19b6817b97",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "138c36abd43ab40d",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 3\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_3_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_3_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 3\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa3');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa3');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada3 en true\n    global.set('finMovMesaEntrada3', true);\n\n    // Actualizar numID para Mesa 3\n    global.set('numID_MesaEntrada3', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 3\n    node.warn('Fin de movimiento activado para Mesa 3');\n\n    // Aviso: Valor de entrega actualizado para Mesa 3\n    node.warn(`El valor de entrega para Mesa 3 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 3\n    node.warn('Fin de movimiento activado para Mesa 3 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada3', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa3', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa3', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "9068563f7854f58e",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "ef5547fe5fb846c3",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 4\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_4_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_4_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 4\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa4');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa4');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada4 en true\n    global.set('finMovMesaEntrada4', true);\n\n    // Actualizar numID para Mesa 4\n    global.set('numID_MesaEntrada4', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 4\n    node.warn('Fin de movimiento activado para Mesa 4');\n\n    // Aviso: Valor de entrega actualizado para Mesa 4\n    node.warn(`El valor de entrega para Mesa 4 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 4\n    node.warn('Fin de movimiento activado para Mesa 4 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada4', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa4', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa4', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b534b8408ce0f836",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "1a65f7edf4d7659a",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 5\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_5_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_5_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 5\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa5');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa5');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada5 en true\n    global.set('finMovMesaEntrada5', true);\n\n    // Actualizar numID para Mesa 5\n    global.set('numID_MesaEntrada5', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 5\n    node.warn('Fin de movimiento activado para Mesa 5');\n\n    // Aviso: Valor de entrega actualizado para Mesa 5\n    node.warn(`El valor de entrega para Mesa 5 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 5\n    node.warn('Fin de movimiento activado para Mesa 5 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada5', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa5', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa5', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "0e0fe736acd3e31a",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "5b054d75830dfae9",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 6\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_6_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_6_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 6\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa6');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa6');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada6 en true\n    global.set('finMovMesaEntrada6', true);\n\n    // Actualizar numID para Mesa 6\n    global.set('numID_MesaEntrada6', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 6\n    node.warn('Fin de movimiento activado para Mesa 6');\n\n    // Aviso: Valor de entrega actualizado para Mesa 6\n    node.warn(`El valor de entrega para Mesa 6 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 6\n    node.warn('Fin de movimiento activado para Mesa 6 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada6', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa6', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa6', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "8301e7f42bbf09a3",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "35d3e8b4a2d034fd",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 7\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_7_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_7_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 7\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa7');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa7');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada7 en true\n    global.set('finMovMesaEntrada7', true);\n\n    // Actualizar numID para Mesa 7\n    global.set('numID_MesaEntrada7', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 7\n    node.warn('Fin de movimiento activado para Mesa 7');\n\n    // Aviso: Valor de entrega actualizado para Mesa 7\n    node.warn(`El valor de entrega para Mesa 7 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 7 debido a cambio en Recogida_Traslo\n    node.warn('Fin de movimiento activado para Mesa 7 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada7', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa7', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa7', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f8bcf8c120b55bbd",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "3bbbd3ff32462ba6",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 8\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_8_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_8_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 8\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa8');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa8');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada8 en true\n    global.set('finMovMesaEntrada8', true);\n\n    // Actualizar numID para Mesa 8\n    global.set('numID_MesaEntrada8', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 8\n    node.warn('Fin de movimiento activado para Mesa 8');\n\n    // Aviso: Valor de entrega actualizado para Mesa 8\n    node.warn(`El valor de entrega para Mesa 8 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 8 debido a cambio en Recogida_Traslo\n    node.warn('Fin de movimiento activado para Mesa 8 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada8', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa8', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa8', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "ce52eba0423bd9a2",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "e0c347c2f029c108",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 9\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_9_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_9_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 9\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa9');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa9');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada9 en true\n    global.set('finMovMesaEntrada9', true);\n\n    // Actualizar numID para Mesa 9\n    global.set('numID_MesaEntrada9', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 9\n    node.warn('Fin de movimiento activado para Mesa 9');\n\n    // Aviso: Valor de entrega actualizado para Mesa 9\n    node.warn(`El valor de entrega para Mesa 9 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 9 debido a cambio en Recogida_Traslo\n    node.warn('Fin de movimiento activado para Mesa 9 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada9', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa9', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa9', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "2f1e6ffa3e95f5b3",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "70c7fd887fdbdd64",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 10\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_10_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_10_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 10\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa10');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa10');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada10 en true\n    global.set('finMovMesaEntrada10', true);\n\n    // Actualizar numID para Mesa 10\n    global.set('numID_MesaEntrada10', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 10\n    node.warn('Fin de movimiento activado para Mesa 10');\n\n    // Aviso: Valor de entrega actualizado para Mesa 10\n    node.warn(`El valor de entrega para Mesa 10 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 10 debido a cambio en Recogida_Traslo\n    node.warn('Fin de movimiento activado para Mesa 10 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada10', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa10', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa10', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "107ce824ef35414a",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "e967a76b1ddaa588",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 11\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_11_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_11_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 11\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa11');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa11');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada11 en true\n    global.set('finMovMesaEntrada11', true);\n\n    // Actualizar numID para Mesa 11\n    global.set('numID_MesaEntrada11', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 11\n    node.warn('Fin de movimiento activado para Mesa 11');\n\n    // Aviso: Valor de entrega actualizado para Mesa 11\n    node.warn(`El valor de entrega para Mesa 11 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 11 debido a cambio en Recogida_Traslo\n    node.warn('Fin de movimiento activado para Mesa 11 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada11', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa11', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa11', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "c0ea12613fca0285",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "22a2f06d5eb18075",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 12\nlet MesaEntrada_Posicion_Recogida_Traslo = variablesPLC_Mesas['MesaEntrada_12_Posición_1_Recogida_Traslo'];\nlet MesaEntrada_Posicion_Entrega_Carro = variablesPLC_Mesas['MesaEntrada_12_Posición_2_Entrega_Carro'];\n\n// Leer los valores anteriores almacenados en variables globales para la Mesa 12\nlet valorAnteriorRecogidaTraslo = global.get('valorAnteriorRecogidaTraslo_Mesa12');\nlet valorAnteriorEntregaCarro = global.get('valorAnteriorEntregaCarro_Mesa12');\n\n// Si los valores anteriores son indefinidos (primera ejecución), los inicializamos\nif (typeof valorAnteriorRecogidaTraslo === 'undefined') {\n    valorAnteriorRecogidaTraslo = MesaEntrada_Posicion_Recogida_Traslo;\n}\nif (typeof valorAnteriorEntregaCarro === 'undefined') {\n    valorAnteriorEntregaCarro = MesaEntrada_Posicion_Entrega_Carro;\n}\n\n// Verificar si la variable MesaEntrada_Posicion_Recogida_Traslo ha cambiado de cualquier valor (incluyendo 0) a otro distinto de 0\nif (valorAnteriorRecogidaTraslo !== MesaEntrada_Posicion_Recogida_Traslo && MesaEntrada_Posicion_Recogida_Traslo !== 0) {\n    // Establecer la variable global finMovMesaEntrada12 en true\n    global.set('finMovMesaEntrada12', true);\n\n    // Actualizar numID para Mesa 12\n    global.set('numID_MesaEntrada12', MesaEntrada_Posicion_Recogida_Traslo);\n\n    // Aviso: Fin de movimiento activado para Mesa 12\n    node.warn('Fin de movimiento activado para Mesa 12');\n\n    // Aviso: Valor de entrega actualizado para Mesa 12\n    node.warn(`El valor de entrega para Mesa 12 ha cambiado a: ${MesaEntrada_Posicion_Entrega_Carro}`);\n\n    // Aviso: Fin de movimiento activado para Mesa 12 debido a cambio en Recogida_Traslo\n    node.warn('Fin de movimiento activado para Mesa 12 debido a cambio en Recogida_Traslo');\n} else {\n    // Si no hay cambios, podemos hacer cualquier acción adicional o dejarlo como está\n    // global.set('finMovMesaEntrada12', false);\n}\n\n// Actualizar los valores anteriores para la siguiente ejecución\nglobal.set('valorAnteriorRecogidaTraslo_Mesa12', MesaEntrada_Posicion_Recogida_Traslo);\nglobal.set('valorAnteriorEntregaCarro_Mesa12', MesaEntrada_Posicion_Entrega_Carro);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "5aeaa8365d347949",
        "type": "comment",
        "z": "079543c895cc9aec",
        "name": "setTimeout",
        "info": "setTimeout(() => {\n    // Código que se ejecutará después del retraso\n}, 3000); // 3000 ms = 3 segundos\n",
        "x": 260,
        "y": 960,
        "wires": []
    },
    {
        "id": "d0380e223ed3b779",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "9d484b3eab3adfe9",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 1;\nlet tlv2InPasillo = pasilloActualTLV2 === 1;\n\n// Mostrar información sobre los TLVs\n//node.warn(`TLV1 - Estado: ${estadoActualTLV1}, Pasillo: ${pasilloActualTLV1}, En Pasillo 1: ${tlv1InPasillo}`);\n//node.warn(`TLV2 - Estado: ${estadoActualTLV2}, Pasillo: ${pasilloActualTLV2}, En Pasillo 1: ${tlv2InPasillo}`);\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 1 con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 1.\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n    //  node.warn(\"TLV2 está en Pasillo 1 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 1.\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n // node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 1.\");\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 60,
        "wires": [
            [
                "cd2cfc43650fcd2d"
            ]
        ]
    },
    {
        "id": "1ab0f97b46b7971e",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "329140f15b6a1004",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n  //node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 2;\nlet tlv2InPasillo = pasilloActualTLV2 === 2;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 2 con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 2.\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 2\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n    //  node.warn(\"TLV2 está en Pasillo 2 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 2.\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 2\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n//  node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 2.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 220,
        "wires": [
            [
                "d78a793eba1e2d8d"
            ]
        ]
    },
    {
        "id": "3e5927ba8d1734f1",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "138c36abd43ab40d",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 3;\nlet tlv2InPasillo = pasilloActualTLV2 === 3;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n     // node.warn(\"TLV1 está en Pasillo 3 con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 3.\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 3\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n     // node.warn(\"TLV2 está en Pasillo 3 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 3.\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n    }\n  }\n}\n    if (!tlv1InPasillo && !tlv2InPasillo ) {\n      //node.warn(\".\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n    }\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 3.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 360,
        "wires": [
            [
                "ac26eb19b6817b97"
            ]
        ]
    },
    {
        "id": "13680137f4e62ee1",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "ef5547fe5fb846c3",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 4;\nlet tlv2InPasillo = pasilloActualTLV2 === 4;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 4 con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 4.\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 4\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200|| estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n    //  node.warn(\"TLV2 está en Pasillo 4 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 4.\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 4\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n // node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 4.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 500,
        "wires": [
            [
                "9068563f7854f58e"
            ]
        ]
    },
    {
        "id": "af3293a935250d0a",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "1a65f7edf4d7659a",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n  //node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 5;\nlet tlv2InPasillo = pasilloActualTLV2 === 5;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 5 con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 5.\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 5\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n     // node.warn(\"TLV2 está en Pasillo 5 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 5.\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 5\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n  //node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 5.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 640,
        "wires": [
            [
                "b534b8408ce0f836"
            ]
        ]
    },
    {
        "id": "274f2e0a8c4a4540",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "5b054d75830dfae9",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 6;\nlet tlv2InPasillo = pasilloActualTLV2 === 6;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n     // node.warn(\"TLV1 está en Pasillo 6  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 6 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n     // node.warn(\"TLV2 está en Pasillo 6 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 6 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n // node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 6.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "0e0fe736acd3e31a"
            ]
        ]
    },
    {
        "id": "04b3d9a5cc517af4",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "35d3e8b4a2d034fd",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 7;\nlet tlv2InPasillo = pasilloActualTLV2 === 7;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 7  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 7 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n     // node.warn(\"TLV2 está en Pasillo 7 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 7 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\n    if (!tlv1InPasillo && !tlv2InPasillo ) {\n    //  node.warn(\".\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n    }\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 7.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 920,
        "wires": [
            [
                "8301e7f42bbf09a3"
            ]
        ]
    },
    {
        "id": "eb3100c851a6a5b3",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "cf9dcb75b66bba25",
        "name": "00",
        "func": "global.set('stateMachineEventStageMesas', 0)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "026c440ac387bc23",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "cf9dcb75b66bba25",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "eb3100c851a6a5b3"
            ]
        ]
    },
    {
        "id": "792906ba1cf4ac7e",
        "type": "inject",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "037d3cc857ff6a7d"
            ]
        ]
    },
    {
        "id": "037d3cc857ff6a7d",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "Check finMovMesaEntrada",
        "func": "// Inicializar el flag si está indefinido\nif (typeof global.get(\"finMovInProgress\") === 'undefined') {\n    global.set(\"finMovInProgress\", false);  // Inicializar el flag a false si está indefinido\n  //  node.warn(\"Flag 'finMovInProgress' inicializado a false.\");\n}\n\n// Verificar si ya se está ejecutando una consulta\nif (global.get(\"finMovInProgress\") === true) {\n  //  node.warn(\"Ya hay una consulta en proceso, saliendo.\");\n    return null;  // Si ya hay una consulta en proceso, no hacer nada\n}\n\n// Verificar si estamos en el paso 30 de la FSM\nif (global.get('stateMachineEventStageMesas') !== 40) {\n  //  node.warn(\"No estamos en el paso 30 de la FSM, saliendo.\");\n    return null;  // Si no estamos en el paso 30, no hacer nada\n}\n\n// Establecer el flag para indicar que la consulta está en proceso\nglobal.set(\"finMovInProgress\", true);\n//node.warn(\"Flag 'finMovInProgress' establecido a true, iniciando consulta.\");\n\n// Capturar el número de la mesa en progreso (suponiendo que está almacenado en la variable global 'mesaEnProgreso')\nlet mesaEnProgreso = global.get('mesaEnProgreso');\n\n// Verificar que la mesa en progreso está definida antes de proceder\nif (typeof mesaEnProgreso !== 'undefined' && mesaEnProgreso !== null) {\n   // node.warn(`Número de la mesa en progreso: Mesa ${mesaEnProgreso}`);\n\n    // Capturar el numID de la mesa correspondiente, almacenado como 'numID_MesaEntradaX'\n    let numID_MesaEntrada = global.get(`numID_MesaEntrada${mesaEnProgreso}`);\n\n    // Verificar que el numID_MesaEntrada está definido antes de proceder\n    if (typeof numID_MesaEntrada !== 'undefined' && numID_MesaEntrada !== null) {\n       // node.warn(`NumID de la mesa ${mesaEnProgreso} capturado: ${numID_MesaEntrada}`);\n\n        // Realizar consulta SQL para obtener movNumber, uma y aux1 basados en el id (numID_MesaEntrada)\n        let query = \"SELECT movNumber, uma, aux1 FROM movimientosPIE1 WHERE id = \" + numID_MesaEntrada;\n\n        // Ejecutar la consulta SQL\n        msg.topic = query;\n        msg.i = mesaEnProgreso;\n\n       // node.warn(`Consulta SQL preparada: ${query}`);\n\n        // Devolver el mensaje para la consulta SQL\n        return msg;\n    } else {\n       // node.warn(`NumID de la mesa ${mesaEnProgreso} no definido o es null.`);\n    }\n} else {\n   // node.warn(\"Mesa en progreso no está definida o es null.\");\n}\n\n// Si no se encuentra ningún numID de la mesa, liberar el flag\nglobal.set(\"finMovInProgress\", false);\n//node.warn(\"Flag 'finMovInProgress' liberado, no se encontró ningún numID válido para la mesa.\");\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 540,
        "wires": [
            [
                "b92d574d2b622965",
                "6fce27d2591b73e4"
            ]
        ]
    },
    {
        "id": "5bd5bcf82aca0374",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "Update Global Variables",
        "func": "// Asumiendo que las variables PLC están disponibles\nlet movNumber, uma, tipoContenedor, i = msg.i;\nlet numID_MesaEntrada = global.get(`numID_MesaEntrada${i}`); // Obtener el ID de la mesa entrada\n\nif (!numID_MesaEntrada || isNaN(numID_MesaEntrada)) {\n    node.error(`El numID_MesaEntrada${i} no es válido: ${numID_MesaEntrada}`);\n    return null;\n}\n\n// Verificar si la consulta SQL para obtener datos tuvo éxito\nif (msg.payload && msg.payload.length > 0) {\n    movNumber = msg.payload[0].movNumber;\n    uma = msg.payload[0].uma;\n    tipoContenedor = msg.payload[0].aux1; // Capturar el valor de aux1 como tipo de contenedor\n} else {\n    // Simular valores si no se encuentran resultados en la base de datos\n    movNumber = 9999;\n    uma = \"Error\";\n    tipoContenedor = 1;\n}\n\n// Actualizar las variables globales y lanzar el evento SIMO\nglobal.set(`OperacionesEncadenadas_SIMO_PEP${i}`, 2);\nglobal.set(`NumeroAlmacen_SIMO_PEP${i}`, 20001);\nglobal.set(`Equipamiento_SIMO_PEP${i}`, `PEP${i}`);\nglobal.set(`NumeroMovimiento_SIMO_Fin_PEP${i}`, movNumber);\nglobal.set(`UMA_SIMO_Fin_PEP${i}`, uma);\nglobal.set(`CantidadFinesMov_SIMO_PEP${i}`, 1);\nglobal.set(`TipoEstacion_SIMO_Fin_PEP${i}`, 9);\nglobal.set(`NumeroEstacion_SIMO_Fin_PEP${i}`, i);\nglobal.set(`CodigoError_SIMO_Fin_PEP${i}`, 0);\nglobal.set(`Auxiliar_SIMO_Fin_PEP${i}`, 0);\nglobal.set(`TipoContenedor_SIMO_Fin_PEP${i}`, tipoContenedor);\nglobal.set(`TipoAltura_SIMO_Fin_PEP${i}`, 1);\nglobal.set(`XLogica_SIMO_Fin_PEP${i}`, 999);\nglobal.set(`YLogica_SIMO_Fin_PEP${i}`, 1);\nglobal.set(`XLocal_SIMO_Fin_PEP${i}`, 1);\nglobal.set(`YLocal_SIMO_Fin_PEP${i}`, 1);\nglobal.set(`Lado_SIMO_Fin_PEP${i}`, 1);\nglobal.set(`Profundidad_SIMO_Fin_PEP${i}`, 1);\nglobal.set(`Pasillo_SIMO_Fin_PEP${i}`, i);\n\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PEP${i}`, 0);\n}\n\nglobal.set(`PEP${i}SimoEvent`, true);\nglobal.set(\"finMovLanzado\", true);\nglobal.set(`finMovMesaEntrada${i}`, false);\n\n// Agregar consulta para actualizar el campo estado a 'finish' en la tabla movimientosPIE1\nlet updateQuery = `\n    UPDATE movimientosPIE1\n    SET estado = 'inPEP', fechaFin  = NOW()\n    WHERE id = ${numID_MesaEntrada};\n`;\nmsg.topic = updateQuery;\n\n// Emitir advertencia para depuración\nnode.warn(`Consulta DELETE generada para movimientosPIE1: ${msg.deleteQuery}`);\n\n// Devuelve el mensaje para ser procesado en el siguiente nodo\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 720,
        "wires": [
            [
                "80cd7c8debfc96d4"
            ]
        ]
    },
    {
        "id": "d49dc022f431a4fd",
        "type": "mysql",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 210,
        "y": 640,
        "wires": [
            [
                "5bd5bcf82aca0374",
                "715613af4f0496d6"
            ]
        ]
    },
    {
        "id": "b92d574d2b622965",
        "type": "debug",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 500,
        "wires": []
    },
    {
        "id": "715613af4f0496d6",
        "type": "debug",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 640,
        "wires": []
    },
    {
        "id": "0d99e05c3ac408d0",
        "type": "debug",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 820,
        "wires": []
    },
    {
        "id": "767e8f3a8dbe762c",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "3bbbd3ff32462ba6",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 8;\nlet tlv2InPasillo = pasilloActualTLV2 === 8;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n     // node.warn(\"TLV1 está en Pasillo 8  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 8 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n     // node.warn(\"TLV2 está en Pasillo 8 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 8 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n // node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 8.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1080,
        "wires": [
            [
                "f8bcf8c120b55bbd"
            ]
        ]
    },
    {
        "id": "1db36d544381767b",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "e0c347c2f029c108",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 9;\nlet tlv2InPasillo = pasilloActualTLV2 === 9;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 9  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 9 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n    //  node.warn(\"TLV2 está en Pasillo 9 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 9 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n // node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 9.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1200,
        "wires": [
            [
                "ce52eba0423bd9a2"
            ]
        ]
    },
    {
        "id": "f1abda62fd96c736",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "70c7fd887fdbdd64",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 10;\nlet tlv2InPasillo = pasilloActualTLV2 === 10;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 10  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 10 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n    //  node.warn(\"TLV2 está en Pasillo 10 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 10 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n /// node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 10.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1340,
        "wires": [
            [
                "2f1e6ffa3e95f5b3"
            ]
        ]
    },
    {
        "id": "41e5b031df79019e",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "e967a76b1ddaa588",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 11;\nlet tlv2InPasillo = pasilloActualTLV2 === 11;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n   //   node.warn(\"TLV1 está en Pasillo 11  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 11 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n   //   node.warn(\"TLV2 está en Pasillo 11 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 11 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\n    if (!tlv1InPasillo && !tlv2InPasillo ) {\n    //  node.warn(\".\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n    }\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 11.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "107ce824ef35414a"
            ]
        ]
    },
    {
        "id": "87fe40ee076a3dd3",
        "type": "function",
        "z": "079543c895cc9aec",
        "g": "22a2f06d5eb18075",
        "name": "Start",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_TLV1 = global.get('nuevoRegistroTLV1');\nlet variablesPLC_TLV2 = global.get('nuevoRegistroTLV2');\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\n\n\n// Verificar si las variables auxiliares para TLV1 están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV1 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables auxiliares para TLV2 están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n // node.error(\"Las variables auxiliares del PLC para TLV2 no están definidas\");\n  return msg; // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para TLVs\nlet pasilloActualTLV1 = variablesPLC_TLV1['PASILLO_ACTUAL'];\nlet pasilloActualTLV2 = variablesPLC_TLV2['PASILLO_ACTUAL'];\n\nlet tlv1InPasillo = pasilloActualTLV1 === 12;\nlet tlv2InPasillo = pasilloActualTLV2 === 12;\n\n// Lógica para evaluar el estado de TLV1 si está en el pasillo\nif (tlv1InPasillo) {\n  if (estadoActualTLV1 < 200 || estadoActualTLV1 > 280) {\n    if (!tlv2InPasillo) {\n    //  node.warn(\"TLV1 está en Pasillo 12  con un estado no permitido (menor a 70 o mayor a 80) y TLV2 no está en Pasillo 12 .\");\n      return msg; // Devuelve el mensaje si TLV1 está fuera de estados permitidos y TLV2 no está en Pasillo 1\n    }\n  }\n}\n\n// Lógica para evaluar el estado de TLV2 si está en el pasillo\nif (tlv2InPasillo) {\n  if (estadoActualTLV2 < 200 || estadoActualTLV2 > 280) {\n    if (!tlv1InPasillo) {\n    // node.warn(\"TLV2 está en Pasillo 12 con un estado no permitido (menor a 70 o mayor a 80) y TLV1 no está en Pasillo 12 .\");\n      return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 1\n    }\n  }\n}\nif (!tlv1InPasillo && !tlv2InPasillo) {\n // node.warn(\".\");\n  return msg; // Devuelve el mensaje si TLV2 está fuera de estados permitidos y TLV1 no está en Pasillo 3\n}\n\n// Si ninguno de los TLVs está en el pasillo o ambos están en estados permitidos\n//node.warn(\"Ningún TLV está en estado no permitido en Pasillo 12.\");\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1620,
        "wires": [
            [
                "c0ea12613fca0285"
            ]
        ]
    },
    {
        "id": "df5f74eecefef591",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "079543c895cc9aec",
        "g": "cf9dcb75b66bba25",
        "name": "clok",
        "x": 90,
        "y": 320,
        "wires": [
            [],
            [
                "25283a81d8bb8901"
            ],
            [],
            []
        ]
    },
    {
        "id": "6fce27d2591b73e4",
        "type": "delay",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 600,
        "wires": [
            [
                "d49dc022f431a4fd"
            ]
        ]
    },
    {
        "id": "80cd7c8debfc96d4",
        "type": "mysql",
        "z": "079543c895cc9aec",
        "g": "7dfb2be4aa6124f3",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 290,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "0b630e39bd3e8fc9",
        "type": "inject",
        "z": "85cd6b9fa59e1a60",
        "g": "cb43d7a03fccc528",
        "name": "Reset",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "RESET",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "7f2f1faca1e03495"
            ]
        ]
    },
    {
        "id": "8c9d8314800e30f2",
        "type": "inject",
        "z": "85cd6b9fa59e1a60",
        "g": "1edb6d4e9d4c82e9",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "START",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 60,
        "wires": [
            [
                "d90521c49340b1c8"
            ]
        ]
    },
    {
        "id": "7f2f1faca1e03495",
        "type": "link out",
        "z": "85cd6b9fa59e1a60",
        "g": "cb43d7a03fccc528",
        "name": "RESET",
        "mode": "link",
        "links": [
            "7f2d694ee521ef14",
            "d87a7d38579b0a0c"
        ],
        "x": 760,
        "y": 160,
        "wires": [],
        "l": true
    },
    {
        "id": "7f2d694ee521ef14",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "73eccedc965af1b0",
        "name": "Reset",
        "links": [
            "7f2f1faca1e03495"
        ],
        "x": 115,
        "y": 320,
        "wires": [
            [
                "b4958610d9d683bd"
            ]
        ]
    },
    {
        "id": "bf2ddf54f488b0b6",
        "type": "link out",
        "z": "85cd6b9fa59e1a60",
        "g": "aae02e05eb0a41c4",
        "name": "ClockSSTS",
        "mode": "link",
        "links": [
            "a11b932411ac94ac",
            "2be64d7f03cb5a10",
            "15d98fd4f769ce69",
            "1b80d223a37105c4",
            "21ebd7c99d33d6c1",
            "16e64d1bb71c2d5a",
            "0f63cd8bfbe06e82",
            "904382cde0183c8e",
            "6af4c5ee294e3540",
            "60e46caa22017502",
            "84f7e0fb91bf2625",
            "b16e53465bb1626f",
            "f7cd255c1c5a585b",
            "8ca16342aa71b23f",
            "bf24cc004d6ee1e0",
            "1ef664ed430ccd49",
            "43d070bd6b93b02a",
            "f8e41d414d59c1fb",
            "e9a2dd1bd54506ce",
            "16d0abf55448528b",
            "141a556bf6216588",
            "a8614ed79592d391",
            "6c5469fc42be030a",
            "e17a602c06a0ab9d",
            "1a8debc89acfe840",
            "f6a0927eabb608b7",
            "bd6bb4dbcc209742",
            "da088436e048cd67",
            "62f3c28a5585df3d",
            "649ac37ba75ba846",
            "8233e3f81da227e0",
            "fafe175485631fd4",
            "51ea4c9c089ab077",
            "18f29b322fd3ee90",
            "131136f7b0a1786e",
            "e4af56cf9b8b64cc",
            "ceec618be4df21f4",
            "09327b22ed1181d1",
            "354a1ce8ef8a467b",
            "0b36b12cbf344e38",
            "45effb94b4b6c71a",
            "d8378b5f042b7bff",
            "b862ff6ab8d5522a",
            "563bc7df798a4523",
            "730de4bc1500780a",
            "90babb77a199ef20",
            "113f6554e623c013",
            "e369f9d0a1afe724",
            "de6fa14332c2ec16",
            "901ed9d60bc888cf",
            "210b407d17b7fe7d",
            "4a39d6d2712eab35",
            "dba090928682a071",
            "6744d4d992b89368",
            "87c219fe90d87cdb",
            "0ef9c25be6874e3d",
            "fffe66bd24724e3e",
            "9a7b8395a8cdb313",
            "5b021c33f0ea3c49",
            "5a323fa04b318a72",
            "be8eac3fccb93836",
            "77914056e7a3cceb",
            "3821acc7cb85eeb4",
            "1f19d8762842547a",
            "ae923cc2ded897ce"
        ],
        "x": 250,
        "y": 160,
        "wires": [],
        "l": true
    },
    {
        "id": "6030ecded9fad7dc",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "73eccedc965af1b0",
        "name": "Clock",
        "links": [
            "ec5277f2b59d6b1e"
        ],
        "x": 130,
        "y": 460,
        "wires": [
            [
                "9ba91c5801e1e63f"
            ]
        ],
        "l": true
    },
    {
        "id": "4e94d3411c4b83f2",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "85cd6b9fa59e1a60",
        "g": "aae02e05eb0a41c4",
        "name": "100ms",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "ec5277f2b59d6b1e"
            ],
            [],
            [],
            [
                "bf2ddf54f488b0b6"
            ]
        ]
    },
    {
        "id": "b4958610d9d683bd",
        "type": "delay",
        "z": "85cd6b9fa59e1a60",
        "g": "73eccedc965af1b0",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 300,
        "wires": [
            [
                "8a79d3b592ef9007"
            ]
        ]
    },
    {
        "id": "9ec12143b69e6d33",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "cb43d7a03fccc528",
        "name": "Reset",
        "func": "// Obtener variables globales\nlet estadoConexion = global.get('estadoConexion');\nlet estadoFSM_Gen = global.get('stateMachineStage_Gen');\nlet sequenceNumber = global.get('sequenceNumber');\nlet lastSequenceTimestamp = global.get('lastSequenceTimestamp');\n\n// Obtener el tiempo actual\nlet currentTimestamp = Date.now();\n\n// Validar que las variables globales estén definidas\nif (true) {  //estadoConexion !== undefined && estadoFSM_Gen !== undefined && sequenceNumber !== undefined\n    // Verificar si la conexión está cerrada y la máquina de estados está en una etapa avanzada\n    if ((estadoConexion === \"closed\" && estadoFSM_Gen > 50) || global.get(\"mecActivado\") === false || global.get(\"stop\") || sequenceNumber === undefined) {//\n        msg.topic = \"RESET\";  // Disparamos el flujo RESET\n        global.set('sequenceNumber', 0);  // Reiniciar el número de secuencia\n        global.set('lastSequenceTimestamp', currentTimestamp);  // Actualizar el timestamp\n       // node.warn(`RESET disparado: Conexión cerrada y FSM avanzada. Secuencia reiniciada.`);\n    } else if (lastSequenceTimestamp !== undefined && currentTimestamp - lastSequenceTimestamp > 60000) {\n        // Si el número de secuencia no ha cambiado en más de un minuto\n        msg.topic = \"RESET\";  // Disparamos el flujo RESET\n        global.set('sequenceNumber', 0);  // Reiniciar el número de secuencia\n        global.set('lastSequenceTimestamp', currentTimestamp);  // Actualizar el timestamp\n      //  node.warn(`RESET disparado: La secuencia no ha cambiado en más de 1 minuto.`);\n    } else {\n        msg = null;  // Si no se cumplen las condiciones, no se hace nada\n    }\n} else {\n    // Si alguna variable es indefinida, no hacemos nada y mostramos un mensaje de advertencia\n    msg = null;\n   // node.warn(\"Variables globales no definidas: estadoConexion, stateMachineStage_Gen o sequenceNumber.\");\n}\n\n// Almacenar la marca de tiempo actual si la secuencia ha cambiado\nlet previousSequenceNumber = global.get('previousSequenceNumber');\nif (sequenceNumber !== previousSequenceNumber) {\n    global.set('lastSequenceTimestamp', currentTimestamp);\n    global.set('previousSequenceNumber', sequenceNumber);\n}\n\n// Retornar el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "7f2f1faca1e03495"
            ]
        ]
    },
    {
        "id": "da088436e048cd67",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "cb43d7a03fccc528",
        "name": "Clock",
        "links": [
            "bf2ddf54f488b0b6"
        ],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "9ec12143b69e6d33"
            ]
        ],
        "l": true
    },
    {
        "id": "a4448c0500fa9c3e",
        "type": "comment",
        "z": "85cd6b9fa59e1a60",
        "name": "npx node-red ",
        "info": "npx node-red --max-old-space-size=2048\n\n\n\n/////\nnode --max-old-space-size=2048 C:\\Users\\AS\\AppData\\Roaming\\npm\\node-red.cmd\n\n\n////\nnode --max-old-space-size=2048 \"%~dp0\\node_modules\\node-red\\red.js\" %*\n",
        "x": 730,
        "y": 720,
        "wires": []
    },
    {
        "id": "ec5277f2b59d6b1e",
        "type": "link out",
        "z": "85cd6b9fa59e1a60",
        "g": "aae02e05eb0a41c4",
        "name": "ClockGen",
        "mode": "link",
        "links": [
            "da088436e048cd67",
            "6030ecded9fad7dc",
            "243d302ae591350b",
            "2773206df4b2b42d",
            "fd572c54b697e3b1",
            "e5450626da1cd426",
            "a0758c8e9672410e"
        ],
        "x": 240,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "fd572c54b697e3b1",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "65ac0a1d2b42e4d8",
        "name": "ClockGen",
        "links": [
            "ec5277f2b59d6b1e"
        ],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "076fc74800e1f468"
            ]
        ],
        "l": true
    },
    {
        "id": "0c2302107f2ceb7d",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "65ac0a1d2b42e4d8",
        "name": "Reset",
        "links": [],
        "x": 945,
        "y": 280,
        "wires": [
            [
                "1d44594b3b56293f"
            ]
        ]
    },
    {
        "id": "1d44594b3b56293f",
        "type": "delay",
        "z": "85cd6b9fa59e1a60",
        "g": "65ac0a1d2b42e4d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 280,
        "wires": [
            [
                "076fc74800e1f468"
            ]
        ]
    },
    {
        "id": "0c69c0cbf8b01bc3",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "16b564d4a60bad25",
        "name": "fsmScanSSTS",
        "func": "\n    let estadoActual = global.get('stateMachineEventScanSSTS') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    // Definir estaciones\n    const estaciones = [\n        'SSTS_Todos', 'PIE1', 'PIE2', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n        'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n        'TLV1', 'TLV2', 'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n        'REJ1', 'PIS1', 'PIS2', 'PIS3', 'PTA1'\n    ];\n\n    // Verificar si hay un evento en una estación específica\n    const checkStationSstsEvent = (estacion) => global.get(`${estacion}SstsEvent`) === true;\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('eventoDetectadoSSTS_Gen', false);\n            global.set('stateMachineEventScanSSTS', 10);\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventScanSSTS', 10);\n            if (global.get('stateMachineEventScan_Gen') === 30) {\n                global.set('stateMachineEventScanSSTS', 20);\n            }\n            break;\n\n        case 20: // 20_SstsScan\n            global.set('stateMachineEventScanSSTS', 20);\n            let eventoDetectado = false;\n            let estacionConEvento = null;\n\n            // Iterar sobre todas las estaciones para verificar eventos\n            estaciones.forEach(estacion => {\n                if (checkStationSstsEvent(estacion)) {\n                    node.warn(`Evento SSTS detectado en ${estacion}`);\n                    eventoDetectado = true;\n                    estacionConEvento = estacion;\n                }\n            });\n\n            if (eventoDetectado) {\n                global.set('eventoDetectadoSSTS_Gen', estacionConEvento);\n                global.set('stateMachineEventScanSSTS', 30);\n            } else {\n                global.set('eventoDetectadoSSTS_Gen', false);\n                global.set('stateMachineEventScanSSTS', 40);\n            }\n\n            \n            break;\n\n        case 30: // 30_SstsWorking\n            global.set('stateMachineEventScanSSTS', 30);\n            let estacion = global.get('eventoDetectadoSSTS_Gen');\n            if (estacion) {\n                global.set(`${estacion}SstsEvent`, false);\n            }\n\n            if (global.get('eventoDetectadoSSTS_Gen') === false) { //&& global.get('mensajeCompletado') === true\n                global.set('stateMachineEventScanSSTS', 40);\n            }\n            break;\n\n        case 40: // 40_SstsDone\n            global.set('stateMachineEventScanSSTS', 40);\n            if (global.get('stateMachineEventScan_Gen') !== 30) {\n                global.set('stateMachineEventScanSSTS', 1000);\n            }\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventScanSSTS', 1000);\n            global.set('stateMachineEventScanSSTS', 0); // Reinicia el ciclo\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventScanSSTS', 0);\n    }\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "662f29b45f4e369b",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "df6198fe3f33b755",
        "name": "fsmScanSIMO",
        "func": "function stateMachine() {\n    // Estado inicial obtenido de una variable global\n    let currentState = global.get('stateMachineEventScanSIMO') || 0;\n\n    // Mostrar el estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${currentState}`\n    });\n\n    // Lista de estaciones para escanear\n    const estaciones = [\n        'PIE1',\n        'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n        'TLV1', 'TLV2',\n        'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n        'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n        'PIS1', 'PIS2', 'PIS3', 'REJ1'\n    ];\n\n    // Detectar el primer evento activo\n    const detectFirstEvent = () => {\n        for (let estacion of estaciones) {\n            if (global.get(`${estacion}SimoEvent`) === true) {\n                global.set('eventoDetectadoSIMO_Gen', estacion); // Guardar la estación detectada\n                node.warn(`Primer evento detectado en: ${estacion}`);\n                return true; // Retorna true si se detecta un evento\n            }\n        }\n        global.set('eventoDetectadoSIMO_Gen', false); // Ningún evento detectado\n        return false;\n    };\n\n    // Resetear el evento detectado\n    const resetStationEvent = () => {\n        const estacion = global.get('eventoDetectadoSIMO_Gen');\n        if (estacion) {\n            global.set(`${estacion}SimoEvent`, false); // Resetear la estación detectada\n            node.warn(`Evento en ${estacion} reseteado.`);\n        }\n    };\n\n    // Máquina de estados basada en switch-case\n    switch (currentState) {\n        case 0: // 00_Reposo\n            global.set('eventoDetectadoSIMO_Gen', false); // Inicializar la variable de evento detectado\n            global.set('mensajeCompletado', false); // Resetear mensajeCompletado\n            if (global.get('stateMachineEventScan_Gen') === 60) {\n                global.set('stateMachineEventScanSIMO', 10); // Transición a '10_Inicio'\n                node.warn('Transición a 10_Inicio');\n            }\n            break;\n\n        case 10: // 10_Inicio\n            global.set('mensajeCompletado', false); // Asegurar que mensajeCompletado esté en false\n            global.set('stateMachineEventScanSIMO', 20); // Avanzar al siguiente estado\n            break;\n\n        case 20: // 20_SimoScan\n            if (detectFirstEvent()) {\n                global.set('stateMachineEventScanSIMO', 30); // Si se detecta un evento, avanzar al siguiente estado\n            } else {\n                global.set('stateMachineEventScanSIMO', 40); // Si no hay eventos, finalizar el ciclo\n            }\n            break;\n\n        case 30: // 30_SimoWorking\n            resetStationEvent(); // Resetear el evento detectado\n            if (\n                global.get('eventoDetectadoSIMO_Gen') === false &&\n                global.get('mensajeCompletado') === true\n            ) {\n                global.set('stateMachineEventScanSIMO', 40); // Transición a '40_SimoDone'\n            }\n            break;;\n\n        case 40: // 40_SimoDone\n            if (global.get('stateMachineEventScan_Gen') !== 60) {\n                global.set('stateMachineEventScanSIMO', 1000); // Transición a '1000_FinCiclo'\n            }\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventScanSIMO', 0); // Reiniciar al estado inicial\n            break;\n\n        default: // Estado desconocido\n            node.warn(\"Estado desconocido. Reiniciando máquina de estados.\");\n            global.set('stateMachineEventScanSIMO', 0); // Reiniciar al estado inicial\n            break;\n    }\n}\n\n// Ejecutar la máquina de estados\nstateMachine();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "e5450626da1cd426",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "13f21355ab578c86",
        "name": "ClockGen",
        "links": [
            "ec5277f2b59d6b1e"
        ],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "503edb9ac93feab5"
            ]
        ],
        "l": true
    },
    {
        "id": "4dd1dc394b4bc617",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "13f21355ab578c86",
        "name": "Reset",
        "links": [],
        "x": 525,
        "y": 280,
        "wires": [
            [
                "b9121c997fec9351"
            ]
        ]
    },
    {
        "id": "b9121c997fec9351",
        "type": "delay",
        "z": "85cd6b9fa59e1a60",
        "g": "13f21355ab578c86",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 280,
        "wires": [
            [
                "503edb9ac93feab5"
            ]
        ]
    },
    {
        "id": "2773206df4b2b42d",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "b256639f1e2a8b3f",
        "name": "ClockGen",
        "links": [
            "ec5277f2b59d6b1e"
        ],
        "x": 560,
        "y": 520,
        "wires": [
            [
                "ccf67092ae6953bb"
            ]
        ],
        "l": true
    },
    {
        "id": "70425c80278c87ac",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "b256639f1e2a8b3f",
        "name": "Reset",
        "links": [],
        "x": 545,
        "y": 460,
        "wires": [
            [
                "a73dd62534f46d38"
            ]
        ]
    },
    {
        "id": "a73dd62534f46d38",
        "type": "delay",
        "z": "85cd6b9fa59e1a60",
        "g": "b256639f1e2a8b3f",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 460,
        "wires": [
            [
                "ccf67092ae6953bb"
            ]
        ]
    },
    {
        "id": "dc2712ce6e04f5c0",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "6fb5b9d482491939",
        "name": "fsmScanAllTramas",
        "func": "function stateMachine() {\n    let currentState = global.get('stateMachineEventScan_Gen') || 0;\n\n    // Mostrar el estado actual en el panel de depuración\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${currentState}`\n    });\n\n    switch (currentState) {\n        case 0: // 00_Reposo\n            \n            setStateMachineEventStageNumber(10);\n            break;\n\n        case 10: // 10_Inicio\n            if (global.get('stateMachineStage_Gen') === 130) {\n                setStateMachineEventStageNumber(20);\n            }\n            break;\n\n        case 20: // 20_SstsScan\n            setStateMachineEventStageNumber(30);\n            break;\n\n        case 30: // 30_SstsWorking\n            if (global.get('stateMachineEventScanSSTS') === 40 ) {\n                setStateMachineEventStageNumber(40);\n            }\n            break;\n\n        case 40: // 40_SstsDone\n            setStateMachineEventStageNumber(50);\n            break;\n\n        case 50: // 50_SimoScan\n            setStateMachineEventStageNumber(60);\n            break;\n\n        case 60: // 60_SimoWorking\n            if (global.get('stateMachineEventScanSIMO') === 40 && global.get('mensajeCompletado') ) {\n                setStateMachineEventStageNumber(70);\n            }\n            break;\n\n        case 70: // 70_SimoDone\n            setStateMachineEventStageNumber(80);\n            break;\n\n        case 80: // 80_SrosScan\n            setStateMachineEventStageNumber(90);\n            break;\n\n        case 90: // 90_SrosWorking\n            if (global.get('stateMachineEventScanSROS') === 40 && global.get('mensajeCompletado') ) {\n                setStateMachineEventStageNumber(100);\n            }\n            break;\n\n        case 100: // 100_SrosDone\n            setStateMachineEventStageNumber(110);\n            break;\n\n        case 110: // 110_ScanSali\n            setStateMachineEventStageNumber(120);\n            break;\n\n        case 120: // 120_SaliWorking\n            if (global.get('stateMachineEventScanSali') === 40 && global.get('mensajeCompletado') ) {\n                setStateMachineEventStageNumber(130);\n            }\n            break;\n\n        case 130: // 130_SaliDone\n            setStateMachineEventStageNumber(950);\n            break;\n\n        case 950: // 950_Registro\n            setStateMachineEventStageNumber(1000);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            setStateMachineEventStageNumber(0); // Reinicia el ciclo\n            break;\n\n        default:\n            node.warn(\"Estado desconocido. Reiniciando máquina de estados.\");\n            setStateMachineEventStageNumber(0);\n            break;\n    }\n}\n\n// Función para establecer el estado actual\nfunction setStateMachineEventStageNumber(num) {\n    global.set('stateMachineEventScan_Gen', num);\n    node.warn(`Transición al estado: ${num}`);\n}\n\n\n\n// Ejecutar la máquina de estados cíclicamente\nstateMachine();\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "66c4b5de4864797b",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "bea3ff2706ce1eac",
        "name": "fsmScanSali",
        "func": "\n    let estadoActual = global.get('stateMachineEventScanSali') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_Reposo\n            global.set('SaliEvent', false); // Inicializa SaliEvent en false\n            global.set('eventoProcesadoSali', false); // Variable para controlar el procesamiento\n            global.set('stateMachineEventScanSali', 10); // Avanza al siguiente estado\n            break;\n\n        case 10: // 10_Inicio\n            global.set('stateMachineEventScanSali', 10);\n            if (global.get('stateMachineEventScan_Gen') === 120) {\n                global.set('stateMachineEventScanSali', 20);\n            }\n            break;\n\n        case 20: // 20_SaliScan\n            global.set('stateMachineEventScanSali', 20);\n            if (global.get('SaliEvent') === true) { // Verifica si SaliEvent está en true\n                node.warn(\"Evento Sali detectado.\"); // Mensaje indicando que se detectó el evento\n                global.set('eventoDetectadoSALI_Gen', true);\n                global.set('SaliEvent', false); // Resetea SaliEvent a false\n                global.set('stateMachineEventScanSali', 30); // Avanza al siguiente estado\n            } else {\n                global.set('eventoDetectadoSALI_Gen', false);\n                global.set('stateMachineEventScanSali', 40); // Avanza al siguiente estado\n            }\n            break;\n\n\n        case 30: // 30_SaliWorking\n            global.set('stateMachineEventScanSali', 30);\n            node.status({\n                fill: \"yellow\",\n                shape: \"dot\",\n                text: \"Procesando evento Sali...\"\n            });\n            // Aquí se puede añadir lógica futura\n            if (global.get('eventoDetectadoSALI_Gen') === false) {//&& global.get('mensajeCompletado') === true\n                global.set('stateMachineEventScanSali', 40);\n            }\n            break;\n\n        case 40: // 40_SaliDone\n            global.set('stateMachineEventScanSali', 40);\n            node.status({\n                fill: \"green\",\n                shape: \"dot\",\n                text: \"Evento Sali procesado con éxito.\"\n            });\n            if (global.get('stateMachineEventScan_Gen') !== 120) {\n                global.set('stateMachineEventScanSali', 10);\n            }\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventScanSali', 1000);\n          //  node.warn(\"Fin del ciclo de procesamiento para SaliEvent.\");\n            global.set('stateMachineEventScanSali', 0); // Reinicia el ciclo\n            break;\n\n        default:\n            node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventScanSali', 0); // Reinicia al estado inicial\n    }\n\n    return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "a0758c8e9672410e",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "63e72b906806df62",
        "name": "ClockGen",
        "links": [
            "ec5277f2b59d6b1e"
        ],
        "x": 980,
        "y": 500,
        "wires": [
            [
                "580b20765fd2c190"
            ]
        ],
        "l": true
    },
    {
        "id": "0906b1437ab95377",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "63e72b906806df62",
        "name": "Reset",
        "links": [],
        "x": 1015,
        "y": 460,
        "wires": [
            [
                "d35cd7677bc409c8"
            ]
        ]
    },
    {
        "id": "d35cd7677bc409c8",
        "type": "delay",
        "z": "85cd6b9fa59e1a60",
        "g": "63e72b906806df62",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d87a7d38579b0a0c",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "1edb6d4e9d4c82e9",
        "name": "Reset",
        "links": [
            "7f2f1faca1e03495"
        ],
        "x": 945,
        "y": 60,
        "wires": [
            [
                "d90521c49340b1c8"
            ]
        ]
    },
    {
        "id": "243d302ae591350b",
        "type": "link in",
        "z": "85cd6b9fa59e1a60",
        "g": "1edb6d4e9d4c82e9",
        "name": "Clock",
        "links": [
            "ec5277f2b59d6b1e"
        ],
        "x": 950,
        "y": 160,
        "wires": [
            [
                "d90521c49340b1c8"
            ]
        ],
        "l": true
    },
    {
        "id": "d4a0cb64c0e4c2d0",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "c3e25cf59db9c237",
        "name": "fsmGen",
        "func": "// Máquina de estados basada en switch-case\n\n\n    let currentState = global.get('stateMachineStage_Gen') || 0;\n\n    // Mostrar el estado actual en el panel de depuración\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${currentState}`\n    });\n\n    switch (currentState) {\n        case 0: // 00_Reposo\n            global.set('dispararSSTS_Gen', false);\n            global.set('closeConexion', false);\n            setStateMachineStageNumber(10);\n            break;\n\n        case 10: // 10_InicializarVar\n            global.set('Init_On', true);\n            setStateMachineStageNumber(20);\n            break;\n\n        case 20: // 20_Wait\n            if (global.get('estadoConexion') === \"closed\") {\n                setStateMachineStageNumber(30);\n            }\n            break;\n\n        case 30: // 30_Connect\n            global.set('connectClient', true);\n            setStateMachineStageNumber(40);\n            break;\n\n        case 40: // 40_Wait\n            if (global.get('estadoConexion') === \"Connected to 192.168.131.33:3000\") {\n                setStateMachineStageNumber(50);\n            }\n            break;\n\n        case 50: // 50_SendSali\n            global.set('dispararSali', true);\n            setStateMachineStageNumber(60);\n            break;\n\n        case 60: // 60_WaitCali\n            const camposTramaCali = global.get(\"camposTrama\");\n            if (camposTramaCali?.identificacionTelegrama === \"CALI\" && global.get('mensajeCompletado') === true) {\n                setStateMachineStageNumber(70);\n            }\n            break;\n\n        case 70: // 70_CaliOk\n            setStateMachineStageNumber(90);\n            break;\n\n        case 90: // 90_SendSstsAll\n            global.set('dispararSSTS_Gen', true);\n            setStateMachineStageNumber(100);\n            break;\n\n        case 100: // 100_WaitSstsAll\n            const camposTramaCsts = global.get(\"camposTrama\");\n            if (camposTramaCsts?.identificacionTelegrama === \"CSTS\") {\n                setStateMachineStageNumber(110);\n            }\n            break;\n\n        case 110: // 110_SstsAllOk\n            setStateMachineStageNumber(130);\n            break;\n\n        case 120: // 120_SstsAllNoOk\n            // Puedes implementar lógica adicional aquí si es necesario\n            setStateMachineStageNumber(90); // Reinicia el ciclo\n            break;\n\n        case 130: // 130_Scan\n            // Lógica adicional para el estado de escaneo\n            setStateMachineStageNumber(0); // Reinicia el ciclo\n            break;\n\n        default:\n            node.warn(\"Estado desconocido. Reiniciando máquina de estados.\");\n            setStateMachineStageNumber(0);\n            break;\n    }\n\n\n// Función para establecer el estado actual\nfunction setStateMachineStageNumber(num) {\n    global.set('stateMachineStage_Gen', num);\n    node.warn(`Transición al estado: ${num}`);\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "8a79d3b592ef9007",
        "type": "smxstate",
        "z": "85cd6b9fa59e1a60",
        "g": "73eccedc965af1b0",
        "name": "ScanAllTramas",
        "xstateDefinition": "// Import shorthands from xstate object\nconst { assign } = xstate;\n\n\n\n// Guard para verificar si la variable stateMachineStage_Gen es igual a 130\nconst isStateMachineStage130 = (context, event) => global.get('stateMachineStage_Gen') === 130;\n\n// Guard para verificar si la variable stateMachineEventScanSSTS es igual a 40\nconst isStateMachineEventScanSSTS40 = (context, event) => global.get('stateMachineEventScanSSTS') === 40;\n\n// Guard para verificar si la variable stateMachineEventScanSIMO es igual a 40\nconst isStateMachineEventScanSIMO40 = (context, event) => global.get('stateMachineEventScanSIMO') === 40;\n\n// Guard para verificar si la variable stateMachineEventScanSROS es igual a 40\nconst isStateMachineEventScanSROS40 = (context, event) => global.get('stateMachineEventScanSROS') === 40;\n\n// Guard para verificar si la variable stateMachineEventScanSROS es igual a 40\nconst isStateMachineEventScanSALI40 = (context, event) => global.get('stateMachineEventScanSali') === 40;\n\n\n\n\n\n// Guard para verificar si la variable SaliEvent es false\n//const isSaliEventFalse = (context, event) => global.get('SaliEvent') === false;\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventStage\nconst setStateMachineEventStageNumber = (num) => {\n    return (context, event) => {\n        global.set('stateMachineEventScan_Gen', num);  // Asigna el número de la etapa a stateMachineEventStage\n    };\n};\n\n// Acción para inicializar las variables xxxxDone a false\nconst resetDoneFlags = (context, event) => {\n    global.set('sstsDone', false);\n    global.set('simoDone', false);\n    global.set('srosDone', false);\n    global.set('saliDone', false);\n    global.set('sgcfDone', false);\n};\n\n\n\n/**\n * Main machine definition\n */\nreturn {\n  machine: {\n    context: {\n        Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_Reposo',\n    states: {\n      '00_Reposo': {\n          entry: [setStateMachineEventStageNumber(0), resetDoneFlags],  // Inicializa las flags y asigna el número 0\n          always: { target: '10_Inicio' },  // Transición automática a '10_Inicio'\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '10_Inicio': {\n          entry: [setStateMachineEventStageNumber(10)],  // Asigna el número 10\n          always: {\n              target: '20_SstsScan', \n              cond: 'isStateMachineStage130'  // Solo transiciona si stateMachineStage_Gen es 130\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '20_SstsScan': {\n          entry: [\n              setStateMachineEventStageNumber(20), \n             // checkAndSetDispararSali // Verifica SaliEvent y dispara dispararSali si está en true\n          ],\n          always: { \n              target: '30_SstsWorking', \n            //  cond: 'isSaliEventFalse' // Solo transiciona si SaliEvent es false\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '30_SstsWorking': {\n          entry: [setStateMachineEventStageNumber(30)],  // Asigna el número 30\n          always: {\n              target: '40_SstsDone', \n              cond: 'isStateMachineEventScanSSTS40'  // Solo transiciona si stateMachineEventScanSSTS es igual a 40\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '40_SstsDone': {\n          entry: [setStateMachineEventStageNumber(40)],  // Asigna el número 40\n          after: {\n              100: '50_SimoScan'  // Transición automática a '50_SimoScan'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '50_SimoScan': {\n          entry: [\n              setStateMachineEventStageNumber(50), \n             // checkAndSetDispararSali // Verifica SaliEvent y dispara dispararSali si está en true\n          ],\n          always: { \n              target: '60_SimoWorking', \n            //  cond: 'isSaliEventFalse' // Solo transiciona si SaliEvent es false\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '60_SimoWorking': {\n          entry: [setStateMachineEventStageNumber(60)],  // Asigna el número 60\n          always: {\n              target: '70_SimoDone', \n              cond: 'isStateMachineEventScanSIMO40'  // Solo transiciona si stateMachineEventScanSIMO es igual a 40\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '70_SimoDone': {\n          entry: [setStateMachineEventStageNumber(70)],  // Asigna el número 70\n          after: {\n              100: '80_SrosScan'  // Transición automática a '80_SrosScan'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '80_SrosScan': {\n          entry: [\n              setStateMachineEventStageNumber(80), \n            //  checkAndSetDispararSali // Verifica SaliEvent y dispara dispararSali si está en true\n          ],\n          always: { \n              target: '90_SrosWorking', \n            //  cond: 'isSaliEventFalse' // Solo transiciona si SaliEvent es false\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '90_SrosWorking': {\n          entry: [setStateMachineEventStageNumber(90)],  // Asigna el número 90\n          always: {\n              target: '100_SrosDone', \n              cond: 'isStateMachineEventScanSROS40'  // Solo transiciona si stateMachineEventScanSROS es igual a 40\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '100_SrosDone': {\n          entry: [setStateMachineEventStageNumber(100)],  // Asigna el número 100\n          after: {\n              100: '110_ScanSali'  // Transición automática a '110_ScanSali'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '110_ScanSali': {\n          entry: [\n              setStateMachineEventStageNumber(110), \n             // checkAndSetDispararSali // Verifica SaliEvent y dispara dispararSali si está en true\n          ],\n          always: { \n              target: '120_SaliWorking', \n            //  cond: 'isSaliEventFalse' // Solo transiciona si SaliEvent es false\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '120_SaliWorking': {\n          entry: [setStateMachineEventStageNumber(120)],  // Asigna el número 120\n          always: {\n              target: '130_SaliDone', \n              cond: isStateMachineEventScanSALI40// Solo transiciona si stateMachineEventScanSali es igual a 40\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '130_SaliDone': {\n          entry: [setStateMachineEventStageNumber(130)],  // Asigna el número 130\n          after: {\n              100: '950_Registro'  // Transición automática a '140_SgcfScan'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n\n \n      '950_Registro': {\n          entry: [setStateMachineEventStageNumber(950)],  // Asigna el número 950\n          after: {\n              100: '1000_FinCiclo'  // Transición automática a '1000_FinCiclo'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '1000_FinCiclo': {\n          entry: [setStateMachineEventStageNumber(1000)],  // Asigna el número 1000\n          after: {\n              100: '00_Reposo'  // Transición automática de regreso al inicio\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n      actions: { \n          setStateMachineEventStageNumber,\n          resetDoneFlags\n         \n      },\n      guards: {\n\n          isStateMachineStage130,  // Guard para verificar si stateMachineStage_Gen es 130\n          isStateMachineEventScanSSTS40,  // Guard para verificar si stateMachineEventScanSSTS es 40\n          isStateMachineEventScanSIMO40,   // Guard para verificar si stateMachineEventScanSIMO es 40\n          isStateMachineEventScanSROS40,   // Guard para verificar si isStateMachineEventScanSROS es 40\n          isStateMachineEventScanSALI40\n          //isSaliEventFalse  // Guard para verificar si SaliEvent es false\n      }\n  }\n};\n",
        "noerr": 0,
        "x": 340,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "076fc74800e1f468",
        "type": "smxstate",
        "z": "85cd6b9fa59e1a60",
        "g": "65ac0a1d2b42e4d8",
        "name": "ScanSSTS",
        "xstateDefinition": "// Import shorthands from xstate object\nconst { assign } = xstate;\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventScanStage\nconst setStateMachineEventScanStageNumber = (num) => {\n  return (context, event) => {\n    global.set('stateMachineEventScanSSTS', num);  // Asigna el número de la etapa a stateMachineEventScanStage\n  };\n};\n\n// Definir estaciones para escanear\nconst estaciones = [\n  'SSTS_Todos', 'PIE1', 'PIE2', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n  'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n  'TLV1', 'TLV2', 'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n  'REJ1','PIS1', 'PIS2', 'PIS3', 'PTA1'\n];\n\n// Función para verificar si hay un evento SSTS en una estación específica\nconst checkStationSstsEvent = (estacion) => {\n  return global.get(`${estacion}SstsEvent`) === true;\n};\n\n// Acción para asignar el estado de SSTS para cada estación y detectar eventos\nconst checkSstsEvents = (context, event) => {\n  let eventoDetectado = false;\n  let estacionConEvento = null;\n\n  // Iterar sobre todas las estaciones para verificar si alguna tiene un evento\n  estaciones.forEach(estacion => {\n    if (checkStationSstsEvent(estacion)) {\n     // node.warn(`Evento SSTS detectado en ${estacion}`);\n      eventoDetectado = true;\n      estacionConEvento = estacion;\n    }\n  });\n\n  if (eventoDetectado) {\n    global.set('eventoDetectadoSSTS_Gen', estacionConEvento);  // Guardar la estación que disparó el evento\n  } else {\n    global.set('eventoDetectadoSSTS_Gen', false);  // Si no hay eventos, poner en false\n  }\n};\n\n// Acción para poner en false la variable de la estación que disparó el evento\nconst resetStationEvent = (context, event) => {\n  const estacion = global.get('eventoDetectadoSSTS_Gen');\n\n  if (estacion) {\n    global.set(`${estacion}SstsEvent`, false);  // Poner en false la variable que disparó el evento\n  }\n};\n\n/**\n * Main machine definition\n */\nreturn {\n  machine: {\n    context: {\n      Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_Reposo',\n    states: {\n      '00_Reposo': {\n        entry: [setStateMachineEventScanStageNumber(0), () => global.set('eventoDetectadoSSTS_Gen', false)],  // Asigna el número 0 y resetea la variable de evento\n        always: {\n          target: '10_Inicio',\n          cond: () => global.get('stateMachineEventScan_Gen') === 30  // Solo pasamos si stateMachineEventScan_Gen es 30\n        }\n      },\n      '10_Inicio': {\n        entry: [setStateMachineEventScanStageNumber(10)],  // Asigna el número 10\n        after: {\n          100: '20_SstsScan'  // Transición automática a '20_SstsScan' después de 1 segundo\n        }\n      },\n      '20_SstsScan': {\n        entry: [setStateMachineEventScanStageNumber(20), checkSstsEvents],  // Asigna el número 20 y chequea eventos SSTS\n        after: {\n          100: '30_SstsWorking'  // Transición automática a '30_SstsWorking'\n        }\n      },\n      '30_SstsWorking': {\n        entry: [setStateMachineEventScanStageNumber(30), resetStationEvent],  // Asigna el número 30 y resetea la estación que disparó el evento\n        always: {\n          target: '40_SstsDone',\n          cond: () => global.get('eventoDetectadoSSTS_Gen') === false && global.get('mensajeCompletado') === true // Solo pasamos al siguiente estado si no se ha detectado un evento y mensajeCompletado es true\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '40_SstsDone': {\n        entry: [setStateMachineEventScanStageNumber(40)],  // Asigna el número 40\n        always: {\n          target: '1000_FinCiclo',\n          cond: () => global.get('stateMachineEventScan_Gen') !== 30  // Solo transiciona si stateMachineEventScan_Gen es diferente de 30\n        }\n      },\n      '1000_FinCiclo': {\n        entry: [setStateMachineEventScanStageNumber(1000)],  // Asigna el número 1000\n        after: {\n          100: '00_Reposo'  // Transición automática de regreso al inicio\n        }\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n    actions: {\n      setStateMachineEventScanStageNumber,\n      checkSstsEvents,\n      resetStationEvent  // Añadimos la acción para resetear la estación que disparó el evento\n    }\n  }\n};\n",
        "noerr": 0,
        "x": 1150,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "503edb9ac93feab5",
        "type": "smxstate",
        "z": "85cd6b9fa59e1a60",
        "g": "13f21355ab578c86",
        "name": "ScanSIMO",
        "xstateDefinition": "// Import shorthands from xstate object\nconst { assign } = xstate;\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventScanStage\nconst setStateMachineEventScanStageNumber = (num) => {\n  return (context, event) => {\n    global.set('stateMachineEventScanSIMO', num);  // Asigna el número de la etapa a stateMachineEventScanStage\n  };\n};\n\n// Acción para poner mensajeCompletado en false\nconst resetMensajeCompletado = assign({\n  mensajeCompletado: (context, event) => {\n    global.set('mensajeCompletado', false);\n   // node.warn('mensajeCompletado establecido en false en 10_Inicio');\n    return false;  // Esto asegura que se mantenga en false en el contexto\n  }\n});\n\n// Definir estaciones para escanear\nconst estaciones = [\n  'PIE1', 'PIE2', 'TLV1', 'TLV2',\n  'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n  'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n  'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n  'PIS1', 'PIS2', 'PIS3', 'REJ1'\n];\n\n// Función para verificar si hay un evento SIMO en una estación específica\nconst checkStationSimoEvent = (estacion) => {\n  return global.get(`${estacion}SimoEvent`) === true;\n};\n\n// Acción para asignar el estado de SIMO para cada estación y detectar eventos\nconst checkSimoEvents = (context, event) => {\n  let eventoDetectado = false;\n  let estacionConEvento = null;\n\n  // Iterar sobre todas las estaciones para verificar si alguna tiene un evento\n  estaciones.forEach(estacion => {\n    if (checkStationSimoEvent(estacion)) {\n     // node.warn(`Evento SIMO detectado en ${estacion}`);\n      eventoDetectado = true;\n      estacionConEvento = estacion;\n    }\n  });\n\n  if (eventoDetectado) {\n    global.set('eventoDetectadoSIMO_Gen', estacionConEvento);  // Guardar la estación que disparó el evento\n  } else {\n    global.set('eventoDetectadoSIMO_Gen', false);  // Si no hay eventos, poner en false\n  }\n};\n\n// Acción para poner en false la variable de la estación que disparó el evento\nconst resetStationEvent = (context, event) => {\n  const estacion = global.get('eventoDetectadoSIMO_Gen');\n\n  if (estacion) {\n    global.set(`${estacion}SimoEvent`, false);  // Poner en false la variable que disparó el evento\n  }\n};\n\n/**\n * Main machine definition\n */\nreturn {\n  machine: {\n    context: {\n      Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_Reposo',\n    states: {\n      '00_Reposo': {\n        entry: [setStateMachineEventScanStageNumber(0)],  // Asigna el número 0\n        always: {\n          target: '10_Inicio',\n          cond: () => global.get('stateMachineEventScan_Gen') === 60  // Solo pasamos si stateMachineEventScan_Gen es 60\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '10_Inicio': {\n        entry: [setStateMachineEventScanStageNumber(10)],  // Resetea mensajeCompletado a false en el estado 10\n        after: {\n          100: {  // Solo transiciona si mensajeCompletado está en false\n            target: '20_SimoScan',\n           // cond: () => global.get('mensajeCompletado') === false\n          }\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '20_SimoScan': {\n        entry: [setStateMachineEventScanStageNumber(20), checkSimoEvents],  // Asigna el número 20 y chequea eventos SIMO\n        after: {\n          10: '30_SimoWorking'  // Transición automática a '30_SimoWorking'\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '30_SimoWorking': {\n        entry: [setStateMachineEventScanStageNumber(30), resetStationEvent],  // Asigna el número 30 y resetea la estación que disparó el evento\n        always: {\n          target: '40_SimoDone',\n          cond: () => global.get('eventoDetectadoSIMO_Gen') === false   && global.get('mensajeCompletado') === true // Solo pasamos al siguiente estado si no se ha detectado un evento y mensajeCompletado es true\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '40_SimoDone': {\n        entry: [setStateMachineEventScanStageNumber(40)],  // Asigna el número 40\n        always: {\n          target: '1000_FinCiclo',\n          cond: () => global.get('stateMachineEventScan_Gen') !== 60  // Solo transiciona si stateMachineEventScan_Gen es diferente de 60\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '1000_FinCiclo': {\n        entry: [setStateMachineEventScanStageNumber(1000)],  // Asigna el número 1000\n        after: {\n          100: '00_Reposo'  // Transición automática de regreso al inicio\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n    actions: {\n      setStateMachineEventScanStageNumber,\n      checkSimoEvents,\n      resetStationEvent  // Añadimos la acción para resetear la estación que disparó el evento\n    }\n  }\n};\n",
        "noerr": 0,
        "x": 750,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ccf67092ae6953bb",
        "type": "smxstate",
        "z": "85cd6b9fa59e1a60",
        "g": "b256639f1e2a8b3f",
        "name": "ScanSROS",
        "xstateDefinition": "// Import shorthands from xstate object\nconst { assign } = xstate;\n\n/**\n * Acciones para SROS\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineEventScanStage\nconst setStateMachineEventScanStageNumber = (num) => {\n  return (context, event) => {\n    global.set('stateMachineEventScanSROS', num);  // Asigna el número de la etapa a stateMachineEventScanStage\n  };\n};\n\n// Definir las rutas para escanear basadas en las variables que has definido anteriormente\nconst rutas = [\n  'SROS_Todos', 'PIE1_PEP1', 'PIE1_PEP2', 'PIE1_PEP3', 'PIE1_PEP4', 'PIE1_PEP5', 'PIE1_PEP6', 'PIE1_PEP7', 'PIE1_PEP8', 'PIE1_PEP9', 'PIE1_PEP10', 'PIE1_PEP11', 'PIE1_PEP12',\n  'PIE1_REJ1', 'PIE1_PIS1', 'PIE1_PIS3',\n  'PEP1_PSP1', 'PEP2_PSP2', 'PEP3_PSP3', 'PEP4_PSP4', 'PEP5_PSP5', 'PEP6_PSP6', 'PEP7_PSP7', 'PEP8_PSP8', 'PEP9_PSP9', 'PEP10_PSP10', 'PEP11_PSP11', 'PEP12_PSP12',\n  'PSP1_PIS2', 'PSP1_PIS3', 'PSP2_PIS2', 'PSP2_PIS3', 'PSP3_PIS2', 'PSP3_PIS3', 'PSP4_PIS2', 'PSP4_PIS3', 'PSP5_PIS2', 'PSP5_PIS3',\n  'PSP6_PIS2', 'PSP6_PIS3', 'PSP7_PIS2', 'PSP7_PIS3', 'PSP8_PIS2', 'PSP8_PIS3', 'PSP9_PIS2', 'PSP9_PIS3', 'PSP10_PIS2', 'PSP10_PIS3',\n  'PSP11_PIS2', 'PSP11_PIS3', 'PSP12_PIS2', 'PSP12_PIS3'\n];\n\n// Función para verificar si hay un evento SROS en una ruta específica\nconst checkRouteSrosEvent = (ruta) => {\n  return global.get(`${ruta}_SimoEvent`) === true;\n};\n\n// Acción para asignar el estado de SROS para cada ruta y detectar eventos\nconst checkSrosEvents = (context, event) => {\n  let eventoDetectado = false;\n  let rutaConEvento = null;\n\n  // Iterar sobre todas las rutas para verificar si alguna tiene un evento\n  rutas.forEach(ruta => {\n    if (checkRouteSrosEvent(ruta)) {\n    //  node.warn(`Evento SROS detectado en la ruta ${ruta}`);\n      eventoDetectado = true;\n      rutaConEvento = ruta;\n    }\n  });\n\n  if (eventoDetectado) {\n    global.set('eventoDetectadoSROS_Gen', rutaConEvento);  // Guardar la ruta que disparó el evento\n  } else {\n    global.set('eventoDetectadoSROS_Gen', false);  // Si no hay eventos, poner en false\n  }\n};\n\n// Acción para poner en false la variable de la ruta que disparó el evento\nconst resetRouteEvent = (context, event) => {\n  const ruta = global.get('eventoDetectadoSROS_Gen');\n\n  if (ruta) {\n    node.warn(`Evento en la ruta ${ruta} reseteado a false`);\n  }\n};\n\n/**\n * Main machine definition for SROS\n */\nreturn {\n  machine: {\n    context: {\n      Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_Reposo',\n    states: {\n      '00_Reposo': {\n        entry: [setStateMachineEventScanStageNumber(0), () => global.set('eventoDetectadoSROS_Gen', false)],  // Asigna el número 0 y resetea la variable de evento\n        always: {\n          target: '10_Inicio',\n          cond: () => global.get('stateMachineEventScan_Gen') === 90  // Solo pasamos si stateMachineEventScan_Gen es 90\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '10_Inicio': {\n        entry: [setStateMachineEventScanStageNumber(10)],  // Asigna el número 10\n        after: {\n          100: '20_SrosScan'  // Transición automática a '20_SrosScan' después de 1 segundo\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '20_SrosScan': {\n        entry: [setStateMachineEventScanStageNumber(20), checkSrosEvents],  // Asigna el número 20 y chequea eventos SROS\n        after: {\n          100: '30_SrosWorking'  // Transición automática a '30_SrosWorking'\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '30_SrosWorking': {\n        entry: [setStateMachineEventScanStageNumber(30), resetRouteEvent],  // Asigna el número 30 y resetea la ruta que disparó el evento\n        always: {\n          target: '40_SrosDone',\n          cond: () => global.get('eventoDetectadoSROS_Gen') === false && global.get('mensajeCompletado') === true  // Solo pasamos al siguiente estado si no se ha detectado un evento y mensajeCompletado es true\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '40_SrosDone': {\n        entry: [setStateMachineEventScanStageNumber(40)],  // Asigna el número 40\n        always: {\n          target: '1000_FinCiclo',\n          cond: () => global.get('stateMachineEventScan_Gen') !== 90  // Solo transiciona si stateMachineEventScan_Gen es diferente de 90\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '1000_FinCiclo': {\n        entry: [setStateMachineEventScanStageNumber(1000)],  // Asigna el número 1000\n        after: {\n          100: '00_Reposo'  // Transición automática de regreso al inicio\n        },\n        on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      }\n    }\n  },\n\n  // Configuración\n  config: {\n    actions: {\n      setStateMachineEventScanStageNumber,\n      checkSrosEvents,\n      resetRouteEvent  // Añadimos la acción para resetear la ruta que disparó el evento\n    }\n  }\n};\n",
        "noerr": 0,
        "x": 750,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "580b20765fd2c190",
        "type": "smxstate",
        "z": "85cd6b9fa59e1a60",
        "g": "63e72b906806df62",
        "name": "fsmScanSali",
        "xstateDefinition": "return {\n  machine: {\n    context: {},\n    initial: '00_Reposo',\n    states: {\n      '00_Reposo': {\n        entry: [\n          () => global.set('SaliEvent', false),\n          () => global.set('eventoProcesadoSali', false),\n          () => global.set('stateMachineEventScanSali', 10)\n        ],\n        always: {\n          target: '10_Inicio',\n          cond: () => global.get('stateMachineEventScan_Gen') === 120 // Solo pasamos si stateMachineEventScan_Gen es 120\n        },\n        on: { RESET: '00_Reposo' } // Permite reiniciar al estado inicial\n      },\n\n      '10_Inicio': {\n        entry: [() => global.set('stateMachineEventScanSali', 10)],\n        after: {\n          100: '20_SaliScan' // Delay de 100 ms antes de pasar al estado '20_SaliScan'\n        },\n        on: { RESET: '00_Reposo' }\n      },\n\n      '20_SaliScan': {\n        entry: [\n          () => global.set('stateMachineEventScanSali', 20),\n          () => {\n            const saliEvent = global.get('SaliEvent');\n            if (saliEvent === true) {\n            //  node.warn('Evento Sali detectado.');\n              global.set('eventoDetectadoSALI_Gen', true);\n            } else {\n              global.set('eventoDetectadoSALI_Gen', false);\n            }\n          }\n        ],\n        always: [\n          {\n            target: '30_SaliWorking',\n            cond: () => global.get('eventoDetectadoSALI_Gen') === true\n          },\n          {\n            target: '40_SaliDone',\n            cond: () => global.get('eventoDetectadoSALI_Gen') === false\n          }\n        ],\n        on: { RESET: '00_Reposo' }\n      },\n\n      '30_SaliWorking': {\n        entry: [\n          () => global.set('stateMachineEventScanSali', 30),\n          () => global.set('SaliEvent', false),\n\n        ],\n        always: {\n          target: '40_SaliDone',\n          cond: () => global.get('eventoDetectadoSALI_Gen') === false // Solo pasamos si no hay eventos activos\n        },\n        on: { RESET: '00_Reposo' }\n      },\n\n      '40_SaliDone': {\n        entry: [\n          () => global.set('stateMachineEventScanSali', 40),\n    \n        ],\n        always: {\n          target: '1000_FinCiclo',\n          cond: () => global.get('stateMachineEventScan_Gen') !== 120 // Solo transiciona si stateMachineEventScan_Gen no es 120\n        },\n        on: { RESET: '00_Reposo' }\n      },\n\n      '1000_FinCiclo': {\n        entry: [\n          () => global.set('stateMachineEventScanSali', 1000),\n          () => global.set('stateMachineEventScanSali', 0)\n        ],\n        after: {\n          100: '00_Reposo' // Delay de 100 ms antes de regresar al inicio\n        },\n        on: { RESET: '00_Reposo' }\n      }\n    }\n  },\n\n  config: {}\n};\n",
        "noerr": 0,
        "x": 1150,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d90521c49340b1c8",
        "type": "smxstate",
        "z": "85cd6b9fa59e1a60",
        "g": "1edb6d4e9d4c82e9",
        "name": "FSM_Gen",
        "xstateDefinition": "// Import shorthands from xstate object\nconst { assign } = xstate; \n\n// Guard para verificar si Init_On es falso\nconst isInitOnFalse = (context, event) => global.get('Init_On') === false;\n\n// Guard para verificar si estadoConexion es \"Connected to 192.168.131.33:3000\"\nconst isConnectionEstablished = (context, event) => global.get('estadoConexion') === \"Connected to 192.168.131.32:3000\"  ||   global.get('estadoConexion') === \"Connected to 192.168.131.33:3000\"  ;\n\n// Guard para verificar si estadoConexion es \"closed\"\nconst isConnectionClosed = (context, event) => global.get('estadoConexion') === \"closed\";\n\n// Guard para verificar si telegramID_response es \"CALI\" y mensajeCompletado es true\nconst isTelegramResponseCALIAndMensajeCompletado = (context, event) => {\n    const camposTrama = global.get(\"camposTrama\");\n    return camposTrama && camposTrama.identificacionTelegrama === \"CALI\"; //&& global.get('mensajeCompletado') === true\n};\n\n// Guard para verificar si telegramID_response es \"CSTS\"\nconst isTelegramResponseCSTS = (context, event) => global.get(\"camposTrama\").identificacionTelegrama === \"CSTS\";\n\n/**\n * Acciones\n */\n// Acción para asignar el número de la etapa actual a la variable global stateMachineStage\nconst setStateMachineStageNumber = (num) => {\n    return (context, event) => {\n        global.set('stateMachineStage_Gen', num);  // Asigna el número de la etapa a stateMachineStage\n       // node.warn(`Transicionando a la etapa: ${num}`);  // Muestra el número en la depuración\n    };\n};\n\n// Acción para asignar Init_On a true\nconst setInitOnTrue = assign({\n    Init_On: (context, event) => global.set('Init_On', true)\n});\n\n// Acción para asignar connectClient a true\nconst setConnectClientTrue = assign((context, event) => {\n    global.set('connectClient', true);\n    return context;\n});\n\n// Acción para asignar dispararSali a true\nconst setDispararSaliTrue = assign((context, event) => {\n    global.set('dispararSali', true);\n    return context;\n});\n\n// Acción para establecer dispararSSTS_Gen en true\nconst setDispararSSTSGenTrue = (context, event) => {\n    global.set('dispararSSTS_Gen', true);\n   // node.warn(\"dispararSSTS_Gen se ha activado (true)\");\n};\n\n// Acción para establecer dispararSSTS_Gen en false\nconst setDispararSSTSGenFalse = (context, event) => {\n    global.set('dispararSSTS_Gen', false);\n   // node.warn(\"dispararSSTS_Gen se ha desactivado (false)\");\n};\n\n// Acción para establecer closeConexion a true cuando esté en el estado '00_Reposo'\nconst setCloseConexionTrue = (context, event) => {\n    global.set('closeConexion', true);\n    node.warn(\"closeConexion se ha activado (true)\");\n};\n\nconst setCloseConexionFalse = (context, event) => {\n    global.set('closeConexion', false);\n   // node.warn(\"closeConexion se ha activado (false)\");\n};\n\n/**\n * Main machine definition\n */\nreturn {\n  machine: {\n    context: {\n        Init_On: false,  // Variable inicializada en falso\n    },\n    initial: '00_Reposo',\n    states: {\n      '00_Reposo': {\n          entry: [setStateMachineStageNumber(0), setDispararSSTSGenFalse, setCloseConexionFalse],  // Asigna el número 0, desactiva dispararSSTS_Gen y define closeConexion\n         after: {\n              1000: '10_InicializarVar'  // Transición automática al estado '90_SendSstsAll' después de 1 segundo\n          },\n          on: { \n              RESET: '00_Reposo'  // Evento RESET para reiniciar al estado inicial\n          }\n      },\n  '10_InicializarVar': {\n    entry: ['setInitOnTrue', setStateMachineStageNumber(10)], // Se pone Init_On a true y se asigna el número 10\n    after: {\n        100: {  // Esperar 100 ms antes de ejecutar la siguiente acción\n            actions: ['setCloseConexionTrue'],  // Ejecutar setCloseConexionTrue después de 100 ms\n        }\n    },\n    always: {\n        target: '20_Wait',  // Transición automática al estado '20_Wait'\n        cond: 'isConnectionClosed'  // Solo transiciona si estadoConexion es \"closed\"\n    },\n    on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n},\n      '20_Wait': {\n          entry: [setStateMachineStageNumber(20)],  // Asigna el número 20\n          after: {\n              100: { \n                  target: '30_Connect', \n                  cond: (context, event) => {\n                      const mecActivado = global.get(\"mecActivado\");\n                      const initOnFalse = global.get('Init_On') === false;\n                      return initOnFalse && mecActivado === true;\n                  }\n                }\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '30_Connect': {\n          entry: ['setConnectClientTrue', setStateMachineStageNumber(30)],  // Actualiza el estado y asigna el número 30\n          after: {\n              100: '40_Wait'  // Transición automática al estado '40_Wait'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '40_Wait': { \n          entry: [setStateMachineStageNumber(40)],  // Asigna el número 40\n          always: {\n              target: '50_SendSali', \n              cond: 'isConnectionEstablished'  // Solo transiciona si estadoConexion es correcto\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '50_SendSali': { \n          entry: [setStateMachineStageNumber(50), 'setDispararSaliTrue'],  // Asigna el número 50 y se establece dispararSali en true\n          after: {\n              500: '60_WaitCali'  // Transición automática al estado '60_WaitCali'\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '60_WaitCali': { \n          entry: [setStateMachineStageNumber(60)],  // Asigna el número 60\n          always: {\n              target: '70_CaliOk', \n              cond: 'isTelegramResponseCALIAndMensajeCompletado'  // Verificación combinada para transición\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '70_CaliOk': { \n          entry: [setStateMachineStageNumber(70)],\n          on: { \n              '': '90_SendSstsAll',\n              RESET: '00_Reposo'  // Evento RESET para reiniciar al estado inicial\n          }\n      },\n      '80_CaliNoOk': { \n          entry: [setStateMachineStageNumber(80)],  // Asigna el número 80\n          after: {\n              100: '90_SendSstsAll'  // Transición automática al estado '90_SendSstsAll' después de 1 segundo\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '90_SendSstsAll': { \n          entry: [setStateMachineStageNumber(90), setDispararSSTSGenTrue],  // Asigna el número 90 y activa dispararSSTS_Gen en true\n            after: {\n                500: '100_WaitSstsAll'  // Transición automática al estado '100_WaitSstsAll'\n            },\n            on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n        },\n      '100_WaitSstsAll': { \n          entry: [setStateMachineStageNumber(100)],\n          always: {\n              target: '110_SstsAllOk', \n              cond: 'isTelegramResponseCSTS'  // Transición solo si telegramID_response es \"CSTS\"\n          },\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '110_SstsAllOk': { \n          entry: [setStateMachineStageNumber(110)],\n          on: {  \n              '': '130_Scan',\n              RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '120_SstsAllNoOk': { \n          entry: [setStateMachineStageNumber(120)],\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      },\n      '130_Scan': { \n          entry: [setStateMachineStageNumber(130)],\n          on: { RESET: '00_Reposo' }  // Evento RESET para reiniciar al estado inicial\n      }\n    }\n  },\n  \n  // Configuración\n  config: {\n      actions: { \n          setInitOnTrue,\n          setConnectClientTrue,\n          setDispararSaliTrue,\n          setDispararSSTSGenTrue,  // Acción para activar dispararSSTS_Gen\n          setDispararSSTSGenFalse,  // Acción para desactivar dispararSSTS_Gen\n          setCloseConexionTrue,    // Acción para activar closeConexion en true\n          setCloseConexionFalse    // Acción para desactivar closeConexion en true\n      },\n      guards: { \n          isInitOnFalse,\n          isConnectionEstablished,  // Guard para verificar si la conexión está establecida\n          isConnectionClosed,       // Guard para verificar si la conexión está cerrada\n          isTelegramResponseCALIAndMensajeCompletado,    // Guard para verificar telegramID_response \"CALI\" y mensajeCompletado\n          isTelegramResponseCSTS    // Guard para verificar si telegramID_response es \"CSTS\"\n      }\n  }\n};\n",
        "noerr": 0,
        "x": 1170,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9ba91c5801e1e63f",
        "type": "function",
        "z": "85cd6b9fa59e1a60",
        "g": "73eccedc965af1b0",
        "name": "filtro",
        "func": "const stage = global.get('stateMachineStage_Gen');\nconst ssts = global.get('stateMachineEventScanSSTS');\nconst simo = global.get('stateMachineEventScanSIMO');\nconst sros = global.get('stateMachineEventScanSROS');\nconst sali = global.get('stateMachineEventScanSali');\n\n// Solo avanzamos si todas las condiciones se cumplen\nif (\n    stage === 130 &&\n    ((ssts === 40) ||\n     (simo === 40) ||\n     (sros === 40) ||\n     (sali === 40))\n) {\n    return msg;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 460,
        "wires": [
            [
                "8a79d3b592ef9007"
            ]
        ]
    },
    {
        "id": "9a0f81534dde114e",
        "type": "function",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "TelegramData",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Definir la función para añadir espacios a la izquierda\nfunction padLeftSpaces(str, length) {\n    return (Array(length).join(' ') + str).slice(-length);\n}\n\n// Definir las variables y constantes\nvar dataSALI = {\n    NombreHost: global.get(\"NombreHost_SALI\") ,\n    TmsServerPort: global.get(\"TmsServerPort_SALI\"),\n    NumeroAlmacen: global.get(\"NumeroAlmacen_SALI\"),\n    Software: global.get(\"Software_SALI\"),\n    VersionSoftware: global.get(\"VersionSoftware_SALI\"),\n    FechaHora: global.get(\"FechaHora_SALI\"),\n    Master: global.get(\"Master_SALI\"),\n    Period: global.get(\"Period_SALI\"),\n    TimeoutRemoto: global.get(\"TimeoutRemoto_SALI\"),\n    Cpu: global.get(\"cpu_usage\"),\n    Memoria: global.get(\"ram_usage\"),\n    TiempoCiclo: global.get(\"TiempoCiclo_SALI\")\n};\n\n// Generar los datos del telegrama\nvar telegramData = \"\";\ntelegramData += padLeftSpaces(dataSALI.NombreHost.toString(), 25);  // Rellenar con espacios a la izquierda\ntelegramData += padLeft(dataSALI.TmsServerPort.toString(), 5);\ntelegramData += padLeft(dataSALI.NumeroAlmacen.toString(), 10);\ntelegramData += padLeftSpaces(dataSALI.Software.toString(), 10);  // Rellenar con espacios a la izquierda\ntelegramData += padLeftSpaces(dataSALI.VersionSoftware.toString(), 10);  // Rellenar con espacios a la izquierda\ntelegramData += padLeft(dataSALI.FechaHora.toString(), 17);\ntelegramData += padLeft(dataSALI.Master.toString(), 1);\ntelegramData += padLeft(dataSALI.Period.toString(), 10);\ntelegramData += padLeft(dataSALI.TimeoutRemoto.toString(), 10);\ntelegramData += padLeft(dataSALI.Cpu.toString(), 3);\ntelegramData += padLeft(dataSALI.Memoria.toString(), 3);\ntelegramData += padLeft(dataSALI.TiempoCiclo.toString(), 3);\n\n// Asignar los datos del telegrama a msg.payload para pasarlos al siguiente nodo\nmsg.payload.telegramData = telegramData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 300,
        "wires": [
            [
                "326702b40731a84a",
                "8bf1d71a3e8519a3"
            ]
        ]
    },
    {
        "id": "326702b40731a84a",
        "type": "debug",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "TelegramData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.telegramData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 260,
        "wires": []
    },
    {
        "id": "8bf1d71a3e8519a3",
        "type": "function",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Telegram",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener la fecha y hora actual del sistema\nvar now = new Date();\nvar DateString = now.getFullYear().toString() + padLeft((now.getMonth() + 1).toString(), 2) + padLeft(now.getDate().toString(), 2);\nvar TimeString = padLeft(now.getHours().toString(), 2) + padLeft(now.getMinutes().toString(), 2) + padLeft(now.getSeconds().toString(), 2) + padLeft(now.getMilliseconds().toString(), 3);\nvar DateTimeString = DateString + TimeString;\n\n// Obtener los datos del telegrama generado previamente\nvar telegramData = msg.payload.telegramData;\n\n// Calcular la longitud de los datos del telegrama\nvar DataLength = padLeft(telegramData.length.toString(), 4);\n\nvar sequenceNumberTemp = global.get(\"sequenceNumber\");\nsequenceNumberTemp = sequenceNumberTemp + 1;\nglobal.set(\"sequenceNumber\", sequenceNumberTemp);\nvar SequenceString = padLeft(sequenceNumberTemp.toString(), 4);  //sequenceNumber.toString()\n//global.set(\"ExpectedSequenceNumber_SSTS\", sequenceNumber);\n\n// Construir el telegrama completo\nvar Telegram = '#STX';\nTelegram += DataLength;\nTelegram += global.get(\"TelegramID_SALI\"); \nTelegram += global.get(\"Version_SALI\");\nTelegram += global.get(\"Origin_SALI\");\nTelegram += global.get(\"Destination_SALI\");\nTelegram += SequenceString; // Incrementar con cada telegrama enviado\nTelegram += DateTimeString; // Hora actual del sistema\nTelegram += telegramData; // Incluir el telegrama generado previamente\nTelegram += '#ETX';\n\n// Asignar el telegrama completo a msg.payload\nglobal.set('SaliEvent', false);  // Reseteamos `SaliEvent` para evitar múltiples disparos\nmsg.payload = Telegram;\n// Guardar el telegrama en el contexto global\nglobal.set('originalTelegram', msg.payload);\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [
                "b40ee75550fa9610",
                "c1862bbde47bb43b"
            ]
        ]
    },
    {
        "id": "b40ee75550fa9610",
        "type": "debug",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Telegram",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "6550a293ca8bef8f",
        "type": "function",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Formatear log",
        "func": "var timestamp = new Date().toISOString();\nvar logMessage = timestamp + \" - \" + msg.payload + \"\\n\";\nmsg.payload = logMessage;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "1781e394292fe6ff"
            ]
        ]
    },
    {
        "id": "1781e394292fe6ff",
        "type": "file",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Escribir Log",
        "filename": "/var/log/my_logs/logSALI.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "x": 590,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a515340fef15a873",
        "type": "link in",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "formatLog",
        "links": [],
        "x": 275,
        "y": 180,
        "wires": [
            [
                "6550a293ca8bef8f"
            ]
        ]
    },
    {
        "id": "76e74a37dcbe73e7",
        "type": "inject",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "send Message",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "9a0f81534dde114e"
            ]
        ]
    },
    {
        "id": "1432f015f1ce34d5",
        "type": "function",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Start",
        "func": "\nlet dispararSali = global.get('dispararSali') || false;\nlet eventoDetectadoSALI_Gen = global.get('eventoDetectadoSALI_Gen') || false;\nlet mensajeCompletado = global.get('mensajeCompletado') || false;\n\n// Verificamos si `dispararSali` es true\nif (dispararSali === true ) {\n     global.set('mensajeCompletado', false); \n    msg.payload = {};  // Disparamos el flujo SALI\n    global.set('dispararSali', false);  // Reseteamos la variable para evitar múltiples disparos\n    global.set('sequenceNumber', 0);    // Ponemos sequenceNumber en 0\n} else if (eventoDetectadoSALI_Gen ) {  // Si `SaliEvent` es true\n    msg.payload = {};  // Disparamos el flujo SALI  \n   // global.set('SaliEvent', false);  // Reseteamos `SaliEvent` para evitar múltiples disparos\n     global.set('mensajeCompletado', false); \n      global.set(`eventoDetectadoSALI_Gen`, false);\n} else {\n    msg = null;  // Si ninguna de las condiciones se cumple, no hacemos nada\n}\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "9a0f81534dde114e"
            ]
        ]
    },
    {
        "id": "c1862bbde47bb43b",
        "type": "link out",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "SALI_Out",
        "mode": "link",
        "links": [
            "371010702919b0f9"
        ],
        "x": 875,
        "y": 300,
        "wires": []
    },
    {
        "id": "9791a13a266cf8aa",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "100ms",
        "x": 130,
        "y": 200,
        "wires": [
            [],
            [
                "1432f015f1ce34d5"
            ],
            [],
            []
        ]
    },
    {
        "id": "5b7d705d7e4bb239",
        "type": "function",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": " checkAndSetSaliEvent",
        "func": "let intervalId;\n\n// Definir la función que verifica y establece 'SaliEvent' a true\nfunction checkAndSetSaliEvent() {\n    if (global.get('SaliEvent') !== true) {\n        global.set('SaliEvent', true);\n        node.warn(\"SaliEvent ha sido establecido a true\");\n    } else {\n        node.warn(\"SaliEvent ya está en true, no se realiza ningún cambio.\");\n    }\n}\n\n// Comprobar si el intervalo ya está iniciado\nif (!intervalId) {\n    intervalId = setInterval(checkAndSetSaliEvent, 20000);  // Cada 20 segundos\n    node.warn(\"Intervalo de SaliEvent iniciado.\");\n} else {\n    node.warn(\"El intervalo ya está corriendo.\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "d26efa556434d7be",
        "type": "inject",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "5b7d705d7e4bb239"
            ]
        ]
    },
    {
        "id": "1155a809949cc5a6",
        "type": "function",
        "z": "10c270ce21d875c2",
        "g": "f8b9f88b30f86451",
        "name": "Start",
        "func": "// Obtener el estado actual y la variable 'dispararSSTS_Gen'\nlet eventoDetectadoSALI_Gen = global.get('eventoDetectadoSALI_Gen') || false;\nlet mensajeCompletado = global.get('mensajeCompletado') || false;\nlet dispararSali = global.get('dispararSali') || false;\n\n\n\n// Verificamos si estamos en el estado 100 y si dispararSSTS_Gen es true\nif ((eventoDetectadoSALI_Gen === true ) || (dispararSali)) {\n    // Enviar el flujo SSTS manualmente y activar el ciclo automático\n    global.set('mensajeCompletado', false); \n    global.set('dispararSali', false);\n\n     msg.payload = {};  // Disparamos el flujo SSTS\n    global.set(`eventoDetectadoSALI_Gen`, false);\n\n  \n\n}  else {\n    // Si no estamos en el estado correcto o la condición no se cumple, no hacemos nada\n    msg = null;\n}\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c7ad6ddc686b4fe1",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "g": "94a7c3547484f718",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'variablesOkTLV1' está en true\nlet variablesOkTLV1 = flow.get('variablesOkTLV1') || false;\n\nif (variablesOkTLV1 === true) {\n    // Obtener las variables almacenadas en la global 'nuevoRegistroTLV1'\n    let variablesPLC = global.get('nuevoRegistroTLV1');\n\n    // Verificar si las variables PLC están definidas\n    if (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n        node.error(\"Las variables del PLC para TLV1 no están definidas\");\n        return msg;  // Detenemos la ejecución si no están definidas\n    }\n\n    // Leer las variables necesarias del PLC\n    let coordXActual = variablesPLC[\"COORD_X_ACTUAL\"];\n    let coordYActual = variablesPLC[\"COORD_Y_ACTUAL\"];\n    let coordZActual = variablesPLC[\"COORD_Z_ACTUAL\"];\n  //  let matriculaActual = variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.MATRICULA_ACTUAL\"];\n    let pasilloActual = variablesPLC[\"PASILLO_ACTUAL\"];\n\n    // Definir las variables para la búsqueda\n    if (coordXActual === 0 && coordYActual === 8 && coordZActual === 0) {\n        // Condición especial: si X=0, Y=8, y Z=0\n        global.set(\"XActual_SIMO_Busq_TLV1\", 999);  // Coordenada X especial\n        global.set(\"YActual_SIMO_Busq_TLV1\", 1);    // Coordenada Y especial\n        global.set(\"Lado_SIMO_Busq_TLV1\", 1);       // Lado especial\n    } else {\n        // Asignar valores leídos de las variables PLC\n        global.set(\"XActual_SIMO_Busq_TLV1\", coordXActual);\n        global.set(\"YActual_SIMO_Busq_TLV1\", coordYActual);\n        global.set(\"Lado_SIMO_Busq_TLV1\", coordZActual);  // El valor de Z actual es el lado\n    }\n\n    // Asignar el resto de las variables de búsqueda\n    \n    // Obtener la variable dinámica de operaciones encadenadas para TLV1\n    global.set(\"OperacionesEncadenadas_SIMO_TLV1\", 4); // Dinámico: indica qué partes enviar para TLV1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\n    global.set(\"NumeroAlmacen_SIMO_TLV1\", 20001);      // Número de Almacén para TLV1\n    global.set(\"Equipamiento_SIMO_TLV1\", \"TLV-1\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n    global.set(\"CantidadMovimientos_SIMO_Busq_TLV1\", 0);\n    global.set(\"Pasillo_SIMO_Busq_TLV1\", pasilloActual);  // Pasillo actual\n   // global.set(\"MATRICULA_SIMO_Busq_TLV1\", matriculaActual);  // Matrícula actual\n   // global.set(\"NumeroMovimiento_SIMO_Busq_TLV1\", 54321); // Número de movimiento fijo\n    global.set(\"TipoEstacion_SIMO_Busq_TLV1\", 1);         // Tipo de estación fijo\n    global.set(\"NumeroEstacion_SIMO_Busq_TLV1\", 1);       // Número de estación fijo\n\n    // Determinar el valor de \"Status_SIMO_Busq_TLV1\" en función de los errores\n    //let errorExtraccionTLV1 = global.get(\"errorExtraccionTLV1\") || false;\n    let errorDepositoTLV1 = global.get(\"errorDepositoTLV1\") || false;\n\n    if ( errorDepositoTLV1) {\n        global.set(\"Status_SIMO_Busq_TLV1\", \"E\"); // Establecer en \"E\" si hay error\n    } else {\n        global.set(\"Status_SIMO_Busq_TLV1\", \"S\"); // Establecer en \"S\" si no hay error\n    }\n\n    global.set(\"Ocupacion_SIMO_Busq_TLV1\", 0);            // Ocupación fija\n    global.set(\"Capacidad_SIMO_Busq_TLV1\", 1);            // Capacidad fija\n\n    // Asignar las variables auxiliares para la búsqueda\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Busq_TLV1`, 0);  // Variables auxiliares para la búsqueda en TLV1\n    }\n\n    // Emitir una advertencia para verificar que las variables se han escrito\n    node.warn(\"Variables de búsqueda para TLV1 han sido asignadas correctamente.\");\n\n    // Establecer 'variablesOkTLV1' a true después de escribir las variables\n   flow.set('variablesBusqAutoTLV1Escritas', true);\n    flow.set('variablesOkTLV1', false);\n} else {\n    // Si 'variablesOkTLV1' no está en true, no se realiza ninguna operación\n   // node.warn(\"La variable 'variablesOkTLV1' no está en true, no se realizaron cambios.\");\n}\n\nreturn msg;\n\n\n \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6f245f9a292c17fb",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "g": "94a7c3547484f718",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 240,
        "wires": [
            [
                "c7ad6ddc686b4fe1"
            ]
        ]
    },
    {
        "id": "8752967574f76149",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "g": "94a7c3547484f718",
        "name": "CheckTLV",
        "func": "\n// Leer las variables del PLC almacenadas en la variable global \"nuevoRegistroTLV1\"\nlet variablesPLC_TLV1 = global.get(\"nuevoRegistroTLV1\");\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC_TLV1 === 'undefined' || variablesPLC_TLV1 === null) {\n    //node.error(\"Las variables del PLC para TLV1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Leer las variables relevantes del PLC\nlet AUTOMATICO = variablesPLC_TLV1[\"AUTOMATICO\"];\nlet OCUPACION = variablesPLC_TLV1[\"OCUPACION\"];\nlet AVERIA = variablesPLC_TLV1[\"AVERIA\"];\nlet estadoActualTLV1 = global.get('stateMachineEventStageEjecutarTareaTLV1') || 0;\nlet pauseScanTLV1 = global.get('pauseScanTLV1') || false;\n\n// Leer el estado de 'datosListosTLV1'\nlet datosListosTLV1 = global.get('datosListosTLV1') || false;\n\n// Verificar las condiciones de AUTOMATICO, OCUPACION, AVERIA y 'datosListosTLV1'\nif (AUTOMATICO === 0 && OCUPACION === 0 && AVERIA === 0 && datosListosTLV1 === false && estadoActualTLV1 === 10 && pauseScanTLV1 === false) {   \n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStarted = flow.get('timerStartedTLV1') || false;\n    let timeElapsed = flow.get('timeElapsedTLV1') || 0;\n\n    if (!timerStarted) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedTLV1', true);\n        flow.set('timeElapsedTLV1', Date.now());\n       // node.warn(\"Temporizador iniciado para TLV1\");\n    } else {\n        // Verificar si han pasado 30 segundos\n        let currentTime = Date.now();\n        let elapsedTime = currentTime - timeElapsed;\n\n        if (elapsedTime >= 25000) {  // 30000 ms = 30 segundos\n            // Cumplimos las condiciones durante 30 segundos, lanzar búsqueda\n            flow.set('lanzarBusquedaTLV1', true);\n           // node.warn(\"Lanzando búsqueda TLV1\");\n\n            // Reiniciar el temporizador y preparar para lanzar la búsqueda de nuevo\n            flow.set('timeElapsedTLV1', Date.now());\n          //  global.set('lanzarBusquedaTLV1', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedTLV1', false);\n    flow.set('timeElapsedTLV1', 0);\n  //  flow.set('lanzarBusquedaTLV1', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d74d35e60d26f4c5",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "g": "94a7c3547484f718",
        "name": "CheckTLV",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 160,
        "wires": [
            [
                "8752967574f76149"
            ]
        ]
    },
    {
        "id": "8362270293b7b13f",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "g": "0114f79ffdd0a5c8",
        "name": "EscribirVariables",
        "func": "// Verificar si la variable 'variablesOkTLV2' está en true\nlet variablesOkTLV2 = flow.get('variablesOkTLV2') || false;\n\nif (variablesOkTLV2 === true) {\n    // Obtener las variables almacenadas en la global 'nuevoRegistroTLV2'\n    let variablesPLC = global.get('nuevoRegistroTLV2');\n\n    // Verificar si las variables PLC están definidas\n    if (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n        node.error(\"Las variables del PLC para TLV2 no están definidas\");\n        return msg;  // Detenemos la ejecución si no están definidas\n    }\n\n    // Leer las variables necesarias del PLC\n    let coordXActual = variablesPLC[\"COORD_X_ACTUAL\"];\n    let coordYActual = variablesPLC[\"COORD_Y_ACTUAL\"];\n    let coordZActual = variablesPLC[\"COORD_Z_ACTUAL\"];\n  //  let matriculaActual = variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.MATRICULA_ACTUAL\"];\n    let pasilloActual = variablesPLC[\"PASILLO_ACTUAL\"];\n\n    // Definir las variables para la búsqueda\n    if (coordXActual === 0 && coordYActual === 8 && coordZActual === 0) {\n        // Condición especial: si X=0, Y=8, y Z=0\n        global.set(\"XActual_SIMO_Busq_TLV2\", 999);  // Coordenada X especial\n        global.set(\"YActual_SIMO_Busq_TLV2\", 1);    // Coordenada Y especial\n        global.set(\"Lado_SIMO_Busq_TLV2\", 1);       // Lado especial\n    } else {\n        // Asignar valores leídos de las variables PLC\n        global.set(\"XActual_SIMO_Busq_TLV2\", coordXActual);\n        global.set(\"YActual_SIMO_Busq_TLV2\", coordYActual);\n        global.set(\"Lado_SIMO_Busq_TLV2\", coordZActual);  // El valor de Z actual es el lado\n    }\n\n   \n       // Obtener la variable dinámica de operaciones encadenadas para TLV1\n    global.set(\"OperacionesEncadenadas_SIMO_TLV2\", 4); // Dinámico: indica qué partes enviar para TLV1\n\n    // Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para TLV1\n    global.set(\"NumeroAlmacen_SIMO_TLV2\", 20001);      // Número de Almacén para TLV1\n    global.set(\"Equipamiento_SIMO_TLV2\", \"TLV-2\");     // Equipamiento específico para TLV1 (rellenar con espacios a la izquierda si es necesario)\n\n    global.set(\"CantidadMovimientos_SIMO_Busq_TLV2\", 0);\n   \n   \n   \n    // Asignar el resto de las variables de búsqueda\n    global.set(\"Pasillo_SIMO_Busq_TLV2\", pasilloActual);  // Pasillo actual\n  //  global.set(\"MATRICULA_SIMO_Busq_TLV2\", matriculaActual);  // Matrícula actual\n  //  global.set(\"NumeroMovimiento_SIMO_Busq_TLV2\", 54321); // Número de movimiento fijo\n    global.set(\"TipoEstacion_SIMO_Busq_TLV2\", 1);         // Tipo de estación fijo\n    global.set(\"NumeroEstacion_SIMO_Busq_TLV2\", 2);       // Número de estación fijo\n\n    // Determinar el valor de \"Status_SIMO_Busq_TLV1\" en función de los errores\n    let errorExtraccionTLV2= global.get(\"errorExtraccionTLV2\") || false;\n    let errorDepositoTLV2 = global.get(\"errorDepositoTLV2\") || false;\n\n    if ( errorDepositoTLV2) {\n        global.set(\"Status_SIMO_Busq_TLV2\", \"E\"); // Establecer en \"E\" si hay error\n    } else {\n        global.set(\"Status_SIMO_Busq_TLV2\", \"S\"); // Establecer en \"S\" si no hay error\n    }\n\n\n    global.set(\"Ocupacion_SIMO_Busq_TLV2\", 0);            // Ocupación fija\n    global.set(\"Capacidad_SIMO_Busq_TLV2\", 1);            // Capacidad fija\n\n    // Asignar las variables auxiliares para la búsqueda\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Busq_TLV2`, 0);  // Variables auxiliares para la búsqueda en TLV2\n    }\n\n    // Emitir una advertencia para verificar que las variables se han escrito\n    node.warn(\"Variables de búsqueda para TLV2 han sido asignadas correctamente.\");\n\n    // Establecer 'variablesOkTLV2' a true después de escribir las variables\n    flow.set('variablesBusqAutoTLV2Escritas', true);\n     flow.set('variablesOkTLV2', false);\n} else {\n    // Si 'variablesOkTLV2' no está en true, no se realiza ninguna operación\n   // node.warn(\"La variable 'variablesOkTLV2' no está en true, no se realizaron cambios.\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ca8a19775fc15b16",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "g": "0114f79ffdd0a5c8",
        "name": "EscribirVariables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "8362270293b7b13f"
            ]
        ]
    },
    {
        "id": "5af873651d42b57f",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "g": "0114f79ffdd0a5c8",
        "name": "CheckTLV",
        "func": "// Leer las variables del PLC almacenadas en la variable global \"nuevoRegistroTLV2\"\nlet variablesPLC_TLV2 = global.get(\"nuevoRegistroTLV2\");\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC_TLV2 === 'undefined' || variablesPLC_TLV2 === null) {\n    node.error(\"Las variables del PLC para TLV2 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Leer las variables relevantes del PLC\nlet AUTOMATICO = variablesPLC_TLV2[\"AUTOMATICO\"];\nlet OCUPACION = variablesPLC_TLV2[\"OCUPACION\"];\nlet AVERIA = variablesPLC_TLV2[\"AVERIA\"];\nlet estadoActualTLV2 = global.get('stateMachineEventStageEjecutarTareaTLV2') || 0;\nlet pauseScanTLV2 = global.get('pauseScanTLV2') || false;\n// Leer el estado de 'datosListosTLV2'\nlet datosListosTLV2 = global.get('datosListosTLV2') || false;\n\n// Verificar las condiciones de AUTOMATICO, OCUPACION, AVERIA y 'datosListosTLV2'\nif (AUTOMATICO === 0 && OCUPACION === 0 && AVERIA === 0 && datosListosTLV2 === false && estadoActualTLV2 === 10 && pauseScanTLV2 === false) {      //\n   \n    // Verificar si ya hemos comenzado el temporizador\n    let timerStarted = flow.get('timerStartedTLV2') || false;\n    let timeElapsed = flow.get('timeElapsedTLV2') || 0;\n\n    if (!timerStarted) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        flow.set('timerStartedTLV2', true);\n        flow.set('timeElapsedTLV2', Date.now());\n     //   node.warn(\"Temporizador iniciado para TLV2\");\n    } else {\n        // Verificar si han pasado 30 segundos\n        let currentTime = Date.now();\n        let elapsedTime = currentTime - timeElapsed;\n\n        if (elapsedTime >= 20000) {  // 30000 ms = 30 segundos\n            // Cumplimos las condiciones durante 30 segundos, lanzar búsqueda\n            flow.set('lanzarBusquedaTLV2', true);\n          //  node.warn(\"Lanzando búsqueda TLV2\");\n\n            // Reiniciar el temporizador y preparar para lanzar la búsqueda de nuevo\n            flow.set('timeElapsedTLV2', Date.now());\n          //  global.set('lanzarBusquedaTLV2', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    flow.set('timerStartedTLV2', false);\n    flow.set('timeElapsedTLV2', 0);\n  //  flow.set('lanzarBusquedaTLV2', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido para TLV2.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e2a35da0b36d7966",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "g": "0114f79ffdd0a5c8",
        "name": "CheckTLV",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "5af873651d42b57f"
            ]
        ]
    },
    {
        "id": "ac7789cf59bf642d",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "282eecaa43c8d12e",
        "g": "94a7c3547484f718",
        "name": "clock",
        "x": 190,
        "y": 240,
        "wires": [
            [],
            [
                "732c79eba989fdac"
            ],
            [],
            []
        ]
    },
    {
        "id": "c7be950ef8d523fc",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "g": "0114f79ffdd0a5c8",
        "name": "fsm",
        "func": "// Máquina de estados con switch-case para TLV2\n\n    let estadoActual = global.get('stateMachineEventStageBusqAutoTLV2') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n           // global.set('trasloActividadTLV2', false);\n            flow.set('variablesOkTLV2', false);\n           // global.set('TLV2SimoEvent', false);\n            \n            flow.set('variablesBusqAutoTLV2Escritas', false);\n            // Asignar estado\n            global.set('stateMachineEventStageBusqAutoTLV2', 10);\n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventStageBusqAutoTLV2', 10);\n            // Verificar si todos los resets se han hecho correctamente\n    \n                setTimeout(() => {\n                    global.set('stateMachineEventStageBusqAutoTLV2', 20);\n                   \n                }, 500);\n          \n            break;\n\n        case 20: // 20_CheckTrasloActividad\n            global.set('stateMachineEventStageBusqAutoTLV2', 20);\n            // Simula la verificacion de la actividad del Traslo\n          // global.set('trasloActividadTLV2', true);  // Simula que la actividad del Traslo es correcta.\n\n            if (flow.get('lanzarBusquedaTLV2') === true) {\n                //flow.set('lanzarBusquedaTLV2', false);\n                global.set(\"eventoLanzadoTLV-2\", \"none\");\n                global.set('stateMachineEventStageBusqAutoTLV2', 30);\n               \n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventStageBusqAutoTLV2', 30);\n            // Simula la escritura de variables\n            flow.set('variablesOkTLV2', true);  // Marca las variables como escritas correctamente.\n            flow.set('lanzarBusquedaTLV2', false); \n            if (flow.get('variablesBusqAutoTLV2Escritas') === true) {\n                global.set('stateMachineEventStageBusqAutoTLV2', 40);\n               \n            }\n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventStageBusqAutoTLV2', 40);\n            setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV2', 50);\n               \n            }, 500);\n            break;\n\n        case 50: // 50_LanzarEvento\n            global.set('stateMachineEventStageBusqAutoTLV2', 50);\n            // Simula el lanzamiento del evento\n            global.set(\"eventoLanzadoTLV-2\", \"busqueda\");\n            global.set('TLV2SimoEvent', true);  // Establece TLV2SimoEvent como true.\n           // node.warn(\"Evento TLV2 lanzado correctamente.\");\n\n            setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV2', 60);\n               \n            }, 500);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventStageBusqAutoTLV2', 60);\n           // node.warn(\"Verificando el evento TLV2...\");\n          setTimeout(() => {\n              global.set('stateMachineEventStageBusqAutoTLV2', 70);\n               \n            }, 500);\n            break;\n\n        case 70: // 70_EventoOK (Anteriormente 60_EventoOK)\n            global.set('stateMachineEventStageBusqAutoTLV2', 70);\n          // node.warn(\"Estado 70_EventoOK\");\n            setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV2', 900);\n               \n            }, 500);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageBusqAutoTLV2', 900);\n            setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV2', 1000);\n               \n            }, 500);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageBusqAutoTLV2', 1000);\n            setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV2', 0);\n               \n            }, 500);\n            break;\n\n        default:\n          //  node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageBusqAutoTLV2', 0);\n           \n    }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "aec92170c758a545",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "282eecaa43c8d12e",
        "g": "0114f79ffdd0a5c8",
        "name": "clock",
        "x": 190,
        "y": 500,
        "wires": [
            [],
            [
                "c7be950ef8d523fc"
            ],
            [],
            []
        ]
    },
    {
        "id": "124310e270f0cdcc",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "errorExtraccionTLVs",
        "func": "let errorExtraccionTLV1 = global.get(\"errorExtraccionTLV1\") || false;\nlet errorDepositoTLV1 = global.get(\"errorDepositoTLV1\") || false;\nlet errorExtraccionTLV2 = global.get(\"errorExtraccionTLV2\") || false;\nlet errorDepositoTLV2 = global.get(\"errorDepositoTLV2\") || false;\n\n\n\nlet msg1 = { payload: errorExtraccionTLV1 };    // Salida 1: errorExtraccionTLV1\nlet msg2 = { payload: errorDepositoTLV1 };  // Salida 2: errorDepositoTLV1\nlet msg3 = { payload: errorExtraccionTLV2 };    // Salida 1: errorExtraccionTLV2\nlet msg4 = { payload: errorDepositoTLV2 };  // Salida 2: errorDepositoTLV2\n\n\n\n// Retornar las salidas\nreturn [msg1, msg2, msg3, msg4];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "f023db95fa307815"
            ],
            [
                "c4b2ca67e88c1c5a"
            ],
            [
                "ae347c1c73c378f2"
            ],
            [
                "042b08ebfb57bfc2"
            ]
        ]
    },
    {
        "id": "f023db95fa307815",
        "type": "debug",
        "z": "282eecaa43c8d12e",
        "name": "debug 159",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 600,
        "wires": []
    },
    {
        "id": "c4b2ca67e88c1c5a",
        "type": "debug",
        "z": "282eecaa43c8d12e",
        "name": "debug 160",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 640,
        "wires": []
    },
    {
        "id": "ae347c1c73c378f2",
        "type": "debug",
        "z": "282eecaa43c8d12e",
        "name": "debug 161",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 680,
        "wires": []
    },
    {
        "id": "042b08ebfb57bfc2",
        "type": "debug",
        "z": "282eecaa43c8d12e",
        "name": "debug 162",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 720,
        "wires": []
    },
    {
        "id": "a1d3b90dadb3fcf1",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 660,
        "wires": [
            [
                "124310e270f0cdcc"
            ]
        ]
    },
    {
        "id": "d65e5b991a28d524",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "errorDepositoTLV2<<false",
        "func": "global.set(\"errorDepositoTLV2\", false) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "7c490c519725cf93",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 860,
        "wires": [
            [
                "d65e5b991a28d524"
            ]
        ]
    },
    {
        "id": "e8fd975d9a5655ae",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "errorDepositoTLV1<<false",
        "func": "global.set(\"errorDepositoTLV1\", false) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3d9f8d5e6902349f",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 800,
        "wires": [
            [
                "e8fd975d9a5655ae"
            ]
        ]
    },
    {
        "id": "21548fad95e39054",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "errorDepositoTLV2<<true",
        "func": "global.set(\"errorDepositoTLV2\", true) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "e1f7cb5206081286",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 920,
        "wires": [
            [
                "21548fad95e39054"
            ]
        ]
    },
    {
        "id": "732c79eba989fdac",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "g": "94a7c3547484f718",
        "name": "fsm",
        "func": "// Máquina de estados con switch-case para TLV1\n\n    let estadoActual = global.get('stateMachineEventStageBusqAutoTLV1') || 0;\n\n    // Mostrar estado actual en el panel de Node-RED\n    node.status({\n        fill: \"blue\",\n        shape: \"dot\",\n        text: `Estado actual: ${estadoActual}`\n    });\n\n    switch (estadoActual) {\n        case 0: // 00_reposo\n            // Resetear variables\n           // global.set('trasloActividadTLV1', false);\n            flow.set('variablesOkTLV1', false);\n           // global.set('TLV1SimoEvent', false);\n           \n            flow.set('variablesBusqAutoTLV1Escritas', false);\n            // Asignar estado\n            global.set('stateMachineEventStageBusqAutoTLV1', 10);\n          \n            break;\n\n        case 10: // 10_inicio\n            global.set('stateMachineEventStageBusqAutoTLV1', 10);\n            // Verificar si todos los resets se han hecho correctamente\n    \n              //  setTimeout(() => {\n                    global.set('stateMachineEventStageBusqAutoTLV1', 20);\n                   \n              //  }, 500);\n         \n            break;\n\n        case 20: // 20_CheckTrasloActividad\n            global.set('stateMachineEventStageBusqAutoTLV1', 20);\n            // Simula la verificacion de la actividad del Traslo\n          // global.set('trasloActividadTLV1', true);  // Simula que la actividad del Traslo es correcta.\n\n            if (flow.get('lanzarBusquedaTLV1') === true) {\n               // flow.set('lanzarBusquedaTLV1', false);\n                 global.set(\"eventoLanzadoTLV-1\", \"none\");\n                global.set('stateMachineEventStageBusqAutoTLV1', 30);\n               \n            }\n            break;\n\n        case 30: // 30_EscribirVariables\n            global.set('stateMachineEventStageBusqAutoTLV1', 30);\n            // Simula la escritura de variables\n            flow.set('variablesOkTLV1', true);  // Marca las variables como escritas correctamente.\n            flow.set('lanzarBusquedaTLV1', false); \n            if (flow.get('variablesBusqAutoTLV1Escritas') === true) {\n                global.set('stateMachineEventStageBusqAutoTLV1', 40);\n               \n            } \n            break;\n\n        case 40: // 40_VariablesOk\n            global.set('stateMachineEventStageBusqAutoTLV1', 40);\n          //  setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV1', 50);\n               \n          //  }, 500);\n            break;\n\n        case 50: // 50_LanzarEvento\n            global.set('stateMachineEventStageBusqAutoTLV1', 50);\n            // Simula el lanzamiento del evento\n             global.set(\"eventoLanzadoTLV-1\", \"busqueda\");\n             global.set('TLV1SimoEvent', true);  // Establece TLV1SimoEvent como true.\n           // node.warn(\"Evento TLV1 lanzado correctamente.\");\n\n          //  setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV1', 60);\n               \n           // }, 500);\n            break;\n\n        case 60: // 60_VerificarEvento\n            global.set('stateMachineEventStageBusqAutoTLV1', 60);\n           // node.warn(\"Verificando el evento TLV1...\");\n        //  setTimeout(() => {\n              global.set('stateMachineEventStageBusqAutoTLV1', 70);\n               \n          //  }, 500);\n            break;\n\n        case 70: // 70_EventoOK (Anteriormente 60_EventoOK)\n            global.set('stateMachineEventStageBusqAutoTLV1', 70);\n          // node.warn(\"Estado 70_EventoOK\");\n          //  setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV1', 900);\n               \n           // }, 500);\n            break;\n\n        case 900: // 900_RegistrarCiclo\n            global.set('stateMachineEventStageBusqAutoTLV1', 900);\n         //   setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV1', 1000);\n               \n          //  }, 500);\n            break;\n\n        case 1000: // 1000_FinCiclo\n            global.set('stateMachineEventStageBusqAutoTLV1', 1000);\n         //   setTimeout(() => {\n                global.set('stateMachineEventStageBusqAutoTLV1', 0);\n               \n          //  }, 500);\n            break;\n\n        default:\n          //  node.warn(\"Estado desconocido, reiniciando...\");\n            global.set('stateMachineEventStageBusqAutoTLV1', 0);\n           \n    }\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a5fadda39cce90f9",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "pauseScanTLV1-->true",
        "func": "global.set(\"pauseScanTLV1\", true) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c5c35a8f7e45fa3d",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "a5fadda39cce90f9"
            ]
        ]
    },
    {
        "id": "07bdc8092db69838",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "pauseScanTLV2-->true",
        "func": "global.set(\"pauseScanTLV2\", true) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ae1de4a6023ca5a2",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 180,
        "wires": [
            [
                "07bdc8092db69838"
            ]
        ]
    },
    {
        "id": "c1305f97fe57bda5",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "pauseScanTLV1-->false",
        "func": "global.set(\"pauseScanTLV1\", false) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2017c191df081fac",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "c1305f97fe57bda5"
            ]
        ]
    },
    {
        "id": "5692bce2e0a06ba9",
        "type": "function",
        "z": "282eecaa43c8d12e",
        "name": "pauseScanTLV2-->false",
        "func": "global.set(\"pauseScanTLV2\", false) ; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "41c29e263873bd19",
        "type": "inject",
        "z": "282eecaa43c8d12e",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 280,
        "wires": [
            [
                "5692bce2e0a06ba9"
            ]
        ]
    },
    {
        "id": "ef22a84f2b5204c6",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "Telegram",
        "func": "// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + str).slice(-length);\n}\n\n// Obtener la fecha y hora actual del sistema\nvar now = new Date();\nvar DateString = now.getFullYear().toString() + padLeft((now.getMonth() + 1).toString(), 2) + padLeft(now.getDate().toString(), 2);\nvar TimeString = padLeft(now.getHours().toString(), 2) + padLeft(now.getMinutes().toString(), 2) + padLeft(now.getSeconds().toString(), 2) + padLeft(now.getMilliseconds().toString(), 3);\nvar DateTimeString = DateString + TimeString;\n\n// Obtener los datos del telegrama generado previamente\nvar telegramData = msg.payload.telegramData;\n\n// Calcular la longitud de los datos del telegrama\nvar DataLength = padLeft(telegramData.length.toString(), 4);\n\n// Obtener y actualizar el número de secuencia\nvar sequenceNumberTemp = global.get(\"sequenceNumber\");\nsequenceNumberTemp = sequenceNumberTemp + 1;\nglobal.set(\"sequenceNumber\", sequenceNumberTemp);\nvar SequenceString = padLeft(sequenceNumberTemp.toString(), 4);  //sequenceNumber.toString()\n//global.set(\"ExpectedSequenceNumber_SSTS\", sequenceNumber);\n\n// Construir el telegrama completo\nvar Telegram = '#STX';\nTelegram += DataLength;\nTelegram += global.get(\"TelegramID_SIMO\"); \nTelegram +=  global.get(\"Version_SIMO\"); \nTelegram += global.get(\"Origin_SIMO\"); \nTelegram += global.get(\"Destination_SIMO\"); \nTelegram += SequenceString; // Incrementar con cada telegrama enviado\nTelegram += DateTimeString; // Hora actual del sistema\nTelegram += telegramData; // Incluir el telegrama generado previamente\nTelegram += '#ETX';\n\n// Asignar el telegrama completo a msg.payload\nmsg.payload = Telegram;\n// Guardar el telegrama en el contexto global\nglobal.set('originalTelegram', msg.payload);\n\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "5869b0ce1058f802",
                "ae3e4c5ba4bc78a6"
            ]
        ]
    },
    {
        "id": "5869b0ce1058f802",
        "type": "debug",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "Telegram",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "877727982784be48",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "TelegramDataAll",
        "func": "// Función para asegurar que el valor no es undefined o null, si lo es, retorna una cadena vacía\nfunction safeToString(value) {\n    return (value === undefined || value === null) ? '' : value.toString();\n}\n\n// Definir la función para añadir ceros a la izquierda\nfunction padLeft(str, length) {\n    return (Array(length).join('0') + safeToString(str)).slice(-length);\n}\n\n// Definir la función para añadir espacios a la izquierda\nfunction padLeftSpaces(str, length) {\n    return (Array(length).join(' ') + safeToString(str)).slice(-length);\n}\n\n// Definir la función para añadir espacios a la derecha\nfunction padRightSpaces(str, length) {\n    return (safeToString(str) + Array(length).join(' ')).slice(0, length);\n}\n\n// Obtener la variable dinámica de operaciones encadenadas\nvar operacionesEncadenadas = flow.get(\"OperacionesEncadenadas_SIMO\"); // Dinámico: indica qué partes enviar\nglobal.set(\"operacionesEncadenadas\",operacionesEncadenadas);\n\n// Obtener la variable dinámica de equipamiento actual\nvar EquipamientoActual = flow.get(\"Equipamiento_SIMO\"); // Dinámico: indica qué partes enviar\nglobal.set(\"EquipamientoActual\", EquipamientoActual);\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento)\nvar commonData = {\n    NumeroAlmacen: flow.get(\"NumeroAlmacen_SIMO\"),\n    Equipamiento: flow.get(\"Equipamiento_SIMO\") // Rellenar con espacios a la izquierda\n};\n\n// Definir las variables y constantes para el evento\nvar dataSIMO_Event = {\n    CantidadEventos: flow.get(\"CantidadEventos_SIMO_Event\"),\n    TipoEstacion: flow.get(\"TipoEstacion_SIMO_Event\"),\n    NumeroEstacion: flow.get(\"NumeroEstacion_SIMO_Event\"),\n    NumeroMovimiento: flow.get(\"NumeroMovimiento_SIMO_Event\"),\n    TipoEvento: flow.get(\"TipoEvento_SIMO_Event\"),\n    Flags: flow.get(\"Flags_SIMO_Event\"),\n    Datos: flow.get(\"Datos_SIMO_Event\"),\n    Peso: flow.get(\"Peso_SIMO_Event\"),\n    TipoContenedor: flow.get(\"TipoContenedor_SIMO_Event\"),\n    TipoAltura: flow.get(\"TipoAltura_SIMO_Event\"),\n    XLogica: flow.get(\"XLogica_SIMO_Event\"),\n    YLogica: flow.get(\"YLogica_SIMO_Event\"),\n    XLocal: flow.get(\"XLocal_SIMO_Event\"),\n    YLocal: flow.get(\"YLocal_SIMO_Event\"),\n    Lado: flow.get(\"Lado_SIMO_Event\"),\n    Profundidad: flow.get(\"Profundidad_SIMO_Event\"),\n    Pasillo: flow.get(\"Pasillo_SIMO_Event\"),\n    Aux01: flow.get(\"Aux01_SIMO_Event\"),\n    Aux02: flow.get(\"Aux02_SIMO_Event\"),\n    Aux03: flow.get(\"Aux03_SIMO_Event\"),\n    Aux04: flow.get(\"Aux04_SIMO_Event\"),\n    Aux05: flow.get(\"Aux05_SIMO_Event\"),\n    Aux06: flow.get(\"Aux06_SIMO_Event\"),\n    Aux07: flow.get(\"Aux07_SIMO_Event\"),\n    Aux08: flow.get(\"Aux08_SIMO_Event\"),\n    Aux09: flow.get(\"Aux09_SIMO_Event\"),\n    Aux10: flow.get(\"Aux10_SIMO_Event\")\n};\n\n// Definir las variables y constantes para la búsqueda\nvar dataSIMO_Busq = {\n    CantidadMovimientos: flow.get(\"CantidadMovimientos_SIMO_Busq\"),\n    NumeroMovimiento: flow.get(\"NumeroMovimiento_SIMO_Busq\"),\n    TipoEstacion: flow.get(\"TipoEstacion_SIMO_Busq\"),\n    NumeroEstacion: flow.get(\"NumeroEstacion_SIMO_Busq\"),\n    XActual: flow.get(\"XActual_SIMO_Busq\"),\n    YActual: flow.get(\"YActual_SIMO_Busq\"),\n    Lado: flow.get(\"Lado_SIMO_Busq\"),\n    Pasillo: flow.get(\"Pasillo_SIMO_Busq\"),\n    Status: flow.get(\"Status_SIMO_Busq\"),\n    Ocupacion: flow.get(\"Ocupacion_SIMO_Busq\"),\n    Capacidad: flow.get(\"Capacidad_SIMO_Busq\"),\n    Aux01: flow.get(\"Aux01_SIMO_Busq\"),\n    Aux02: flow.get(\"Aux02_SIMO_Busq\"),\n    Aux03: flow.get(\"Aux03_SIMO_Busq\"),\n    Aux04: flow.get(\"Aux04_SIMO_Busq\"),\n    Aux05: flow.get(\"Aux05_SIMO_Busq\"),\n    Aux06: flow.get(\"Aux06_SIMO_Busq\"),\n    Aux07: flow.get(\"Aux07_SIMO_Busq\"),\n    Aux08: flow.get(\"Aux08_SIMO_Busq\")\n};\n\n// Definir las variables y constantes para el fin de movimiento\nvar dataSIMO_FinMovimiento = {\n    CantidadFinesMov: flow.get(\"CantidadFinesMov_SIMO\"),\n    TipoEstacion: flow.get(\"TipoEstacion_SIMO_Fin\"),\n    NumeroEstacion: flow.get(\"NumeroEstacion_SIMO_Fin\"),\n    NumeroMovimiento: flow.get(\"NumeroMovimiento_SIMO_Fin\"),\n    UMA: flow.get(\"UMA_SIMO_Fin\"), // 50 caracteres\n    CodigoError: flow.get(\"CodigoError_SIMO_Fin\"),\n    Auxiliar: flow.get(\"Auxiliar_SIMO_Fin\"),\n    TipoContenedor: flow.get(\"TipoContenedor_SIMO_Fin\"),\n    TipoAltura: flow.get(\"TipoAltura_SIMO_Fin\"),\n    XLogica: flow.get(\"XLogica_SIMO_Fin\"),\n    YLogica: flow.get(\"YLogica_SIMO_Fin\"),\n    XLocal: flow.get(\"XLocal_SIMO_Fin\"),\n    YLocal: flow.get(\"YLocal_SIMO_Fin\"),\n    Lado: flow.get(\"Lado_SIMO_Fin\"),\n    Profundidad: flow.get(\"Profundidad_SIMO_Fin\"),\n    Pasillo: flow.get(\"Pasillo_SIMO_Fin\"),\n    Aux01: flow.get(\"Aux01_SIMO_Fin\"),\n    Aux02: flow.get(\"Aux02_SIMO_Fin\"),\n    Aux03: flow.get(\"Aux03_SIMO_Fin\"),\n    Aux04: flow.get(\"Aux04_SIMO_Fin\"),\n    Aux05: flow.get(\"Aux05_SIMO_Fin\"),\n    Aux06: flow.get(\"Aux06_SIMO_Fin\"),\n    Aux07: flow.get(\"Aux07_SIMO_Fin\"),\n    Aux08: flow.get(\"Aux08_SIMO_Fin\")\n};\n\n// Generar los datos del telegrama\nvar telegramData = \"\";\n\n// **Añadir siempre los datos comunes** (Número Almacén, Equipamiento, Operaciones Encadenadas)\ntelegramData += padLeft(commonData.NumeroAlmacen, 10);\ntelegramData += padLeftSpaces(commonData.Equipamiento, 12); // Rellenar con espacios por la izquierda\ntelegramData += padLeft(operacionesEncadenadas, 1); // Operaciones encadenadas dinámico\n\n// Añadir datos del Evento (si corresponde)\nif (operacionesEncadenadas === 1 || operacionesEncadenadas === 5 || operacionesEncadenadas === 7) {\n    telegramData += padLeft(dataSIMO_Event.CantidadEventos, 4);\n    telegramData += padLeft(dataSIMO_Event.TipoEstacion, 3);\n    telegramData += padLeft(dataSIMO_Event.NumeroEstacion, 3);\n    telegramData += padLeft(dataSIMO_Event.NumeroMovimiento, 10);\n    telegramData += padLeft(dataSIMO_Event.TipoEvento, 3);\n    telegramData += padLeft(dataSIMO_Event.Flags, 10);\n    telegramData += padRightSpaces(dataSIMO_Event.Datos, 256); // Rellenar con espacios a la derecha\n    telegramData += padLeft(dataSIMO_Event.Peso, 10);\n    telegramData += padLeft(dataSIMO_Event.TipoContenedor, 3);\n    telegramData += padLeft(dataSIMO_Event.TipoAltura, 3);\n    telegramData += padLeft(dataSIMO_Event.XLogica, 5);\n    telegramData += padLeft(dataSIMO_Event.YLogica, 5);\n    telegramData += padLeft(dataSIMO_Event.XLocal, 3);\n    telegramData += padLeft(dataSIMO_Event.YLocal, 3);\n    telegramData += padLeft(dataSIMO_Event.Lado, 3);\n    telegramData += padLeft(dataSIMO_Event.Profundidad, 3);\n    telegramData += padLeft(dataSIMO_Event.Pasillo, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux01, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux02, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux03, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux04, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux05, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux06, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux07, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux08, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux09, 3);\n    telegramData += padLeft(dataSIMO_Event.Aux10, 3);\n}\n\n// Añadir datos del Fin de Movimiento (si corresponde)\nif (operacionesEncadenadas === 2 || operacionesEncadenadas === 6 || operacionesEncadenadas === 7) {\n    telegramData += padLeft(dataSIMO_FinMovimiento.CantidadFinesMov, 4);\n    telegramData += padLeft(dataSIMO_FinMovimiento.TipoEstacion, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.NumeroEstacion, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.NumeroMovimiento, 10);\n    telegramData += padLeft(dataSIMO_FinMovimiento.UMA, 50);\n    telegramData += padLeft(dataSIMO_FinMovimiento.CodigoError, 10);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Auxiliar, 10);\n    telegramData += padLeft(dataSIMO_FinMovimiento.TipoContenedor, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.TipoAltura, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.XLogica, 5);\n    telegramData += padLeft(dataSIMO_FinMovimiento.YLogica, 5);\n    telegramData += padLeft(dataSIMO_FinMovimiento.XLocal, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.YLocal, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Lado, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Profundidad, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Pasillo, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux01, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux02, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux03, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux04, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux05, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux06, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux07, 3);\n    telegramData += padLeft(dataSIMO_FinMovimiento.Aux08, 3);\n}\n\n// Añadir datos de la Búsqueda (si corresponde)\nif (operacionesEncadenadas === 4 || operacionesEncadenadas === 5 || operacionesEncadenadas === 6 || operacionesEncadenadas === 7) {\n    telegramData += padLeft(dataSIMO_Busq.CantidadMovimientos, 2); // Ajustado a la imagen\n   // telegramData += padLeft(dataSIMO_Busq.NumeroMovimiento, 10);\n    telegramData += padLeft(dataSIMO_Busq.TipoEstacion, 3);\n    telegramData += padLeft(dataSIMO_Busq.NumeroEstacion, 3);\n    telegramData += padLeft(dataSIMO_Busq.XActual, 5);\n    telegramData += padLeft(dataSIMO_Busq.YActual, 5);\n    telegramData += padLeft(dataSIMO_Busq.Lado, 3);\n    telegramData += padLeft(dataSIMO_Busq.Pasillo, 3);\n    telegramData += padLeft(dataSIMO_Busq.Status, 1);\n    telegramData += padLeft(dataSIMO_Busq.Ocupacion, 3);\n    telegramData += padLeft(dataSIMO_Busq.Capacidad, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux01, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux02, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux03, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux04, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux05, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux06, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux07, 3);\n    telegramData += padLeft(dataSIMO_Busq.Aux08, 3);\n}\n\n// Asignar los datos del telegrama a msg.payload para pasarlos al siguiente nodo\nmsg.payload.telegramData = telegramData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "ef22a84f2b5204c6",
                "db1b762fdbe1dd51"
            ]
        ]
    },
    {
        "id": "9c809ef069f337fa",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "Asignacion",
        "func": "// Obtener la estación que disparó el evento\nlet estacionEvento = global.get(\"eventoDetectadoSIMO_Gen\");\nlet estacionEventoSinNumero = estacionEvento.replace(/\\d+$/, '');  // Remueve el número al final, ej. \"PIE1\" -> \"PIE\"\nglobal.set(\"estacionEventoSinNumeroSimo\", estacionEventoSinNumero);\n\n// Lista de estaciones disponibles\nconst estaciones = [\n  'PIE1', 'PIE1',   'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n  'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n  'TLV1', 'TLV2', 'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n  'PIS1', 'PIS2', 'PIS3',\n  'REJ1'\n];\n\n// Verificar si la estación está en la lista de estaciones\nif (estaciones.includes(estacionEvento)) {\n     // **General**\n  let operacionesEncadenadas = global.get(`OperacionesEncadenadas_SIMO_${estacionEvento}`);  // Tipo de estación\n  let numeroAlmacen = global.get(`NumeroAlmacen_SIMO_${estacionEvento}`);  // Número de la estación\n  let equipamiento = global.get(`Equipamiento_SIMO_${estacionEvento}`);  // Cantidad de eventos\n \n    \n  // **Evento**\n  let tipoEstacion = global.get(`TipoEstacion_SIMO_Event_${estacionEvento}`);  // Tipo de estación\n  let numeroEstacion = global.get(`NumeroEstacion_SIMO_Event_${estacionEvento}`);  // Número de la estación\n  let cantidadEventos = global.get(`CantidadEventos_SIMO_Event_${estacionEvento}`);  // Cantidad de eventos\n  let numeroMovimiento = global.get(`NumeroMovimiento_SIMO_Event_${estacionEvento}`);  // Número de movimiento\n  let tipoEvento = global.get(`TipoEvento_SIMO_Event_${estacionEvento}`);  // Tipo de evento\n  let flags = global.get(`Flags_SIMO_Event_${estacionEvento}`);  // Flags\n  let datos = global.get(`Datos_SIMO_Event_${estacionEvento}`);  // Datos del evento\n  let peso = global.get(`Peso_SIMO_Event_${estacionEvento}`);  // Peso\n  let tipoContenedor = global.get(`TipoContenedor_SIMO_Event_${estacionEvento}`);  // Tipo de contenedor\n  let tipoAltura = global.get(`TipoAltura_SIMO_Event_${estacionEvento}`);  // Tipo de altura\n  let xLogica = global.get(`XLogica_SIMO_Event_${estacionEvento}`);  // Coordenada X lógica\n  let yLogica = global.get(`YLogica_SIMO_Event_${estacionEvento}`);  // Coordenada Y lógica\n  let xLocal = global.get(`XLocal_SIMO_Event_${estacionEvento}`);  // Coordenada X local\n  let yLocal = global.get(`YLocal_SIMO_Event_${estacionEvento}`);  // Coordenada Y local\n  let lado = global.get(`Lado_SIMO_Event_${estacionEvento}`);  // Lado\n  let profundidad = global.get(`Profundidad_SIMO_Event_${estacionEvento}`);  // Profundidad\n  let pasillo = global.get(`Pasillo_SIMO_Event_${estacionEvento}`);  // Pasillo\n  let aux01 = global.get(`Aux01_SIMO_Event_${estacionEvento}`);  // Auxiliar 01\n  let aux02 = global.get(`Aux02_SIMO_Event_${estacionEvento}`);  // Auxiliar 02\n  let aux03 = global.get(`Aux03_SIMO_Event_${estacionEvento}`);  // Auxiliar 03\n  let aux04 = global.get(`Aux04_SIMO_Event_${estacionEvento}`);  // Auxiliar 04\n  let aux05 = global.get(`Aux05_SIMO_Event_${estacionEvento}`);  // Auxiliar 05\n  let aux06 = global.get(`Aux06_SIMO_Event_${estacionEvento}`);  // Auxiliar 06\n  let aux07 = global.get(`Aux07_SIMO_Event_${estacionEvento}`);  // Auxiliar 07\n  let aux08 = global.get(`Aux08_SIMO_Event_${estacionEvento}`);  // Auxiliar 08\n  let aux09 = global.get(`Aux09_SIMO_Event_${estacionEvento}`);  // Auxiliar 07\n  let aux10 = global.get(`Aux010_SIMO_Event_${estacionEvento}`);  // Auxiliar 08\n\n\n  // Asignar los valores a las variables de flujo para el evento\n  \n  flow.set(\"OperacionesEncadenadas_SIMO\", operacionesEncadenadas);\n  flow.set(\"NumeroAlmacen_SIMO\", numeroAlmacen);\n  flow.set(\"Equipamiento_SIMO\", equipamiento);\n  \n  flow.set(\"TipoEstacion_SIMO_Event\", tipoEstacion);\n  flow.set(\"NumeroEstacion_SIMO_Event\", numeroEstacion);\n  flow.set(\"CantidadEventos_SIMO_Event\", cantidadEventos);\n  flow.set(\"NumeroMovimiento_SIMO_Event\", numeroMovimiento);\n  flow.set(\"TipoEvento_SIMO_Event\", tipoEvento);\n  flow.set(\"Flags_SIMO_Event\", flags);\n  flow.set(\"Datos_SIMO_Event\", datos);\n  flow.set(\"Peso_SIMO_Event\", peso);\n  flow.set(\"TipoContenedor_SIMO_Event\", tipoContenedor);\n  flow.set(\"TipoAltura_SIMO_Event\", tipoAltura);\n  flow.set(\"XLogica_SIMO_Event\", xLogica);\n  flow.set(\"YLogica_SIMO_Event\", yLogica);\n  flow.set(\"XLocal_SIMO_Event\", xLocal);\n  flow.set(\"YLocal_SIMO_Event\", yLocal);\n  flow.set(\"Lado_SIMO_Event\", lado);\n  flow.set(\"Profundidad_SIMO_Event\", profundidad);\n  flow.set(\"Pasillo_SIMO_Event\", pasillo);\n  flow.set(\"Aux01_SIMO_Event\", aux01);\n  flow.set(\"Aux02_SIMO_Event\", aux02);\n  flow.set(\"Aux03_SIMO_Event\", aux03);\n  flow.set(\"Aux04_SIMO_Event\", aux04);\n  flow.set(\"Aux05_SIMO_Event\", aux05);\n  flow.set(\"Aux06_SIMO_Event\", aux06);\n  flow.set(\"Aux07_SIMO_Event\", aux07);\n  flow.set(\"Aux08_SIMO_Event\", aux08);\n  flow.set(\"Aux09_SIMO_Event\", aux09);\n  flow.set(\"Aux10_SIMO_Event\", aux10);\n\n  // **Búsqueda**\n  let cantidadMovimientos = global.get(`CantidadMovimientos_SIMO_Busq_${estacionEvento}`);\n  let tipoEstacionBusq = global.get(`TipoEstacion_SIMO_Busq_${estacionEvento}`);\n  let numeroEstacionBusq = global.get(`NumeroEstacion_SIMO_Busq_${estacionEvento}`);\n  let numeroMovimientoBusq = global.get(`NumeroMovimiento_SIMO_Busq_${estacionEvento}`);\n  let xActual = global.get(`XActual_SIMO_Busq_${estacionEvento}`);\n  let yActual = global.get(`YActual_SIMO_Busq_${estacionEvento}`);\n  let ladoBusq = global.get(`Lado_SIMO_Busq_${estacionEvento}`);\n  let pasilloBusq = global.get(`Pasillo_SIMO_Busq_${estacionEvento}`);\n  let statusBusq = global.get(`Status_SIMO_Busq_${estacionEvento}`);\n  let ocupacionBusq = global.get(`Ocupacion_SIMO_Busq_${estacionEvento}`);\n  let capacidadBusq = global.get(`Capacidad_SIMO_Busq_${estacionEvento}`);\n  let aux01Busq = global.get(`Aux01_SIMO_Busq_${estacionEvento}`);\n  let aux02Busq = global.get(`Aux02_SIMO_Busq_${estacionEvento}`);\n  let aux03Busq = global.get(`Aux03_SIMO_Busq_${estacionEvento}`);\n  let aux04Busq = global.get(`Aux04_SIMO_Busq_${estacionEvento}`);\n  let aux05Busq = global.get(`Aux05_SIMO_Busq_${estacionEvento}`);\n  let aux06Busq = global.get(`Aux06_SIMO_Busq_${estacionEvento}`);\n  let aux07Busq = global.get(`Aux07_SIMO_Busq_${estacionEvento}`);\n  let aux08Busq = global.get(`Aux08_SIMO_Busq_${estacionEvento}`);\n  \n  \n  // Asignar los valores a las variables de flujo para la búsqueda\n  flow.set(\"CantidadMovimientos_SIMO_Busq\", cantidadMovimientos);\n  flow.set(\"TipoEstacion_SIMO_Busq\", tipoEstacionBusq);\n  flow.set(\"NumeroEstacion_SIMO_Busq\", numeroEstacionBusq);\n  flow.set(\"NumeroMovimiento_SIMO_Busq\", numeroMovimientoBusq);\n  flow.set(\"XActual_SIMO_Busq\", xActual);\n  flow.set(\"YActual_SIMO_Busq\", yActual);\n  flow.set(\"Lado_SIMO_Busq\", ladoBusq);\n  flow.set(\"Pasillo_SIMO_Busq\", pasilloBusq);\n  flow.set(\"Status_SIMO_Busq\", statusBusq);\n  flow.set(\"Ocupacion_SIMO_Busq\", ocupacionBusq);\n  flow.set(\"Capacidad_SIMO_Busq\", capacidadBusq);\n  flow.set(\"Aux01_SIMO_Busq\", aux01Busq);\n  flow.set(\"Aux02_SIMO_Busq\", aux02Busq);\n  flow.set(\"Aux03_SIMO_Busq\", aux03Busq);\n  flow.set(\"Aux04_SIMO_Busq\", aux04Busq);\n  flow.set(\"Aux05_SIMO_Busq\", aux05Busq);\n  flow.set(\"Aux06_SIMO_Busq\", aux06Busq);\n  flow.set(\"Aux07_SIMO_Busq\", aux07Busq);\n  flow.set(\"Aux08_SIMO_Busq\", aux08Busq);\n\n  // **Fin de Movimiento**\n  let cantidadFinesMov = global.get(`CantidadFinesMov_SIMO_${estacionEvento}`);\n  let tipoEstacionFin = global.get(`TipoEstacion_SIMO_Fin_${estacionEvento}`);\n  let numeroEstacionFin = global.get(`NumeroEstacion_SIMO_Fin_${estacionEvento}`);\n  let numeroMovimientoFin = global.get(`NumeroMovimiento_SIMO_Fin_${estacionEvento}`);\n  let umaFin = global.get(`UMA_SIMO_Fin_${estacionEvento}`);\n  let codigoErrorFin = global.get(`CodigoError_SIMO_Fin_${estacionEvento}`);\n  let auxiliarFin = global.get(`Auxiliar_SIMO_Fin_${estacionEvento}`);\n  let tipoContenedorFin = global.get(`TipoContenedor_SIMO_Fin_${estacionEvento}`);\n  let tipoAlturaFin = global.get(`TipoAltura_SIMO_Fin_${estacionEvento}`);\n  let xLogicaFin = global.get(`XLogica_SIMO_Fin_${estacionEvento}`);\n  let yLogicaFin = global.get(`YLogica_SIMO_Fin_${estacionEvento}`);\n  let xLocalFin = global.get(`XLocal_SIMO_Fin_${estacionEvento}`);\n  let yLocalFin = global.get(`YLocal_SIMO_Fin_${estacionEvento}`);\n  let ladoFin = global.get(`Lado_SIMO_Fin_${estacionEvento}`);\n  let profundidadFin = global.get(`Profundidad_SIMO_Fin_${estacionEvento}`);\n  let pasilloFin = global.get(`Pasillo_SIMO_Fin_${estacionEvento}`);\n  let aux01Fin = global.get(`Aux01_SIMO_Fin_${estacionEvento}`);\n  let aux02Fin = global.get(`Aux02_SIMO_Fin_${estacionEvento}`);\n  let aux03Fin = global.get(`Aux03_SIMO_Fin_${estacionEvento}`);\n  let aux04Fin = global.get(`Aux04_SIMO_Fin_${estacionEvento}`);\n  let aux05Fin = global.get(`Aux05_SIMO_Fin_${estacionEvento}`);\n  let aux06Fin = global.get(`Aux06_SIMO_Fin_${estacionEvento}`);\n  let aux07Fin = global.get(`Aux07_SIMO_Fin_${estacionEvento}`);\n  let aux08Fin = global.get(`Aux08_SIMO_Fin_${estacionEvento}`);  \n  \n  \n\n  // Asignar los valores a las variables de flujo para el fin de movimiento\n  flow.set(\"CantidadFinesMov_SIMO\", cantidadFinesMov);\n  flow.set(\"TipoEstacion_SIMO_Fin\", tipoEstacionFin);\n  flow.set(\"NumeroEstacion_SIMO_Fin\", numeroEstacionFin);\n  flow.set(\"NumeroMovimiento_SIMO_Fin\", numeroMovimientoFin);\n  flow.set(\"UMA_SIMO_Fin\", umaFin);\n  flow.set(\"CodigoError_SIMO_Fin\", codigoErrorFin);\n  flow.set(\"Auxiliar_SIMO_Fin\", auxiliarFin);\n  flow.set(\"TipoContenedor_SIMO_Fin\", tipoContenedorFin);\n  flow.set(\"TipoAltura_SIMO_Fin\", tipoAlturaFin);\n  flow.set(\"XLogica_SIMO_Fin\", xLogicaFin);\n  flow.set(\"YLogica_SIMO_Fin\", yLogicaFin);\n  flow.set(\"XLocal_SIMO_Fin\", xLocalFin);\n  flow.set(\"YLocal_SIMO_Fin\", yLocalFin);\n  flow.set(\"Lado_SIMO_Fin\", ladoFin);\n  flow.set(\"Profundidad_SIMO_Fin\", profundidadFin);\n  flow.set(\"Pasillo_SIMO_Fin\", pasilloFin);\n  flow.set(\"Aux01_SIMO_Fin\", aux01Fin);\n  flow.set(\"Aux02_SIMO_Fin\", aux02Fin);\n  flow.set(\"Aux03_SIMO_Fin\", aux03Fin);\n  flow.set(\"Aux04_SIMO_Fin\", aux04Fin);\n  flow.set(\"Aux05_SIMO_Fin\", aux05Fin);\n  flow.set(\"Aux06_SIMO_Fin\", aux06Fin);\n  flow.set(\"Aux07_SIMO_Fin\", aux07Fin);\n  flow.set(\"Aux08_SIMO_Fin\", aux08Fin);  \n  \n  \n  \n  \n \n\n//  node.warn(`Variables de la estación ${estacionEvento} actualizadas en el flujo para Evento, Búsqueda y Fin de Movimiento`);\n\n} else {\n  // Si la estación no está en la lista, asignar valores predeterminados para el evento, búsqueda y fin de movimiento\n  flow.set(\"TipoEstacion_SIMO_Event\", 0);\n  flow.set(\"NumeroEstacion_SIMO_Event\", 0);\n  flow.set(\"CantidadEventos_SIMO_Event\", 0);\n  flow.set(\"NumeroMovimiento_SIMO_Event\", 0);\n  flow.set(\"TipoEvento_SIMO_Event\", 0);\n  flow.set(\"Flags_SIMO_Event\", 0);\n  flow.set(\"Datos_SIMO_Event\", \"\");\n  flow.set(\"Peso_SIMO_Event\", 0);\n  flow.set(\"TipoContenedor_SIMO_Event\", 0);\n  flow.set(\"TipoAltura_SIMO_Event\", 0);\n  flow.set(\"XLogica_SIMO_Event\", 0);\n  flow.set(\"YLogica_SIMO_Event\", 0);\n  flow.set(\"XLocal_SIMO_Event\", 0);\n  flow.set(\"YLocal_SIMO_Event\", 0);\n  flow.set(\"Lado_SIMO_Event\", 0);\n  flow.set(\"Profundidad_SIMO_Event\", 0);\n  flow.set(\"Pasillo_SIMO_Event\", 0);\n  flow.set(\"Aux01_SIMO_Event\", 0);\n  flow.set(\"Aux02_SIMO_Event\", 0);\n  flow.set(\"Aux03_SIMO_Event\", 0);\nflow.set(\"Aux04_SIMO_Event\", 0);\nflow.set(\"Aux05_SIMO_Event\", 0);\nflow.set(\"Aux06_SIMO_Event\", 0);\nflow.set(\"Aux07_SIMO_Event\", 0);\nflow.set(\"Aux08_SIMO_Event\", 0);\nflow.set(\"Aux09_SIMO_Event\", 0);\nflow.set(\"Aux10_SIMO_Event\", 0);\n\n  flow.set(\"CantidadMovimientos_SIMO_Busq\", 0);\n  flow.set(\"TipoEstacion_SIMO_Busq\", 0);\n  flow.set(\"NumeroEstacion_SIMO_Busq\", 0);\n  flow.set(\"NumeroMovimiento_SIMO_Busq\", 0);\n  flow.set(\"XActual_SIMO_Busq\", 0);\n  flow.set(\"YActual_SIMO_Busq\", 0);\n  flow.set(\"Lado_SIMO_Busq\", 0);\n  flow.set(\"Pasillo_SIMO_Busq\", 0);\n  flow.set(\"Status_SIMO_Busq\", 0);\n  flow.set(\"Ocupacion_SIMO_Busq\", 0);\n  flow.set(\"Capacidad_SIMO_Busq\", 0);\n  flow.set(\"Aux01_SIMO_Busq\", 0);\n  flow.set(\"Aux02_SIMO_Busq\", 0);\n  flow.set(\"Aux03_SIMO_Busq\", 0);\nflow.set(\"Aux04_SIMO_Busq\", 0);\nflow.set(\"Aux05_SIMO_Busq\", 0);\nflow.set(\"Aux06_SIMO_Busq\", 0);\nflow.set(\"Aux07_SIMO_Busq\", 0);\nflow.set(\"Aux08_SIMO_Busq\", 0);\n\n  flow.set(\"CantidadFinesMov_SIMO\", 0);\n  flow.set(\"TipoEstacion_SIMO_Fin\", 0);\n  flow.set(\"NumeroEstacion_SIMO_Fin\", 0);\n  flow.set(\"NumeroMovimiento_SIMO_Fin\", 0);\n  flow.set(\"UMA_SIMO_Fin\", \"\");\n  flow.set(\"CodigoError_SIMO_Fin\", 0);\n  flow.set(\"Auxiliar_SIMO_Fin\", 0);\n  flow.set(\"TipoContenedor_SIMO_Fin\", 0);\n  flow.set(\"TipoAltura_SIMO_Fin\", 0);\n  flow.set(\"XLogica_SIMO_Fin\", 0);\n  flow.set(\"YLogica_SIMO_Fin\", 0);\n  flow.set(\"XLocal_SIMO_Fin\", 0);\n  flow.set(\"YLocal_SIMO_Fin\", 0);\n  flow.set(\"Lado_SIMO_Fin\", 0);\n  flow.set(\"Profundidad_SIMO_Fin\", 0);\n  flow.set(\"Pasillo_SIMO_Fin\", 0);\n  flow.set(\"Aux01_SIMO_Fin\", 0);\nflow.set(\"Aux02_SIMO_Fin\", 0);\nflow.set(\"Aux03_SIMO_Fin\", 0);\nflow.set(\"Aux04_SIMO_Fin\", 0);\nflow.set(\"Aux05_SIMO_Fin\", 0);\nflow.set(\"Aux06_SIMO_Fin\", 0);\nflow.set(\"Aux07_SIMO_Fin\", 0);\nflow.set(\"Aux08_SIMO_Fin\", 0);\n\n  node.warn(\"No se detectó un evento o la estación no es válida\");\n}\n\n// Reseteamos la variable para evitar múltiples disparos\nglobal.set('eventoDetectadoSIMO_Gen', false);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 240,
        "wires": [
            [
                "60656ca6d4413ecd"
            ]
        ]
    },
    {
        "id": "60656ca6d4413ecd",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "SIMO_St",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "877727982784be48"
            ]
        ]
    },
    {
        "id": "7ed2cf725ae39203",
        "type": "inject",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "60656ca6d4413ecd"
            ]
        ]
    },
    {
        "id": "e3623dd90d0f5161",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "Start",
        "func": "let eventoDetectadoSIMO_Gen = global.get('eventoDetectadoSIMO_Gen') || false;\nconst estaciones = [\n    'PIE1', 'PIE1', 'PEP1', 'PEP2', 'PEP3', 'PEP4', 'PEP5', 'PEP6', 'PEP7', 'PEP8', 'PEP9', 'PEP10', 'PEP11', 'PEP12',\n    'PSP1', 'PSP2', 'PSP3', 'PSP4', 'PSP5', 'PSP6', 'PSP7', 'PSP8', 'PSP9', 'PSP10', 'PSP11', 'PSP12',\n    'TLV1', 'TLV2', 'Pasillos1', 'Pasillos2', 'Pasillos3', 'Pasillos4', 'Pasillos5', 'Pasillos6', 'Pasillos7', 'Pasillos8',\n    'PIS1', 'PIS2', 'PIS3','REJ1'\n];\n\n// Verificamos si la variable eventoDetectadoSSTS_Gen ha cambiado de false a una estación válida\nif (eventoDetectadoSIMO_Gen !== false && estaciones.includes(eventoDetectadoSIMO_Gen)) {//\n     global.set('mensajeCompletado', false); \n    msg.payload = {};  // Disparamos el flujo SSTS para la estación detectada\n    \n    // Reseteamos la variable global que ha disparado el evento (por ejemplo, PEP1SstsEvent)\n  global.set(`${eventoDetectadoSIMO_Gen}SimoEvent`, false);\n    \n   // global.set('eventoDetectadoSSTS_Gen', false);  // Reseteamos la variable para evitar múltiples disparos\n} else {\n    msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "9c809ef069f337fa"
            ]
        ]
    },
    {
        "id": "d4503e9b869e2326",
        "type": "subflow:b4cd349f4176f6d7",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "100ms",
        "x": 110,
        "y": 300,
        "wires": [
            [],
            [
                "e3623dd90d0f5161"
            ],
            [],
            []
        ]
    },
    {
        "id": "61044664b949e6c1",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "dataSIMO_Event",
        "func": "// Leer las variables de flujo para el Evento\nlet dataSIMO_Event = {\n    CantidadEventos: flow.get(\"CantidadEventos_SIMO_Event\"),\n    TipoEstacion: flow.get(\"TipoEstacion_SIMO_Event\"),\n    NumeroEstacion: flow.get(\"NumeroEstacion_SIMO_Event\"),\n    NumeroMovimiento: flow.get(\"NumeroMovimiento_SIMO_Event\"),\n    TipoEvento: flow.get(\"TipoEvento_SIMO_Event\"),\n    Flags: flow.get(\"Flags_SIMO_Event\"),\n    Datos: flow.get(\"Datos_SIMO_Event\"),\n    Peso: flow.get(\"Peso_SIMO_Event\"),\n    TipoContenedor: flow.get(\"TipoContenedor_SIMO_Event\"),\n    TipoAltura: flow.get(\"TipoAltura_SIMO_Event\"),\n    XLogica: flow.get(\"XLogica_SIMO_Event\"),\n    YLogica: flow.get(\"YLogica_SIMO_Event\"),\n    XLocal: flow.get(\"XLocal_SIMO_Event\"),\n    YLocal: flow.get(\"YLocal_SIMO_Event\"),\n    Lado: flow.get(\"Lado_SIMO_Event\"),\n    Profundidad: flow.get(\"Profundidad_SIMO_Event\"),\n    Pasillo: flow.get(\"Pasillo_SIMO_Event\"),\n    Aux01: flow.get(\"Aux01_SIMO_Event\"),\n    Aux02: flow.get(\"Aux02_SIMO_Event\"),\n    Aux03: flow.get(\"Aux03_SIMO_Event\"),\n    Aux04: flow.get(\"Aux04_SIMO_Event\"),\n    Aux05: flow.get(\"Aux05_SIMO_Event\"),\n    Aux06: flow.get(\"Aux06_SIMO_Event\"),\n    Aux07: flow.get(\"Aux07_SIMO_Event\"),\n    Aux08: flow.get(\"Aux08_SIMO_Event\"),\n    Aux09: flow.get(\"Aux09_SIMO_Event\"),\n    Aux10: flow.get(\"Aux10_SIMO_Event\")\n};\n\n// Leer las variables de flujo para la Búsqueda\nlet dataSIMO_Busq = {\n    CantidadMovimientos: flow.get(\"CantidadMovimientos_SIMO_Busq\"),\n    TipoEstacion: flow.get(\"TipoEstacion_SIMO_Busq\"),\n    NumeroEstacion: flow.get(\"NumeroEstacion_SIMO_Busq\"),\n    NumeroMovimiento: flow.get(\"NumeroMovimiento_SIMO_Busq\"),\n    XActual: flow.get(\"XActual_SIMO_Busq\"),\n    YActual: flow.get(\"YActual_SIMO_Busq\"),\n    Lado: flow.get(\"Lado_SIMO_Busq\"),\n    Pasillo: flow.get(\"Pasillo_SIMO_Busq\"),\n    Status: flow.get(\"Status_SIMO_Busq\"),\n    Ocupacion: flow.get(\"Ocupacion_SIMO_Busq\"),\n    Capacidad: flow.get(\"Capacidad_SIMO_Busq\"),\n    Aux01: flow.get(\"Aux01_SIMO_Busq\"),\n    Aux02: flow.get(\"Aux02_SIMO_Busq\"),\n    Aux03: flow.get(\"Aux03_SIMO_Busq\"),\n    Aux04: flow.get(\"Aux04_SIMO_Busq\"),\n    Aux05: flow.get(\"Aux05_SIMO_Busq\"),\n    Aux06: flow.get(\"Aux06_SIMO_Busq\"),\n    Aux07: flow.get(\"Aux07_SIMO_Busq\"),\n    Aux08: flow.get(\"Aux08_SIMO_Busq\")\n};\n\n// Leer las variables de flujo para el Fin de Movimiento\nlet dataSIMO_FinMovimiento = {\n    CantidadFinesMov: flow.get(\"CantidadFinesMov_SIMO\"),\n    TipoEstacion: flow.get(\"TipoEstacion_SIMO_Fin\"),\n    NumeroEstacion: flow.get(\"NumeroEstacion_SIMO_Fin\"),\n    NumeroMovimiento: flow.get(\"NumeroMovimiento_SIMO_Fin\"),\n    UMA: flow.get(\"UMA_SIMO_Fin\"),\n    CodigoError: flow.get(\"CodigoError_SIMO_Fin\"),\n    Auxiliar: flow.get(\"Auxiliar_SIMO_Fin\"),\n    TipoContenedor: flow.get(\"TipoContenedor_SIMO_Fin\"),\n    TipoAltura: flow.get(\"TipoAltura_SIMO_Fin\"),\n    XLogica: flow.get(\"XLogica_SIMO_Fin\"),\n    YLogica: flow.get(\"YLogica_SIMO_Fin\"),\n    XLocal: flow.get(\"XLocal_SIMO_Fin\"),\n    YLocal: flow.get(\"YLocal_SIMO_Fin\"),\n    Lado: flow.get(\"Lado_SIMO_Fin\"),\n    Profundidad: flow.get(\"Profundidad_SIMO_Fin\"),\n    Pasillo: flow.get(\"Pasillo_SIMO_Fin\"),\n    Aux01: flow.get(\"Aux01_SIMO_Fin\"),\n    Aux02: flow.get(\"Aux02_SIMO_Fin\"),\n    Aux03: flow.get(\"Aux03_SIMO_Fin\"),\n    Aux04: flow.get(\"Aux04_SIMO_Fin\")\n};\n\n// Crear un objeto para enviar al debug que combine los datos del Evento, Búsqueda y Fin de Movimiento\nmsg.payload = {\n    Evento: dataSIMO_Event,\n    Busqueda: dataSIMO_Busq,\n    FinMovimiento: dataSIMO_FinMovimiento\n};\n\n// Enviar al nodo de depuración (debug)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "079ce06a454ad8b0"
            ]
        ]
    },
    {
        "id": "767edb207210a950",
        "type": "inject",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "61044664b949e6c1",
                "c3e2dbdc518a9486",
                "451f224be3acb151"
            ]
        ]
    },
    {
        "id": "079ce06a454ad8b0",
        "type": "debug",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 440,
        "wires": []
    },
    {
        "id": "c3e2dbdc518a9486",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "eventoDetectadoSIMO_Gen",
        "func": "msg.payload = global.get('eventoDetectadoSIMO_Gen') || false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "5f14aee18a3f1f2f"
            ]
        ]
    },
    {
        "id": "5f14aee18a3f1f2f",
        "type": "debug",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 400,
        "wires": []
    },
    {
        "id": "451f224be3acb151",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "estacionEventoSinNumeroSimo",
        "func": "msg.payload = global.get('estacionEventoSinNumeroSimo') || false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "2183bfe5139f7566"
            ]
        ]
    },
    {
        "id": "2183bfe5139f7566",
        "type": "debug",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 480,
        "wires": []
    },
    {
        "id": "769edaab104d90fe",
        "type": "function",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "DefinicionVar",
        "func": "// Inicializar las variables de flujo para el Evento\nflow.set(\"CantidadEventos_SIMO_Event\", 0);\nflow.set(\"TipoEstacion_SIMO_Event\", 0);\nflow.set(\"NumeroEstacion_SIMO_Event\", 0);\nflow.set(\"NumeroMovimiento_SIMO_Event\", 0);\nflow.set(\"TipoEvento_SIMO_Event\", 0);\nflow.set(\"Flags_SIMO_Event\", 0);\nflow.set(\"Datos_SIMO_Event\", \"\");\nflow.set(\"Peso_SIMO_Event\", 0);\nflow.set(\"TipoContenedor_SIMO_Event\", 0);\nflow.set(\"TipoAltura_SIMO_Event\", 0);\nflow.set(\"XLogica_SIMO_Event\", 0);\nflow.set(\"YLogica_SIMO_Event\", 0);\nflow.set(\"XLocal_SIMO_Event\", 0);\nflow.set(\"YLocal_SIMO_Event\", 0);\nflow.set(\"Lado_SIMO_Event\", 0);\nflow.set(\"Profundidad_SIMO_Event\", 0);\nflow.set(\"Pasillo_SIMO_Event\", 0);\nflow.set(\"Aux01_SIMO_Event\", 0);\nflow.set(\"Aux02_SIMO_Event\", 0);\nflow.set(\"Aux03_SIMO_Event\", 0);\nflow.set(\"Aux04_SIMO_Event\", 0);\nflow.set(\"Aux05_SIMO_Event\", 0);\nflow.set(\"Aux06_SIMO_Event\", 0);\nflow.set(\"Aux07_SIMO_Event\", 0);\nflow.set(\"Aux08_SIMO_Event\", 0);\nflow.set(\"Aux09_SIMO_Event\", 0);\nflow.set(\"Aux10_SIMO_Event\", 0);\n\n// Inicializar las variables de flujo para la Búsqueda\nflow.set(\"CantidadMovimientos_SIMO_Busq\", 0);\nflow.set(\"TipoEstacion_SIMO_Busq\", 0);\nflow.set(\"NumeroEstacion_SIMO_Busq\", 0);\nflow.set(\"NumeroMovimiento_SIMO_Busq\", 0);\nflow.set(\"XActual_SIMO_Busq\", 0);\nflow.set(\"YActual_SIMO_Busq\", 0);\nflow.set(\"Lado_SIMO_Busq\", 0);\nflow.set(\"Pasillo_SIMO_Busq\", 0);\nflow.set(\"Status_SIMO_Busq\", 0);\nflow.set(\"Ocupacion_SIMO_Busq\", 0);\nflow.set(\"Capacidad_SIMO_Busq\", 0);\nflow.set(\"Aux01_SIMO_Busq\", 0);\nflow.set(\"Aux02_SIMO_Busq\", 0);\nflow.set(\"Aux03_SIMO_Busq\", 0);\nflow.set(\"Aux04_SIMO_Busq\", 0);\nflow.set(\"Aux05_SIMO_Busq\", 0);\nflow.set(\"Aux06_SIMO_Busq\", 0);\nflow.set(\"Aux07_SIMO_Busq\", 0);\nflow.set(\"Aux08_SIMO_Busq\", 0);\n\n// Inicializar las variables de flujo para el Fin de Movimiento\nflow.set(\"CantidadFinesMov_SIMO\", 0);\nflow.set(\"TipoEstacion_SIMO_Fin\", 0);\nflow.set(\"NumeroEstacion_SIMO_Fin\", 0);\nflow.set(\"NumeroMovimiento_SIMO_Fin\", 0);\nflow.set(\"UMA_SIMO_Fin\", \"\");\nflow.set(\"CodigoError_SIMO_Fin\", 0);\nflow.set(\"Auxiliar_SIMO_Fin\", 0);\nflow.set(\"TipoContenedor_SIMO_Fin\", 0);\nflow.set(\"TipoAltura_SIMO_Fin\", 0);\nflow.set(\"XLogica_SIMO_Fin\", 0);\nflow.set(\"YLogica_SIMO_Fin\", 0);\nflow.set(\"XLocal_SIMO_Fin\", 0);\nflow.set(\"YLocal_SIMO_Fin\", 0);\nflow.set(\"Lado_SIMO_Fin\", 0);\nflow.set(\"Profundidad_SIMO_Fin\", 0);\nflow.set(\"Pasillo_SIMO_Fin\", 0);\nflow.set(\"Aux01_SIMO_Fin\", 0);\nflow.set(\"Aux02_SIMO_Fin\", 0);\nflow.set(\"Aux03_SIMO_Fin\", 0);\nflow.set(\"Aux04_SIMO_Fin\", 0);\nflow.set(\"Aux05_SIMO_Fin\", 0);\nflow.set(\"Aux06_SIMO_Fin\", 0);\nflow.set(\"Aux07_SIMO_Fin\", 0);\nflow.set(\"Aux08_SIMO_Fin\", 0);\n\n\n// Mensaje de inicialización\nnode.warn(\"Variables de flujo SIMO inicializadas correctamente.\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "77174f2f5f5b4beb",
        "type": "inject",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "DefinicionVar",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "769edaab104d90fe"
            ]
        ]
    },
    {
        "id": "db1b762fdbe1dd51",
        "type": "debug",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "TelegramData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "ae3e4c5ba4bc78a6",
        "type": "link out",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "SIMO_Out",
        "mode": "link",
        "links": [
            "74d54e0a046552d3"
        ],
        "x": 1015,
        "y": 240,
        "wires": []
    },
    {
        "id": "6c24821f0f2677b1",
        "type": "comment",
        "z": "b285dd85d74c1d1a",
        "g": "e9191d82beea3b97",
        "name": "Ej.Tramas",
        "info": "#STX0438SIMO20TMS WMS 0002202409181141215200000020001       PIE0150001003001000000000000100000655364486                                                                                                                                                                                                                                                            00000002200020010000000000000000000000000000000000000000000000000000000000030010000100001000000S000001000000000000000000000000#ETX\n\n\n#STX -> Inicio mensaje\n0438 -> Longitud datos del telegrama\nSIMO -> Identificador del telegrama\n20 -> Versión\nTMS  -> Origen\nWMS  -> Destino\n0002 -> Número de secuencia\n20240918114121520 -> Milisegundo del telegrama en año, mes, día, hora, minuto, segundo y milisegundo\n\nDATOS DEL TELEGRAMA:\n0000020001 -> Número de almacén\n       PIE01 -> Equipamiento\n5 -> Operaciones encadenadas (Evento + búsqueda de orden)\n\nDatos relativos al evento:\n0001 -> Cantidad de eventos\n003 -> Tipo de estación\n001 -> Número de estación\n0000000000 -> Número de mvto\n001 -> Tipo de evento\n0000065536 -> Flags\n4486 -> Datos (AQUÍ ES DONDE VA LA ETIQUETA DEL CONTENEDOR, EN UN CAMPO DE LONGITUD MÁXIMA DE 256)                                                                                                                                                                                                                                                           \n0000000220 -> Peso\n002 -> Tipo de contenedor\n001 -> Tipo de altura\n00000 -> X lógica\n00000 -> Y lógica\n000 -> X local\n000 -> Y local\n000 -> Lado\n000 -> Profundidad\n000 -> Pasillo\n000 -> Aux01\n000 -> Aux02\n000 -> Aux03\n000 -> Aux04\n000 -> Aux05\n000 -> Aux06\n000 -> Aux07\n000 -> Aux08\n000 -> Aux09\n000 -> Aux10\n\nDatos relativos a la búsqueda:\n00 -> Número de mvtos\n003 -> Tipo de estación\n001 -> Número de estación\n00001 -> X actual\n00001 -> Y actual\n000 -> Lado\n000 -> Pasillo\nS -> Estado de la máquina\n000 -> Ocupación\n001 -> Capacidad\n000 -> Aux01\n000 -> Aux02\n000 -> Aux03\n000 -> Aux04\n000 -> Aux05\n000 -> Aux06\n000 -> Aux07\n000 -> Aux08\n#ETX\n\n\n\n\n\n\nRespuesta:\n\n#STX0203CIMO20TMS WMS 000220240918114125918000000010000002406000200000000000000000000000000000000000000000000000000121800200100300100001000010000000000000010090010099900001000000001001001                                                  100100100#ETX\n\n#STX -> Inicio de transmisión\n0203 -> Longitud de los datos\nCIMO -> Identificador del telegrama\n20 -> Versión\nTMS  -> Origen\nWMS  -> Destino\n0002 -> Número de secuencia\n20240918114125918 -> Milisegungo (en año, mes, día, hora, minuto, segundo, milisegundo)\n\nDATOS DEL TELEGRAMA:\n0000 -> Resultado (0 = OK)\n0001 -> Cantidad de mvtos que devuelven la búsqueda de orden\n\nDatos relativos al mvto\n0000002406 -> Número de transporte o número de tarea\n0002 -> Prioridad\n0000 -> Secuencia\n00000000000000000000000000000000000000000000001218 -> UMA o número de contenedor\n002 -> Tipo de contenedor\n001 -> Tipo de altura\n\nDatos del origen del mvto\n003 -> Tipo de estación (PIE)\n001 -> Número de estación (PIE01)\n00001 -> X\n00001 -> Y\n000 -> X local\n000 -> Y local\n000 -> Lado\n000 -> Pasillo\n001 -> Profundidad\n\nDatos del destino del mvto:\n009 -> Tipo de estación (PEP)\n001 -> Número de estación (PEP01)\n00999 -> X\n00001 -> Y\n000 -> X local\n000 -> Y local\n001 -> Lado\n001 -> Pasillo\n001 -> Profundidad\n                                                  -> Datos auxiliares (Longitud de 50, normamente vacío)\n100 -> % X\n100 -> % Y\n100 -> % Z\n#ETX",
        "x": 960,
        "y": 80,
        "wires": []
    },
    {
        "id": "5ae954e99b59aace",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroPES');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PIE1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\nlet sgaProcessPIE1 = variablesPLC[\"SGA_PROCESS\"];\nlet waitForSndMR16PIE1 = variablesPLC[\"WaitForSndMR16\"];\n\n\n// Obtener el valor actual de 'WaitForSndMR16' almacenado previamente\nlet prevWaitForSndMR16 = global.get('prevWaitForSndMR16') || false;\n\n// Verificar si la variable 'SGA_PROCESS' está en true\nif (sgaProcessPIE1 === true) {\n    // Si 'WaitForSndMR16' pasa de false a true, establecer 'palletInPIE1' a true\n    if (prevWaitForSndMR16 === false && waitForSndMR16PIE1 === true) {\n        global.set('palletInPIE1', true);\n        node.warn(\"WaitForSndMR16 pasó de false a true: palletInPIE1 establecido a true.\");\n    }\n    // Si 'WaitForSndMR16' pasa de true a false, establecer 'palletInPIE1' a false\n    if (prevWaitForSndMR16 === true && waitForSndMR16PIE1 === false) {\n        global.set('palletInPIE1', false);\n        node.warn(\"WaitForSndMR16 pasó de true a false: palletInPIE1 establecido a false.\");\n    }\n}\n\n// Actualizar la variable global para almacenar el valor actual de 'WaitForSndMR16'\nglobal.set('prevWaitForSndMR16', waitForSndMR16PIE1);\n\n\n\n// Emitir una advertencia para comprobar las variables asignadas\n//node.warn(`SGA_OK_PIE1: ${sgaOkPIE1}, DO_SGA_PIE1: ${doSgaPIE1}, SGA_PROCESS_PIE1: ${sgaProcessPIE1}, WaitForSndMR16_PIE1: ${waitForSndMR16PIE1}, FinFeadback_PIE1: ${finFeedbackPIE1}, DATO_A_SGA_MRE23_TR27_PIE1: ${datoSGAMRE23TR27PIE1}`);\n\n// Devolver el mensaje\nmsg.payload = waitForSndMR16PIE1;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2e4e3f8d4a9d2dff",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 280,
        "wires": [
            [
                "5ae954e99b59aace",
                "9c20bab55ad04761",
                "aeb7e0381e2809bb",
                "9737857877075969"
            ]
        ]
    },
    {
        "id": "460c82c9b1ab6134",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "99e6e81bb00214ae",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1030,
        "y": 480,
        "wires": [
            [
                "d5b2aae7c52359ae"
            ]
        ]
    },
    {
        "id": "d5b2aae7c52359ae",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "99e6e81bb00214ae",
        "name": "Escribir ",
        "func": "// Definir las variables globales para PIE1\nlet variablesPLC = global.get('nuevoRegistroPIE');\n\n\nlet lecturaScannerPIE = global.get('lecturaScannerPIE');\n\n\n//let lecturaScannerPIE = global.get('lecturaScannerPIE');\nlet altura = variablesPLC[\"ALTURA\"];\n\n// Ajustar el valor de altura según las condiciones\n if (altura === 2) {\n    altura = 1;\n} else {\n    altura = 2;\n}\n\n// Inicializar flags en 0\nlet flags = 0;\n\n// Configuración de flags en función de las variables de prueba según la tabla\nif (flow.get(\"ERROR_HUECOS\")) {\n   flags |= 1; // Gálibo de Huecos\n}\nif (flow.get(\"ERROR_TACOS\")) {\n   flags |= 2; // Gálibo de Tacos\n}\n//if (flow.get(\"ERROR_ALTURA\")) {\n //   flags |= 4; // Gálibo de Altura\n////}\nif (flow.get(\"ERROR_LATERAL_DERECHO\")) {\n    flags |= 8; // Gálibo Lateral Derecho\n}\nif (flow.get(\"ERROR_LATERAL_IZQUIERDO\")) {\n   flags |= 16; // Gálibo Lateral Izquierdo\n}\nif (flow.get(\"ERROR_DESPLOME_ADELANTE\")) {\n   flags |= 32; // Gálibo de Desplome Adelante\n}\nif (flow.get(\"ERROR_DESPLOME_ATRAS\")) {\n   flags |= 64; // Gálibo de Desplome Atrás\n} \n//if (flow.get(\"ERROR_PESO_prueba\")) {\n   // flags |= 128; // Exceso de Peso\n//}\nif (flow.get(\"ERROR_ESCANER\")   ||    flow.get(\"ERROR_ESCANER_FILTRO\")) {\n    flags |= 256; // Lectura Escáner Errónea\n}\n//if (flow.get(\"RECUPERACION_CONTENEDOR_prueba\")) {\n  //  flags |= 512; // Recuperación de contenedor\n//}\n//if (lecturaScannerPIE === 'vacío') {\n  //  flags |= 1024; // Palet vacío\n//}\n\n// Si no se detecta ningún error, asignar el valor 65536 para \"Palet en PIE correcto\"\nif (flags === 0) {\n    flags = 65536;\n}\n\n\n// Asignar flags para el evento\nglobal.set(\"Flags_SIMO_Event_PIE1\", flags);\n\n// Definir otras variables y constantes para el evento en PIE1\nglobal.set(\"OperacionesEncadenadas_SIMO_PIE1\", 5); // Operaciones encadenadas\nglobal.set(\"NumeroAlmacen_SIMO_PIE1\", 20001); // Número de Almacén\nglobal.set(\"Equipamiento_SIMO_PIE1\", \"PIE01\"); // Equipamiento\n\nglobal.set(\"CantidadEventos_SIMO_Event_PIE1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Event_PIE1\", 3);  // Tipo de estación\nglobal.set(\"NumeroEstacion_SIMO_Event_PIE1\", 1); // Número de estación\nglobal.set(\"NumeroMovimiento_SIMO_Event_PIE1\", 0); // Número de movimiento\nglobal.set(\"TipoEvento_SIMO_Event_PIE1\", 1); // Tipo de evento\nglobal.set(\"Datos_SIMO_Event_PIE1\", lecturaScannerPIE); // Datos del evento\nglobal.set(\"Peso_SIMO_Event_PIE1\", 50); // Peso del evento\nglobal.set(\"TipoContenedor_SIMO_Event_PIE1\", altura);\nglobal.set(\"TipoAltura_SIMO_Event_PIE1\", 1);\nglobal.set(\"XLogica_SIMO_Event_PIE1\", 0);\nglobal.set(\"YLogica_SIMO_Event_PIE1\", 0);\nglobal.set(\"XLocal_SIMO_Event_PIE1\", 0);\nglobal.set(\"YLocal_SIMO_Event_PIE1\", 0);\nglobal.set(\"Lado_SIMO_Event_PIE1\", 0);\nglobal.set(\"Profundidad_SIMO_Event_PIE1\", 0);\nglobal.set(\"Pasillo_SIMO_Event_PIE1\", 0);\n\nfor (let j = 1; j <= 10; j++) {\n    global.set(`Aux0${j}_SIMO_Event_PIE1`, 0);\n}\n\n// Definir variables para la búsqueda en PIE1\nglobal.set(\"CantidadMovimientos_SIMO_Busq_PIE1\", 0);\nglobal.set(\"TipoEstacion_SIMO_Busq_PIE1\", 3);\nglobal.set(\"NumeroEstacion_SIMO_Busq_PIE1\", 1);\nglobal.set(\"NumeroMovimiento_SIMO_Busq_PIE1\", 54321);\nglobal.set(\"XActual_SIMO_Busq_PIE1\", 1);\nglobal.set(\"YActual_SIMO_Busq_PIE1\", 1);\nglobal.set(\"Lado_SIMO_Busq_PIE1\", 0);\nglobal.set(\"Pasillo_SIMO_Busq_PIE1\", 0);\nglobal.set(\"Status_SIMO_Busq_PIE1\", \"S\");\nglobal.set(\"Ocupacion_SIMO_Busq_PIE1\", 0);\nglobal.set(\"Capacidad_SIMO_Busq_PIE1\", 1);\n\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Busq_PIE1`, 0);\n}\n\n// Definir variables para el fin de movimiento en PIE1\nglobal.set(\"CantidadFinesMov_SIMO_PIE1\", 1);\nglobal.set(\"TipoEstacion_SIMO_Fin_PIE1\", 3);\nglobal.set(\"NumeroEstacion_SIMO_Fin_PIE1\", 1);\nglobal.set(\"NumeroMovimiento_SIMO_Fin_PIE1\", 98765);\nglobal.set(\"UMA_SIMO_Fin_PIE1\", \"UMA98765\");\nglobal.set(\"CodigoError_SIMO_Fin_PIE1\", 0);\nglobal.set(\"Auxiliar_SIMO_Fin_PIE1\", 0);\nglobal.set(\"TipoContenedor_SIMO_Fin_PIE1\", 1);\nglobal.set(\"TipoAltura_SIMO_Fin_PIE1\", 1);\nglobal.set(\"XLogica_SIMO_Fin_PIE1\", 10);\nglobal.set(\"YLogica_SIMO_Fin_PIE1\", 20);\nglobal.set(\"XLocal_SIMO_Fin_PIE1\", 5);\nglobal.set(\"YLocal_SIMO_Fin_PIE1\", 15);\nglobal.set(\"Lado_SIMO_Fin_PIE1\", 1);\nglobal.set(\"Profundidad_SIMO_Fin_PIE1\", 3);\nglobal.set(\"Pasillo_SIMO_Fin_PIE1\", 0);\n\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIE1`, 0);\n}\n\nnode.warn(\"Variables de PIE1 han sido inicializadas correctamente.\");\n\n   global.set('variablesEventoBusquedaPIE1_Escritas', true);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f964792597fa1059",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "99e6e81bb00214ae",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (global.get('variablesOkPIE1') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    global.set('variablesOkPIE1', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 540,
        "wires": [
            [
                "d5b2aae7c52359ae"
            ]
        ]
    },
    {
        "id": "1eabc0bd830f5657",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7587cceb496ff648",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"value\":[true]}",
        "payloadType": "json",
        "x": 1270,
        "y": 680,
        "wires": [
            [
                "eccc47c7e3b79389"
            ]
        ]
    },
    {
        "id": "c897e34602f910c4",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7587cceb496ff648",
        "name": "SartManual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 720,
        "wires": [
            [
                "74cd66597bccdc08"
            ]
        ]
    },
    {
        "id": "74cd66597bccdc08",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7587cceb496ff648",
        "name": "Escribir ",
        "func": "msg.payload = {\"value\":[true]};\nglobal.set(\"palletToPESOK\", true);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 720,
        "wires": [
            [
                "eccc47c7e3b79389"
            ]
        ]
    },
    {
        "id": "41384094a4510d74",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7587cceb496ff648",
        "name": "Start",
        "func": "// Monitorea el valor de la variable global 'buscarIDPIE1'\nif (global.get('sendPalletToPES') === true) {\n    // Iniciar el flujo de búsqueda de ID en la base de datos\n   // node.warn(\"Iniciando búsqueda de ID para tarea PIE1 en la base de datos...\");\n    \n     msg.payload ={};\n    \n    // Una vez que encuentres el ID o completes la operación, resetea la variable\n    global.set('sendPalletToPES', false);\n    \n    // Aquí puedes hacer más acciones después de la búsqueda de ID\n} else {\n   //\n      msg = null;  // Si no hay cambio o no es una estación válida, no hacemos nada\n\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 640,
        "wires": [
            [
                "74cd66597bccdc08"
            ]
        ]
    },
    {
        "id": "67f34c45eb37abc5",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "80d35406d4c2416a",
        "name": "CheckPIE1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "fea0a4f7cad057b2"
            ]
        ]
    },
    {
        "id": "eccc47c7e3b79389",
        "type": "s7comm write",
        "z": "0c63b7609023e589",
        "g": "7587cceb496ff648",
        "connection": "d99f0bd56be26201",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"970\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"178\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"SGA_OK_PES\"}",
        "s7Name": "SGA_OK_PES",
        "topic": "",
        "name": "SGA_OK_PES",
        "signalSetted": false,
        "x": 1280,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "ef95b62072b5e334",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "tareaPIE1",
        "func": "msg.payload = global.get(`tareaPIE1`);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "7d027c9b35fb9aca"
            ]
        ]
    },
    {
        "id": "d127bdce49e94415",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1120,
        "wires": [
            [
                "ef95b62072b5e334"
            ]
        ]
    },
    {
        "id": "7d027c9b35fb9aca",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 176",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1120,
        "wires": []
    },
    {
        "id": "34f6a782ca037926",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_HUECOS_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_HUECOS_prueba`, true);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1180,
        "wires": [
            [
                "8d07ca0d60f0218b"
            ]
        ]
    },
    {
        "id": "ce667b987d2a1272",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "34f6a782ca037926"
            ]
        ]
    },
    {
        "id": "8d07ca0d60f0218b",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 177",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d003fa6851851753",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_TACOS_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_TACOS_prueba`, true);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "c6b429ac75e001c4"
            ]
        ]
    },
    {
        "id": "0dcbc00d0d0261e0",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "d003fa6851851753"
            ]
        ]
    },
    {
        "id": "c6b429ac75e001c4",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 178",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1220,
        "wires": []
    },
    {
        "id": "52e5cc298214acd7",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_ALTURA_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_ALTURA_prueba`, true);\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1260,
        "wires": [
            [
                "b2f42dbd82d6730e"
            ]
        ]
    },
    {
        "id": "3341de14a6afb677",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "52e5cc298214acd7"
            ]
        ]
    },
    {
        "id": "b2f42dbd82d6730e",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 179",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f5978aa9a07b43a0",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_LATERAL_DERECHO_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_LATERAL_DERECHO_prueba`, true);\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1300,
        "wires": [
            [
                "3c63f4614d1eef1c"
            ]
        ]
    },
    {
        "id": "89cec174843bf682",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "f5978aa9a07b43a0"
            ]
        ]
    },
    {
        "id": "3c63f4614d1eef1c",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 180",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1300,
        "wires": []
    },
    {
        "id": "abf17575d24304a6",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_LATERAL_IZQUIERDO_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_LATERAL_IZQUIERDO_prueba`, true);\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1340,
        "wires": [
            [
                "3fe5cb0310918132"
            ]
        ]
    },
    {
        "id": "903b71d60ca8a381",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1340,
        "wires": [
            [
                "abf17575d24304a6"
            ]
        ]
    },
    {
        "id": "3fe5cb0310918132",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 181",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1340,
        "wires": []
    },
    {
        "id": "36ff33fb4d2df958",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_DESPLOME_ADELANTE_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_DESPLOME_ADELANTE_prueba`, true);\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1380,
        "wires": [
            [
                "4b082780dc597367"
            ]
        ]
    },
    {
        "id": "ba9bc1e1b5060c16",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1380,
        "wires": [
            [
                "36ff33fb4d2df958"
            ]
        ]
    },
    {
        "id": "4b082780dc597367",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 182",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1380,
        "wires": []
    },
    {
        "id": "fbec43a6cb820aac",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_DESPLOME_ATRAS_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_DESPLOME_ATRAS_prueba`, true);\nreturn msg;\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1420,
        "wires": [
            [
                "d9804c2b47e58ab6"
            ]
        ]
    },
    {
        "id": "1775055030d88646",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "fbec43a6cb820aac"
            ]
        ]
    },
    {
        "id": "d9804c2b47e58ab6",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 183",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "cefab690914a6f2a",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "ERROR_ESCANER_prueba-->true",
        "func": "msg.payload = flow.set(`ERROR_ESCANER_prueba`, true);\nreturn msg;\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1460,
        "wires": [
            [
                "66a4f4adf6f82a2b"
            ]
        ]
    },
    {
        "id": "9602f3bcaefc3fc2",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1460,
        "wires": [
            [
                "cefab690914a6f2a"
            ]
        ]
    },
    {
        "id": "66a4f4adf6f82a2b",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 184",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1460,
        "wires": []
    },
    {
        "id": "fd420e5b2359c405",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "RECUPERACION_CONTENEDOR_prueba-->true",
        "func": "msg.payload = flow.set(`RECUPERACION_CONTENEDOR_prueba`, true);\nreturn msg;\n\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1500,
        "wires": [
            [
                "e083e0ab8b80f34f"
            ]
        ]
    },
    {
        "id": "df30cbbd0cb144c0",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1500,
        "wires": [
            [
                "fd420e5b2359c405"
            ]
        ]
    },
    {
        "id": "e083e0ab8b80f34f",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 185",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1500,
        "wires": []
    },
    {
        "id": "de93ee3d8cc885ee",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "all-->false",
        "func": "msg.payload = flow.set(`ERROR_HUECOS_prueba`, false);\nmsg.payload = flow.set(`ERROR_TACOS_prueba`, false);\n\nmsg.payload = flow.set(`ERROR_ALTURA_prueba`, false);\nmsg.payload = flow.set(`ERROR_LATERAL_DERECHO_prueba`, false);\n\nmsg.payload = flow.set(`ERROR_LATERAL_IZQUIERDO_prueba`, false);\nmsg.payload = flow.set(`ERROR_DESPLOME_ADELANTE_prueba`, false);\n\nmsg.payload = flow.set(`ERROR_DESPLOME_ATRAS_prueba`, false);\nmsg.payload = flow.set(`ERROR_PESO_prueba`, false);\n\nmsg.payload = flow.set(`ERROR_ESCANER_prueba`, false);\nmsg.payload = flow.set(`RECUPERACION_CONTENEDOR_prueba`, false);\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1600,
        "wires": [
            [
                "9c2f17f6ecaa1ee1"
            ]
        ]
    },
    {
        "id": "fc1ddcb16188e73c",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1600,
        "wires": [
            [
                "de93ee3d8cc885ee"
            ]
        ]
    },
    {
        "id": "9c2f17f6ecaa1ee1",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 186",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1600,
        "wires": []
    },
    {
        "id": "bed63fb951fa3120",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "Flags_SIMO_Event_PIE1",
        "func": "msg.payload = global.get(\"Flags_SIMO_Event_PIE1\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "6d79a49ab8118058"
            ]
        ]
    },
    {
        "id": "6d79a49ab8118058",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "debug 187",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5895df6abdf3c290",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7a8636bdb5f73409",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 1020,
        "wires": [
            [
                "bed63fb951fa3120"
            ]
        ]
    },
    {
        "id": "9c20bab55ad04761",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "Galibo",
        "func": "// Definir las variables globales para PIE1\nlet variablesPLC = global.get('GESTION_GALIBO');\nlet lecturaScannerPIE = global.get('lecturaScannerPIE');\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n  //  node.error(\"Las variables del PLC para galibo no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n\n\nlet ERROR_HUECOS = variablesPLC[\"FALLO_GALIBO_PALA_D\"]\n                   || variablesPLC[\"FALLO_GALIBO_PALA_I\"];\n\nlet ERROR_TACOS = variablesPLC[\"FALLO_GALIBO_TACO_D\"] \n                 || variablesPLC[\"FALLO_GALIBO_TACO_C\"]\n                 || variablesPLC[\"FALLO_GALIBO_TACO_I\"];\n\nlet ERROR_ALTURA = variablesPLC[\"FALLO_GALIBO_PALLET_VACIO\"];\nlet ERROR_LATERAL_DERECHO = variablesPLC[\"FALLO_GALIBO_LATERAL_D\"];\n\nlet ERROR_LATERAL_IZQUIERDO = variablesPLC[\"FALLO_GALIBO_LATERAL_I\"];\nlet ERROR_DESPLOME_ADELANTE = variablesPLC[\"FALLO_GALIBO_FRONTAL\"];\n\nlet ERROR_DESPLOME_ATRAS = variablesPLC[\"FALLO_GALIBO_POSTERIOR\"];\nlet ERROR_ESCANER = variablesPLC[\"FALLO_ESCANER\"];\n\n\n\n// Configuración de flags en función de las variables de prueba según la tabla\nflow.set(\"ERROR_HUECOS\", ERROR_HUECOS);\nflow.set(\"ERROR_TACOS\", ERROR_TACOS);\nflow.set(\"ERROR_ALTURA\", ERROR_ALTURA);\nflow.set(\"ERROR_LATERAL_DERECHO\", ERROR_LATERAL_DERECHO);\nflow.set(\"ERROR_LATERAL_IZQUIERDO\", ERROR_LATERAL_IZQUIERDO);\nflow.set(\"ERROR_DESPLOME_ADELANTE\", ERROR_DESPLOME_ADELANTE);\nflow.set(\"ERROR_DESPLOME_ATRAS\", ERROR_DESPLOME_ATRAS);\nif (global.get(\"mecActivado\") === false) {\n\nflow.set(\"ERROR_ESCANER\", ERROR_ESCANER);\n\n\n}else{\n  flow.set(\"ERROR_ESCANER\", false);\n}\n//flow.get(\"RECUPERACION_CONTENEDOR_prueba\")\n\n\n\nreturn msg;\n\n\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "d6783071f70acabf",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "99e6e81bb00214ae",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "f964792597fa1059"
            ]
        ]
    },
    {
        "id": "af74a171fce90f10",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "7587cceb496ff648",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 640,
        "wires": [
            [
                "41384094a4510d74"
            ]
        ]
    },
    {
        "id": "4b9ba87dd21be25a",
        "type": "s7comm write",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "connection": "a8633ef8f20683fc",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"169\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"0\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Activar_Mecalux\"}",
        "s7Name": "Activar_Mecalux",
        "topic": "",
        "name": "Activar_Mecalux1200",
        "signalSetted": false,
        "x": 1940,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "929a3f7c7828c49c",
        "type": "link in",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "Activar_Mecalux",
        "links": [
            "00c3fb636aa362a9",
            "bcac06e2208692c9",
            "c5fbfaad3dde1a18"
        ],
        "x": 1785,
        "y": 160,
        "wires": [
            [
                "4b9ba87dd21be25a",
                "5e77692cf1e9e7c4"
            ]
        ]
    },
    {
        "id": "1eee0e133f937bb9",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "9fcab2d2c5f396bf",
        "name": "fsmPIE",
        "func": "// Máquina de estados con switch-case para eventoPIE1\n\nlet estadoActual = global.get('stateMachineEventBusquedaPIE1') || 0;\nlet estadoActualPIE1_Aux1 = global.get('stateMachineEventStagePIE1_Aux1') || 0;\n\n// Mostrar estado actual en el panel de Node-RED\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Estado actual: ${estadoActual}`\n});\n\nswitch (estadoActual) {\n    case 0: // 00_Reposo\n        global.set('datosListosPIE1', false);\n        global.set('variablesOkPIE1', false);\n        global.set('variablesEventoBusquedaPIE1_Escritas', false);\n        // global.set('palletInPIE1', false);\n        flow.set('repeatPIE1SimoEvent', false);\n        global.set('palletInPES', false);\n        global.set('sendPalletToPES', false);\n        global.set(`eventoLanzadoPIE1`, \"none\");\n        global.set(`resultadoPIE01_EventBusq`, \"1111\");\n        global.set('stateMachineEventBusquedaPIE1', 10);\n        break;\n\n    case 10: // 10_Inicio\n        global.set('stateMachineEventBusquedaPIE1', 10);\n        if (global.get('datosListosPIE1') === false &&\n            global.get('variablesOkPIE1') === false &&\n            global.get('variablesEventoBusquedaPIE1_Escritas') === false &&\n            // global.get('palletInPIE1') === false &&\n            global.get('sendPalletToPES') === false &&\n            global.get('palletInPES') === false &&\n            global.get(\"mecActivado\") === true) {\n            setTimeout(() => {\n                global.set('stateMachineEventBusquedaPIE1', 20);\n\n            }, 10);\n        }\n        break;\n\n    case 20: // 20_palletInPIE1\n        global.set('stateMachineEventBusquedaPIE1', 20);\n        if (global.get('palletInPIE1') && estadoActualPIE1_Aux1 === 10 && global.get(\"mecActivado\") === true && global.get(\"pausePIE1\")===false) {\n            setTimeout(() => {\n                global.set('stateMachineEventBusquedaPIE1', 30);\n\n            }, 10);\n        }\n        break;\n\n    case 30: // 30_leerResultadoGalibo\n        global.set('stateMachineEventBusquedaPIE1', 30);\n\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 40);\n\n        }, 1000);\n\n        break;\n\n    case 40: // 40_leerScanner\n        global.set('stateMachineEventBusquedaPIE1', 40);\n\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 50);\n\n        }, 1000);\n\n        break;\n\n    case 50: // 50_lecturaScannerVacio\n        global.set('stateMachineEventBusquedaPIE1', 50);\n\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 60);\n\n        }, 10);\n\n        break;\n\n    case 60: // 60_lecturaScannerOk\n        global.set('stateMachineEventBusquedaPIE1', 60);\n\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 70);\n\n        }, 100);\n\n        break;\n\n    case 70: // 70_escribirVariables\n        global.set('stateMachineEventBusquedaPIE1', 70);\n        global.set('variablesOkPIE1', true);\n        global.set('stateMachineEventBusquedaPIE1', 80);\n\n\n        break;\n\n    case 80: // 80_variablesOk\n        global.set('stateMachineEventBusquedaPIE1', 80);\n        if (global.get('variablesEventoBusquedaPIE1_Escritas') === true) {\n            setTimeout(() => {\n                global.set('stateMachineEventBusquedaPIE1', 90);\n                global.set(`eventoLanzadoPIE1`, \"EventBusq\");\n                global.set(`resultadoPIE01_EventBusq`, \"1111\");\n            }, 10);\n        }\n        break;\n\n    case 90: // 90_sendToSGA_Even+Busq\n        global.set('stateMachineEventBusquedaPIE1', 90);\n        if ( global.get(\"pausePIE1\") === false) {\n            global.set('PIE1SimoEvent', true);\n            flow.set('repeatPIE1SimoEvent', false);\n\n            global.set('stateMachineEventBusquedaPIE1', 100);\n        }\n\n        break;\n\n    case 100: // 100_enviado\n        global.set('stateMachineEventBusquedaPIE1', 100);\n        let statusPIE1SimoEvent_100 = global.get('PIE1SimoEvent');\n        // if (statusPIE1SimoEvent_100 === false) {\n        global.set('stateMachineEventBusquedaPIE1', 105);;\n\n        // }\n\n        break;\n\n    case 105: // 105_waitTarea\n        global.set('stateMachineEventBusquedaPIE1', 105);\n        let datosListosPIE1_105 = global.get('datosListosPIE1');\n        let repeatPIE1SimoEvent = flow.get('repeatPIE1SimoEvent');\n        let resultadoPIE01_EventBusq = global.get('resultadoPIE01_EventBusq');\n        // Si se cumplen las condiciones antes de que expire el tiempo, cancelamos el temporizador y avanzamos\n        if (datosListosPIE1_105) {\n            global.set('sendPalletToPES', true);\n            global.set('PIE1SimoEvent', false);\n            flow.set('repeatPIE1SimoEvent', false);\n            setTimeout(() => {\n                global.set('stateMachineEventBusquedaPIE1', 110);\n\n            }, 10); // Continuamos con la transición al paso 110\n        } else if (resultadoPIE01_EventBusq === \"0006\"  || resultadoPIE01_EventBusq === \"0002\" ) {\n            global.set(\"OperacionesEncadenadas_SIMO_PIE1\", 5); // Operaciones encadenadas\n            global.set(`eventoLanzadoPIE1`, \"EventBusq\");\n            global.set(`resultadoPIE01_EventBusq`, \"1111\");\n            flow.set('repeatPIE1SimoEvent', false);\n            global.set('PIE1SimoEvent', false);\n            global.set('stateMachineEventBusquedaPIE1', 90);\n        } else if (repeatPIE1SimoEvent && resultadoPIE01_EventBusq.startsWith(\"0000\")) {\n\n            global.set(\"OperacionesEncadenadas_SIMO_PIE1\", 4); // Operaciones encadenadas\n            global.set(`eventoLanzadoPIE1`, \"Busq\");\n            flow.set('repeatPIE1SimoEvent', false);\n            global.set('PIE1SimoEvent', false);\n            global.set('stateMachineEventBusquedaPIE1', 90);\n\n\n        }\n        break;\n\n\n    case 110: // 110_sendpalletToPES\n        global.set('stateMachineEventBusquedaPIE1', 110);\n\n        if (global.get('palletInPIE1') === false) {\n            global.set('stateMachineEventBusquedaPIE1', 120);\n\n        }\n        break;\n\n    case 120: // 120_palletInPES\n        global.set('stateMachineEventBusquedaPIE1', 120);\n\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 130);\n\n        }, 10);\n        // }\n        break;\n\n    case 130: // 130_registrarCiclo\n        global.set('stateMachineEventBusquedaPIE1', 130);\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 140);\n\n        }, 10);\n        break;\n\n    case 140: // 140_finCiclo\n        global.set('stateMachineEventBusquedaPIE1', 140);\n        setTimeout(() => {\n            global.set('stateMachineEventBusquedaPIE1', 0);\n\n        }, 10);\n        break;\n\n    default:\n        node.warn(\"Estado desconocido, reiniciando...\");\n        global.set('stateMachineEventBusquedaPIE1', 0);\n\n};\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "437856355c93cc94",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "stateMachineEventBusquedaPIE1-->90",
        "func": "global.set('stateMachineEventBusquedaPIE1', 90);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "b60f62c8f0e369c2",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "437856355c93cc94"
            ]
        ]
    },
    {
        "id": "1f7ecab9bf24a759",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "stateMachineEventBusquedaPIE1-->900",
        "func": "global.set('stateMachineEventBusquedaPIE1', 900);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "90fc7555591ddd44",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "1f7ecab9bf24a759"
            ]
        ]
    },
    {
        "id": "fea0a4f7cad057b2",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "80d35406d4c2416a",
        "name": "CheckPIE1",
        "func": "\n// Leer el estado de 'datosListosTLV1'\nlet datosListosPIE1 = global.get('datosListosPIE1') || false;\nlet stateMachineEventBusquedaPIE1 = global.get('stateMachineEventBusquedaPIE1') || 0;\n\n// Verificar las condiciones de AUTOMATICO, OCUPACION, AVERIA y 'datosListosTLV1'\nif ((stateMachineEventBusquedaPIE1 === 105)) { // && (global.get('datosListosPIE1') === false)\n\n    // Verificar si ya hemos comenzado el temporizador\n    let timerStarted = global.get('timerStartedPIE1') || false;\n    let timeElapsed = global.get('timeElapsedPIE1') || 0;\n\n    if (!timerStarted) {\n        // Iniciar el temporizador si aún no lo hemos hecho\n        global.set('timerStartedPIE1', true);\n        global.set('timeElapsedPIE1', Date.now());\n      //  node.warn(\"Temporizador iniciado para PIE1\");\n    } else {\n        // Verificar si han pasado 30 segundos\n        let currentTime = Date.now();\n        let elapsedTime = currentTime - timeElapsed;\n\n        if (elapsedTime >= 10000) {  // 30000 ms = 30 segundos\n            // Cumplimos las condiciones durante 30 segundos, lanzar búsqueda\n            flow.set('repeatPIE1SimoEvent', true);\n         \n\n            // Reiniciar el temporizador y preparar para lanzar la búsqueda de nuevo\n            global.set('timeElapsedPIE1', Date.now());\n          //  global.set('lanzarBusquedaTLV1', false);  // Esto será manualmente controlado después de enviar la trama\n        }\n    }\n} else {\n    // Si las condiciones no se cumplen, detener el temporizador\n    global.set('timerStartedPIE1', false);\n    global.set('timeElapsedPIE1', 0);\n//    global.set('lanzarBusquedaTLV1', false);  // No lanzamos la búsqueda si no se cumplen las condiciones\n   // node.warn(\"Condiciones no cumplidas, temporizador detenido.\");\n}\n\n// Devolver el mensaje para continuar con otros procesos\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "6ed19fe5f8095afc",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "PIE1SimoEvent",
        "func": "global.set('PIE1SimoEvent', true);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "785702d316306783",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "6ed19fe5f8095afc"
            ]
        ]
    },
    {
        "id": "7c31a45f458a0508",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "9fcab2d2c5f396bf",
        "name": "clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "1eee0e133f937bb9"
            ]
        ]
    },
    {
        "id": "2072de91a10cdb29",
        "type": "debug",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "debug 192",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "06f63e4674901aae",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "lecturaScannerPIE",
        "func": "msg.payload = global.get(\"lecturaScannerPIE\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "2072de91a10cdb29"
            ]
        ]
    },
    {
        "id": "aeb7e0381e2809bb",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "scannerPIE1",
        "func": "\n// Obtener las variablesPLC de la global\nlet variablesPLC = global.get('nuevoRegistroPIE');\nflow.set(\"ERROR_ESCANER_FILTRO\", false); // Reiniciar el flag de error\n\n// Verificar si las variablesPLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PIE1 no están definidas\");\n    return null;\n}\n\n// Inicializar la cadena concatenada\nlet concatenatedString = \n    variablesPLC[\"COD3_C1\"] +\n    variablesPLC[\"COD3_C2\"] +\n    variablesPLC[\"COD3_C3\"] +\n    variablesPLC[\"COD13_C1\"] +\n    variablesPLC[\"COD13_C2\"] +\n    variablesPLC[\"COD13_C3\"] +\n    variablesPLC[\"COD13_C4\"] +\n    variablesPLC[\"COD13_C5\"] +\n    variablesPLC[\"COD13_C6\"] +\n    variablesPLC[\"COD13_C7\"] +\n    variablesPLC[\"COD13_C8\"] +\n    variablesPLC[\"COD13_C9\"] +\n    variablesPLC[\"COD13_C10\"] +\n    variablesPLC[\"COD13_C11\"] +\n    variablesPLC[\"COD13_C12\"] +\n    variablesPLC[\"COD13_C13\"] +\n    variablesPLC[\"COD6_C1\"] +\n    variablesPLC[\"COD6_C2\"] +\n    variablesPLC[\"COD6_C3\"] +\n    variablesPLC[\"COD6_C4\"] +\n    variablesPLC[\"COD6_C5\"] +\n    variablesPLC[\"COD6_C6\"] +\n    variablesPLC[\"COD2_C1\"] +\n    variablesPLC[\"COD2_C2\"] +\n    variablesPLC[\"COD_ULTIMO_DIG\"];\n\n// Si no comienza con 'PAS', limpiar espacios\nif (!concatenatedString.startsWith(\"PAS\")) {\n    concatenatedString = concatenatedString.trim().replace(/\\s+/g, ''); // Limpiar espacios\n}\n\n// Validar la cadena si \"mecActivado\" es true\nif (global.get(\"mecActivado\") === true) {\n    // Si comienza con 'PAS', registrar sin cambios\n    if (concatenatedString.startsWith(\"PAS\") && concatenatedString.length === 25) {\n        node.warn(`Cadena con prefijo 'PAS': ${concatenatedString}`);\n    } else {\n        // Limpiar caracteres no válidos\n        concatenatedString = concatenatedString.replace(/[^a-zA-Z0-9]/g, '');\n\n        // Verificar si la cadena tiene al menos 17 caracteres\n        if (concatenatedString.length === 18 || concatenatedString.length === 7) { //concatenatedString.length >= 17 && concatenatedString.length <= 20\n            node.warn(\"Cadena válida detectada (sin caracteres especiales y longitud suficiente).\");\n        } else {\n            // Si no cumple con la longitud mínima\n            flow.set(\"ERROR_ESCANER_FILTRO\", true);\n            global.set('lecturaScannerPIE', \"ERROR\");\n            node.error(\"Error: La cadena tiene menos de 17 caracteres válidos.\");\n            return null;\n        }\n    }\n} else {\n    // Si mecActivado es false\n    node.warn(\"mecActivado está desactivado, no se valida la cadena.\");\n}\n\n// Guardar la cadena concatenada como una variable global\nglobal.set('lecturaScannerPIE', concatenatedString);\n\n// Log para depuración\nnode.warn(`Lectura concatenada final: ${concatenatedString}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "06f63e4674901aae"
            ]
        ]
    },
    {
        "id": "5e77692cf1e9e7c4",
        "type": "s7comm write",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2000\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"6\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"Activar_Mecalux400\"}",
        "s7Name": "Activar_Mecalux400",
        "topic": "",
        "name": "Activar_Mecalux400",
        "signalSetted": false,
        "x": 1940,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3377eada34705745",
        "type": "function",
        "z": "0c63b7609023e589",
        "name": "resultadoPIE1_EventBusq",
        "func": "msg.payload = global.get('resultadoPIE01_EventBusq');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1080,
        "wires": [
            [
                "aafbb72175e4972e"
            ]
        ]
    },
    {
        "id": "ac7ead9ae615a877",
        "type": "inject",
        "z": "0c63b7609023e589",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1030,
        "y": 1080,
        "wires": [
            [
                "3377eada34705745"
            ]
        ]
    },
    {
        "id": "aafbb72175e4972e",
        "type": "debug",
        "z": "0c63b7609023e589",
        "name": "debug 196",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8794a1ba6eedf3a0",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "stateMachineEventBusquedaPIE1-->30",
        "func": "global.set('stateMachineEventBusquedaPIE1', 30);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a5a80b7874fbf289",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 760,
        "wires": [
            [
                "8794a1ba6eedf3a0"
            ]
        ]
    },
    {
        "id": "49642e18f38e326e",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "name": "ActivarMecalux",
        "func": "// Definir las variables globales para PIE1\nlet variablesPLC = global.get('GESTION_GALIBO');\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n  //  node.error(\"Las variables del PLC para galibo no están definidas\");\n  return msg;  // Detenemos la ejecución si no están definidas\n}\n\nlet activarMec = variablesPLC[\"MEC_ACTIVADO\"];\n\nif (activarMec) {\n  global.set(\"mecActivado\", true);\n  msg.payload = { \"value\": [true] };\n // return msg;\n\n\n} else {\n\n  global.set(\"mecActivado\", false);\n  msg.payload = { \"value\": [false] };\n  //return msg;\n\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 80,
        "wires": [
            [
                "c5fbfaad3dde1a18"
            ]
        ]
    },
    {
        "id": "c5fbfaad3dde1a18",
        "type": "link out",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "name": "Activar_Mecalux",
        "mode": "link",
        "links": [
            "929a3f7c7828c49c"
        ],
        "x": 1135,
        "y": 80,
        "wires": []
    },
    {
        "id": "556dc87bf8733bc1",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "97c4cc61af9c9246",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 80,
        "wires": [
            [
                "49642e18f38e326e"
            ]
        ]
    },
    {
        "id": "b896456073243fef",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "b1551c1a080edf62",
        "name": "stop",
        "func": "// Definir las variables globales para PIE1\nlet variablesPLC_PES = global.get('nuevoRegistroPES');\nlet variablesPLC_Galibo = global.get('GESTION_GALIBO');\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC_PES === 'undefined' || variablesPLC_PES === null) {\n  node.error(\"Las variables del PLC para galibo no están definidas\");\n  return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC_Galibo === 'undefined' || variablesPLC_Galibo === null) {\n  node.error(\"Las variables del PLC para galibo no están definidas\");\n  return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Obtener el bit de vida actual\nlet ind_vidaPLC400 = variablesPLC_PES[\"INDICATIVO_VIDA_PLC\"];\nlet ind_vidaPLC1200 = variablesPLC_PES[\"INDICATIVO_VIDA_1200\"];\n\n// Obtener el valor anterior almacenado\nlet ind_vidaAnterior = flow.get('INDICATIVO_VIDA_PLC_ANTERIOR') || null;\n\n// Verificar si el bit de vida ha cambiado\nif (ind_vidaAnterior !== ind_vidaPLC400) {\n  // Si cambió, actualizar el bit anterior y desactivar stop\n  flow.set('INDICATIVO_VIDA_PLC_ANTERIOR', ind_vidaPLC400);\n  global.set(\"stop\", false);  // Desactivar stop\n // node.warn(\"Bit de vida cambió. Stop desactivado.\");\n} else {\n  // Si no cambió, activar stop\n  global.set(\"stop\", true);\n // node.warn(\"Bit de vida no cambió. Stop activado.\");\n}\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c2dc89ef122e2056",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "b1551c1a080edf62",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "b896456073243fef"
            ]
        ]
    },
    {
        "id": "f602d681bd34a55a",
        "type": "function",
        "z": "0c63b7609023e589",
        "name": "ind_vidaPLCs",
        "func": "// Definir las variables globales para PIE1\nlet variablesPLC_PES = global.get('nuevoRegistroPES');\nlet variablesPLC_Galibo = global.get('GESTION_GALIBO');\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC_PES === 'undefined' || variablesPLC_PES === null) {\n  node.error(\"Las variables del PLC para galibo no están definidas\");\n  return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Verificar si las variables PLC están definidas\nif (typeof variablesPLC_Galibo === 'undefined' || variablesPLC_Galibo === null) {\n  node.error(\"Las variables del PLC para galibo no están definidas\");\n  return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Obtener el bit de vida actual\nlet ind_vidaPLC400 = variablesPLC_PES[\"INDICATIVO_VIDA_PLC\"];\nlet ind_vidaPLC1200 = variablesPLC_Galibo[\"INDICATIVO_VIDA_1200\"];\n\n\n\n\nmsg.payload = {ind_vidaPLC400, ind_vidaPLC1200 };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1140,
        "wires": [
            [
                "ae3c7aae6bad67f3"
            ]
        ]
    },
    {
        "id": "1e3d17438556efd1",
        "type": "inject",
        "z": "0c63b7609023e589",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1050,
        "y": 1140,
        "wires": [
            [
                "f602d681bd34a55a"
            ]
        ]
    },
    {
        "id": "ae3c7aae6bad67f3",
        "type": "debug",
        "z": "0c63b7609023e589",
        "name": "debug 197",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f293bc8914058900",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "Activar ",
        "func": "global.set(\"mecActivado\", true);\nmsg.payload = {\"value\":[true]};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 260,
        "wires": [
            [
                "00c3fb636aa362a9"
            ]
        ]
    },
    {
        "id": "00c3fb636aa362a9",
        "type": "link out",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "Activar_Mecalux",
        "mode": "link",
        "links": [
            "929a3f7c7828c49c"
        ],
        "x": 1815,
        "y": 260,
        "wires": []
    },
    {
        "id": "3a9439dd23b181d3",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "setMec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1530,
        "y": 260,
        "wires": [
            [
                "f293bc8914058900"
            ]
        ]
    },
    {
        "id": "c34f1e2bfc458b44",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "DesActivar ",
        "func": "global.set(\"mecActivado\", false);\nmsg.payload = {\"value\":[false]};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 340,
        "wires": [
            [
                "bcac06e2208692c9"
            ]
        ]
    },
    {
        "id": "bcac06e2208692c9",
        "type": "link out",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "Activar_Mecalux",
        "mode": "link",
        "links": [
            "929a3f7c7828c49c"
        ],
        "x": 1815,
        "y": 340,
        "wires": []
    },
    {
        "id": "1d0ae65e99dc18d5",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "872439fa01ce5c4d",
        "name": "resetMec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 340,
        "wires": [
            [
                "c34f1e2bfc458b44"
            ]
        ]
    },
    {
        "id": "7311cea0d68c4710",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "scannerPIE1",
        "func": "// Obtener las variablesPLC de la global\nlet variablesPLC = global.get('nuevoRegistroPIE');\nflow.set(\"ERROR_ESCANER_FILTRO\", false); // Reiniciar el flag de error\n\n// Verificar si las variablesPLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PIE1 no están definidas\");\n    return null;\n}\n\n// Inicializar la cadena concatenada\nlet concatenatedString =\n    variablesPLC[\"COD3_C1\"] +\n    variablesPLC[\"COD3_C2\"] +\n    variablesPLC[\"COD3_C3\"] +\n    variablesPLC[\"COD13_C1\"] +\n    variablesPLC[\"COD13_C2\"] +\n    variablesPLC[\"COD13_C3\"] +\n    variablesPLC[\"COD13_C4\"] +\n    variablesPLC[\"COD13_C5\"] +\n    variablesPLC[\"COD13_C6\"] +\n    variablesPLC[\"COD13_C7\"] +\n    variablesPLC[\"COD13_C8\"] +\n    variablesPLC[\"COD13_C9\"] +\n    variablesPLC[\"COD13_C10\"] +\n    variablesPLC[\"COD13_C11\"] +\n    variablesPLC[\"COD13_C12\"] +\n    variablesPLC[\"COD13_C13\"] +\n    variablesPLC[\"COD6_C1\"] +\n    variablesPLC[\"COD6_C2\"] +\n    variablesPLC[\"COD6_C3\"] +\n    variablesPLC[\"COD6_C4\"] +\n    variablesPLC[\"COD6_C5\"] +\n    variablesPLC[\"COD6_C6\"] +\n    variablesPLC[\"COD2_C1\"] +\n    variablesPLC[\"COD2_C2\"] +\n    variablesPLC[\"COD_ULTIMO_DIG\"];\n\n    \n// Si no comienza con 'PAS', limpiar espacios\nif (!concatenatedString.startsWith(\"PAS\")) {\n    concatenatedString = concatenatedString.trim().replace(/\\s+/g, ''); // Limpiar espacios\n}\n\n// Validar la cadena\nif (global.get(\"mecActivado\") === true) {\n    if (concatenatedString.startsWith(\"PAS\")) {\n        // Si comienza con 'PAS', añadir un dígito aleatorio\n       // concatenatedString += Math.floor(Math.random() * 10);\n      //  concatenatedString += 9;\n        node.warn(`Cadena modificada con 'PAS': ${concatenatedString}`);\n    } else {\n        // Limpiar caracteres no numéricos\n        concatenatedString = concatenatedString.replace(/[^0-9]/g, '');\n\n        // Verificar que la cadena contiene solo dígitos y tiene la longitud correcta\n        if (/^\\d+$/.test(concatenatedString)) {\n            if (concatenatedString.length >= 17) {\n                node.warn(\"Cadena numérica válida detectada.\");\n            } else {\n                flow.set(\"ERROR_ESCANER_FILTRO\", true);\n                global.set('lecturaScannerPIE', \"ERROR\");\n                node.error(\"Error: La cadena numérica tiene menos de 17 dígitos.\");\n                return null;\n            }\n        } else {\n            flow.set(\"ERROR_ESCANER_FILTRO\", true);\n            global.set('lecturaScannerPIE', \"ERROR\");\n            node.error(\"Error: La cadena contiene caracteres no válidos.\");\n            return null;\n        }\n    }\n} else {\n    // Si mecActivado es false, añadir la variable ALTURA\n  //  concatenatedString += variablesPLC[\"ALTURA\"];\n}\n\n// Guardar la cadena concatenada como una variable global\nglobal.set('lecturaScannerPIE', concatenatedString);\n\n// Log para depuración\nnode.warn(`Lectura concatenada final: ${concatenatedString}`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "462b7c335ac64eef",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "resetPIE1",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroPES');\nlet estadoActual = global.get('stateMachineEventBusquedaPIE1') || 0;\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PIE1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\nlet variablesPLC1200 = global.get('GESTION_GALIBO');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC1200 === 'undefined' || variablesPLC1200 === null) {\n    node.error(\"Las variables del PLC para PLC1200 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\nlet sgaProcessPIE1 = variablesPLC[\"SGA_PROCESS\"];\nlet waitForSndMR16PIE1 = variablesPLC[\"WaitForSndMR16\"];\nlet ReLanzarEventoPIE1= variablesPLC1200[\"ReLANZAR_EVENTO_PIE1\"];\n\n// Obtener el valor actual de 'WaitForSndMR16' almacenado previamente\nlet prevWaitForSndMR16 = global.get('prevWaitForSndMR16') || false;\n\n// Verificar si la variable 'SGA_PROCESS' está en true\nif (estadoActual === 105 || ReLanzarEventoPIE1) {\n    // Si 'WaitForSndMR16' pasa de false a true, establecer 'palletInPIE1' a true\n    //if ( waitForSndMR16PIE1 === false || ReLanzarEventoPIE1) {\n        global.set('stateMachineEventBusquedaPIE1', 900);\n       \n    //}\n \n}\n\n\nreturn msg;\n\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": []
    },
    {
        "id": "9737857877075969",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "name": "Escribir ",
        "func": "// Leer las variables del PLC almacenadas en una variable global\nlet variablesPLC = global.get('nuevoRegistroPES');\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC para PIE1 no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Asignar las variables adicionales leídas del PLC a las variables globales según corresponda\nlet sgaProcessPIE1 = variablesPLC[\"SGA_PROCESS\"];\nlet waitForSndMR16PIE1 = variablesPLC[\"WaitForSndMR16\"];\n\nmsg.payload = {\"value\":[waitForSndMR16PIE1]};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 380,
        "wires": [
            [
                "2d9ad0c454f26b48"
            ]
        ]
    },
    {
        "id": "2d9ad0c454f26b48",
        "type": "s7comm write",
        "z": "0c63b7609023e589",
        "g": "03567257f7a36264",
        "connection": "a8633ef8f20683fc",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"2010\",\"S7_Datatype\":\"X\",\"S7_Offset\":\"8\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"F_BACK_PALLET_IN_PIE\"}",
        "s7Name": "F_BACK_PALLET_IN_PIE",
        "topic": "",
        "name": "F_BACK_PALLET_IN_PIE",
        "signalSetted": false,
        "x": 1140,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f5f6f801b267fb12",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "global.set('pausePIE1', true);",
        "func": "global.set('pausePIE1', true); \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4781b24c2ba6eba7",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "f5f6f801b267fb12"
            ]
        ]
    },
    {
        "id": "14e5759d25e170f8",
        "type": "function",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "global.set('pausePIE1', false); ",
        "func": "global.set('pausePIE1', false); \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b10923457a6d7ed5",
        "type": "inject",
        "z": "0c63b7609023e589",
        "g": "2a5825454f4b7ae0",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 460,
        "wires": [
            [
                "14e5759d25e170f8"
            ]
        ]
    },
    {
        "id": "61ce5285657dcef0",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "9458b62c5de9c472",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "c56df627408c27ef"
            ]
        ]
    },
    {
        "id": "c56df627408c27ef",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9458b62c5de9c472",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC = global.get(\"nuevoRegistroSCADA\");\nlet mecActivado  = global.get(\"mecActivado\");\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Obtener el valor actual de LLEGADA_PIS2_MATRICULA_PALET\nlet llegadaMatriculaPIS2 = variablesPLC[\"LLEGADA_PIS2_MATRICULA_PALET\"];\nlet LLEGADA_PIS2_DATOS_PREPARADOS = variablesPLC[\"LLEGADA_PIS2_DATOS_PREPARADOS\"];\n\n\n// Leer el valor anterior almacenado en la variable global\nlet valorAnteriorMatriculaPIS2 = global.get(\"valorAnteriorMatriculaPIS2\") || 0;\nif (mecActivado) {\n// Verificar si el valor ha cambiado a un número distinto de 0\nif ((valorAnteriorMatriculaPIS2 !== llegadaMatriculaPIS2 && llegadaMatriculaPIS2 !== 0) && LLEGADA_PIS2_DATOS_PREPARADOS) {\n    // Establecer la variable de flujo finMovPIS2_enCurso en true\n    flow.set(\"finMovPIS2_enCurso\", true);\n    \n    // Establecer la variable de flujo matEnPis2 con el valor actual\n    flow.set(\"matEnPis2\", llegadaMatriculaPIS2);\n    \n    // Aviso: Fin de movimiento activado para PIS2\n    node.warn(\"Fin de movimiento activado para PIS2 debido a cambio en LLEGADA_PIS2_MATRICULA_PALET\");\n}\n\n// Actualizar el valor anterior para la siguiente ejecución\nglobal.set(\"valorAnteriorMatriculaPIS2\", llegadaMatriculaPIS2);\n\nreturn msg;\n} else {\n   return null; \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "fe56a9c675d91b04",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "c92b9079d03d7a12"
            ]
        ]
    },
    {
        "id": "c92b9079d03d7a12",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "Check finMovPIS2",
        "func": "\n\n// Verificar si el flujo finMovPIS2_enCurso está en true\nif (flow.get(\"finMovPIS2_enCurso\") !== true) {\n  // node.warn(\"El flujo 'finMovPIS2_enCurso' no está en true, saliendo.\");\n    return null;  // Salir si finMovPIS2_enCurso no está en true\n}\n\n// Obtener el numID de PIS2 desde la variable de flujo matEnPis2\nlet numID_PIS2 = flow.get(\"matEnPis2\");\n\n// Verificar que el numID_PIS2 está definido antes de proceder\nif (typeof numID_PIS2 !== 'undefined' && numID_PIS2 !== null) {\n    node.warn(`NumID de PIS2 capturado: ${numID_PIS2}`);\n\n    // Realizar consulta SQL para obtener movNumber, uma, y aux1 basados en el id (numID_PIS2)\n    let query = \"SELECT movNumber, uma, aux1 FROM movimientosTLVsPSPs WHERE id = \" + numID_PIS2;\n\n    // Ejecutar la consulta SQL\n    msg.topic = query;\n    msg.pis = \"PIS2\";\n\n   // node.warn(`Consulta SQL preparada: ${query}`);\n\n    // Devolver el mensaje para la consulta SQL\n    return msg;\n} else {\n  // node.warn(\"NumID de PIS2 no definido o es null.\");\n}\n\n// Si no se encuentra ningún numID de PIS2, devolver null\n//node.warn(\"Fin del proceso, no se encontró ningún numID válido para PIS2.\");\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 700,
        "wires": [
            [
                "3673bceacb238fa7",
                "d73465531c317ded"
            ]
        ]
    },
    {
        "id": "3e0d82457d9afba9",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "Update Global Variables",
        "func": "// Asumiendo que el resultado de la consulta SQL viene en msg.payload\nlet movNumber, uma, tipoContenedor, movNumberDep, movNumberExt ;\n\nif (msg.payload && msg.payload.length > 0) {\n    // Capturar los valores desde el resultado de la consulta\n    movNumber = msg.payload[0].movNumber;\n    uma = msg.payload[0].uma;\n    tipoContenedor = msg.payload[0].aux1;  // Capturar el valor de aux1 para usarlo como tipo de contenedor\n \n   \n    node.warn(`Consulta exitosa para PIS2: movNumber = ${movNumber}, uma = ${uma}, tipoContenedor = ${tipoContenedor}`);\n} else {\n    // Simular valores si no se encuentran resultados en la base de datos\n    movNumber = 9999; // Valor simulado para Número de Movimiento\n    uma = \"Error\"; // Valor simulado para UMA\n    tipoContenedor = 1; // Valor simulado para tipo de contenedor\n    //node.warn(`Consulta fallida para PIS2: No se encontraron resultados en la base de datos. Usando valores simulados: movNumber = ${movNumber}, uma = ${uma}, tipoContenedor = ${tipoContenedor}`);\n}\n\n// Establecer las variables para el evento SIMO de PIS2\nglobal.set(`OperacionesEncadenadas_SIMO_PIS2`, 2); // Indica qué partes enviar para PIS2\n//node.warn(`Variable 'OperacionesEncadenadas_SIMO_PIS2' establecida a 2`);\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PIS2\nglobal.set(`NumeroAlmacen_SIMO_PIS2`, 20001);      // Número de Almacén para PIS2\nglobal.set(`Equipamiento_SIMO_PIS2`, `PIS2`);   // Equipamiento específico para PIS2\n////node.warn(`Variables de Almacén y Equipamiento establecidas para PIS2`);\n\n// Actualizar las variables globales con movNumber y uma para PIS2\nglobal.set(`NumeroMovimiento_SIMO_Fin_PIS2`, movNumber);\nglobal.set(`UMA_SIMO_Fin_PIS2`, uma);\n//node.warn(`Variables 'NumeroMovimiento_SIMO_Fin_PIS2' y 'UMA_SIMO_Fin_PIS2' establecidas con movNumber = ${movNumber} y uma = ${uma}`);\n\n// Definir el resto de variables y constantes para el fin de movimiento\nglobal.set(`CantidadFinesMov_SIMO_PIS2`, 1);\nglobal.set(`TipoEstacion_SIMO_Fin_PIS2`, 4);          // Tipo de estación para el fin de movimiento en PIS2\nglobal.set(`NumeroEstacion_SIMO_Fin_PIS2`, 2);        // Número de estación para el fin de movimiento en PIS2\nglobal.set(`CodigoError_SIMO_Fin_PIS2`, 0);           // Código de error para el fin de movimiento en PIS2\nglobal.set(`Auxiliar_SIMO_Fin_PIS2`, 0);              // Auxiliar para el fin de movimiento en PIS2\nglobal.set(`TipoContenedor_SIMO_Fin_PIS2`, tipoContenedor); // Asignar el valor de aux1 capturado a TipoContenedor\nglobal.set(`TipoAltura_SIMO_Fin_PIS2`, 1);\nglobal.set(`XLogica_SIMO_Fin_PIS2`, 1);             // Coordenada X lógica\nglobal.set(`YLogica_SIMO_Fin_PIS2`, 1);               // Coordenada Y lógica\nglobal.set(`XLocal_SIMO_Fin_PIS2`, 0);                // Coordenada X local\nglobal.set(`YLocal_SIMO_Fin_PIS2`, 0);                // Coordenada Y local\nglobal.set(`Lado_SIMO_Fin_PIS2`, 0);                  // Lado\nglobal.set(`Profundidad_SIMO_Fin_PIS2`, 1);           // Profundidad\nglobal.set(`Pasillo_SIMO_Fin_PIS2`, 0);               // Pasillo\n\nnode.warn(`Variables de fin de movimiento establecidas para PIS2`);\n\n// Variables auxiliares para el fin de movimiento en PIS2\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIS2`, 0);\n}\n//node.warn(`Variables auxiliares de fin de movimiento establecidas para PIS2`);\n\n// Poner la variable SIMO event a true para PIS2\nglobal.set(`PIS2SimoEvent`, true); // Cambiar a true para el evento SIMO\nflow.set(\"finMovPIS2_enCurso\", false);  // Restablecer la variable de flujo de movimiento en PIS2\nglobal.set(`resultadoPIS2_finDeOrden`, \"wait\");\nnode.warn(`Evento SIMO lanzado para PIS2. Flags actualizados: 'finMovLanzado' = true, 'finMovPIS2_enCurso' = false.`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 720,
        "wires": [
            [
                "2b0358ec8baa5ca2"
            ]
        ]
    },
    {
        "id": "3673bceacb238fa7",
        "type": "mysql",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "3e0d82457d9afba9",
                "37a6c45626488bef"
            ]
        ]
    },
    {
        "id": "d73465531c317ded",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "debug 115",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 660,
        "wires": []
    },
    {
        "id": "37a6c45626488bef",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "debug 116",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 600,
        "wires": []
    },
    {
        "id": "2b0358ec8baa5ca2",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "debug 117",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 760,
        "wires": []
    },
    {
        "id": "9512c87c426c6808",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet resultadoPIS2_finDeOrden = global.get(`resultadoPIS2_finDeOrden`);\nlet Flag_datos_prep_PLC = 0;\nlet MAT_PIS2 = 0;\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: MAT_PIS2 };       // Salida 3: x_Destino\n\nif (resultadoPIS2_finDeOrden === \"done\" ) {\n    // Retornar las salidas\n    flow.set(\"finMovPIS2_enCurso\", false); \n    global.set(`resultadoPIS2_finDeOrden`, \"terminado\");\n       return [msg1, msg2];\n   \n} else if (resultadoPIS2_finDeOrden === \"error\" ){\n    flow.set(\"finMovPIS2_enCurso\", true);  // Restablecer la variable de flujo de movimiento en PIS2\n    global.set(resultadoPIS2_finDeOrden, \"repitiendo\");\n    return null;\n}\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 740,
        "wires": [
            [
                "8ae03dd1858f9676"
            ],
            [
                "8e8b86a9e01dbf03"
            ]
        ]
    },
    {
        "id": "85a62c20b832fa66",
        "type": "s7comm write",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"162\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"LLEGADA_PIS2_DATOS_PREPARADOS\"}",
        "s7Name": "LLEGADA_PIS2_DATOS_PREPARADOS",
        "topic": "",
        "name": "LLEGADA_PIS2_DATOS_PREPARADOS",
        "signalSetted": false,
        "x": 1180,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "8ae03dd1858f9676",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "varPLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 660,
        "wires": [
            [
                "85a62c20b832fa66",
                "604cea4c5c7204ed"
            ]
        ]
    },
    {
        "id": "b3ccef36647fa4de",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "2d64fa553983b7d0"
            ]
        ]
    },
    {
        "id": "2d64fa553983b7d0",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "Check finMovPIS3",
        "func": "\n\n// Verificar si el flujo finMovPIS3_enCurso está en true\nif (flow.get(\"finMovPIS3_enCurso\") !== true) {\n  // node.warn(\"El flujo 'finMovPIS3_enCurso' no está en true, saliendo.\");\n    return null;  // Salir si finMovPIS3_enCurso no está en true\n}\n\n// Obtener el numID de PIS3 desde la variable de flujo matEnPIS3\nlet numID_PIS3 = flow.get(\"matEnPIS3\");\n\n// Verificar que el numID_PIS3 está definido antes de proceder\nif (typeof numID_PIS3 !== 'undefined' && numID_PIS3 !== null) {\n    node.warn(`NumID de PIS3 capturado: ${numID_PIS3}`);\n\n    // Realizar consulta SQL para obtener movNumber, uma, y aux1 basados en el id (numID_PIS3)\n    let query = \"SELECT movNumber, uma, aux1  FROM movimientosTLVsPSPs WHERE id = \" + numID_PIS3;\n\n    // Ejecutar la consulta SQL\n    msg.topic = query;\n    msg.pis = \"PIS3\";\n\n   // node.warn(`Consulta SQL preparada: ${query}`);\n\n    // Devolver el mensaje para la consulta SQL\n    return msg;\n} else {\n  // node.warn(\"NumID de PIS3 no definido o es null.\");\n}\n\n// Si no se encuentra ningún numID de PIS3, devolver null\n//node.warn(\"Fin del proceso, no se encontró ningún numID válido para PIS3.\");\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1240,
        "wires": [
            [
                "0c689f2b8ff62c5e",
                "4b0a55d2f1337b4a"
            ]
        ]
    },
    {
        "id": "d570a3f66c6ec22a",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "Update Global Variables",
        "func": "// Asumiendo que el resultado de la consulta SQL viene en msg.payload\nlet movNumber, uma, tipoContenedor, movNumberDep, movNumberExt ;\n\nif (msg.payload && msg.payload.length > 0) {\n    // Capturar los valores desde el resultado de la consulta\n    movNumber = msg.payload[0].movNumber;\n    uma = msg.payload[0].uma;\n    tipoContenedor = msg.payload[0].aux1;  // Capturar el valor de aux1 para usarlo como tipo de contenedor\n\n   \n    node.warn(`Consulta exitosa para PIS3: movNumber = ${movNumber}, uma = ${uma}, tipoContenedor = ${tipoContenedor}`);\n} else {\n    // Simular valores si no se encuentran resultados en la base de datos\n    movNumber = 9999; // Valor simulado para Número de Movimiento\n    uma = \"Error\"; // Valor simulado para UMA\n    tipoContenedor = 1; // Valor simulado para tipo de contenedor\n    //node.warn(`Consulta fallida para PIS3: No se encontraron resultados en la base de datos. Usando valores simulados: movNumber = ${movNumber}, uma = ${uma}, tipoContenedor = ${tipoContenedor}`);\n}\n\n// Establecer las variables para el evento SIMO de PIS3\nglobal.set(`OperacionesEncadenadas_SIMO_PIS3`, 2); // Indica qué partes enviar para PIS3\n//node.warn(`Variable 'OperacionesEncadenadas_SIMO_PIS3' establecida a 2`);\n\n// Definir las variables y constantes para los datos compartidos (Almacén, Equipamiento) para PIS3\nglobal.set(`NumeroAlmacen_SIMO_PIS3`, 20001);      // Número de Almacén para PIS3\nglobal.set(`Equipamiento_SIMO_PIS3`, `PIS3`);   // Equipamiento específico para PIS3\n////node.warn(`Variables de Almacén y Equipamiento establecidas para PIS3`);\n\n// Actualizar las variables globales con movNumber y uma para PIS3\nglobal.set(`NumeroMovimiento_SIMO_Fin_PIS3`, movNumber);\nglobal.set(`UMA_SIMO_Fin_PIS3`, uma);\n//node.warn(`Variables 'NumeroMovimiento_SIMO_Fin_PIS3' y 'UMA_SIMO_Fin_PIS3' establecidas con movNumber = ${movNumber} y uma = ${uma}`);\n\n// Definir el resto de variables y constantes para el fin de movimiento\nglobal.set(`CantidadFinesMov_SIMO_PIS3`, 1);\nglobal.set(`TipoEstacion_SIMO_Fin_PIS3`, 4);          // Tipo de estación para el fin de movimiento en PIS3\nglobal.set(`NumeroEstacion_SIMO_Fin_PIS3`, 3);        // Número de estación para el fin de movimiento en PIS3\nglobal.set(`CodigoError_SIMO_Fin_PIS3`, 0);           // Código de error para el fin de movimiento en PIS3\nglobal.set(`Auxiliar_SIMO_Fin_PIS3`, 0);              // Auxiliar para el fin de movimiento en PIS3\nglobal.set(`TipoContenedor_SIMO_Fin_PIS3`, tipoContenedor); // Asignar el valor de aux1 capturado a TipoContenedor\nglobal.set(`TipoAltura_SIMO_Fin_PIS3`, 1);\nglobal.set(`XLogica_SIMO_Fin_PIS3`, 1);             // Coordenada X lógica\nglobal.set(`YLogica_SIMO_Fin_PIS3`, 1);               // Coordenada Y lógica\nglobal.set(`XLocal_SIMO_Fin_PIS3`, 0);                // Coordenada X local\nglobal.set(`YLocal_SIMO_Fin_PIS3`, 0);                // Coordenada Y local\nglobal.set(`Lado_SIMO_Fin_PIS3`, 0);                  // Lado\nglobal.set(`Profundidad_SIMO_Fin_PIS3`, 1);           // Profundidad\nglobal.set(`Pasillo_SIMO_Fin_PIS3`, 0);               // Pasillo\n\nnode.warn(`Variables de fin de movimiento establecidas para PIS3`);\n\n// Variables auxiliares para el fin de movimiento en PIS3\nfor (let j = 1; j <= 8; j++) {\n    global.set(`Aux0${j}_SIMO_Fin_PIS3`, 0);\n}\n//node.warn(`Variables auxiliares de fin de movimiento establecidas para PIS3`);\n\n// Poner la variable SIMO event a true para PIS3\nglobal.set(`PIS3SimoEvent`, true); // Cambiar a true para el evento SIMO\nflow.set(\"finMovPIS3_enCurso\", false);  // Restablecer la variable de flujo de movimiento en PIS3\n\nnode.warn(`Evento SIMO lanzado para PIS3. Flags actualizados: 'finMovLanzado' = true, 'finMovPIS3_enCurso' = false.`);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1260,
        "wires": [
            [
                "f2478d3e69299d77",
                "176c98b01a1cabe3"
            ]
        ]
    },
    {
        "id": "0c689f2b8ff62c5e",
        "type": "mysql",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 570,
        "y": 1200,
        "wires": [
            [
                "d570a3f66c6ec22a",
                "94cb63fb25086f99"
            ]
        ]
    },
    {
        "id": "4b0a55d2f1337b4a",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "debug 151",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1200,
        "wires": []
    },
    {
        "id": "94cb63fb25086f99",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "debug 152",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f2478d3e69299d77",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "debug 153",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1300,
        "wires": []
    },
    {
        "id": "176c98b01a1cabe3",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "Escribir en PLC",
        "func": "\n// Capturar variables de flujo\nlet Flag_destino_prep_SGA = 1;\nlet Flag_datos_prep_PLC = 0;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_destino_prep_SGA };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: Flag_datos_prep_PLC };       // Salida 3: x_Destino\n\n\n// Retornar las salidas\nreturn [msg1, msg2];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "c35df15e61863a35"
            ],
            [
                "0d2e597fcba4baa5"
            ]
        ]
    },
    {
        "id": "5cfbbbc5d122c8ea",
        "type": "s7comm write",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"183\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"LLEGADA_PEE_Flag_datos_prep_SGA\"}",
        "s7Name": "LLEGADA_PEE_Flag_datos_prep_SGA",
        "topic": "",
        "name": "LLEGADA_PEE_Flag_datos_prep_SGA",
        "signalSetted": false,
        "x": 1160,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "c35df15e61863a35",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "Flag_datos_prep_SGA",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1140,
        "wires": [
            [
                "5cfbbbc5d122c8ea",
                "95a84a887a5f86aa"
            ]
        ]
    },
    {
        "id": "144cc2ed9550fbfe",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "f316f8e75d485617",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "4083331f6e5fd44c"
            ]
        ]
    },
    {
        "id": "4083331f6e5fd44c",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "f316f8e75d485617",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC = global.get(\"nuevoRegistroPES\");\nlet mecActivado  = global.get(\"mecActivado\");\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Obtener el valor actual de LLEGADA_PIS3_MATRICULA_PALET\nlet llegadaMatriculaPIS3 = variablesPLC[\"LLEGADA_PEE_Matricula_palet\"];\nlet LLEGADA_PIS3_DATOS_PREPARADOS = variablesPLC[\"LLEGADA_PEE_Flag_datos_prep_PLC\"];\n\n\n// Leer el valor anterior almacenado en la variable global\nlet valorAnteriorMatriculaPIS3 = global.get(\"valorAnteriorMatriculaPIS3\") || 0;\nif (mecActivado) {\n// Verificar si el valor ha cambiado a un número distinto de 0\nif ((valorAnteriorMatriculaPIS3 !== llegadaMatriculaPIS3 && llegadaMatriculaPIS3 !== 0)) {  // && LLEGADA_PIS3_DATOS_PREPARADOS\n    // Establecer la variable de flujo finMovPIS3_enCurso en true\n    flow.set(\"finMovPIS3_enCurso\", true);\n    \n    // Establecer la variable de flujo matEnPIS3 con el valor actual\n    flow.set(\"matEnPIS3\", llegadaMatriculaPIS3);\n    \n    // Aviso: Fin de movimiento activado para PIS3\n    node.warn(\"Fin de movimiento activado para PIS3 debido a cambio en LLEGADA_PIS3_MATRICULA_PALET\");\n}\n\n// Actualizar el valor anterior para la siguiente ejecución\nglobal.set(\"valorAnteriorMatriculaPIS3\", llegadaMatriculaPIS3);\n\nreturn msg;\n}else{\n    return null;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "0d2e597fcba4baa5",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "f7ef3d45555371ee"
            ]
        ]
    },
    {
        "id": "f7ef3d45555371ee",
        "type": "s7comm write",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"B\",\"S7_Offset\":\"182\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"LLEGADA_PEE_Flag_datos_prep_PLC\"}",
        "s7Name": "LLEGADA_PEE_Flag_datos_prep_PLC",
        "topic": "",
        "name": "LLEGADA_PEE_Flag_datos_prep_PLC",
        "signalSetted": false,
        "x": 1120,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "f0006d7c4750bbbd",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 1080,
        "wires": [
            [
                "c6729624a644c0bb"
            ]
        ]
    },
    {
        "id": "c6729624a644c0bb",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "name": "actualizacionVariablesPLC",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC = global.get(\"nuevoRegistroPES\");\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Obtener el valor actual de LLEGADA_PIS3_MATRICULA_PALET\nlet llegadaMatriculaPIS3 = variablesPLC[\"LLEGADA_PEE_Matricula_palet\"];\nlet LLEGADA_PIS3_DATOS_PREPARADOS = variablesPLC[\"LLEGADA_PEE_Flag_datos_prep_PLC\"];\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: llegadaMatriculaPIS3 };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: LLEGADA_PIS3_DATOS_PREPARADOS };  // Salida 2: pasilloDestino\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1080,
        "wires": [
            [
                "1566707e20ab4154"
            ],
            [
                "6c8becb943af2b97"
            ]
        ]
    },
    {
        "id": "1566707e20ab4154",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "name": "debug 157",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6c8becb943af2b97",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "name": "debug 158",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a0c11b9cc4f8f675",
        "type": "mysql",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1230,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "95a84a887a5f86aa",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "9f2d1da6a55ab1e4",
        "name": "update",
        "func": "// Obtener el numID de PIS3 desde la variable de flujo matEnPIS3\nlet numID_PIS3 = flow.get(\"matEnPIS3\");\n\n// Verificar que el numID_PIS3 está definido antes de proceder\nif (typeof numID_PIS3 !== 'undefined' && numID_PIS3 !== null) {\n    node.warn(`NumID de PIS3 capturado para eliminación: ${numID_PIS3}`);\n\n\n    // Realizar consulta SQL para actualizar el estado de la fila con el id numID_PIS1\n    let query = `\n    UPDATE movimientosTLVsPSPs\n    SET estado = 'finish', fechaFin  = NOW()\n    WHERE id = ${numID_PIS3};\n`;\n    // Ejecutar la consulta SQL\n    msg.topic = query;\n    msg.pis = \"PIS3\";\n\n    // Enviar el mensaje con la consulta para ser ejecutada\n    return msg;\n} else {\n    node.error(\"Error: numID_PIS3 no está definido\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1060,
        "wires": [
            [
                "a0c11b9cc4f8f675"
            ]
        ]
    },
    {
        "id": "83923398a89a5edd",
        "type": "mysql",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1230,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "604cea4c5c7204ed",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "update",
        "func": "// Obtener el numID de PIS3 desde la variable de flujo matEnPIS3\nlet numID_PIS2 = flow.get(\"matEnPis2\");\n\n// Verificar que el numID_PIS3 está definido antes de proceder\nif (typeof numID_PIS2 !== 'undefined' && numID_PIS2 !== null) {\n    node.warn(`NumID de PIS3 capturado para eliminación: ${numID_PIS2}`);\n\n\n    // Realizar consulta SQL para actualizar el estado de la fila con el id numID_PIS1\n    let query = `\n    UPDATE movimientosTLVsPSPs\n    SET estado = 'finish', fechaFin  = NOW()\n    WHERE id = ${numID_PIS2};\n`;\n\n    // Ejecutar la consulta SQL\n    msg.topic = query;\n    msg.pis = \"PIS2\";\n\n    // Enviar el mensaje con la consulta para ser ejecutada\n    return msg;\n} else {\n    node.error(\"Error: numID_PIS2 no está definido\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "83923398a89a5edd"
            ]
        ]
    },
    {
        "id": "d6b4673213766b9d",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "4fd7a7925257d733"
            ]
        ]
    },
    {
        "id": "4fd7a7925257d733",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "Check finMovPIS1",
        "func": "\n\n// Verificar si el flujo finMovPIS1_enCurso está en true\nif (flow.get(\"finMovPIS1_enCurso\") !== true) {\n  // node.warn(\"El flujo 'finMovPIS1_enCurso' no está en true, saliendo.\");\n    return null;  // Salir si finMovPIS1_enCurso no está en true\n}\n\n// Obtener el numID de PIS1 desde la variable de flujo matEnPIS1\nlet numID_PIS1 = flow.get(\"matEnPIS1\");\n\n// Verificar que el numID_PIS1 está definido antes de proceder\nif (typeof numID_PIS1 !== 'undefined' && numID_PIS1 !== null) {\n    node.warn(`NumID de PIS1 capturado: ${numID_PIS1}`);\n\n    // Realizar consulta SQL para obtener movNumber, uma, y aux1 basados en el id (numID_PIS1)\n    let query = \"SELECT movNumber, uma, aux1  FROM movimientosPIE1 WHERE id = \" + numID_PIS1;\n\n    // Ejecutar la consulta SQL\n    msg.topic = query;\n    msg.pis = \"PIS1\";\n\n   // node.warn(`Consulta SQL preparada: ${query}`);\n    flow.set(\"finMovPIS1_enCurso\", false);\n    // Devolver el mensaje para la consulta SQL\n    return msg;\n} else {\n  // node.warn(\"NumID de PIS1 no definido o es null.\");\n}\n\n// Si no se encuentra ningún numID de PIS1, devolver null\n//node.warn(\"Fin del proceso, no se encontró ningún numID válido para PIS1.\");\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "6bf2b17cfbfd461e",
                "38ae4f83a947cd2a"
            ]
        ]
    },
    {
        "id": "8227b9aa89bffbcf",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "Update Global Variables",
        "func": "// Obtener la tarea desde la variable global tareaPIE1\nlet tareaPIE1 = global.get('tareaPIE1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPIE1 === 'undefined') {\n    node.error(\"Error: tareaPIE1 no está definida\", msg);\n    return null;\n}\n\n// Verificar el destino de la tarea y asignar variables en función de PIS1 o REJ1\nlet destinoEstacion = tareaPIE1.destino.estacion;\n\n// Valores iniciales de las variables\nlet movNumber, uma, tipoContenedor;\n\n// Verificar si la consulta SQL proporcionó datos\nif (msg.payload && msg.payload.length > 0) {\n    // Capturar los valores desde el resultado de la consulta\n    movNumber = msg.payload[0].movNumber;\n    uma = msg.payload[0].uma;\n    tipoContenedor = msg.payload[0].aux1; // Capturar el valor de aux1 para usarlo como tipo de contenedor\n   // node.warn(`Consulta exitosa para ${destinoEstacion}: movNumber = ${movNumber}, uma = ${uma}, tipoContenedor = ${tipoContenedor}`);\n} else {\n    // Simular valores si no se encuentran resultados en la base de datos\n    movNumber = 9999;\n    uma = \"Error\";\n    tipoContenedor = 1;\n   // node.warn(`Consulta fallida para ${destinoEstacion}: No se encontraron resultados en la base de datos. Usando valores simulados.`);\n}\n\n// Configuración de variables en función del destino\nif (destinoEstacion === 'PIS1') {\n    // Configuración para PIS1\n    global.set(`OperacionesEncadenadas_SIMO_PIS1`, 2);\n    global.set(`NumeroAlmacen_SIMO_PIS1`, 20001);\n    global.set(`Equipamiento_SIMO_PIS1`, `PIS1`);\n    global.set(`NumeroMovimiento_SIMO_Fin_PIS1`, movNumber);\n    global.set(`UMA_SIMO_Fin_PIS1`, uma);\n    global.set(`CantidadFinesMov_SIMO_PIS1`, 1);\n    global.set(`TipoEstacion_SIMO_Fin_PIS1`, 4);\n    global.set(`NumeroEstacion_SIMO_Fin_PIS1`, 1);\n    global.set(`CodigoError_SIMO_Fin_PIS1`, 0);\n    global.set(`Auxiliar_SIMO_Fin_PIS1`, 0);\n    global.set(`TipoContenedor_SIMO_Fin_PIS1`, tipoContenedor);\n    global.set(`TipoAltura_SIMO_Fin_PIS1`, 1);\n    global.set(`XLogica_SIMO_Fin_PIS1`, 1);\n    global.set(`YLogica_SIMO_Fin_PIS1`, 1);\n    global.set(`XLocal_SIMO_Fin_PIS1`, 0);\n    global.set(`YLocal_SIMO_Fin_PIS1`, 0);\n    global.set(`Lado_SIMO_Fin_PIS1`, 0);\n    global.set(`Profundidad_SIMO_Fin_PIS1`, 1);\n    global.set(`Pasillo_SIMO_Fin_PIS1`, 0);\n\n    // Variables auxiliares para PIS1\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Fin_PIS1`, 0);\n    }\n\n    global.set(`PIS1SimoEvent`, true); // Lanzar evento para PIS1\n    flow.set(\"finMovPIS1_enCurso\", false);\n   // node.warn(`Evento SIMO lanzado para PIS1. Flags actualizados.`);\n    return msg;\n    \n} else if (destinoEstacion === 'REJ1') {\n    // Configuración para REJ1\n    global.set(`OperacionesEncadenadas_SIMO_REJ1`, 2);\n    global.set(`NumeroAlmacen_SIMO_REJ1`, 20001);\n    global.set(`Equipamiento_SIMO_REJ1`, `REJ1`);\n    global.set(`NumeroMovimiento_SIMO_Fin_REJ1`, movNumber);\n    global.set(`UMA_SIMO_Fin_REJ1`, uma);\n    global.set(`CantidadFinesMov_SIMO_REJ1`, 1);\n    global.set(`TipoEstacion_SIMO_Fin_REJ1`, 7);\n    global.set(`NumeroEstacion_SIMO_Fin_REJ1`, 1);\n    global.set(`CodigoError_SIMO_Fin_REJ1`, 0);\n    global.set(`Auxiliar_SIMO_Fin_REJ1`, 0);\n    global.set(`TipoContenedor_SIMO_Fin_REJ1`, tipoContenedor);\n    global.set(`TipoAltura_SIMO_Fin_REJ1`, 1);\n    global.set(`XLogica_SIMO_Fin_REJ1`, 1);\n    global.set(`YLogica_SIMO_Fin_REJ1`, 1);\n    global.set(`XLocal_SIMO_Fin_REJ1`, 0);\n    global.set(`YLocal_SIMO_Fin_REJ1`, 0);\n    global.set(`Lado_SIMO_Fin_REJ1`, 0);\n    global.set(`Profundidad_SIMO_Fin_REJ1`, 1);\n    global.set(`Pasillo_SIMO_Fin_REJ1`, 0);\n\n    // Variables auxiliares para REJ1\n    for (let j = 1; j <= 8; j++) {\n        global.set(`Aux0${j}_SIMO_Fin_REJ1`, 0);\n    }\n\n    global.set(`REJ1SimoEvent`, true); // Lanzar evento para REJ1\n    flow.set(\"finMovPIS1_enCurso\", false);\n   // node.warn(`Evento SIMO lanzado para REJ1. Flags actualizados.`);\n    return msg;\n} else {\n    node.error(`Estación de destino no válida: ${destinoEstacion}`, msg);\n    return null;\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 320,
        "wires": [
            [
                "a2ecda69d097479e",
                "0b0e0804a919b066"
            ]
        ]
    },
    {
        "id": "6bf2b17cfbfd461e",
        "type": "mysql",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "8227b9aa89bffbcf",
                "7537c8dad57a15da"
            ]
        ]
    },
    {
        "id": "38ae4f83a947cd2a",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "debug 188",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 260,
        "wires": []
    },
    {
        "id": "7537c8dad57a15da",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "debug 189",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 200,
        "wires": []
    },
    {
        "id": "a2ecda69d097479e",
        "type": "debug",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "debug 190",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "2caaa66b77bc7cb6",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "1b692a6bf140fa17",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "872560ecaa5fcead"
            ]
        ]
    },
    {
        "id": "872560ecaa5fcead",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "1b692a6bf140fa17",
        "name": "actualizacionVariablesPLC",
        "func": "/* // Obtener la tarea desde la variable global tareaPIE1\nlet tareaPIE1 = global.get('tareaPIE1');\n\n// Verificar si la tarea está definida\nif (typeof tareaPIE1 === 'undefined') {\n    node.error(\"Error: tareaPIE1 no está definida\", msg);\n    return null;\n}\n\n// Verificar el destino de la tarea y asignar variables en función de PIS1 o REJ1\nlet destinoEstacion = tareaPIE1.destino.estacion;\n\nif (destinoEstacion !== 'PIS1' && destinoEstacion !== 'REJ1') {\n\n    return null;\n} */\n\n\n// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC = global.get(\"nuevoRegistroPIE\");\n\n// Verificar si las variables del PLC están definidas\nif (typeof variablesPLC === 'undefined' || variablesPLC === null) {\n    node.error(\"Las variables del PLC no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Obtener el valor actual de LLEGADA_PIS1_MATRICULA_PALET\nlet llegadaMatriculaPIS1 = variablesPLC[\"MAT_TR25\"];\n\n\n\n// Leer el valor anterior almacenado en la variable global\nlet valorAnteriorMatriculaPIS1 = global.get(\"valorAnteriorMatriculaPIS1\") || 0;\n\n// Verificar si el valor ha cambiado a un número distinto de 0\nif ((valorAnteriorMatriculaPIS1 !== llegadaMatriculaPIS1 && llegadaMatriculaPIS1 !== 0)) {  // && LLEGADA_PIS1_DATOS_PREPARADOS\n    // Establecer la variable de flujo finMovPIS1_enCurso en true\n    flow.set(\"finMovPIS1_enCurso\", true);\n    \n    // Establecer la variable de flujo matEnPIS1 con el valor actual\n    flow.set(\"matEnPIS1\", llegadaMatriculaPIS1);\n    \n    // Aviso: Fin de movimiento activado para PIS1\n    node.warn(\"Fin de movimiento activado para PIS1 debido a cambio en LLEGADA_PIS1_MATRICULA_PALET\");\n}\n\n// Actualizar el valor anterior para la siguiente ejecución\nglobal.set(\"valorAnteriorMatriculaPIS1\", llegadaMatriculaPIS1);\n\nreturn msg;\n\n\n\n\n  // Variables adicionales\n\n // \"LLEGADA_PEE_Flag_datos_prep_SGA\": variablesPLC[\"LLEGADA_PEE_Flag_datos_prep_SGA\"],\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cf3ff5fa1d7e239c",
        "type": "mysql",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "9d0ad58da648ddab"
            ]
        ]
    },
    {
        "id": "0b0e0804a919b066",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "update",
        "func": "// Obtener el numID de PIS1 desde la variable de flujo matEnPIS1\nlet numID_PIS1 = flow.get(\"matEnPIS1\");\n\n// Verificar que el numID_PIS1 está definido antes de proceder\nif (typeof numID_PIS1 !== 'undefined' && numID_PIS1 !== null) {\n    node.warn(`NumID de PIS1 capturado para eliminación: ${numID_PIS1}`);\n\n    // Realizar consulta SQL para actualizar el estado de la fila con el id numID_PIS1\n    let query = `\n    UPDATE movimientosPIE1\n    SET estado = 'finish', fechaFin  = NOW()\n    WHERE id = ${numID_PIS1};\n`;\n\n    // Ejecutar la consulta SQL\n    msg.topic = query;\n    msg.pis = \"PIS1\";\n\n    // Enviar el mensaje con la consulta para ser ejecutada\n    return msg;\n} else {\n    node.error(\"Error: numID_PIS1 no está definido\", msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "cf3ff5fa1d7e239c"
            ]
        ]
    },
    {
        "id": "9d0ad58da648ddab",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "Escribir en PLC",
        "func": "// Capturar variables de flujo\n\nlet Mat_TR25_PLC = 0;\n\n\n\n// Crear los mensajes con los valores de las variables en su payload\nmsg. payload= Mat_TR25_PLC ;  //\n\n\n\n// Retornar las salidas\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "64a3d3f9c191555d"
            ]
        ]
    },
    {
        "id": "d38bf22e76af33b5",
        "type": "s7comm write",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"10\",\"S7_Datatype\":\"I\",\"S7_Offset\":\"50\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"MAT_TR25\"}",
        "s7Name": "MAT_TR25",
        "topic": "",
        "name": "MAT_TR25",
        "signalSetted": false,
        "x": 910,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "64a3d3f9c191555d",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "Flag_datos_prep_PLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "d38bf22e76af33b5"
            ]
        ]
    },
    {
        "id": "8e8b86a9e01dbf03",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "varPLC",
        "func": "let varPLC = msg.payload;\n// Estructura de datos para enviar a s7comm\nmsg.payload =  { \"value\":[varPLC] };\nreturn msg; // Retorna el mensaje con la nueva estructura\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 740,
        "wires": [
            [
                "c53ce936cf741b92"
            ]
        ]
    },
    {
        "id": "c53ce936cf741b92",
        "type": "s7comm write",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "connection": "c6843d58d83dda13",
        "payload": "{\"S7_Type\":\"DB\",\"S7_DBnum\":\"100\",\"S7_Datatype\":\"I\",\"S7_Offset\":\"164\",\"S7_BitOffset\":\"0\",\"S7_Quantity\":\"1\",\"S7_Name\":\"MAT_PIS2\"}",
        "s7Name": "MAT_PIS2",
        "topic": "",
        "name": "MAT_PIS2",
        "signalSetted": false,
        "x": 1090,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "439496b66cfb5497",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "09ca36b580effdd7",
        "name": "set",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "0b0e0804a919b066"
            ]
        ]
    },
    {
        "id": "75ba28410a56839e",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "Check",
        "func": "\n// Capturar la variable global\nlet resultadoPIS2_finDeOrden = global.get(\"resultadoPIS2_finDeOrden\");\nnode.status({ fill: 'green', shape: 'dot', text: 'resultadoPIS2_finDeOrden: ' + resultadoPIS2_finDeOrden });\n\n// Si la variable no existe, no hacemos nada\nif (resultadoPIS2_finDeOrden === undefined) {\n    return null;\n}\n\n// Lógica de evaluación de contenido\nif (resultadoPIS2_finDeOrden.startsWith(\"0000\")) {\n    global.set(`resultadoPIS2_finDeOrden`, \"done\");\n    return msg;\n\n} else if (\n    resultadoPIS2_finDeOrden === \"0001\" ||\n    resultadoPIS2_finDeOrden === \"0002\" ||\n    resultadoPIS2_finDeOrden === \"0006\"\n) {\n    global.set(`resultadoPIS2_finDeOrden`, \"error\");\n    return msg;\n\n} else if (resultadoPIS2_finDeOrden === \"wait\") {\n    // Lógica de espera máxima de 30 segundos\n    let tiempoEnWait = flow.get(\"tiempoEnWaitPIS2\") || 0;\n    tiempoEnWait += 1;\n    flow.set(\"tiempoEnWaitPIS2\", tiempoEnWait);\n\n    if (tiempoEnWait >= 30) {\n        global.set(`resultadoPIS2_finDeOrden`, \"error\");\n        flow.set(\"tiempoEnWaitPIS2\", 0);  // Reset del contador\n        return msg;\n    }\n\n    return null;\n\n} else if (flow.get('repeatTramaPIS2')) {\n    global.set(`resultadoPIS2_finDeOrden`, \"repeat\");\n    return msg;\n\n} else if (global.get('abortTramaPIS2')) {\n    global.set(`resultadoPIS2_finDeOrden`, \"abort\");\n    return msg;\n\n} else {\n    flow.set(\"tiempoEnWaitPIS2\", 0);  // Si cambia el estado, reinicia tiempo\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 800,
        "wires": [
            [
                "9512c87c426c6808"
            ]
        ]
    },
    {
        "id": "529f836190012b63",
        "type": "inject",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "1 seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 860,
        "wires": [
            [
                "75ba28410a56839e"
            ]
        ]
    },
    {
        "id": "0b27d6f5ac3a3916",
        "type": "function",
        "z": "8c5ac7120ee50dac",
        "g": "02ae151c33ab2035",
        "name": "Escribir en PLC",
        "func": "\n\n// Capturar variables de flujo\nlet Flag_datos_prep_PLC = 0;\nlet MAT_PIS2 = 0;\n\n\n// Crear los mensajes con los valores de las variables en su payload\nlet msg1 = { payload: Flag_datos_prep_PLC };    // Salida 1: tipoDeOrden\nlet msg2 = { payload: MAT_PIS2 };       // Salida 3: x_Destino\n\n\n// Retornar las salidas\nreturn [msg1, msg2];\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 860,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "307f3badce2ac219",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 160,
        "wires": [
            [
                "4d8d3c041bffb77a"
            ]
        ]
    },
    {
        "id": "605f61dc3afa2808",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "",
        "info": "mysql -u AI -p\nUSE almacenSilo;\nSELECT * FROM movimientos;\n",
        "x": 800,
        "y": 120,
        "wires": []
    },
    {
        "id": "10df9e72c0a7fd1f",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "insert",
        "func": "// Crear una consulta INSERT en la tabla movimientos\nmsg.topic = \"INSERT INTO movimientos (movNumber, uma, pasillo, x, y, z, fecha, turno, aux1, aux2, aux3, aux4) \" +\n            \"VALUES ('MOV12345', 'UMA001', 1, 10, 20, 30, CURDATE(), 'T1', 'AUX1', 'AUX2', 'AUX3', 'AUX4')\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "307f3badce2ac219"
            ]
        ]
    },
    {
        "id": "d17345566d5ad0a8",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 160,
        "wires": [
            [
                "10df9e72c0a7fd1f"
            ]
        ]
    },
    {
        "id": "4d8d3c041bffb77a",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 160,
        "wires": []
    },
    {
        "id": "d946f6e24b66ed68",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 360,
        "wires": [
            [
                "1a5dffda40f92c7f"
            ]
        ]
    },
    {
        "id": "1a5dffda40f92c7f",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "7bfefa24a3d0747e",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "select2",
        "func": "// Consulta SQL para obtener los datos con id = 1\nmsg.topic = \"SELECT * FROM movimientos WHERE id = 2\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 360,
        "wires": [
            [
                "d946f6e24b66ed68"
            ]
        ]
    },
    {
        "id": "e89ef3a5611f8239",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "7bfefa24a3d0747e"
            ]
        ]
    },
    {
        "id": "48b2ddb211379b7d",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 560,
        "wires": [
            [
                "8fb63bdd0379b1b9"
            ]
        ]
    },
    {
        "id": "8fb63bdd0379b1b9",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 560,
        "wires": []
    },
    {
        "id": "0e462391c2fe244f",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "update",
        "func": "// Cambiar el valor de 'x' en el registro con id = 1\nmsg.topic = \"UPDATE movimientos SET x = 50 WHERE id = 1\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "48b2ddb211379b7d"
            ]
        ]
    },
    {
        "id": "d920037b4d7d9e85",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 560,
        "wires": [
            [
                "0e462391c2fe244f"
            ]
        ]
    },
    {
        "id": "8dd87d9938d1f4ce",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "0b5d0172e3f75237"
            ]
        ]
    },
    {
        "id": "0b5d0172e3f75237",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 50",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 640,
        "wires": []
    },
    {
        "id": "d1fd79111d67652a",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "delete",
        "func": "// Consulta SQL para borrar el registro con id = 1\nmsg.topic = \"DELETE FROM movimientos WHERE id = 4\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "8dd87d9938d1f4ce"
            ]
        ]
    },
    {
        "id": "a19a96bfb58c8c70",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 640,
        "wires": [
            [
                "d1fd79111d67652a"
            ]
        ]
    },
    {
        "id": "9d8bfdf7df0c3bda",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "45deeeb5b2e0cf10"
            ]
        ]
    },
    {
        "id": "49b3ca7c1b5b08bb",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "movimientosTLV1",
        "func": "// Insertar manualmente un registro con id = 1\nmsg.topic = \"INSERT INTO movimientosTLV1 (id, movNumber, uma, pasillo, fecha) \" +\n            \"VALUES (1, 'MOV12345', 'UMA001', 1, CURDATE())\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "9d8bfdf7df0c3bda"
            ]
        ]
    },
    {
        "id": "c79362e17a05c5c9",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "49b3ca7c1b5b08bb"
            ]
        ]
    },
    {
        "id": "45deeeb5b2e0cf10",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "55611afcfdbf1c6a",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 790,
        "y": 720,
        "wires": [
            [
                "b69e5cbed8aaab5d"
            ]
        ]
    },
    {
        "id": "b69e5cbed8aaab5d",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 720,
        "wires": []
    },
    {
        "id": "f327ee96c8d35f27",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "AsignarID",
        "func": "// Iniciar el proceso de detección del primer ID vacío\n// Comienza con el id 1\ncontext.set('idToCheck', 1);\nreturn { payload: \"Start checking for first missing ID\" };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 720,
        "wires": [
            [
                "be2b4d50d1ec4e64"
            ]
        ]
    },
    {
        "id": "56a0c5816f5af725",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 720,
        "wires": [
            [
                "f327ee96c8d35f27"
            ]
        ]
    },
    {
        "id": "ab08b46f0b7fc01a",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 420,
        "wires": [
            [
                "58907bc2f91de8b5"
            ]
        ]
    },
    {
        "id": "58907bc2f91de8b5",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 420,
        "wires": []
    },
    {
        "id": "a11b7998a48b6d8b",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "select3",
        "func": "// Consulta SQL para obtener los datos con id = 1\nmsg.topic = \"SELECT * FROM movimientos WHERE id = 10\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 420,
        "wires": [
            [
                "ab08b46f0b7fc01a"
            ]
        ]
    },
    {
        "id": "7281f4d05b7afdc5",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "a11b7998a48b6d8b"
            ]
        ]
    },
    {
        "id": "93367293e38d84ed",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 500,
        "wires": [
            [
                "4344abeccf635325"
            ]
        ]
    },
    {
        "id": "4344abeccf635325",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 500,
        "wires": []
    },
    {
        "id": "b25bedce107108ed",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "select4",
        "func": "// Consulta SQL para obtener los datos con id = 1\nmsg.topic = \"SELECT * FROM movimientos WHERE id = 4\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "93367293e38d84ed"
            ]
        ]
    },
    {
        "id": "289ba6514231d3f1",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "b25bedce107108ed"
            ]
        ]
    },
    {
        "id": "444b0e758376d9df",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 320,
        "wires": [
            [
                "317415e43363176a"
            ]
        ]
    },
    {
        "id": "317415e43363176a",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "7bc8b637a92fa55d",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "select1",
        "func": "// Consulta SQL para obtener los datos con id = 1\nmsg.topic = \"SELECT * FROM movimientos WHERE id = 1\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "444b0e758376d9df"
            ]
        ]
    },
    {
        "id": "5b4643f8e94af712",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "7bc8b637a92fa55d"
            ]
        ]
    },
    {
        "id": "be2b4d50d1ec4e64",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "AsignarID",
        "func": "// Obtener el id a verificar desde el contexto\nvar idToCheck = context.get('idToCheck');\n\n// Generar la consulta para verificar si el id actual está en la tabla\nmsg.topic = \"SELECT id FROM movimientos WHERE id = \" + idToCheck;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 720,
        "wires": [
            [
                "55611afcfdbf1c6a"
            ]
        ]
    },
    {
        "id": "a10372efc88b0182",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 670,
        "y": 40,
        "wires": [
            [
                "0ee670419aa0a085"
            ]
        ]
    },
    {
        "id": "2108771a91a5537b",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "insertX",
        "func": "// Obtener el id desde la variable global matriculaPLC\nvar matriculaPLC = global.get('matriculaPLC');\n\n// Verificar si matriculaPLC es un número válido\nif (typeof matriculaPLC === 'undefined' || isNaN(matriculaPLC)) {\n    node.error(\"Invalid ID: matriculaPLC is undefined or not a valid number\", msg);\n    return null;\n}\n\n// Generar la consulta SQL para insertar datos en la posición del ID obtenido\nmsg.topic = \"INSERT INTO movimientos (id, movNumber, uma, pasillo, x, y, z, fecha, turno, aux1, aux2, aux3, aux4) \" +\n            \"VALUES (\" + matriculaPLC + \", 'MOV123', 'UMA001', 1, 10, 20, 30, CURDATE(), 'T1', 'AUX1', 'AUX2', 'AUX3', 'AUX4')\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 40,
        "wires": [
            [
                "a10372efc88b0182"
            ]
        ]
    },
    {
        "id": "71912dca39b223e2",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 40,
        "wires": [
            [
                "2108771a91a5537b"
            ]
        ]
    },
    {
        "id": "0ee670419aa0a085",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "75519ed51e21b569",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "Start Insert Process",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1640,
        "y": 1040,
        "wires": [
            [
                "5187f50af31d3b32"
            ]
        ]
    },
    {
        "id": "5187f50af31d3b32",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "Generate SQL Insert",
        "func": "// Obtener el id desde la variable global matriculaPLC\nvar matriculaPLC = global.get('matriculaPLC');\n\n// Obtener movNumber y uma desde las variables de flujo\nvar movNumber = flow.get('movNumber');\nvar uma = flow.get('uma');\n\n// Verificar si matriculaPLC es un número válido\nif (typeof matriculaPLC === 'undefined' || isNaN(matriculaPLC)) {\n    node.error(\"Invalid ID: matriculaPLC is undefined or not a valid number\", msg);\n    return null;\n}\n\n// Verificar si movNumber y uma están definidos\nif (typeof movNumber === 'undefined' || typeof uma === 'undefined') {\n    node.error(\"movNumber or uma are not set\", msg);\n    return null;\n}\n\n// Generar la consulta SQL para insertar movNumber y uma en la posición del ID obtenido\nmsg.topic = \"INSERT INTO movimientos (id, movNumber, uma) \" +\n            \"VALUES (\" + matriculaPLC + \", '\" + movNumber + \"', '\" + uma + \"')\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1040,
        "wires": [
            [
                "5ae5c2b9ccd39fa8",
                "eb835222327163da"
            ]
        ]
    },
    {
        "id": "5ae5c2b9ccd39fa8",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "SQL Query Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1100,
        "wires": []
    },
    {
        "id": "aea1154996a65c9c",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "Insert Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 1040,
        "wires": []
    },
    {
        "id": "eb835222327163da",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2120,
        "y": 1040,
        "wires": [
            [
                "aea1154996a65c9c"
            ]
        ]
    },
    {
        "id": "e613e5eb951018e7",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "Start Update Process",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "ad8d6358de739402"
            ]
        ]
    },
    {
        "id": "ad8d6358de739402",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "Set Values for Update",
        "func": "// Establecer valores de los otros campos como variables de flujo\nflow.set('pasillo', 2);\nflow.set('x', 50);\nflow.set('y', 100);\nflow.set('z', 150);\nflow.set('fecha', '2023-09-26'); // Fecha en formato 'YYYY-MM-DD'\nflow.set('turno', 'T2');\nflow.set('aux1', 'AUX_VAL1');\nflow.set('aux2', 'AUX_VAL2');\nflow.set('aux3', 'AUX_VAL3');\nflow.set('aux4', 'AUX_VAL4');\n\nreturn { payload: \"Valores de los otros campos establecidos\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1220,
        "wires": [
            [
                "920eb14c53ed92af"
            ]
        ]
    },
    {
        "id": "920eb14c53ed92af",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "Generate SQL Update",
        "func": "// Obtener el id desde la variable global matriculaPLC\nvar matriculaPLC = global.get('matriculaPLC');\n\n// Obtener los valores de los campos restantes desde las variables de flujo\nvar pasillo = flow.get('pasillo');\nvar x = flow.get('x');\nvar y = flow.get('y');\nvar z = flow.get('z');\nvar turno = flow.get('turno');\nvar aux1 = flow.get('aux1');\nvar aux2 = flow.get('aux2');\nvar aux3 = flow.get('aux3');\nvar aux4 = flow.get('aux4');\n\n// Obtener la fecha y hora actual en formato YYYY-MM-DD HH:MM:SS\nvar now = new Date();\nvar fecha = now.getFullYear() + \"-\" + \n            (\"0\" + (now.getMonth() + 1)).slice(-2) + \"-\" + \n            (\"0\" + now.getDate()).slice(-2) + \" \" + \n            (\"0\" + now.getHours()).slice(-2) + \":\" + \n            (\"0\" + now.getMinutes()).slice(-2) + \":\" + \n            (\"0\" + now.getSeconds()).slice(-2);\n\n// Verificar si matriculaPLC es un número válido\nif (typeof matriculaPLC === 'undefined' || isNaN(matriculaPLC)) {\n    node.error(\"Invalid ID: matriculaPLC is undefined or not a valid number\", msg);\n    return null;\n}\n\n// Verificar si todos los demás valores están definidos\nif (typeof pasillo === 'undefined' || typeof x === 'undefined' || typeof y === 'undefined' || typeof z === 'undefined' ||\n    typeof turno === 'undefined' || typeof aux1 === 'undefined' || typeof aux2 === 'undefined' || \n    typeof aux3 === 'undefined' || typeof aux4 === 'undefined') {\n    node.error(\"Some fields are not set properly\", msg);\n    return null;\n}\n\n// Generar la consulta SQL para actualizar los campos excepto movNumber y uma\nmsg.topic = \"UPDATE movimientos SET pasillo = \" + pasillo + \", x = \" + x + \", y = \" + y + \n            \", z = \" + z + \", fecha = '\" + fecha + \"', turno = '\" + turno + \"', aux1 = '\" + aux1 + \n            \"', aux2 = '\" + aux2 + \"', aux3 = '\" + aux3 + \"', aux4 = '\" + aux4 + \n            \"' WHERE id = \" + matriculaPLC;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1220,
        "wires": [
            [
                "e529f3484199a391",
                "ffd0d97a371401f6"
            ]
        ]
    },
    {
        "id": "e529f3484199a391",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "SQL Query Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b74553b0a1428bdd",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "Update Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2530,
        "y": 1220,
        "wires": []
    },
    {
        "id": "ffd0d97a371401f6",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2320,
        "y": 1220,
        "wires": [
            [
                "b74553b0a1428bdd"
            ]
        ]
    },
    {
        "id": "aff66d54983adabf",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "mysql -u AI -p",
        "info": "//windows\nmysql -u AI -p\n//2050\nmariadb -u ai -p\n\nUSE almacenSilo;\nSELECT * FROM movimientos;\n\n\n\n//borrar la base de datos\nDROP DATABASE almacenSilo;\n\n//borrar datos\nDELETE FROM movimientos;\n//or\nDELETE FROM movimientos;\n//reiniciar a 1\nALTER TABLE nombre_tabla AUTO_INCREMENT = 1;\n\n//vaciar tabla y reiniciar a 1\nTRUNCATE TABLE nombre_tabla;\n\nSHOW TABLE STATUS LIKE 'movimientos';\n\n\nSET FOREIGN_KEY_CHECKS = 0;\nTRUNCATE TABLE movimientos;\nSET FOREIGN_KEY_CHECKS = 1;\n\n\n//programar borrado 2:00 AM\ncrontab -e\n\nmovimientosTLVsPSPS\n0 2 * * * echo \"TRUNCATE TABLE movimientosTLVsPSPs;\" | mariadb -u ai -p'tu_contraseña' almacenSilo\n\ncrontab -l\n\n\n0 → Minuto 0\n2 → Hora 2 (2:00 AM)\n* → Todos los días del mes\n* → Todos los meses\n* → Todos los días de la semana\n\n\n",
        "x": 390,
        "y": 880,
        "wires": []
    },
    {
        "id": "ecbc26f375b091b7",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE",
        "info": "CREATE TABLE movimientos (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    movNumber VARCHAR(10),\n    uma VARCHAR(50),\n    pasillo INT,\n    x INT,\n    y INT,\n    z INT,\n    fecha DATE,\n    turno VARCHAR(10),\n    aux1 VARCHAR(50),\n    aux2 VARCHAR(50),\n    aux3 VARCHAR(50),\n    aux4 VARCHAR(50),\n    CONSTRAINT chk_id CHECK (id <= 50000)\n);\n\nCREATE TABLE movimientosPIE1 (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    estacion VARCHAR(10),\n    destino VARCHAR(10),\n    movNumber VARCHAR(10),\n    uma VARCHAR(50),\n    pasillo INT,\n    fecha DATE,\n    aux1\n);\n\nCREATE TABLE movimientosTLVsPSPs (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    estacion VARCHAR(10),\n    destino VARCHAR(10),\n    movNumber VARCHAR(10),\n    uma VARCHAR(50),\n    pasillo INT,\n    fecha DATE,\n    aux1\n);\n\n\n\nCREATE TABLE movimientosTLV1 (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    estacion VARCHAR(10),\n    destino VARCHAR(10),\n    movNumber VARCHAR(10),\n    uma VARCHAR(50),\n    pasillo INT,\n    fecha DATE,\n    aux1\n);\n\nCREATE TABLE movimientosTLV2 (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    movNumber VARCHAR(10),\n    uma VARCHAR(50),\n    pasillo INT,\n    fecha DATE\n);\n\n\nCREATE TABLE movimientosPSPs (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    movNumber VARCHAR(10),\n    uma VARCHAR(50),\n    pasillo INT,\n    fecha DATE\n);\n\n",
        "x": 640,
        "y": 880,
        "wires": []
    },
    {
        "id": "e46df40a491447d9",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "SHOW TABLES;",
        "info": "SHOW TABLES;\n",
        "x": 860,
        "y": 880,
        "wires": []
    },
    {
        "id": "4b0cf267f248767d",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "windows& \"C:\\Program Files\\MariaDB 11.5\\bin\\mysql.exe\" -u AI -p -h 127.0.0.1& \"C:\\Program Files\\MariaDB 11.5\\bin\\mysql.exe\" -u AI -p -h 127.0.0.1",
        "info": "& \"C:\\Program Files\\MariaDB 11.5\\bin\\mysql.exe\" -u AI -p -h 127.0.0.1\n",
        "x": 1450,
        "y": 820,
        "wires": []
    },
    {
        "id": "5c4d17d207dfec58",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "movimientosPIE1",
        "info": "MariaDB [almacenSilo]> describe movimientosPIE1;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| id          | int(11)     | NO   | PRI | NULL    | auto_increment |\n| estacion    | varchar(10) | YES  |     | NULL    |                |\n| destino     | varchar(10) | YES  |     | NULL    |                |\n| movNumber   | varchar(10) | YES  |     | NULL    |                |\n| uma         | varchar(50) | YES  |     | NULL    |                |\n| pasillo     | int(11)     | YES  |     | NULL    |                |\n| x           | varchar(10) | YES  |     | NULL    |                |\n| y           | varchar(10) | YES  |     | NULL    |                |\n| lado        | varchar(10) | YES  |     | NULL    |                |\n| estado      | varchar(10) | YES  |     | NULL    |                |\n| fechaInicio | datetime    | YES  |     | NULL    |                |\n| fechaFin    | datetime    | YES  |     | NULL    |                |\n| aux1        | int(11)     | YES  |     | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+\n\n\nALTER TABLE movimientosPIE1\nADD COLUMN estacion VARCHAR(10) AFTER id,\nADD COLUMN destino VARCHAR(10) AFTER estacion,\nADD COLUMN estado VARCHAR(10) AFTER pasillo;\n\nALTER TABLE movimientosTLVsPSPs CHANGE fecha fechaInicio DATETIME;\nALTER TABLE movimientosTLVsPSPs ADD fechaFin DATETIME;\n\nALTER TABLE movimientosTLVsPSPs MODIFY fechaFin DATETIME AFTER fechaInicio;\n",
        "x": 1200,
        "y": 900,
        "wires": []
    },
    {
        "id": "8a815dd567178aa8",
        "type": "comment",
        "z": "345b91c6976c416d",
        "name": "movimientosTLVsPSPs",
        "info": "MariaDB [almacenSilo]> describe movimientosTLVsPSPs;\n+-------------+-------------+------+-----+---------+----------------+\n| Field       | Type        | Null | Key | Default | Extra          |\n+-------------+-------------+------+-----+---------+----------------+\n| id          | int(11)     | NO   | PRI | NULL    | auto_increment |\n| estacion    | varchar(10) | YES  |     | NULL    |                |\n| destino     | varchar(10) | YES  |     | NULL    |                |\n| movNumber   | varchar(10) | YES  |     | NULL    |                |\n| uma         | varchar(50) | YES  |     | NULL    |                |\n| pasillo     | int(11)     | YES  |     | NULL    |                |\n| x           | varchar(10) | YES  |     | NULL    |                |\n| y           | varchar(10) | YES  |     | NULL    |                |\n| lado        | varchar(10) | YES  |     | NULL    |                |\n| estado      | varchar(10) | YES  |     | NULL    |                |\n| fechaInicio | datetime    | YES  |     | NULL    |                |\n| aux1        | int(11)     | YES  |     | NULL    |                |\n| fechaFin    | datetime    | YES  |     | NULL    |                |\n+-------------+-------------+------+-----+---------+----------------+",
        "x": 1500,
        "y": 900,
        "wires": []
    },
    {
        "id": "9f8e308210a012e3",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "714c9f0dc79cd0b5"
            ]
        ]
    },
    {
        "id": "714c9f0dc79cd0b5",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2261e999370356fb",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS pt_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS pt_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  pt_ocupacion TINYINT(1),\n  pt_estado TINYINT(1),\n  pt_situacion TINYINT(1),\n  pt_posicion VARCHAR(10),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "9f8e308210a012e3"
            ]
        ]
    },
    {
        "id": "cb5f8354516ef87d",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1000,
        "wires": [
            [
                "2261e999370356fb"
            ]
        ]
    },
    {
        "id": "cb71a0699ce732b4",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 890,
        "y": 1120,
        "wires": [
            [
                "75de56cf36691d41"
            ]
        ]
    },
    {
        "id": "75de56cf36691d41",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1120,
        "wires": []
    },
    {
        "id": "515c459f5db8e16d",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS ct_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS ct_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  ct_conectado TINYINT(1),\n  ct_defecto TINYINT(1),\n  ct_automatico TINYINT(1),\n  ct_semiautomatico TINYINT(1),\n  ct_manual TINYINT(1),\n  ct_emergencia_puerta_armario TINYINT(1),\n  ct_con_datos TINYINT(1),\n  ct_autorizacion_transferencia_tc26 TINYINT(1),\n  ct_fin_transferencia_tc26 TINYINT(1),\n  ct_peticion_transferencia_tc30 TINYINT(1),\n  ct_acuse_orden_recibida TINYINT(1),\n  ct_matricula_paleta_entrada INT(11),\n  ct_matricula_paleta_salida INT(11),\n  ct_pasillo_destino INT(11),\n  ct_ciclo_trabajo INT(11),\n  ct_numero_pasillo_actual INT(11),\n  ct_estado_carro INT(11),\n  ct_defecto_comunicacion TINYINT(1),\n  ct_defecto_emergencia_armario TINYINT(1),\n  ct_defecto_variador TINYINT(1),\n  ct_defecto_motor_traslacion TINYINT(1),\n  ct_defecto_motor_entrada TINYINT(1),\n  ct_defecto_motor_salida TINYINT(1),\n  ct_defecto_final_carrera_pasillo1 TINYINT(1),\n  ct_defecto_final_carrera_pasillo12 TINYINT(1),\n  ct_defecto_paleta_descentrada_entrada TINYINT(1),\n  ct_defecto_paleta_descentrada_salida TINYINT(1),\n  ct_vis_centraje_traslacion_adelante TINYINT(1),\n  ct_vis_centraje_traslacion_atras TINYINT(1),\n  ct_vis_presencia_delantera_paleta_entrada TINYINT(1),\n  ct_vis_presencia_trasera_paleta_entrada TINYINT(1),\n  ct_vis_presencia_delantera_paleta_salida TINYINT(1),\n  ct_vis_presencia_trasera_paleta_salida TINYINT(1),\n  ct_vis_marcha_traslacion_adelante TINYINT(1),\n  ct_vis_marcha_traslacion_atras TINYINT(1),\n  ct_vis_motor_traslacion_parado TINYINT(1),\n  ct_vis_centraje_traslacion TINYINT(1),\n  ct_vis_marcha_transportador_entrada TINYINT(1),\n  ct_vis_marcha_transportador_salida TINYINT(1),\n  ct_vis_defecto_traslacion TINYINT(1),\n  ct_vis_defecto_transportador TINYINT(1),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1120,
        "wires": [
            [
                "cb71a0699ce732b4"
            ]
        ]
    },
    {
        "id": "eb39cf0496165005",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1120,
        "wires": [
            [
                "515c459f5db8e16d"
            ]
        ]
    },
    {
        "id": "2cb0d1f739133b6d",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 890,
        "y": 1060,
        "wires": [
            [
                "fcad0b042b9180db"
            ]
        ]
    },
    {
        "id": "fcad0b042b9180db",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a00157e3c645cf60",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE pt_status",
        "func": "msg.topic = `\nINSERT INTO pt_status (id, pt_ocupacion, pt_estado, pt_situacion, pt_posicion, timestamp)\nVALUES (\n  1,\n  FLOOR(RAND() * 2),\n  FLOOR(RAND() * 2),\n  FLOOR(RAND() * 2),\n  LPAD(FLOOR(1 + RAND() * 12), 2, '0'),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  pt_ocupacion = VALUES(pt_ocupacion),\n  pt_estado = VALUES(pt_estado),\n  pt_situacion = VALUES(pt_situacion),\n  pt_posicion = VALUES(pt_posicion),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1060,
        "wires": [
            [
                "2cb0d1f739133b6d"
            ]
        ]
    },
    {
        "id": "35c367831e656610",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1060,
        "wires": [
            [
                "a00157e3c645cf60"
            ]
        ]
    },
    {
        "id": "22cdadb2ac70f973",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 890,
        "y": 1180,
        "wires": [
            [
                "66045d24709581ea"
            ]
        ]
    },
    {
        "id": "66045d24709581ea",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fe9539972f1192c7",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE ct_status",
        "func": "msg.topic = `\nINSERT INTO ct_status (\n  id,\n  ct_conectado, ct_defecto, ct_automatico, ct_semiautomatico, ct_manual,\n  ct_emergencia_puerta_armario, ct_con_datos, ct_autorizacion_transferencia_tc26,\n  ct_fin_transferencia_tc26, ct_peticion_transferencia_tc30, ct_acuse_orden_recibida,\n  ct_matricula_paleta_entrada, ct_matricula_paleta_salida, ct_pasillo_destino,\n  ct_ciclo_trabajo, ct_numero_pasillo_actual, ct_estado_carro, ct_defecto_comunicacion,\n  ct_defecto_emergencia_armario, ct_defecto_variador, ct_defecto_motor_traslacion,\n  ct_defecto_motor_entrada, ct_defecto_motor_salida, ct_defecto_final_carrera_pasillo1,\n  ct_defecto_final_carrera_pasillo12, ct_defecto_paleta_descentrada_entrada,\n  ct_defecto_paleta_descentrada_salida, ct_vis_centraje_traslacion_adelante,\n  ct_vis_centraje_traslacion_atras, ct_vis_presencia_delantera_paleta_entrada,\n  ct_vis_presencia_trasera_paleta_entrada, ct_vis_presencia_delantera_paleta_salida,\n  ct_vis_presencia_trasera_paleta_salida, ct_vis_marcha_traslacion_adelante,\n  ct_vis_marcha_traslacion_atras, ct_vis_motor_traslacion_parado, ct_vis_centraje_traslacion,\n  ct_vis_marcha_transportador_entrada, ct_vis_marcha_transportador_salida,\n  ct_vis_defecto_traslacion, ct_vis_defecto_transportador, timestamp\n) VALUES (\n  1,\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*100000), FLOOR(RAND()*100000), FLOOR(RAND()*100000),\n  FLOOR(RAND()*100000), FLOOR(RAND()*100000), FLOOR(RAND()*100000), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), NOW()\n)\nON DUPLICATE KEY UPDATE\n  ct_conectado = VALUES(ct_conectado),\n  ct_defecto = VALUES(ct_defecto),\n  ct_automatico = VALUES(ct_automatico),\n  ct_semiautomatico = VALUES(ct_semiautomatico),\n  ct_manual = VALUES(ct_manual),\n  ct_emergencia_puerta_armario = VALUES(ct_emergencia_puerta_armario),\n  ct_con_datos = VALUES(ct_con_datos),\n  ct_autorizacion_transferencia_tc26 = VALUES(ct_autorizacion_transferencia_tc26),\n  ct_fin_transferencia_tc26 = VALUES(ct_fin_transferencia_tc26),\n  ct_peticion_transferencia_tc30 = VALUES(ct_peticion_transferencia_tc30),\n  ct_acuse_orden_recibida = VALUES(ct_acuse_orden_recibida),\n  ct_matricula_paleta_entrada = VALUES(ct_matricula_paleta_entrada),\n  ct_matricula_paleta_salida = VALUES(ct_matricula_paleta_salida),\n  ct_pasillo_destino = VALUES(ct_pasillo_destino),\n  ct_ciclo_trabajo = VALUES(ct_ciclo_trabajo),\n  ct_numero_pasillo_actual = VALUES(ct_numero_pasillo_actual),\n  ct_estado_carro = VALUES(ct_estado_carro),\n  ct_defecto_comunicacion = VALUES(ct_defecto_comunicacion),\n  ct_defecto_emergencia_armario = VALUES(ct_defecto_emergencia_armario),\n  ct_defecto_variador = VALUES(ct_defecto_variador),\n  ct_defecto_motor_traslacion = VALUES(ct_defecto_motor_traslacion),\n  ct_defecto_motor_entrada = VALUES(ct_defecto_motor_entrada),\n  ct_defecto_motor_salida = VALUES(ct_defecto_motor_salida),\n  ct_defecto_final_carrera_pasillo1 = VALUES(ct_defecto_final_carrera_pasillo1),\n  ct_defecto_final_carrera_pasillo12 = VALUES(ct_defecto_final_carrera_pasillo12),\n  ct_defecto_paleta_descentrada_entrada = VALUES(ct_defecto_paleta_descentrada_entrada),\n  ct_defecto_paleta_descentrada_salida = VALUES(ct_defecto_paleta_descentrada_salida),\n  ct_vis_centraje_traslacion_adelante = VALUES(ct_vis_centraje_traslacion_adelante),\n  ct_vis_centraje_traslacion_atras = VALUES(ct_vis_centraje_traslacion_atras),\n  ct_vis_presencia_delantera_paleta_entrada = VALUES(ct_vis_presencia_delantera_paleta_entrada),\n  ct_vis_presencia_trasera_paleta_entrada = VALUES(ct_vis_presencia_trasera_paleta_entrada),\n  ct_vis_presencia_delantera_paleta_salida = VALUES(ct_vis_presencia_delantera_paleta_salida),\n  ct_vis_presencia_trasera_paleta_salida = VALUES(ct_vis_presencia_trasera_paleta_salida),\n  ct_vis_marcha_traslacion_adelante = VALUES(ct_vis_marcha_traslacion_adelante),\n  ct_vis_marcha_traslacion_atras = VALUES(ct_vis_marcha_traslacion_atras),\n  ct_vis_motor_traslacion_parado = VALUES(ct_vis_motor_traslacion_parado),\n  ct_vis_centraje_traslacion = VALUES(ct_vis_centraje_traslacion),\n  ct_vis_marcha_transportador_entrada = VALUES(ct_vis_marcha_transportador_entrada),\n  ct_vis_marcha_transportador_salida = VALUES(ct_vis_marcha_transportador_salida),\n  ct_vis_defecto_traslacion = VALUES(ct_vis_defecto_traslacion),\n  ct_vis_defecto_transportador = VALUES(ct_vis_defecto_transportador),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "22cdadb2ac70f973"
            ]
        ]
    },
    {
        "id": "1333656d553d74cd",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 1180,
        "wires": [
            [
                "fe9539972f1192c7"
            ]
        ]
    },
    {
        "id": "d29896342c4965b0",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 870,
        "y": 1240,
        "wires": [
            [
                "9770fb4e82ef713c"
            ]
        ]
    },
    {
        "id": "9770fb4e82ef713c",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f755ae866c5fc137",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS tlv1_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS tlv1_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  tlv1_modo INT(11),\n  tlv1_ocupacion INT(11),\n  tlv1_averia INT(11),\n  tlv1_reserva_3 INT(11),\n  tlv1_reserva_4 INT(11),\n  tlv1_reserva_5 INT(11),\n  tlv1_reserva_6 INT(11),\n  tlv1_reserva_7 INT(11),\n  tlv1_reserva_8 INT(11),\n  tlv1_reserva_9 INT(11),\n  tlv1_coord_x_actual INT(11),\n  tlv1_coord_y_actual INT(11),\n  tlv1_coord_z_actual INT(11),\n  tlv1_matricula_actual INT(11),\n  tlv1_pasillo_actual INT(11),\n  tlv1_orden_tipo INT(11),\n  tlv1_orden_pasillo_origen INT(11),\n  tlv1_orden_coord_x_origen INT(11),\n  tlv1_orden_coord_y_origen INT(11),\n  tlv1_orden_coord_z_origen INT(11),\n  tlv1_orden_pasillo_destino INT(11),\n  tlv1_orden_coord_x_destino INT(11),\n  tlv1_orden_coord_y_destino INT(11),\n  tlv1_orden_coord_z_destino INT(11),\n  tlv1_orden_matricula INT(11),\n  tlv1_fin_orden_estado INT(11),\n  tlv1_fin_orden_resultado INT(11),\n  tlv1_fin_orden_pasillo_destino INT(11),\n  tlv1_fin_orden_coord_x_destino INT(11),\n  tlv1_fin_orden_coord_y_destino INT(11),\n  tlv1_fin_orden_coord_z_destino INT(11),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1240,
        "wires": [
            [
                "d29896342c4965b0"
            ]
        ]
    },
    {
        "id": "28f2ecf15875fb1e",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1240,
        "wires": [
            [
                "f755ae866c5fc137"
            ]
        ]
    },
    {
        "id": "7a05be045a422c4f",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 870,
        "y": 1300,
        "wires": [
            [
                "50789ca2b56d5d75"
            ]
        ]
    },
    {
        "id": "50789ca2b56d5d75",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1300,
        "wires": []
    },
    {
        "id": "931650e567235983",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE tlv1_status",
        "func": "msg.topic = `\nINSERT INTO tlv1_status (\n  id,\n  tlv1_modo,\n  tlv1_ocupacion,\n  tlv1_averia,\n  tlv1_reserva_3,\n  tlv1_reserva_4,\n  tlv1_reserva_5,\n  tlv1_reserva_6,\n  tlv1_reserva_7,\n  tlv1_reserva_8,\n  tlv1_reserva_9,\n  tlv1_coord_x_actual,\n  tlv1_coord_y_actual,\n  tlv1_coord_z_actual,\n  tlv1_matricula_actual,\n  tlv1_pasillo_actual,\n  tlv1_orden_tipo,\n  tlv1_orden_pasillo_origen,\n  tlv1_orden_coord_x_origen,\n  tlv1_orden_coord_y_origen,\n  tlv1_orden_coord_z_origen,\n  tlv1_orden_pasillo_destino,\n  tlv1_orden_coord_x_destino,\n  tlv1_orden_coord_y_destino,\n  tlv1_orden_coord_z_destino,\n  tlv1_orden_matricula,\n  tlv1_fin_orden_estado,\n  tlv1_fin_orden_resultado,\n  tlv1_fin_orden_pasillo_destino,\n  tlv1_fin_orden_coord_x_destino,\n  tlv1_fin_orden_coord_y_destino,\n  tlv1_fin_orden_coord_z_destino,\n  timestamp\n) VALUES (\n  1,\n  FLOOR(RAND() * 3),            -- modo (0-2)\n  FLOOR(RAND() * 2),            -- ocupación (0-1)\n  FLOOR(RAND() * 2),            -- avería (0-1)\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 60),           -- coord_x_actual (1..59)\n  FLOOR(RAND() * 13),           -- coord_y_actual (1..12)\n  FLOOR(RAND() * 3),            -- coord_z_actual (1..2)\n  FLOOR(RAND() * 30000) + 1,    -- matrícula\n  FLOOR(RAND() * 12) + 1,       -- pasillo actual\n  FLOOR(RAND() * 6),            -- tipo orden (0..5)\n  FLOOR(RAND() * 12) + 1,\n  FLOOR(RAND() * 60),\n  FLOOR(RAND() * 13),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 12) + 1,\n  FLOOR(RAND() * 60),\n  FLOOR(RAND() * 13),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 30000) + 1,\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 7),\n  FLOOR(RAND() * 12) + 1,\n  FLOOR(RAND() * 60),\n  FLOOR(RAND() * 13),\n  FLOOR(RAND() * 3),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv1_modo = VALUES(tlv1_modo),\n  tlv1_ocupacion = VALUES(tlv1_ocupacion),\n  tlv1_averia = VALUES(tlv1_averia),\n  tlv1_reserva_3 = VALUES(tlv1_reserva_3),\n  tlv1_reserva_4 = VALUES(tlv1_reserva_4),\n  tlv1_reserva_5 = VALUES(tlv1_reserva_5),\n  tlv1_reserva_6 = VALUES(tlv1_reserva_6),\n  tlv1_reserva_7 = VALUES(tlv1_reserva_7),\n  tlv1_reserva_8 = VALUES(tlv1_reserva_8),\n  tlv1_reserva_9 = VALUES(tlv1_reserva_9),\n  tlv1_coord_x_actual = VALUES(tlv1_coord_x_actual),\n  tlv1_coord_y_actual = VALUES(tlv1_coord_y_actual),\n  tlv1_coord_z_actual = VALUES(tlv1_coord_z_actual),\n  tlv1_matricula_actual = VALUES(tlv1_matricula_actual),\n  tlv1_pasillo_actual = VALUES(tlv1_pasillo_actual),\n  tlv1_orden_tipo = VALUES(tlv1_orden_tipo),\n  tlv1_orden_pasillo_origen = VALUES(tlv1_orden_pasillo_origen),\n  tlv1_orden_coord_x_origen = VALUES(tlv1_orden_coord_x_origen),\n  tlv1_orden_coord_y_origen = VALUES(tlv1_orden_coord_y_origen),\n  tlv1_orden_coord_z_origen = VALUES(tlv1_orden_coord_z_origen),\n  tlv1_orden_pasillo_destino = VALUES(tlv1_orden_pasillo_destino),\n  tlv1_orden_coord_x_destino = VALUES(tlv1_orden_coord_x_destino),\n  tlv1_orden_coord_y_destino = VALUES(tlv1_orden_coord_y_destino),\n  tlv1_orden_coord_z_destino = VALUES(tlv1_orden_coord_z_destino),\n  tlv1_orden_matricula = VALUES(tlv1_orden_matricula),\n  tlv1_fin_orden_estado = VALUES(tlv1_fin_orden_estado),\n  tlv1_fin_orden_resultado = VALUES(tlv1_fin_orden_resultado),\n  tlv1_fin_orden_pasillo_destino = VALUES(tlv1_fin_orden_pasillo_destino),\n  tlv1_fin_orden_coord_x_destino = VALUES(tlv1_fin_orden_coord_x_destino),\n  tlv1_fin_orden_coord_y_destino = VALUES(tlv1_fin_orden_coord_y_destino),\n  tlv1_fin_orden_coord_z_destino = VALUES(tlv1_fin_orden_coord_z_destino),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1300,
        "wires": [
            [
                "7a05be045a422c4f"
            ]
        ]
    },
    {
        "id": "56c6e2b7f4d38fe7",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1300,
        "wires": [
            [
                "931650e567235983"
            ]
        ]
    },
    {
        "id": "d8f14cfbdf55fb0b",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 870,
        "y": 1360,
        "wires": [
            [
                "aebd9b50da1b9402"
            ]
        ]
    },
    {
        "id": "aebd9b50da1b9402",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1360,
        "wires": []
    },
    {
        "id": "3d214600c46251e4",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS tlv2_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS tlv2_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  tlv2_modo INT(11),\n  tlv2_ocupacion INT(11),\n  tlv2_averia INT(11),\n  tlv2_reserva_3 INT(11),\n  tlv2_reserva_4 INT(11),\n  tlv2_reserva_5 INT(11),\n  tlv2_reserva_6 INT(11),\n  tlv2_reserva_7 INT(11),\n  tlv2_reserva_8 INT(11),\n  tlv2_reserva_9 INT(11),\n  tlv2_coord_x_actual INT(11),\n  tlv2_coord_y_actual INT(11),\n  tlv2_coord_z_actual INT(11),\n  tlv2_matricula_actual INT(11),\n  tlv2_pasillo_actual INT(11),\n  tlv2_orden_tipo INT(11),\n  tlv2_orden_pasillo_origen INT(11),\n  tlv2_orden_coord_x_origen INT(11),\n  tlv2_orden_coord_y_origen INT(11),\n  tlv2_orden_coord_z_origen INT(11),\n  tlv2_orden_pasillo_destino INT(11),\n  tlv2_orden_coord_x_destino INT(11),\n  tlv2_orden_coord_y_destino INT(11),\n  tlv2_orden_coord_z_destino INT(11),\n  tlv2_orden_matricula INT(11),\n  tlv2_fin_orden_estado INT(11),\n  tlv2_fin_orden_resultado INT(11),\n  tlv2_fin_orden_pasillo_destino INT(11),\n  tlv2_fin_orden_coord_x_destino INT(11),\n  tlv2_fin_orden_coord_y_destino INT(11),\n  tlv2_fin_orden_coord_z_destino INT(11),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1360,
        "wires": [
            [
                "d8f14cfbdf55fb0b"
            ]
        ]
    },
    {
        "id": "95b0f5573d0f525b",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1360,
        "wires": [
            [
                "3d214600c46251e4"
            ]
        ]
    },
    {
        "id": "831d2f1bb934c893",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1440,
        "wires": [
            [
                "dbbc1d3385e93435"
            ]
        ]
    },
    {
        "id": "dbbc1d3385e93435",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1440,
        "wires": []
    },
    {
        "id": "b024c04b8562dde3",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE tlv2_status",
        "func": "msg.topic = `\nINSERT INTO tlv2_status (\n  id,\n  tlv2_modo,\n  tlv2_ocupacion,\n  tlv2_averia,\n  tlv2_reserva_3,\n  tlv2_reserva_4,\n  tlv2_reserva_5,\n  tlv2_reserva_6,\n  tlv2_reserva_7,\n  tlv2_reserva_8,\n  tlv2_reserva_9,\n  tlv2_coord_x_actual,\n  tlv2_coord_y_actual,\n  tlv2_coord_z_actual,\n  tlv2_matricula_actual,\n  tlv2_pasillo_actual,\n  tlv2_orden_tipo,\n  tlv2_orden_pasillo_origen,\n  tlv2_orden_coord_x_origen,\n  tlv2_orden_coord_y_origen,\n  tlv2_orden_coord_z_origen,\n  tlv2_orden_pasillo_destino,\n  tlv2_orden_coord_x_destino,\n  tlv2_orden_coord_y_destino,\n  tlv2_orden_coord_z_destino,\n  tlv2_orden_matricula,\n  tlv2_fin_orden_estado,\n  tlv2_fin_orden_resultado,\n  tlv2_fin_orden_pasillo_destino,\n  tlv2_fin_orden_coord_x_destino,\n  tlv2_fin_orden_coord_y_destino,\n  tlv2_fin_orden_coord_z_destino,\n  timestamp\n) VALUES (\n  1,\n  FLOOR(RAND() * 3),            -- modo (0-2)\n  FLOOR(RAND() * 2),            -- ocupación (0-1)\n  FLOOR(RAND() * 2),            -- avería (0-1)\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 100),\n  FLOOR(RAND() * 60),           -- coord_x_actual (1..59)\n  FLOOR(RAND() * 13),           -- coord_y_actual (1..12)\n  FLOOR(RAND() * 3),            -- coord_z_actual (1..2)\n  FLOOR(RAND() * 30000) + 1,    -- matrícula\n  FLOOR(RAND() * 12) + 1,       -- pasillo actual\n  FLOOR(RAND() * 6),            -- tipo orden (0..5)\n  FLOOR(RAND() * 12) + 1,\n  FLOOR(RAND() * 60),\n  FLOOR(RAND() * 13),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 12) + 1,\n  FLOOR(RAND() * 60),\n  FLOOR(RAND() * 13),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 30000) + 1,\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 7),\n  FLOOR(RAND() * 12) + 1,\n  FLOOR(RAND() * 60),\n  FLOOR(RAND() * 13),\n  FLOOR(RAND() * 3),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv2_modo = VALUES(tlv2_modo),\n  tlv2_ocupacion = VALUES(tlv2_ocupacion),\n  tlv2_averia = VALUES(tlv2_averia),\n  tlv2_reserva_3 = VALUES(tlv2_reserva_3),\n  tlv2_reserva_4 = VALUES(tlv2_reserva_4),\n  tlv2_reserva_5 = VALUES(tlv2_reserva_5),\n  tlv2_reserva_6 = VALUES(tlv2_reserva_6),\n  tlv2_reserva_7 = VALUES(tlv2_reserva_7),\n  tlv2_reserva_8 = VALUES(tlv2_reserva_8),\n  tlv2_reserva_9 = VALUES(tlv2_reserva_9),\n  tlv2_coord_x_actual = VALUES(tlv2_coord_x_actual),\n  tlv2_coord_y_actual = VALUES(tlv2_coord_y_actual),\n  tlv2_coord_z_actual = VALUES(tlv2_coord_z_actual),\n  tlv2_matricula_actual = VALUES(tlv2_matricula_actual),\n  tlv2_pasillo_actual = VALUES(tlv2_pasillo_actual),\n  tlv2_orden_tipo = VALUES(tlv2_orden_tipo),\n  tlv2_orden_pasillo_origen = VALUES(tlv2_orden_pasillo_origen),\n  tlv2_orden_coord_x_origen = VALUES(tlv2_orden_coord_x_origen),\n  tlv2_orden_coord_y_origen = VALUES(tlv2_orden_coord_y_origen),\n  tlv2_orden_coord_z_origen = VALUES(tlv2_orden_coord_z_origen),\n  tlv2_orden_pasillo_destino = VALUES(tlv2_orden_pasillo_destino),\n  tlv2_orden_coord_x_destino = VALUES(tlv2_orden_coord_x_destino),\n  tlv2_orden_coord_y_destino = VALUES(tlv2_orden_coord_y_destino),\n  tlv2_orden_coord_z_destino = VALUES(tlv2_orden_coord_z_destino),\n  tlv2_orden_matricula = VALUES(tlv2_orden_matricula),\n  tlv2_fin_orden_estado = VALUES(tlv2_fin_orden_estado),\n  tlv2_fin_orden_resultado = VALUES(tlv2_fin_orden_resultado),\n  tlv2_fin_orden_pasillo_destino = VALUES(tlv2_fin_orden_pasillo_destino),\n  tlv2_fin_orden_coord_x_destino = VALUES(tlv2_fin_orden_coord_x_destino),\n  tlv2_fin_orden_coord_y_destino = VALUES(tlv2_fin_orden_coord_y_destino),\n  tlv2_fin_orden_coord_z_destino = VALUES(tlv2_fin_orden_coord_z_destino),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1440,
        "wires": [
            [
                "831d2f1bb934c893"
            ]
        ]
    },
    {
        "id": "730e7c39b95d79ed",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1440,
        "wires": [
            [
                "b024c04b8562dde3"
            ]
        ]
    },
    {
        "id": "8262fe3b9126bbca",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1500,
        "wires": [
            [
                "2cbfbb385fbc57f4"
            ]
        ]
    },
    {
        "id": "2cbfbb385fbc57f4",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1500,
        "wires": []
    },
    {
        "id": "7e83f2f1cd5da506",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS pasillos_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS pasillos_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  pasillo_uno INT(11),\n  pasillo_dos INT(11),\n  pasillo_tres INT(11),\n  pasillo_cuatro INT(11),\n  pasillo_cinco INT(11),\n  pasillo_seis INT(11),\n  pasillo_siete INT(11),\n  pasillo_ocho INT(11),\n  pasillo_nueve INT(11),\n  pasillo_diez INT(11),\n  pasillo_once INT(11),\n  pasillo_doce INT(11),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "8262fe3b9126bbca"
            ]
        ]
    },
    {
        "id": "8edc1cc857b1aa70",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1500,
        "wires": [
            [
                "7e83f2f1cd5da506"
            ]
        ]
    },
    {
        "id": "5df97a7580db0164",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1560,
        "wires": [
            [
                "7c5b98da521b84e8"
            ]
        ]
    },
    {
        "id": "7c5b98da521b84e8",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1560,
        "wires": []
    },
    {
        "id": "976fd8bc3b71325c",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE pasillos_status",
        "func": "msg.topic = `\nINSERT INTO pasillos_status (\n  id,\n  pasillo_uno,\n  pasillo_dos,\n  pasillo_tres,\n  pasillo_cuatro,\n  pasillo_cinco,\n  pasillo_seis,\n  pasillo_siete,\n  pasillo_ocho,\n  pasillo_nueve,\n  pasillo_diez,\n  pasillo_once,\n  pasillo_doce,\n  timestamp\n) VALUES (\n  1,\n  FLOOR(RAND() * 3),  -- Estado aleatorio entre 0-2\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  pasillo_uno = VALUES(pasillo_uno),\n  pasillo_dos = VALUES(pasillo_dos),\n  pasillo_tres = VALUES(pasillo_tres),\n  pasillo_cuatro = VALUES(pasillo_cuatro),\n  pasillo_cinco = VALUES(pasillo_cinco),\n  pasillo_seis = VALUES(pasillo_seis),\n  pasillo_siete = VALUES(pasillo_siete),\n  pasillo_ocho = VALUES(pasillo_ocho),\n  pasillo_nueve = VALUES(pasillo_nueve),\n  pasillo_diez = VALUES(pasillo_diez),\n  pasillo_once = VALUES(pasillo_once),\n  pasillo_doce = VALUES(pasillo_doce),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "5df97a7580db0164"
            ]
        ]
    },
    {
        "id": "cc1c2b8d0cc4fb4c",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "976fd8bc3b71325c"
            ]
        ]
    },
    {
        "id": "c9562cde2e79eec1",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1620,
        "wires": [
            [
                "3464c2f3f760b186"
            ]
        ]
    },
    {
        "id": "3464c2f3f760b186",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1620,
        "wires": []
    },
    {
        "id": "785c0ccd96374a0f",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS mesasentrada_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS mesasentrada_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  mesa_entrada_uno INT(11),\n  mesa_entrada_dos INT(11),\n  mesa_entrada_tres INT(11),\n  mesa_entrada_cuatro INT(11),\n  mesa_entrada_cinco INT(11),\n  mesa_entrada_seis INT(11),\n  mesa_entrada_siete INT(11),\n  mesa_entrada_ocho INT(11),\n  mesa_entrada_nueve INT(11),\n  mesa_entrada_diez INT(11),\n  mesa_entrada_once INT(11),\n  mesa_entrada_doce INT(11),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1620,
        "wires": [
            [
                "c9562cde2e79eec1"
            ]
        ]
    },
    {
        "id": "a5d795c3d9d05140",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1620,
        "wires": [
            [
                "785c0ccd96374a0f"
            ]
        ]
    },
    {
        "id": "514ca1c01d64b6ca",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1680,
        "wires": [
            [
                "6d855aacbcb2f13e"
            ]
        ]
    },
    {
        "id": "6d855aacbcb2f13e",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5f2a87c7e8ac36fa",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE mesasentrada_status",
        "func": "msg.topic = `\nINSERT INTO mesasentrada_status (\n  id,\n  mesa_entrada_uno,\n  mesa_entrada_dos,\n  mesa_entrada_tres,\n  mesa_entrada_cuatro,\n  mesa_entrada_cinco,\n  mesa_entrada_seis,\n  mesa_entrada_siete,\n  mesa_entrada_ocho,\n  mesa_entrada_nueve,\n  mesa_entrada_diez,\n  mesa_entrada_once,\n  mesa_entrada_doce,\n  timestamp\n) VALUES (\n  1,\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  mesa_entrada_uno = VALUES(mesa_entrada_uno),\n  mesa_entrada_dos = VALUES(mesa_entrada_dos),\n  mesa_entrada_tres = VALUES(mesa_entrada_tres),\n  mesa_entrada_cuatro = VALUES(mesa_entrada_cuatro),\n  mesa_entrada_cinco = VALUES(mesa_entrada_cinco),\n  mesa_entrada_seis = VALUES(mesa_entrada_seis),\n  mesa_entrada_siete = VALUES(mesa_entrada_siete),\n  mesa_entrada_ocho = VALUES(mesa_entrada_ocho),\n  mesa_entrada_nueve = VALUES(mesa_entrada_nueve),\n  mesa_entrada_diez = VALUES(mesa_entrada_diez),\n  mesa_entrada_once = VALUES(mesa_entrada_once),\n  mesa_entrada_doce = VALUES(mesa_entrada_doce),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1680,
        "wires": [
            [
                "514ca1c01d64b6ca"
            ]
        ]
    },
    {
        "id": "8b5b848e22e304d4",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1680,
        "wires": [
            [
                "5f2a87c7e8ac36fa"
            ]
        ]
    },
    {
        "id": "54ef07a6b937e6f4",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1740,
        "wires": [
            [
                "7de1910ee9b8ae1d"
            ]
        ]
    },
    {
        "id": "7de1910ee9b8ae1d",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1740,
        "wires": []
    },
    {
        "id": "262d84b2cd23999b",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS mesassalida_status",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS mesassalida_status (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  mesa_salida_uno INT(11),\n  mesa_salida_dos INT(11),\n  mesa_salida_tres INT(11),\n  mesa_salida_cuatro INT(11),\n  mesa_salida_cinco INT(11),\n  mesa_salida_seis INT(11),\n  mesa_salida_siete INT(11),\n  mesa_salida_ocho INT(11),\n  mesa_salida_nueve INT(11),\n  mesa_salida_diez INT(11),\n  mesa_salida_once INT(11),\n  mesa_salida_doce INT(11),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1740,
        "wires": [
            [
                "54ef07a6b937e6f4"
            ]
        ]
    },
    {
        "id": "516d710433734c25",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1740,
        "wires": [
            [
                "262d84b2cd23999b"
            ]
        ]
    },
    {
        "id": "89f36ae2320aef14",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1800,
        "wires": [
            [
                "a075c914ec0100c9"
            ]
        ]
    },
    {
        "id": "a075c914ec0100c9",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1800,
        "wires": []
    },
    {
        "id": "957ca3c9f9045350",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE mesassalida_status",
        "func": "msg.topic = `\nINSERT INTO mesassalida_status (\n  id,\n  mesa_salida_uno,\n  mesa_salida_dos,\n  mesa_salida_tres,\n  mesa_salida_cuatro,\n  mesa_salida_cinco,\n  mesa_salida_seis,\n  mesa_salida_siete,\n  mesa_salida_ocho,\n  mesa_salida_nueve,\n  mesa_salida_diez,\n  mesa_salida_once,\n  mesa_salida_doce,\n  timestamp\n) VALUES (\n  1,\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  FLOOR(RAND() * 3),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  mesa_salida_uno = VALUES(mesa_salida_uno),\n  mesa_salida_dos = VALUES(mesa_salida_dos),\n  mesa_salida_tres = VALUES(mesa_salida_tres),\n  mesa_salida_cuatro = VALUES(mesa_salida_cuatro),\n  mesa_salida_cinco = VALUES(mesa_salida_cinco),\n  mesa_salida_seis = VALUES(mesa_salida_seis),\n  mesa_salida_siete = VALUES(mesa_salida_siete),\n  mesa_salida_ocho = VALUES(mesa_salida_ocho),\n  mesa_salida_nueve = VALUES(mesa_salida_nueve),\n  mesa_salida_diez = VALUES(mesa_salida_diez),\n  mesa_salida_once = VALUES(mesa_salida_once),\n  mesa_salida_doce = VALUES(mesa_salida_doce),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1800,
        "wires": [
            [
                "89f36ae2320aef14"
            ]
        ]
    },
    {
        "id": "5f799b09371a8a9b",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1800,
        "wires": [
            [
                "957ca3c9f9045350"
            ]
        ]
    },
    {
        "id": "adae1d0f2e8e79b6",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1860,
        "wires": [
            [
                "783555f7febe4b01"
            ]
        ]
    },
    {
        "id": "783555f7febe4b01",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1860,
        "wires": []
    },
    {
        "id": "4702facc617b8d64",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS ct_alarmas",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS ct_alarmas (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  ct_defecto_error_comunicacion TINYINT(1),\n  ct_defecto_emergencia_armario_carro TINYINT(1),\n  ct_defecto_anomalia_variador TINYINT(1),\n  ct_defecto_anomalia_motor_traslacion TINYINT(1),\n  ct_defecto_anomalia_motor_entrada TINYINT(1),\n  ct_defecto_anomalia_motor_salida TINYINT(1),\n  ct_defecto_final_carrera_pasillo1 TINYINT(1),\n  ct_defecto_final_carrera_pasillo12 TINYINT(1),\n  ct_defecto_paleta_descentrada_entrada TINYINT(1),\n  ct_defecto_paleta_descentrada_salida TINYINT(1),\n  ct_defecto_limite_superior_lectura_encoder TINYINT(1),\n  ct_defecto_limite_inferior_lectura_encoder TINYINT(1),\n  ct_defecto_tiempo_transferencia_mesa_salida TINYINT(1),\n  ct_defecto_telemetro TINYINT(1),\n  ct_defecto_tiempo_entrada TINYINT(1),\n  ct_defecto_tiempo_salida TINYINT(1),\n  ct_defecto_paleta_entrada_sin_codigo TINYINT(1),\n  ct_defecto_paleta_salida_sin_codigo TINYINT(1),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1860,
        "wires": [
            [
                "adae1d0f2e8e79b6"
            ]
        ]
    },
    {
        "id": "db7cf6b7b3f370c9",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1860,
        "wires": [
            [
                "4702facc617b8d64"
            ]
        ]
    },
    {
        "id": "2e7d0b11020cef03",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1920,
        "wires": [
            [
                "a544cc73d904d57d"
            ]
        ]
    },
    {
        "id": "a544cc73d904d57d",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1920,
        "wires": []
    },
    {
        "id": "9b3b6d1accc4dbce",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE ct_alarmas",
        "func": "msg.topic = `\nINSERT INTO ct_alarmas (\n  id,\n  ct_defecto_error_comunicacion,\n  ct_defecto_emergencia_armario_carro,\n  ct_defecto_anomalia_variador,\n  ct_defecto_anomalia_motor_traslacion,\n  ct_defecto_anomalia_motor_entrada,\n  ct_defecto_anomalia_motor_salida,\n  ct_defecto_final_carrera_pasillo1,\n  ct_defecto_final_carrera_pasillo12,\n  ct_defecto_paleta_descentrada_entrada,\n  ct_defecto_paleta_descentrada_salida,\n  ct_defecto_limite_superior_lectura_encoder,\n  ct_defecto_limite_inferior_lectura_encoder,\n  ct_defecto_tiempo_transferencia_mesa_salida,\n  ct_defecto_telemetro,\n  ct_defecto_tiempo_entrada,\n  ct_defecto_tiempo_salida,\n  ct_defecto_paleta_entrada_sin_codigo,\n  ct_defecto_paleta_salida_sin_codigo,\n  timestamp\n) VALUES (\n  1,\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2), FLOOR(RAND()*2),\n  FLOOR(RAND()*2), FLOOR(RAND()*2),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  ct_defecto_error_comunicacion = VALUES(ct_defecto_error_comunicacion),\n  ct_defecto_emergencia_armario_carro = VALUES(ct_defecto_emergencia_armario_carro),\n  ct_defecto_anomalia_variador = VALUES(ct_defecto_anomalia_variador),\n  ct_defecto_anomalia_motor_traslacion = VALUES(ct_defecto_anomalia_motor_traslacion),\n  ct_defecto_anomalia_motor_entrada = VALUES(ct_defecto_anomalia_motor_entrada),\n  ct_defecto_anomalia_motor_salida = VALUES(ct_defecto_anomalia_motor_salida),\n  ct_defecto_final_carrera_pasillo1 = VALUES(ct_defecto_final_carrera_pasillo1),\n  ct_defecto_final_carrera_pasillo12 = VALUES(ct_defecto_final_carrera_pasillo12),\n  ct_defecto_paleta_descentrada_entrada = VALUES(ct_defecto_paleta_descentrada_entrada),\n  ct_defecto_paleta_descentrada_salida = VALUES(ct_defecto_paleta_descentrada_salida),\n  ct_defecto_limite_superior_lectura_encoder = VALUES(ct_defecto_limite_superior_lectura_encoder),\n  ct_defecto_limite_inferior_lectura_encoder = VALUES(ct_defecto_limite_inferior_lectura_encoder),\n  ct_defecto_tiempo_transferencia_mesa_salida = VALUES(ct_defecto_tiempo_transferencia_mesa_salida),\n  ct_defecto_telemetro = VALUES(ct_defecto_telemetro),\n  ct_defecto_tiempo_entrada = VALUES(ct_defecto_tiempo_entrada),\n  ct_defecto_tiempo_salida = VALUES(ct_defecto_tiempo_salida),\n  ct_defecto_paleta_entrada_sin_codigo = VALUES(ct_defecto_paleta_entrada_sin_codigo),\n  ct_defecto_paleta_salida_sin_codigo = VALUES(ct_defecto_paleta_salida_sin_codigo),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1920,
        "wires": [
            [
                "2e7d0b11020cef03"
            ]
        ]
    },
    {
        "id": "ff81e7b54717a613",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1920,
        "wires": [
            [
                "9b3b6d1accc4dbce"
            ]
        ]
    },
    {
        "id": "7529cbbfd0f3ad32",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 1980,
        "wires": [
            [
                "a8508132741d32ab"
            ]
        ]
    },
    {
        "id": "a8508132741d32ab",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1980,
        "wires": []
    },
    {
        "id": "6b7877407db3c468",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS tlv1_alarmas",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS tlv1_alarmas (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  tlv1_emergencia_general TINYINT(1),\n  tlv1_puerta_cabina_abierta TINYINT(1),\n  tlv1_exceso_recorrido_adelante TINYINT(1),\n  tlv1_exceso_recorrido_atras TINYINT(1),\n  tlv1_exceso_recorrido_subida TINYINT(1),\n  tlv1_exceso_recorrido_bajada TINYINT(1),\n  tlv1_paracaidas_elevacion TINYINT(1),\n  tlv1_cables_flojos_elevacion TINYINT(1),\n  tlv1_proteccion_convertidor_traslacion TINYINT(1),\n  tlv1_proteccion_convertidor_elevacion TINYINT(1),\n  tlv1_proteccion_convertidor_horquillas TINYINT(1),\n  tlv1_proteccion_motor_traslacion TINYINT(1),\n  tlv1_proteccion_motor_elevacion TINYINT(1),\n  tlv1_proteccion_motor_horquillas TINYINT(1),\n  tlv1_proteccion_convertidor_traslacion2 TINYINT(1),\n  tlv1_defecto_convertidor_elevacion TINYINT(1),\n  tlv1_defecto_convertidor_horquillas TINYINT(1),\n  tlv1_exceso_velocidad_traslacion TINYINT(1),\n  tlv1_exceso_velocidad_elevacion TINYINT(1),\n  tlv1_defecto_fotoceldas_centraje_horquillas TINYINT(1),\n  tlv1_defecto_giro_traslacion TINYINT(1),\n  tlv1_defecto_giro_elevacion TINYINT(1),\n  tlv1_defecto_giro_horquillas TINYINT(1),\n  tlv1_tiempo_centraje_traslacion TINYINT(1),\n  tlv1_tiempo_centraje_elevacion TINYINT(1),\n  tlv1_tiempo_ciclo_horquillas TINYINT(1),\n  tlv1_tiempo_ciclo_tope_seguridad TINYINT(1),\n  tlv1_defecto_detectores_traslacion TINYINT(1),\n  tlv1_defecto_detectores_elevacion TINYINT(1),\n  tlv1_defecto_detectores_horquillas TINYINT(1),\n  tlv1_defecto_detectores_tope_seguridad TINYINT(1),\n  tlv1_defecto_impul_encoder_traslacion TINYINT(1),\n  tlv1_defecto_impul_encoder_elevacion TINYINT(1),\n  tlv1_defecto_impul_encoder_horquillas TINYINT(1),\n  tlv1_contador_impul_trasl_desfasado TINYINT(1),\n  tlv1_contador_impul_elev_desfasado TINYINT(1),\n  tlv1_defecto_comunicacion_red_nec_l1 TINYINT(1),\n  tlv1_defecto_fotoceldas_centraje_traslacion TINYINT(1),\n  tlv1_defecto_detectores_lectura_pasillo TINYINT(1),\n  tlv1_defecto_choper_frenado_elevacion TINYINT(1),\n  tlv1_defecto_galibo TINYINT(1),\n  tlv1_defecto_presencia_paleta TINYINT(1),\n  tlv1_defecto_fotoceldas_palpadores TINYINT(1),\n  tlv1_defecto_fotoc_puente_encargado TINYINT(1),\n  tlv1_pasillo_fuera_servicio TINYINT(1),\n  tlv1_defecto_nr_pasillo TINYINT(1),\n  tlv1_defecto_tension_24vcc TINYINT(1),\n  tlv1_defecto_tension_frenos_220vca TINYINT(1),\n  tlv1_defecto_destino_incorrecto TINYINT(1),\n  tlv1_peticion_ayuda_mantenimiento TINYINT(1),\n  tlv1_defecto_plc_bateria TINYINT(1),\n  tlv1_defecto_numero_esclavo TINYINT(1),\n  tlv1_error_deposito TINYINT(1),\n  tlv1_error_extraccion TINYINT(1),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1980,
        "wires": [
            [
                "7529cbbfd0f3ad32"
            ]
        ]
    },
    {
        "id": "fdfba62ed5685be2",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1980,
        "wires": [
            [
                "6b7877407db3c468"
            ]
        ]
    },
    {
        "id": "c3b6a75102b1cfd9",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2040,
        "wires": [
            [
                "251c613a9b236f9c"
            ]
        ]
    },
    {
        "id": "251c613a9b236f9c",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2040,
        "wires": []
    },
    {
        "id": "72576f62d6dcb4e6",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE tlv1_alarmas",
        "func": "const campos = [\n  'tlv1_emergencia_general',\n  'tlv1_puerta_cabina_abierta',\n  'tlv1_exceso_recorrido_adelante',\n  'tlv1_exceso_recorrido_atras',\n  'tlv1_exceso_recorrido_subida',\n  'tlv1_exceso_recorrido_bajada',\n  'tlv1_paracaidas_elevacion',\n  'tlv1_cables_flojos_elevacion',\n  'tlv1_proteccion_convertidor_traslacion',\n  'tlv1_proteccion_convertidor_elevacion',\n  'tlv1_proteccion_convertidor_horquillas',\n  'tlv1_proteccion_motor_traslacion',\n  'tlv1_proteccion_motor_elevacion',\n  'tlv1_proteccion_motor_horquillas',\n  'tlv1_proteccion_convertidor_traslacion2',\n  'tlv1_defecto_convertidor_elevacion',\n  'tlv1_defecto_convertidor_horquillas',\n  'tlv1_exceso_velocidad_traslacion',\n  'tlv1_exceso_velocidad_elevacion',\n  'tlv1_defecto_fotoceldas_centraje_horquillas',\n  'tlv1_defecto_giro_traslacion',\n  'tlv1_defecto_giro_elevacion',\n  'tlv1_defecto_giro_horquillas',\n  'tlv1_tiempo_centraje_traslacion',\n  'tlv1_tiempo_centraje_elevacion',\n  'tlv1_tiempo_ciclo_horquillas',\n  'tlv1_tiempo_ciclo_tope_seguridad',\n  'tlv1_defecto_detectores_traslacion',\n  'tlv1_defecto_detectores_elevacion',\n  'tlv1_defecto_detectores_horquillas',\n  'tlv1_defecto_detectores_tope_seguridad',\n  'tlv1_defecto_impul_encoder_traslacion',\n  'tlv1_defecto_impul_encoder_elevacion',\n  'tlv1_defecto_impul_encoder_horquillas',\n  'tlv1_contador_impul_trasl_desfasado',\n  'tlv1_contador_impul_elev_desfasado',\n  'tlv1_defecto_comunicacion_red_nec_l1',\n  'tlv1_defecto_fotoceldas_centraje_traslacion',\n  'tlv1_defecto_detectores_lectura_pasillo',\n  'tlv1_defecto_choper_frenado_elevacion',\n  'tlv1_defecto_galibo',\n  'tlv1_defecto_presencia_paleta',\n  'tlv1_defecto_fotoceldas_palpadores',\n  'tlv1_defecto_fotoc_puente_encargado',\n  'tlv1_pasillo_fuera_servicio',\n  'tlv1_defecto_nr_pasillo',\n  'tlv1_defecto_tension_24vcc',\n  'tlv1_defecto_tension_frenos_220vca',\n  'tlv1_defecto_destino_incorrecto',\n  'tlv1_peticion_ayuda_mantenimiento',\n  'tlv1_defecto_plc_bateria',\n  'tlv1_defecto_numero_esclavo',\n  'tlv1_error_deposito',\n  'tlv1_error_extraccion'\n];\n\nconst values = campos.map(() => `FLOOR(RAND()*2)`).join(', ');\n\nconst updateFields = campos.map(c => `${c} = VALUES(${c})`).join(',\\n  ');\n\nmsg.topic = `\nINSERT INTO tlv1_alarmas (\n  id,\n  ${campos.join(', ')},\n  timestamp\n)\nVALUES (\n  1,\n  ${values},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  ${updateFields},\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\nmsg.topic = `\nINSERT INTO tlv1_alarmas (\n  id,\n  tlv1_emergencia_general,\n  tlv1_puerta_cabina_abierta,\n  tlv1_exceso_recorrido_adelante,\n  tlv1_exceso_recorrido_atras,\n  tlv1_exceso_recorrido_subida,\n  tlv1_exceso_recorrido_bajada,\n  tlv1_paracaidas_elevacion,\n  tlv1_cables_flojos_elevacion,\n  tlv1_proteccion_convertidor_traslacion,\n  tlv1_proteccion_convertidor_elevacion,\n  tlv1_proteccion_convertidor_horquillas,\n  tlv1_proteccion_motor_traslacion,\n  tlv1_proteccion_motor_elevacion,\n  tlv1_proteccion_motor_horquillas,\n  tlv1_proteccion_convertidor_traslacion2,\n  tlv1_defecto_convertidor_elevacion,\n  tlv1_defecto_convertidor_horquillas,\n  tlv1_exceso_velocidad_traslacion,\n  tlv1_exceso_velocidad_elevacion,\n  tlv1_defecto_fotoceldas_centraje_horquillas,\n  tlv1_defecto_giro_traslacion,\n  tlv1_defecto_giro_elevacion,\n  tlv1_defecto_giro_horquillas,\n  tlv1_tiempo_centraje_traslacion,\n  tlv1_tiempo_centraje_elevacion,\n  tlv1_tiempo_ciclo_horquillas,\n  tlv1_tiempo_ciclo_tope_seguridad,\n  tlv1_defecto_detectores_traslacion,\n  tlv1_defecto_detectores_elevacion,\n  tlv1_defecto_detectores_horquillas,\n  tlv1_defecto_detectores_tope_seguridad,\n  tlv1_defecto_impul_encoder_traslacion,\n  tlv1_defecto_impul_encoder_elevacion,\n  tlv1_defecto_impul_encoder_horquillas,\n  tlv1_contador_impul_trasl_desfasado,\n  tlv1_contador_impul_elev_desfasado,\n  tlv1_defecto_comunicacion_red_nec_l1,\n  tlv1_defecto_fotoceldas_centraje_traslacion,\n  tlv1_defecto_detectores_lectura_pasillo,\n  tlv1_defecto_choper_frenado_elevacion,\n  tlv1_defecto_galibo,\n  tlv1_defecto_presencia_paleta,\n  tlv1_defecto_fotoceldas_palpadores,\n  tlv1_defecto_fotoc_puente_encargado,\n  tlv1_pasillo_fuera_servicio,\n  tlv1_defecto_nr_pasillo,\n  tlv1_defecto_tension_24vcc,\n  tlv1_defecto_tension_frenos_220vca,\n  tlv1_defecto_destino_incorrecto,\n  tlv1_peticion_ayuda_mantenimiento,\n  tlv1_defecto_plc_bateria,\n  tlv1_defecto_numero_esclavo,\n  tlv1_error_deposito,\n  tlv1_error_extraccion,\n  timestamp\n) VALUES (\n  1,\n  1, 0, 1, 0, 1, 0, 1, 0,\n  1, 1, 0, 0, 1, 0, 1, 0,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1,\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv1_emergencia_general = VALUES(tlv1_emergencia_general),\n  tlv1_puerta_cabina_abierta = VALUES(tlv1_puerta_cabina_abierta),\n  tlv1_exceso_recorrido_adelante = VALUES(tlv1_exceso_recorrido_adelante),\n  tlv1_exceso_recorrido_atras = VALUES(tlv1_exceso_recorrido_atras),\n  tlv1_exceso_recorrido_subida = VALUES(tlv1_exceso_recorrido_subida),\n  tlv1_exceso_recorrido_bajada = VALUES(tlv1_exceso_recorrido_bajada),\n  tlv1_paracaidas_elevacion = VALUES(tlv1_paracaidas_elevacion),\n  tlv1_cables_flojos_elevacion = VALUES(tlv1_cables_flojos_elevacion),\n  tlv1_proteccion_convertidor_traslacion = VALUES(tlv1_proteccion_convertidor_traslacion),\n  tlv1_proteccion_convertidor_elevacion = VALUES(tlv1_proteccion_convertidor_elevacion),\n  tlv1_proteccion_convertidor_horquillas = VALUES(tlv1_proteccion_convertidor_horquillas),\n  tlv1_proteccion_motor_traslacion = VALUES(tlv1_proteccion_motor_traslacion),\n  tlv1_proteccion_motor_elevacion = VALUES(tlv1_proteccion_motor_elevacion),\n  tlv1_proteccion_motor_horquillas = VALUES(tlv1_proteccion_motor_horquillas),\n  tlv1_proteccion_convertidor_traslacion2 = VALUES(tlv1_proteccion_convertidor_traslacion2),\n  tlv1_defecto_convertidor_elevacion = VALUES(tlv1_defecto_convertidor_elevacion),\n  tlv1_defecto_convertidor_horquillas = VALUES(tlv1_defecto_convertidor_horquillas),\n  tlv1_exceso_velocidad_traslacion = VALUES(tlv1_exceso_velocidad_traslacion),\n  tlv1_exceso_velocidad_elevacion = VALUES(tlv1_exceso_velocidad_elevacion),\n  tlv1_defecto_fotoceldas_centraje_horquillas = VALUES(tlv1_defecto_fotoceldas_centraje_horquillas),\n  tlv1_defecto_giro_traslacion = VALUES(tlv1_defecto_giro_traslacion),\n  tlv1_defecto_giro_elevacion = VALUES(tlv1_defecto_giro_elevacion),\n  tlv1_defecto_giro_horquillas = VALUES(tlv1_defecto_giro_horquillas),\n  tlv1_tiempo_centraje_traslacion = VALUES(tlv1_tiempo_centraje_traslacion),\n  tlv1_tiempo_centraje_elevacion = VALUES(tlv1_tiempo_centraje_elevacion),\n  tlv1_tiempo_ciclo_horquillas = VALUES(tlv1_tiempo_ciclo_horquillas),\n  tlv1_tiempo_ciclo_tope_seguridad = VALUES(tlv1_tiempo_ciclo_tope_seguridad),\n  tlv1_defecto_detectores_traslacion = VALUES(tlv1_defecto_detectores_traslacion),\n  tlv1_defecto_detectores_elevacion = VALUES(tlv1_defecto_detectores_elevacion),\n  tlv1_defecto_detectores_horquillas = VALUES(tlv1_defecto_detectores_horquillas),\n  tlv1_defecto_detectores_tope_seguridad = VALUES(tlv1_defecto_detectores_tope_seguridad),\n  tlv1_defecto_impul_encoder_traslacion = VALUES(tlv1_defecto_impul_encoder_traslacion),\n  tlv1_defecto_impul_encoder_elevacion = VALUES(tlv1_defecto_impul_encoder_elevacion),\n  tlv1_defecto_impul_encoder_horquillas = VALUES(tlv1_defecto_impul_encoder_horquillas),\n  tlv1_contador_impul_trasl_desfasado = VALUES(tlv1_contador_impul_trasl_desfasado),\n  tlv1_contador_impul_elev_desfasado = VALUES(tlv1_contador_impul_elev_desfasado),\n  tlv1_defecto_comunicacion_red_nec_l1 = VALUES(tlv1_defecto_comunicacion_red_nec_l1),\n  tlv1_defecto_fotoceldas_centraje_traslacion = VALUES(tlv1_defecto_fotoceldas_centraje_traslacion),\n  tlv1_defecto_detectores_lectura_pasillo = VALUES(tlv1_defecto_detectores_lectura_pasillo),\n  tlv1_defecto_choper_frenado_elevacion = VALUES(tlv1_defecto_choper_frenado_elevacion),\n  tlv1_defecto_galibo = VALUES(tlv1_defecto_galibo),\n  tlv1_defecto_presencia_paleta = VALUES(tlv1_defecto_presencia_paleta),\n  tlv1_defecto_fotoceldas_palpadores = VALUES(tlv1_defecto_fotoceldas_palpadores),\n  tlv1_defecto_fotoc_puente_encargado = VALUES(tlv1_defecto_fotoc_puente_encargado),\n  tlv1_pasillo_fuera_servicio = VALUES(tlv1_pasillo_fuera_servicio),\n  tlv1_defecto_nr_pasillo = VALUES(tlv1_defecto_nr_pasillo),\n  tlv1_defecto_tension_24vcc = VALUES(tlv1_defecto_tension_24vcc),\n  tlv1_defecto_tension_frenos_220vca = VALUES(tlv1_defecto_tension_frenos_220vca),\n  tlv1_defecto_destino_incorrecto = VALUES(tlv1_defecto_destino_incorrecto),\n  tlv1_peticion_ayuda_mantenimiento = VALUES(tlv1_peticion_ayuda_mantenimiento),\n  tlv1_defecto_plc_bateria = VALUES(tlv1_defecto_plc_bateria),\n  tlv1_defecto_numero_esclavo = VALUES(tlv1_defecto_numero_esclavo),\n  tlv1_error_deposito = VALUES(tlv1_error_deposito),\n  tlv1_error_extraccion = VALUES(tlv1_error_extraccion),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2040,
        "wires": [
            [
                "c3b6a75102b1cfd9"
            ]
        ]
    },
    {
        "id": "4379b8befb6c9aa2",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2040,
        "wires": [
            [
                "72576f62d6dcb4e6"
            ]
        ]
    },
    {
        "id": "7ba3345210940c5b",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2100,
        "wires": [
            [
                "ec2f19398a777987"
            ]
        ]
    },
    {
        "id": "ec2f19398a777987",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2100,
        "wires": []
    },
    {
        "id": "b387ca9f8feb6a8d",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS tlv2_alarmas",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS tlv2_alarmas (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  tlv2_emergencia_general TINYINT(1),\n  tlv2_puerta_cabina_abierta TINYINT(1),\n  tlv2_exceso_recorrido_adelante TINYINT(1),\n  tlv2_exceso_recorrido_atras TINYINT(1),\n  tlv2_exceso_recorrido_subida TINYINT(1),\n  tlv2_exceso_recorrido_bajada TINYINT(1),\n  tlv2_paracaidas_elevacion TINYINT(1),\n  tlv2_cables_flojos_elevacion TINYINT(1),\n  tlv2_proteccion_convertidor_traslacion TINYINT(1),\n  tlv2_proteccion_convertidor_elevacion TINYINT(1),\n  tlv2_proteccion_convertidor_horquillas TINYINT(1),\n  tlv2_proteccion_motor_traslacion TINYINT(1),\n  tlv2_proteccion_motor_elevacion TINYINT(1),\n  tlv2_proteccion_motor_horquillas TINYINT(1),\n  tlv2_proteccion_convertidor_traslacion2 TINYINT(1),\n  tlv2_defecto_convertidor_elevacion TINYINT(1),\n  tlv2_defecto_convertidor_horquillas TINYINT(1),\n  tlv2_exceso_velocidad_traslacion TINYINT(1),\n  tlv2_exceso_velocidad_elevacion TINYINT(1),\n  tlv2_defecto_fotoceldas_centraje_horquillas TINYINT(1),\n  tlv2_defecto_giro_traslacion TINYINT(1),\n  tlv2_defecto_giro_elevacion TINYINT(1),\n  tlv2_defecto_giro_horquillas TINYINT(1),\n  tlv2_tiempo_centraje_traslacion TINYINT(1),\n  tlv2_tiempo_centraje_elevacion TINYINT(1),\n  tlv2_tiempo_ciclo_horquillas TINYINT(1),\n  tlv2_tiempo_ciclo_tope_seguridad TINYINT(1),\n  tlv2_defecto_detectores_traslacion TINYINT(1),\n  tlv2_defecto_detectores_elevacion TINYINT(1),\n  tlv2_defecto_detectores_horquillas TINYINT(1),\n  tlv2_defecto_detectores_tope_seguridad TINYINT(1),\n  tlv2_defecto_impul_encoder_traslacion TINYINT(1),\n  tlv2_defecto_impul_encoder_elevacion TINYINT(1),\n  tlv2_defecto_impul_encoder_horquillas TINYINT(1),\n  tlv2_contador_impul_trasl_desfasado TINYINT(1),\n  tlv2_contador_impul_elev_desfasado TINYINT(1),\n  tlv2_defecto_comunicacion_red_nec_l1 TINYINT(1),\n  tlv2_defecto_fotoceldas_centraje_traslacion TINYINT(1),\n  tlv2_defecto_detectores_lectura_pasillo TINYINT(1),\n  tlv2_defecto_choper_frenado_elevacion TINYINT(1),\n  tlv2_defecto_galibo TINYINT(1),\n  tlv2_defecto_presencia_paleta TINYINT(1),\n  tlv2_defecto_fotoceldas_palpadores TINYINT(1),\n  tlv2_defecto_fotoc_puente_encargado TINYINT(1),\n  tlv2_pasillo_fuera_servicio TINYINT(1),\n  tlv2_defecto_nr_pasillo TINYINT(1),\n  tlv2_defecto_tension_24vcc TINYINT(1),\n  tlv2_defecto_tension_frenos_220vca TINYINT(1),\n  tlv2_defecto_destino_incorrecto TINYINT(1),\n  tlv2_peticion_ayuda_mantenimiento TINYINT(1),\n  tlv2_defecto_plc_bateria TINYINT(1),\n  tlv2_defecto_numero_esclavo TINYINT(1),\n  tlv2_error_deposito TINYINT(1),\n  tlv2_error_extraccion TINYINT(1),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2100,
        "wires": [
            [
                "7ba3345210940c5b"
            ]
        ]
    },
    {
        "id": "6842dd50508b3d5c",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2100,
        "wires": [
            [
                "b387ca9f8feb6a8d"
            ]
        ]
    },
    {
        "id": "7a3513a5c6604348",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2160,
        "wires": [
            [
                "00efaba7b07745e3"
            ]
        ]
    },
    {
        "id": "00efaba7b07745e3",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2160,
        "wires": []
    },
    {
        "id": "cdf1c887079d20a9",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE tlv2_alarmas",
        "func": "const campos = [\n  'tlv2_emergencia_general',\n  'tlv2_puerta_cabina_abierta',\n  'tlv2_exceso_recorrido_adelante',\n  'tlv2_exceso_recorrido_atras',\n  'tlv2_exceso_recorrido_subida',\n  'tlv2_exceso_recorrido_bajada',\n  'tlv2_paracaidas_elevacion',\n  'tlv2_cables_flojos_elevacion',\n  'tlv2_proteccion_convertidor_traslacion',\n  'tlv2_proteccion_convertidor_elevacion',\n  'tlv2_proteccion_convertidor_horquillas',\n  'tlv2_proteccion_motor_traslacion',\n  'tlv2_proteccion_motor_elevacion',\n  'tlv2_proteccion_motor_horquillas',\n  'tlv2_proteccion_convertidor_traslacion2',\n  'tlv2_defecto_convertidor_elevacion',\n  'tlv2_defecto_convertidor_horquillas',\n  'tlv2_exceso_velocidad_traslacion',\n  'tlv2_exceso_velocidad_elevacion',\n  'tlv2_defecto_fotoceldas_centraje_horquillas',\n  'tlv2_defecto_giro_traslacion',\n  'tlv2_defecto_giro_elevacion',\n  'tlv2_defecto_giro_horquillas',\n  'tlv2_tiempo_centraje_traslacion',\n  'tlv2_tiempo_centraje_elevacion',\n  'tlv2_tiempo_ciclo_horquillas',\n  'tlv2_tiempo_ciclo_tope_seguridad',\n  'tlv2_defecto_detectores_traslacion',\n  'tlv2_defecto_detectores_elevacion',\n  'tlv2_defecto_detectores_horquillas',\n  'tlv2_defecto_detectores_tope_seguridad',\n  'tlv2_defecto_impul_encoder_traslacion',\n  'tlv2_defecto_impul_encoder_elevacion',\n  'tlv2_defecto_impul_encoder_horquillas',\n  'tlv2_contador_impul_trasl_desfasado',\n  'tlv2_contador_impul_elev_desfasado',\n  'tlv2_defecto_comunicacion_red_nec_l1',\n  'tlv2_defecto_fotoceldas_centraje_traslacion',\n  'tlv2_defecto_detectores_lectura_pasillo',\n  'tlv2_defecto_choper_frenado_elevacion',\n  'tlv2_defecto_galibo',\n  'tlv2_defecto_presencia_paleta',\n  'tlv2_defecto_fotoceldas_palpadores',\n  'tlv2_defecto_fotoc_puente_encargado',\n  'tlv2_pasillo_fuera_servicio',\n  'tlv2_defecto_nr_pasillo',\n  'tlv2_defecto_tension_24vcc',\n  'tlv2_defecto_tension_frenos_220vca',\n  'tlv2_defecto_destino_incorrecto',\n  'tlv2_peticion_ayuda_mantenimiento',\n  'tlv2_defecto_plc_bateria',\n  'tlv2_defecto_numero_esclavo',\n  'tlv2_error_deposito',\n  'tlv2_error_extraccion'\n];\n\nconst values = campos.map(() => `FLOOR(RAND()*2)`).join(', ');\n\nconst updateFields = campos.map(c => `${c} = VALUES(${c})`).join(',\\n  ');\n\nmsg.topic = `\nINSERT INTO tlv2_alarmas (\n  id,\n  ${campos.join(', ')},\n  timestamp\n)\nVALUES (\n  1,\n  ${values},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  ${updateFields},\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\nmsg.topic = `\nINSERT INTO tlv2_alarmas (\n  id,\n  tlv2_emergencia_general,\n  tlv2_puerta_cabina_abierta,\n  tlv2_exceso_recorrido_adelante,\n  tlv2_exceso_recorrido_atras,\n  tlv2_exceso_recorrido_subida,\n  tlv2_exceso_recorrido_bajada,\n  tlv2_paracaidas_elevacion,\n  tlv2_cables_flojos_elevacion,\n  tlv2_proteccion_convertidor_traslacion,\n  tlv2_proteccion_convertidor_elevacion,\n  tlv2_proteccion_convertidor_horquillas,\n  tlv2_proteccion_motor_traslacion,\n  tlv2_proteccion_motor_elevacion,\n  tlv2_proteccion_motor_horquillas,\n  tlv2_proteccion_convertidor_traslacion2,\n  tlv2_defecto_convertidor_elevacion,\n  tlv2_defecto_convertidor_horquillas,\n  tlv2_exceso_velocidad_traslacion,\n  tlv2_exceso_velocidad_elevacion,\n  tlv2_defecto_fotoceldas_centraje_horquillas,\n  tlv2_defecto_giro_traslacion,\n  tlv2_defecto_giro_elevacion,\n  tlv2_defecto_giro_horquillas,\n  tlv2_tiempo_centraje_traslacion,\n  tlv2_tiempo_centraje_elevacion,\n  tlv2_tiempo_ciclo_horquillas,\n  tlv2_tiempo_ciclo_tope_seguridad,\n  tlv2_defecto_detectores_traslacion,\n  tlv2_defecto_detectores_elevacion,\n  tlv2_defecto_detectores_horquillas,\n  tlv2_defecto_detectores_tope_seguridad,\n  tlv2_defecto_impul_encoder_traslacion,\n  tlv2_defecto_impul_encoder_elevacion,\n  tlv2_defecto_impul_encoder_horquillas,\n  tlv2_contador_impul_trasl_desfasado,\n  tlv2_contador_impul_elev_desfasado,\n  tlv2_defecto_comunicacion_red_nec_l1,\n  tlv2_defecto_fotoceldas_centraje_traslacion,\n  tlv2_defecto_detectores_lectura_pasillo,\n  tlv2_defecto_choper_frenado_elevacion,\n  tlv2_defecto_galibo,\n  tlv2_defecto_presencia_paleta,\n  tlv2_defecto_fotoceldas_palpadores,\n  tlv2_defecto_fotoc_puente_encargado,\n  tlv2_pasillo_fuera_servicio,\n  tlv2_defecto_nr_pasillo,\n  tlv2_defecto_tension_24vcc,\n  tlv2_defecto_tension_frenos_220vca,\n  tlv2_defecto_destino_incorrecto,\n  tlv2_peticion_ayuda_mantenimiento,\n  tlv2_defecto_plc_bateria,\n  tlv2_defecto_numero_esclavo,\n  tlv2_error_deposito,\n  tlv2_error_extraccion,\n  timestamp\n) VALUES (\n  1,\n  1, 0, 1, 0, 1, 0, 1, 0,\n  1, 1, 0, 0, 1, 0, 1, 0,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1,\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv2_emergencia_general = VALUES(tlv2_emergencia_general),\n  tlv2_puerta_cabina_abierta = VALUES(tlv2_puerta_cabina_abierta),\n  tlv2_exceso_recorrido_adelante = VALUES(tlv2_exceso_recorrido_adelante),\n  tlv2_exceso_recorrido_atras = VALUES(tlv2_exceso_recorrido_atras),\n  tlv2_exceso_recorrido_subida = VALUES(tlv2_exceso_recorrido_subida),\n  tlv2_exceso_recorrido_bajada = VALUES(tlv2_exceso_recorrido_bajada),\n  tlv2_paracaidas_elevacion = VALUES(tlv2_paracaidas_elevacion),\n  tlv2_cables_flojos_elevacion = VALUES(tlv2_cables_flojos_elevacion),\n  tlv2_proteccion_convertidor_traslacion = VALUES(tlv2_proteccion_convertidor_traslacion),\n  tlv2_proteccion_convertidor_elevacion = VALUES(tlv2_proteccion_convertidor_elevacion),\n  tlv2_proteccion_convertidor_horquillas = VALUES(tlv2_proteccion_convertidor_horquillas),\n  tlv2_proteccion_motor_traslacion = VALUES(tlv2_proteccion_motor_traslacion),\n  tlv2_proteccion_motor_elevacion = VALUES(tlv2_proteccion_motor_elevacion),\n  tlv2_proteccion_motor_horquillas = VALUES(tlv2_proteccion_motor_horquillas),\n  tlv2_proteccion_convertidor_traslacion2 = VALUES(tlv2_proteccion_convertidor_traslacion2),\n  tlv2_defecto_convertidor_elevacion = VALUES(tlv2_defecto_convertidor_elevacion),\n  tlv2_defecto_convertidor_horquillas = VALUES(tlv2_defecto_convertidor_horquillas),\n  tlv2_exceso_velocidad_traslacion = VALUES(tlv2_exceso_velocidad_traslacion),\n  tlv2_exceso_velocidad_elevacion = VALUES(tlv2_exceso_velocidad_elevacion),\n  tlv2_defecto_fotoceldas_centraje_horquillas = VALUES(tlv2_defecto_fotoceldas_centraje_horquillas),\n  tlv2_defecto_giro_traslacion = VALUES(tlv2_defecto_giro_traslacion),\n  tlv2_defecto_giro_elevacion = VALUES(tlv2_defecto_giro_elevacion),\n  tlv2_defecto_giro_horquillas = VALUES(tlv2_defecto_giro_horquillas),\n  tlv2_tiempo_centraje_traslacion = VALUES(tlv2_tiempo_centraje_traslacion),\n  tlv2_tiempo_centraje_elevacion = VALUES(tlv2_tiempo_centraje_elevacion),\n  tlv2_tiempo_ciclo_horquillas = VALUES(tlv2_tiempo_ciclo_horquillas),\n  tlv2_tiempo_ciclo_tope_seguridad = VALUES(tlv2_tiempo_ciclo_tope_seguridad),\n  tlv2_defecto_detectores_traslacion = VALUES(tlv2_defecto_detectores_traslacion),\n  tlv2_defecto_detectores_elevacion = VALUES(tlv2_defecto_detectores_elevacion),\n  tlv2_defecto_detectores_horquillas = VALUES(tlv2_defecto_detectores_horquillas),\n  tlv2_defecto_detectores_tope_seguridad = VALUES(tlv2_defecto_detectores_tope_seguridad),\n  tlv2_defecto_impul_encoder_traslacion = VALUES(tlv2_defecto_impul_encoder_traslacion),\n  tlv2_defecto_impul_encoder_elevacion = VALUES(tlv2_defecto_impul_encoder_elevacion),\n  tlv2_defecto_impul_encoder_horquillas = VALUES(tlv2_defecto_impul_encoder_horquillas),\n  tlv2_contador_impul_trasl_desfasado = VALUES(tlv2_contador_impul_trasl_desfasado),\n  tlv2_contador_impul_elev_desfasado = VALUES(tlv2_contador_impul_elev_desfasado),\n  tlv2_defecto_comunicacion_red_nec_l1 = VALUES(tlv2_defecto_comunicacion_red_nec_l1),\n  tlv2_defecto_fotoceldas_centraje_traslacion = VALUES(tlv2_defecto_fotoceldas_centraje_traslacion),\n  tlv2_defecto_detectores_lectura_pasillo = VALUES(tlv2_defecto_detectores_lectura_pasillo),\n  tlv2_defecto_choper_frenado_elevacion = VALUES(tlv2_defecto_choper_frenado_elevacion),\n  tlv2_defecto_galibo = VALUES(tlv2_defecto_galibo),\n  tlv2_defecto_presencia_paleta = VALUES(tlv2_defecto_presencia_paleta),\n  tlv2_defecto_fotoceldas_palpadores = VALUES(tlv2_defecto_fotoceldas_palpadores),\n  tlv2_defecto_fotoc_puente_encargado = VALUES(tlv2_defecto_fotoc_puente_encargado),\n  tlv2_pasillo_fuera_servicio = VALUES(tlv2_pasillo_fuera_servicio),\n  tlv2_defecto_nr_pasillo = VALUES(tlv2_defecto_nr_pasillo),\n  tlv2_defecto_tension_24vcc = VALUES(tlv2_defecto_tension_24vcc),\n  tlv2_defecto_tension_frenos_220vca = VALUES(tlv2_defecto_tension_frenos_220vca),\n  tlv2_defecto_destino_incorrecto = VALUES(tlv2_defecto_destino_incorrecto),\n  tlv2_peticion_ayuda_mantenimiento = VALUES(tlv2_peticion_ayuda_mantenimiento),\n  tlv2_defecto_plc_bateria = VALUES(tlv2_defecto_plc_bateria),\n  tlv2_defecto_numero_esclavo = VALUES(tlv2_defecto_numero_esclavo),\n  tlv2_error_deposito = VALUES(tlv2_error_deposito),\n  tlv2_error_extraccion = VALUES(tlv2_error_extraccion),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "7a3513a5c6604348"
            ]
        ]
    },
    {
        "id": "a75466bdf1334abf",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2160,
        "wires": [
            [
                "cdf1c887079d20a9"
            ]
        ]
    },
    {
        "id": "0759b0a8376f0eac",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2220,
        "wires": [
            [
                "c6e1aed9b9be99f4"
            ]
        ]
    },
    {
        "id": "c6e1aed9b9be99f4",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "e8dff6c193b9913d",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS elv1_alarmas",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS elv1_alarmas (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  tc1_defecto_guardamotor_variador TINYINT(1),\n  tc1_defecto_tiempo_transferencia_entrada TINYINT(1),\n  tc1_defecto_tiempo_transferencia_salida TINYINT(1),\n  tc1_defecto_falta_presencia TINYINT(1),\n  tc1_defecto_presencia_inesperada TINYINT(1),\n  elv1_1_defecto_tiempo_transferencia_entrada TINYINT(1),\n  elv1_1_defecto_tiempo_maniobra TINYINT(1),\n  elv1_1_defecto_presencia_inesperada TINYINT(1),\n  elv1_1_defecto_falta_presencia TINYINT(1),\n  elv1_1_defecto_simultaneidad_detectores TINYINT(1),\n  elv1_1_defecto_guardamotor_variador_transportador TINYINT(1),\n  elv1_1_defecto_tiempo_transferencia_salida TINYINT(1),\n  elv1_1_defecto_busqueda_posicion TINYINT(1),\n  elv1_2_defecto_tiempo_maniobra TINYINT(1),\n  elv1_2_defecto_variador TINYINT(1),\n  elv1_2_defecto_falta_presencia TINYINT(1),\n  elv1_2_defecto_simultaneidad_detectores TINYINT(1),\n  elv1_2_defecto_guardamotor_elevacion TINYINT(1),\n  elv1_2_defecto_busqueda_posicion TINYINT(1),\n  elv1_2_defecto_puerta_abierta_arriba TINYINT(1),\n  elv1_3_defecto_puerta_abierta_abajo TINYINT(1),\n  elv1_3_defecto_tiempo_maniobra TINYINT(1),\n  elv1_3_defecto_presencia_inesperada TINYINT(1),\n  elv1_3_defecto_falta_presencia TINYINT(1),\n  elv1_3_defecto_simultaneidad_detectores TINYINT(1),\n  elv1_3_defecto_exceso_recorrido_arriba TINYINT(1),\n  elv1_3_defecto_exceso_recorrido_abajo TINYINT(1),\n  tc2_defecto_guardamotor_variador TINYINT(1),\n  tc2_defecto_tiempo_transferencia_entrada TINYINT(1),\n  tc2_defecto_tiempo_transferencia_salida TINYINT(1),\n  tc2_defecto_falta_presencia TINYINT(1),\n  tc2_defecto_presencia_inesperada TINYINT(1),\n  tc3_defecto_guardamotor_variador TINYINT(1),\n  tc3_defecto_tiempo_transferencia_entrada TINYINT(1),\n  tc3_defecto_tiempo_transferencia_salida TINYINT(1),\n  tc3_defecto_falta_presencia TINYINT(1),\n  tc3_defecto_presencia_inesperada TINYINT(1),\n  tc4_defecto_guardamotor_variador TINYINT(1),\n  tc4_defecto_tiempo_transferencia_entrada TINYINT(1),\n  tc4_defecto_tiempo_transferencia_salida TINYINT(1),\n  tc4_defecto_falta_presencia TINYINT(1),\n  tc4_defecto_presencia_inesperada TINYINT(1),\n  tec1_defecto_guardamotor_variador TINYINT(1),\n  tec1_defecto_tiempo_transferencia_entrada TINYINT(1),\n  tec1_defecto_tiempo_transferencia_salida TINYINT(1),\n  tec1_defecto_falta_presencia TINYINT(1),\n  tec1_defecto_presencia_inesperada TINYINT(1),\n  tec1_defecto_simultaneidad_detectores_elevacion TINYINT(1),\n  tec2_defecto_guardamotor_variador TINYINT(1),\n  tec2_defecto_tiempo_transferencia_entrada TINYINT(1),\n  tec2_defecto_tiempo_transferencia_salida TINYINT(1),\n  tec2_defecto_falta_presencia TINYINT(1),\n  tec2_defecto_presencia_inesperada TINYINT(1),\n  tec2_defecto_simultaneidad_detectores_elevacion TINYINT(1),\n  tec2_defecto_tiempo_maniobra_elevacion TINYINT(1),\n  elv1_enc1_defecto_guardamotor_variador TINYINT(1),\n  elv1_enc1_defecto_tiempo_transferencia_entrada TINYINT(1),\n  elv1_enc1_defecto_tiempo_transferencia_salida TINYINT(1),\n  elv1_enc1_defecto_falta_presencia TINYINT(1),\n  elv1_enc1_defecto_sin_posicion_referencia TINYINT(1),\n  elv1_enc1_defecto_simultaneidad_detectores TINYINT(1),\n  elv1_enc1_defecto_tiempo_maniobra TINYINT(1),\n  transfer_cadena_elevador_ocupado TINYINT(1),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2220,
        "wires": [
            [
                "0759b0a8376f0eac"
            ]
        ]
    },
    {
        "id": "9bd47803e0403de2",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2220,
        "wires": [
            [
                "e8dff6c193b9913d"
            ]
        ]
    },
    {
        "id": "d4bb448df5a139ac",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2280,
        "wires": [
            [
                "6b618e6eac43369b"
            ]
        ]
    },
    {
        "id": "6b618e6eac43369b",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2280,
        "wires": []
    },
    {
        "id": "803a5c18ba13bbdb",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE elv1_alarmas",
        "func": "msg.topic = `\nINSERT INTO elv1_alarmas (\n  id,\n  tc1_defecto_guardamotor_variador,\n  tc1_defecto_tiempo_transferencia_entrada,\n  tc1_defecto_tiempo_transferencia_salida,\n  tc1_defecto_falta_presencia,\n  tc1_defecto_presencia_inesperada,\n  elv1_1_defecto_tiempo_transferencia_entrada,\n  elv1_1_defecto_tiempo_maniobra,\n  elv1_1_defecto_presencia_inesperada,\n  elv1_1_defecto_falta_presencia,\n  elv1_1_defecto_simultaneidad_detectores,\n  elv1_1_defecto_guardamotor_variador_transportador,\n  elv1_1_defecto_tiempo_transferencia_salida,\n  elv1_1_defecto_busqueda_posicion,\n  elv1_2_defecto_tiempo_maniobra,\n  elv1_2_defecto_variador,\n  elv1_2_defecto_falta_presencia,\n  elv1_2_defecto_simultaneidad_detectores,\n  elv1_2_defecto_guardamotor_elevacion,\n  elv1_2_defecto_busqueda_posicion,\n  elv1_2_defecto_puerta_abierta_arriba,\n  elv1_3_defecto_puerta_abierta_abajo,\n  elv1_3_defecto_tiempo_maniobra,\n  elv1_3_defecto_presencia_inesperada,\n  elv1_3_defecto_falta_presencia,\n  elv1_3_defecto_simultaneidad_detectores,\n  elv1_3_defecto_exceso_recorrido_arriba,\n  elv1_3_defecto_exceso_recorrido_abajo,\n  tc2_defecto_guardamotor_variador,\n  tc2_defecto_tiempo_transferencia_entrada,\n  tc2_defecto_tiempo_transferencia_salida,\n  tc2_defecto_falta_presencia,\n  tc2_defecto_presencia_inesperada,\n  tc3_defecto_guardamotor_variador,\n  tc3_defecto_tiempo_transferencia_entrada,\n  tc3_defecto_tiempo_transferencia_salida,\n  tc3_defecto_falta_presencia,\n  tc3_defecto_presencia_inesperada,\n  tc4_defecto_guardamotor_variador,\n  tc4_defecto_tiempo_transferencia_entrada,\n  tc4_defecto_tiempo_transferencia_salida,\n  tc4_defecto_falta_presencia,\n  tc4_defecto_presencia_inesperada,\n  tec1_defecto_guardamotor_variador,\n  tec1_defecto_tiempo_transferencia_entrada,\n  tec1_defecto_tiempo_transferencia_salida,\n  tec1_defecto_falta_presencia,\n  tec1_defecto_presencia_inesperada,\n  tec1_defecto_simultaneidad_detectores_elevacion,\n  tec2_defecto_guardamotor_variador,\n  tec2_defecto_tiempo_transferencia_entrada,\n  tec2_defecto_tiempo_transferencia_salida,\n  tec2_defecto_falta_presencia,\n  tec2_defecto_presencia_inesperada,\n  tec2_defecto_simultaneidad_detectores_elevacion,\n  tec2_defecto_tiempo_maniobra_elevacion,\n  elv1_enc1_defecto_guardamotor_variador,\n  elv1_enc1_defecto_tiempo_transferencia_entrada,\n  elv1_enc1_defecto_tiempo_transferencia_salida,\n  elv1_enc1_defecto_falta_presencia,\n  elv1_enc1_defecto_sin_posicion_referencia,\n  elv1_enc1_defecto_simultaneidad_detectores,\n  elv1_enc1_defecto_tiempo_maniobra,\n  transfer_cadena_elevador_ocupado,\n  timestamp\n)\nVALUES (\n  1,\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0,0,\n  0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0,\n  NOW()\n)\n\nON DUPLICATE KEY UPDATE\n  tc1_defecto_guardamotor_variador = VALUES(tc1_defecto_guardamotor_variador),\n  tc1_defecto_tiempo_transferencia_entrada = VALUES(tc1_defecto_tiempo_transferencia_entrada),\n  tc1_defecto_tiempo_transferencia_salida = VALUES(tc1_defecto_tiempo_transferencia_salida),\n  tc1_defecto_falta_presencia = VALUES(tc1_defecto_falta_presencia),\n  tc1_defecto_presencia_inesperada = VALUES(tc1_defecto_presencia_inesperada),\n  elv1_1_defecto_tiempo_transferencia_entrada = VALUES(elv1_1_defecto_tiempo_transferencia_entrada),\n  elv1_1_defecto_tiempo_maniobra = VALUES(elv1_1_defecto_tiempo_maniobra),\n  elv1_1_defecto_presencia_inesperada = VALUES(elv1_1_defecto_presencia_inesperada),\n  elv1_1_defecto_falta_presencia = VALUES(elv1_1_defecto_falta_presencia),\n  elv1_1_defecto_simultaneidad_detectores = VALUES(elv1_1_defecto_simultaneidad_detectores),\n  elv1_1_defecto_guardamotor_variador_transportador = VALUES(elv1_1_defecto_guardamotor_variador_transportador),\n  elv1_1_defecto_tiempo_transferencia_salida = VALUES(elv1_1_defecto_tiempo_transferencia_salida),\n  elv1_1_defecto_busqueda_posicion = VALUES(elv1_1_defecto_busqueda_posicion),\n  elv1_2_defecto_tiempo_maniobra = VALUES(elv1_2_defecto_tiempo_maniobra),\n  elv1_2_defecto_variador = VALUES(elv1_2_defecto_variador),\n  elv1_2_defecto_falta_presencia = VALUES(elv1_2_defecto_falta_presencia),\n  elv1_2_defecto_simultaneidad_detectores = VALUES(elv1_2_defecto_simultaneidad_detectores),\n  elv1_2_defecto_guardamotor_elevacion = VALUES(elv1_2_defecto_guardamotor_elevacion),\n  elv1_2_defecto_busqueda_posicion = VALUES(elv1_2_defecto_busqueda_posicion),\n  elv1_2_defecto_puerta_abierta_arriba = VALUES(elv1_2_defecto_puerta_abierta_arriba),\n  elv1_3_defecto_puerta_abierta_abajo = VALUES(elv1_3_defecto_puerta_abierta_abajo),\n  elv1_3_defecto_tiempo_maniobra = VALUES(elv1_3_defecto_tiempo_maniobra),\n  elv1_3_defecto_presencia_inesperada = VALUES(elv1_3_defecto_presencia_inesperada),\n  elv1_3_defecto_falta_presencia = VALUES(elv1_3_defecto_falta_presencia),\n  elv1_3_defecto_simultaneidad_detectores = VALUES(elv1_3_defecto_simultaneidad_detectores),\n  elv1_3_defecto_exceso_recorrido_arriba = VALUES(elv1_3_defecto_exceso_recorrido_arriba),\n  elv1_3_defecto_exceso_recorrido_abajo = VALUES(elv1_3_defecto_exceso_recorrido_abajo),\n  tc2_defecto_guardamotor_variador = VALUES(tc2_defecto_guardamotor_variador),\n  tc2_defecto_tiempo_transferencia_entrada = VALUES(tc2_defecto_tiempo_transferencia_entrada),\n  tc2_defecto_tiempo_transferencia_salida = VALUES(tc2_defecto_tiempo_transferencia_salida),\n  tc2_defecto_falta_presencia = VALUES(tc2_defecto_falta_presencia),\n  tc2_defecto_presencia_inesperada = VALUES(tc2_defecto_presencia_inesperada),\n  tc3_defecto_guardamotor_variador = VALUES(tc3_defecto_guardamotor_variador),\n  tc3_defecto_tiempo_transferencia_entrada = VALUES(tc3_defecto_tiempo_transferencia_entrada),\n  tc3_defecto_tiempo_transferencia_salida = VALUES(tc3_defecto_tiempo_transferencia_salida),\n  tc3_defecto_falta_presencia = VALUES(tc3_defecto_falta_presencia),\n  tc3_defecto_presencia_inesperada = VALUES(tc3_defecto_presencia_inesperada),\n  tc4_defecto_guardamotor_variador = VALUES(tc4_defecto_guardamotor_variador),\n  tc4_defecto_tiempo_transferencia_entrada = VALUES(tc4_defecto_tiempo_transferencia_entrada),\n  tc4_defecto_tiempo_transferencia_salida = VALUES(tc4_defecto_tiempo_transferencia_salida),\n  tc4_defecto_falta_presencia = VALUES(tc4_defecto_falta_presencia),\n  tc4_defecto_presencia_inesperada = VALUES(tc4_defecto_presencia_inesperada),\n  tec1_defecto_guardamotor_variador = VALUES(tec1_defecto_guardamotor_variador),\n  tec1_defecto_tiempo_transferencia_entrada = VALUES(tec1_defecto_tiempo_transferencia_entrada),\n  tec1_defecto_tiempo_transferencia_salida = VALUES(tec1_defecto_tiempo_transferencia_salida),\n  tec1_defecto_falta_presencia = VALUES(tec1_defecto_falta_presencia),\n  tec1_defecto_presencia_inesperada = VALUES(tec1_defecto_presencia_inesperada),\n  tec1_defecto_simultaneidad_detectores_elevacion = VALUES(tec1_defecto_simultaneidad_detectores_elevacion),\n  tec2_defecto_guardamotor_variador = VALUES(tec2_defecto_guardamotor_variador),\n  tec2_defecto_tiempo_transferencia_entrada = VALUES(tec2_defecto_tiempo_transferencia_entrada),\n  tec2_defecto_tiempo_transferencia_salida = VALUES(tec2_defecto_tiempo_transferencia_salida),\n  tec2_defecto_falta_presencia = VALUES(tec2_defecto_falta_presencia),\n  tec2_defecto_presencia_inesperada = VALUES(tec2_defecto_presencia_inesperada),\n  tec2_defecto_simultaneidad_detectores_elevacion = VALUES(tec2_defecto_simultaneidad_detectores_elevacion),\n  tec2_defecto_tiempo_maniobra_elevacion = VALUES(tec2_defecto_tiempo_maniobra_elevacion),\n  elv1_enc1_defecto_guardamotor_variador = VALUES(elv1_enc1_defecto_guardamotor_variador),\n  elv1_enc1_defecto_tiempo_transferencia_entrada = VALUES(elv1_enc1_defecto_tiempo_transferencia_entrada),\n  elv1_enc1_defecto_tiempo_transferencia_salida = VALUES(elv1_enc1_defecto_tiempo_transferencia_salida),\n  elv1_enc1_defecto_falta_presencia = VALUES(elv1_enc1_defecto_falta_presencia),\n  elv1_enc1_defecto_sin_posicion_referencia = VALUES(elv1_enc1_defecto_sin_posicion_referencia),\n  elv1_enc1_defecto_simultaneidad_detectores = VALUES(elv1_enc1_defecto_simultaneidad_detectores),\n  elv1_enc1_defecto_tiempo_maniobra = VALUES(elv1_enc1_defecto_tiempo_maniobra),\n  transfer_cadena_elevador_ocupado = VALUES(transfer_cadena_elevador_ocupado),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2280,
        "wires": [
            [
                "d4bb448df5a139ac"
            ]
        ]
    },
    {
        "id": "4f62857d7da38b6b",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2280,
        "wires": [
            [
                "803a5c18ba13bbdb"
            ]
        ]
    },
    {
        "id": "ee8f6adc361c6e3c",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2340,
        "wires": [
            [
                "4070bc3ed2126a09"
            ]
        ]
    },
    {
        "id": "4070bc3ed2126a09",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2340,
        "wires": []
    },
    {
        "id": "aad4b93ac1c77e95",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS pt_alarmas",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS pt_alarmas (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  defecto_variador_traslacion_puente TINYINT(1),\n  exceso_velocidad_puente TINYINT(1),\n  defecto_fotocelula_galibo_puente TINYINT(1),\n  tiempo_ciclo_traslacion_puente TINYINT(1),\n  tiempo_ciclo_enclavamiento_puente TINYINT(1),\n  defecto_detectores_traslacion_puente TINYINT(1),\n  defecto_detectores_enclavamiento_puente TINYINT(1),\n  reserva_1 TINYINT(1),\n  emergencia_puente_transbordo TINYINT(1),\n  exceso_recorrido_adelante_puente TINYINT(1),\n  exceso_recorrido_atras_puente TINYINT(1),\n  proteccion_variador_traslacion_puente TINYINT(1),\n  proteccion_motor_traslacion_puente TINYINT(1),\n  proteccion_motor_enclavamiento_puente TINYINT(1),\n  proteccion_frenos TINYINT(1),\n  reserva_2 TINYINT(1),\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2340,
        "wires": [
            [
                "ee8f6adc361c6e3c"
            ]
        ]
    },
    {
        "id": "b4e3f8c3dfeefe49",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2340,
        "wires": [
            [
                "aad4b93ac1c77e95"
            ]
        ]
    },
    {
        "id": "8a93297fd0140922",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2400,
        "wires": [
            [
                "5eb7125d3ab45fae"
            ]
        ]
    },
    {
        "id": "5eb7125d3ab45fae",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2400,
        "wires": []
    },
    {
        "id": "58efc2ca69b8b938",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE elv1_alarmas",
        "func": "msg.topic = `\nINSERT INTO pt_alarmas (\n  id,\n  defecto_variador_traslacion_puente,\n  exceso_velocidad_puente,\n  defecto_fotocelula_galibo_puente,\n  tiempo_ciclo_traslacion_puente,\n  tiempo_ciclo_enclavamiento_puente,\n  defecto_detectores_traslacion_puente,\n  defecto_detectores_enclavamiento_puente,\n  reserva_1,\n  emergencia_puente_transbordo,\n  exceso_recorrido_adelante_puente,\n  exceso_recorrido_atras_puente,\n  proteccion_variador_traslacion_puente,\n  proteccion_motor_traslacion_puente,\n  proteccion_motor_enclavamiento_puente,\n  proteccion_frenos,\n  reserva_2,\n  timestamp\n) VALUES (\n  1,\n  0, -- defecto_variador_traslacion_puente\n  0, -- exceso_velocidad_puente\n  0, -- defecto_fotocelula_galibo_puente\n  0, -- tiempo_ciclo_traslacion_puente\n  0, -- tiempo_ciclo_enclavamiento_puente\n  0, -- defecto_detectores_traslacion_puente\n  0, -- defecto_detectores_enclavamiento_puente\n  0, -- reserva_1\n  0, -- emergencia_puente_transbordo\n  0, -- exceso_recorrido_adelante_puente\n  0, -- exceso_recorrido_atras_puente\n  0, -- proteccion_variador_traslacion_puente\n  0, -- proteccion_motor_traslacion_puente\n  0, -- proteccion_motor_enclavamiento_puente\n  0, -- proteccion_frenos\n  0, -- reserva_2\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  defecto_variador_traslacion_puente = VALUES(defecto_variador_traslacion_puente),\n  exceso_velocidad_puente = VALUES(exceso_velocidad_puente),\n  defecto_fotocelula_galibo_puente = VALUES(defecto_fotocelula_galibo_puente),\n  tiempo_ciclo_traslacion_puente = VALUES(tiempo_ciclo_traslacion_puente),\n  tiempo_ciclo_enclavamiento_puente = VALUES(tiempo_ciclo_enclavamiento_puente),\n  defecto_detectores_traslacion_puente = VALUES(defecto_detectores_traslacion_puente),\n  defecto_detectores_enclavamiento_puente = VALUES(defecto_detectores_enclavamiento_puente),\n  reserva_1 = VALUES(reserva_1),\n  emergencia_puente_transbordo = VALUES(emergencia_puente_transbordo),\n  exceso_recorrido_adelante_puente = VALUES(exceso_recorrido_adelante_puente),\n  exceso_recorrido_atras_puente = VALUES(exceso_recorrido_atras_puente),\n  proteccion_variador_traslacion_puente = VALUES(proteccion_variador_traslacion_puente),\n  proteccion_motor_traslacion_puente = VALUES(proteccion_motor_traslacion_puente),\n  proteccion_motor_enclavamiento_puente = VALUES(proteccion_motor_enclavamiento_puente),\n  proteccion_frenos = VALUES(proteccion_frenos),\n  reserva_2 = VALUES(reserva_2),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2400,
        "wires": [
            [
                "8a93297fd0140922"
            ]
        ]
    },
    {
        "id": "921fece8a64af690",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2400,
        "wires": [
            [
                "58efc2ca69b8b938"
            ]
        ]
    },
    {
        "id": "1e4996bf561073be",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2460,
        "wires": [
            [
                "e93e2ea726c5bc1f"
            ]
        ]
    },
    {
        "id": "e93e2ea726c5bc1f",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2460,
        "wires": []
    },
    {
        "id": "18b2757523edbf90",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "CREATE TABLE IF NOT EXISTS tareas_mesas",
        "func": "msg.topic = `\nDROP TABLE IF EXISTS tareas_mesas;\n\nCREATE TABLE IF NOT EXISTS tareas_mesas (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  ${[...Array(12).keys()].map(i => {\n    const n = i + 1;\n    return `\n  tarea_pep${n}_ec INT(11),\n  tarea_pep${n}_rt INT(11),\n  tarea_psp${n}_et INT(11),\n  tarea_psp${n}_rc INT(11)`;\n  }).join(\",\")}\n  ,\n  timestamp DATETIME,\n  PRIMARY KEY (id)\n);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2460,
        "wires": [
            [
                "1e4996bf561073be"
            ]
        ]
    },
    {
        "id": "c08ad8aeea6321b9",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2460,
        "wires": [
            [
                "18b2757523edbf90"
            ]
        ]
    },
    {
        "id": "3f99c769e2dd93e7",
        "type": "mysql",
        "z": "345b91c6976c416d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 850,
        "y": 2520,
        "wires": [
            [
                "f14b490e6a4af351"
            ]
        ]
    },
    {
        "id": "f14b490e6a4af351",
        "type": "debug",
        "z": "345b91c6976c416d",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2520,
        "wires": []
    },
    {
        "id": "697c9905eecd9250",
        "type": "function",
        "z": "345b91c6976c416d",
        "name": "UPDATE elv1_alarmas",
        "func": "msg.topic = `\nINSERT INTO pt_alarmas (\n  id,\n  defecto_variador_traslacion_puente,\n  exceso_velocidad_puente,\n  defecto_fotocelula_galibo_puente,\n  tiempo_ciclo_traslacion_puente,\n  tiempo_ciclo_enclavamiento_puente,\n  defecto_detectores_traslacion_puente,\n  defecto_detectores_enclavamiento_puente,\n  reserva_1,\n  emergencia_puente_transbordo,\n  exceso_recorrido_adelante_puente,\n  exceso_recorrido_atras_puente,\n  proteccion_variador_traslacion_puente,\n  proteccion_motor_traslacion_puente,\n  proteccion_motor_enclavamiento_puente,\n  proteccion_frenos,\n  reserva_2,\n  timestamp\n) VALUES (\n  1,\n  0, -- defecto_variador_traslacion_puente\n  0, -- exceso_velocidad_puente\n  0, -- defecto_fotocelula_galibo_puente\n  0, -- tiempo_ciclo_traslacion_puente\n  0, -- tiempo_ciclo_enclavamiento_puente\n  0, -- defecto_detectores_traslacion_puente\n  0, -- defecto_detectores_enclavamiento_puente\n  0, -- reserva_1\n  0, -- emergencia_puente_transbordo\n  0, -- exceso_recorrido_adelante_puente\n  0, -- exceso_recorrido_atras_puente\n  0, -- proteccion_variador_traslacion_puente\n  0, -- proteccion_motor_traslacion_puente\n  0, -- proteccion_motor_enclavamiento_puente\n  0, -- proteccion_frenos\n  0, -- reserva_2\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  defecto_variador_traslacion_puente = VALUES(defecto_variador_traslacion_puente),\n  exceso_velocidad_puente = VALUES(exceso_velocidad_puente),\n  defecto_fotocelula_galibo_puente = VALUES(defecto_fotocelula_galibo_puente),\n  tiempo_ciclo_traslacion_puente = VALUES(tiempo_ciclo_traslacion_puente),\n  tiempo_ciclo_enclavamiento_puente = VALUES(tiempo_ciclo_enclavamiento_puente),\n  defecto_detectores_traslacion_puente = VALUES(defecto_detectores_traslacion_puente),\n  defecto_detectores_enclavamiento_puente = VALUES(defecto_detectores_enclavamiento_puente),\n  reserva_1 = VALUES(reserva_1),\n  emergencia_puente_transbordo = VALUES(emergencia_puente_transbordo),\n  exceso_recorrido_adelante_puente = VALUES(exceso_recorrido_adelante_puente),\n  exceso_recorrido_atras_puente = VALUES(exceso_recorrido_atras_puente),\n  proteccion_variador_traslacion_puente = VALUES(proteccion_variador_traslacion_puente),\n  proteccion_motor_traslacion_puente = VALUES(proteccion_motor_traslacion_puente),\n  proteccion_motor_enclavamiento_puente = VALUES(proteccion_motor_enclavamiento_puente),\n  proteccion_frenos = VALUES(proteccion_frenos),\n  reserva_2 = VALUES(reserva_2),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2520,
        "wires": [
            [
                "3f99c769e2dd93e7"
            ]
        ]
    },
    {
        "id": "c53b2dff3e53d859",
        "type": "inject",
        "z": "345b91c6976c416d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2520,
        "wires": [
            [
                "697c9905eecd9250"
            ]
        ]
    },
    {
        "id": "28d05485e68b8ffe",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "2f783281dc55418a",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "TLV1",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "99f7ddaa884e758f"
            ]
        ]
    },
    {
        "id": "aae5e9963a1438d1",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "126460432b68ba3d",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "TLV2",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "5f572321c4399992"
            ]
        ]
    },
    {
        "id": "08bd67052b7cf4ce",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "13e7e4e191212b6f",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "PIE",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "9346fe30f395c0ce"
            ]
        ]
    },
    {
        "id": "ac7d0550707afec2",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "fb206c814b3d2fe5",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "PES-PEE-StGen",
        "x": 80,
        "y": 240,
        "wires": [
            [
                "d9e7adbfca127572"
            ]
        ]
    },
    {
        "id": "99f7ddaa884e758f",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Supongamos que las variables se encuentran en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC para TLV1\nvar nuevoRegistroTLV1 = {\n  \"Ubicacion\": \"TLV_1\",  // Puedes cambiar esta ubicación según sea necesario\n  \"AUTOMATICO\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO\"], \n  \"OCUPACION\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.OCUPACION\"],\n  \"AVERIA\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.AVERIA\"],\n  \"COORD_X_ACTUAL\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.COORD_X_ACTUAL\"],\n  \"COORD_Y_ACTUAL\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.COORD_Y_ACTUAL\"],\n  \"COORD_Z_ACTUAL\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.COORD_Z_ACTUAL\"],\n  \"MATRICULA_ACTUAL\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.MATRICULA_ACTUAL\"],\n  \"PASILLO_ACTUAL\": variablesPLC[\"INTERFACE_TLV1.STATUS_TLV1.PASILLO_ACTUAL\"],\n  \n  // Información sobre las órdenes\n  \"ORDEN_TIPO\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.TIPO\"],\n  \"PASILLO_ORIGEN\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.PASILLO_ORIGEN\"],\n  \"COORD_X_ORIGEN\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.COORD_X_ORIGEN\"],\n  \"COORD_Y_ORIGEN\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.COORD_Y_ORIGEN\"],\n  \"COORD_Z_ORIGEN\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.COORD_Z_ORIGEN\"],\n  \"PASILLO_DESTINO\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.PASILLO_DESTINO\"],\n  \"COORD_X_DESTINO\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.COORD_X_DESTINO\"],\n  \"COORD_Y_DESTINO\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.COORD_Y_DESTINO\"],\n  \"COORD_Z_DESTINO\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.COORD_Z_DESTINO\"],\n  \"MATRICULA\": variablesPLC[\"INTERFACE_TLV1.ORDEN_TLV1.MATRICULA\"],\n  \n  // Información sobre el fin de la orden\n  \"FIN_ORDEN_ESTADO\": variablesPLC[\"INTERFACE_TLV1.FIN_ORDEN_TLV1.ESTADO\"],\n  \"FIN_ORDEN_RESULTADO\": variablesPLC[\"INTERFACE_TLV1.FIN_ORDEN_TLV1.RESULTADO\"],\n\n  \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroTLV1\" al payload\nmsg.payload = nuevoRegistroTLV1;\n\n// Almacena el objeto \"nuevoRegistroTLV1\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"nuevoRegistroTLV1\", nuevoRegistroTLV1);\n\n// Ahora, puedes acceder a \"nuevoRegistroTLV1\" en otros nodos utilizando flow.get(\"nuevoRegistroTLV1\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "62377e41895198c4"
            ]
        ]
    },
    {
        "id": "62377e41895198c4",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 60,
        "wires": []
    },
    {
        "id": "5f572321c4399992",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Supongamos que las variables se encuentran en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC para TLV2\nvar nuevoRegistroTLV2 = {\n  \"Ubicacion\": \"TLV_2\",  // Puedes cambiar esta ubicación según sea necesario\n  \"AUTOMATICO\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.AUTOMATICO\"], \n  \"OCUPACION\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.OCUPACION\"],\n  \"AVERIA\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.AVERIA\"],\n  \"COORD_X_ACTUAL\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.COORD_X_ACTUAL\"],\n  \"COORD_Y_ACTUAL\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.COORD_Y_ACTUAL\"],\n  \"COORD_Z_ACTUAL\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.COORD_Z_ACTUAL\"],\n  \"MATRICULA_ACTUAL\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.MATRICULA_ACTUAL\"],\n  \"PASILLO_ACTUAL\": variablesPLC[\"INTERFACE_TLV2.STATUS_TLV2.PASILLO_ACTUAL\"],\n  \n  // Información sobre las órdenes\n  \"ORDEN_TIPO\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.TIPO\"],\n  \"PASILLO_ORIGEN\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.PASILLO_ORIGEN\"],\n  \"COORD_X_ORIGEN\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.COORD_X_ORIGEN\"],\n  \"COORD_Y_ORIGEN\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.COORD_Y_ORIGEN\"],\n  \"COORD_Z_ORIGEN\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.COORD_Z_ORIGEN\"],\n  \"PASILLO_DESTINO\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.PASILLO_DESTINO\"],\n  \"COORD_X_DESTINO\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.COORD_X_DESTINO\"],\n  \"COORD_Y_DESTINO\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.COORD_Y_DESTINO\"],\n  \"COORD_Z_DESTINO\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.COORD_Z_DESTINO\"],\n  \"MATRICULA\": variablesPLC[\"INTERFACE_TLV2.ORDEN_TLV2.MATRICULA\"],\n  \n  // Información sobre el fin de la orden\n  \"FIN_ORDEN_ESTADO\": variablesPLC[\"INTERFACE_TLV2.FIN_ORDEN_TLV2.ESTADO\"],\n  \"FIN_ORDEN_RESULTADO\": variablesPLC[\"INTERFACE_TLV2.FIN_ORDEN_TLV2.RESULTADO\"],\n\n  \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroTLV2\" al payload\nmsg.payload = nuevoRegistroTLV2;\n\n// Almacena el objeto \"nuevoRegistroTLV2\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"nuevoRegistroTLV2\", nuevoRegistroTLV2);\n\n// Ahora, puedes acceder a \"nuevoRegistroTLV2\" en otros nodos utilizando flow.get(\"nuevoRegistroTLV2\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            [
                "2016efdd775081d8"
            ]
        ]
    },
    {
        "id": "2016efdd775081d8",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "9346fe30f395c0ce",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Supongamos que las variables se encuentran en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC para PIE\nvar nuevoRegistroPIE = {\n  \"Ubicacion\": \"PIE\",  // Puedes cambiar esta ubicación según sea necesario\n  \"TRANS_DATOS_D_10\": variablesPLC[\"TRANS.DATOS.D_10\"],\n  \"TRANS_DATOS_D_16\": variablesPLC[\"TRANS.DATOS.D_16\"],\n  \"DB10_BYTE33\": variablesPLC[\"DB10,BYTE33\"],\n  \"AUTORIZ_SCAN_16\": variablesPLC[\"AUTORIZ.SCAN.16\"],\n  \"F_SEMAFOROS_DATOS_PREPARADOS_PALETA_EN_PIE\": variablesPLC[\"F.SEMAFOROS.DATOS_PREPARADOS.PALETA_EN_PIE\"],\n  \"F_EM_SGA_LLEGADA_PIE_DATOS_PREPARADOS\": variablesPLC[\"F.EM.SGA.LLEGADA_PIE.DATOS_PREPARADOS\"],\n  \"F_EM_SGA_LLEGADA_PIE_TIPO_PALETA\": variablesPLC[\"F.EM.SGA.LLEGADA_PIE.TIPO_PALETA\"],\n  \"INTERFACE_DATOS_LLEGADA_PIE_DATOS_PREPARADOS\": variablesPLC[\"INTERFACE_DATOS.LLEGADA_PIE.DATOS_PREPARADOS\"],\n  \"LLEGADA_PIE_ENVIADA\": variablesPLC[\"LLEGADA_PIE_ENVIADA\"],\n  \"SCANNER_PIE_DATOS_LECTURA_OK_SGA\": variablesPLC[\"SCANNER_PIE.DATOS.LECTURA_OK_SGA\"],\n  \"INTERFACE_DATOS_LLEGADA_PIE_TIPO_PALETA\": variablesPLC[\"INTERFACE_DATOS.LLEGADA_PIE.TIPO_PALETA\"],\n  \"ESTADO\": variablesPLC[\"ESTADO_PIE1\"],\n  \"OCUPACION\": variablesPLC[\"OCUPACION_PIE1\"],\n\n  //ScannerPIE\n\n  \"COD13_C1\": variablesPLC[\"COD13_C1\"],\n  \"COD13_C2\": variablesPLC[\"COD13_C2\"],\n  \"COD13_C3\": variablesPLC[\"COD13_C3\"],\n  \"COD13_C4\": variablesPLC[\"COD13_C4\"],\n  \"COD13_C5\": variablesPLC[\"COD13_C5\"],\n  \"COD13_C6\": variablesPLC[\"COD13_C6\"],\n  \"COD13_C7\": variablesPLC[\"COD13_C7\"],\n  \"COD13_C8\": variablesPLC[\"COD13_C8\"],\n  \"COD13_C9\": variablesPLC[\"COD13_C9\"],\n  \"COD13_C10\": variablesPLC[\"COD13_C10\"],\n  \"COD13_C11\": variablesPLC[\"COD13_C11\"],\n  \"COD13_C12\": variablesPLC[\"COD13_C12\"],\n  \"COD13_C13\": variablesPLC[\"COD13_C13\"],\n  \"COD13_CR\": variablesPLC[\"COD13_CR\"],\n  \"COD6_C1\": variablesPLC[\"COD6_C1\"],\n  \"COD6_C2\": variablesPLC[\"COD6_C2\"],\n  \"COD6_C3\": variablesPLC[\"COD6_C3\"],\n  \"COD6_C4\": variablesPLC[\"COD6_C4\"],\n  \"COD6_C5\": variablesPLC[\"COD6_C5\"],\n  \"COD6_C6\": variablesPLC[\"COD6_C6\"],\n  \"COD3_C1\": variablesPLC[\"COD3_C1\"],\n  \"COD3_C2\": variablesPLC[\"COD3_C2\"],\n  \"COD3_C3\": variablesPLC[\"COD3_C3\"],\n  \"COD3_C4\": variablesPLC[\"COD3_C4\"],\n  \"COD2_C1\": variablesPLC[\"COD2_C1\"],\n  \"COD2_C2\": variablesPLC[\"COD2_C2\"],\n  \"COD_ULTIMO_DIG\": variablesPLC[\"COD_ULTIMO_DIG\"],\n  \"ALTURA\": variablesPLC[\"ALTURA\"],\n\n  //\n  \"MAT_PES\": variablesPLC[\"MAT_PES\"],\n  \"MAT_TR25\": variablesPLC[\"MAT_TR25\"],\n\n  \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroPIE\" al payload\nmsg.payload = nuevoRegistroPIE;\n\n// Almacena el objeto \"nuevoRegistroPIE\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"nuevoRegistroPIE\", nuevoRegistroPIE);\n\n// Ahora, puedes acceder a \"nuevoRegistroPIE\" en otros nodos utilizando flow.get(\"nuevoRegistroPIE\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 180,
        "wires": [
            [
                "4513d58c0ba8486d"
            ]
        ]
    },
    {
        "id": "4513d58c0ba8486d",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 180,
        "wires": []
    },
    {
        "id": "d9e7adbfca127572",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Supongamos que las variables se encuentran en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC para PES\nvar nuevoRegistroPES = {\n  \"Ubicacion\": \"PES\",  // Puedes cambiar esta ubicación según sea necesario\n  \"TL2\": variablesPLC[\"TL.2\"], \n  \"PRES_PALET_SCAN_MR24\": variablesPLC[\"PRES.PALET.SCAN.MR24\"],\n  \"AUTORIZ_SCAN_24\": variablesPLC[\"AUTORIZ.SCAN.24\"],\n  \"F_SEMAFOROS_DATOS_PREPARADOS_PALETA_EN_PES\": variablesPLC[\"F.SEMAFOROS.DATOS_PREPARADOS.PALETA_EN_PES\"],\n  \"F_EM_SGA_LLEGADA_PES_DATOS_PREPARADOS\": variablesPLC[\"F.EM.SGA.LLEGADA_PES.DATOS_PREPARADOS\"],\n  \"LLEGADA_PES_ENVIADA\": variablesPLC[\"LLEGADA_PES_ENVIADA\"],\n  \"INTERFACE_DATOS_LLEGADA_PES_DATOS_PREPARADOS\": variablesPLC[\"INTERFACE_DATOS.LLEGADA_PES.DATOS_PREPARADOS\"],\n  \n  // Variables adicionales\n  \"INTERFACE_DATOS_STATUS_CARRO_ESTADO\": variablesPLC[\"INTERFACE_DATOS.STATUS_CARRO.ESTADO\"],\n  \"INTERFACE_DATOS_PERMISO_SALIDA_PES_DATOS_PREPARADOS\": variablesPLC[\"INTERFACE_DATOS.PERMISO_SALIDA_PES.DATOS_PREPARADOS\"],\n  \"INTERFACE_DATOS_PERMISO_SALIDA_PES_MATRICULA_PALET\": variablesPLC[\"INTERFACE_DATOS.PERMISO_SALIDA_PES.MATRICULA_PALET\"],\n  \"INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO\": variablesPLC[\"INTERFACE_DATOS_PERMISO_SALIDA_PES_DESTINO\"],\n  \n    // Variables adicionales\n  \"SGA_OK\": variablesPLC[\"SGA_OK\"],\n  \"DO_SGA\": variablesPLC[\"DO_SGA\"],\n  \"SGA_PROCESS\": variablesPLC[\"SGA_PROCESS\"],\n  \"WaitForSndMR16\": variablesPLC[\"WaitForSndMR16\"],\n  \"FinFeadback\": variablesPLC[\"FinFeadback\"],\n  \"DATO_A_SGA_MRE23_TR27\": variablesPLC[\"DATO_A_SGA_MRE23_TR27\"],\n\n  // Variables adicionales\n  \"LLEGADA_PEE_Flag_datos_prep_PLC\": variablesPLC[\"LLEGADA_PEE_Flag_datos_prep_PLC\"],\n  \"LLEGADA_PEE_Flag_datos_prep_SGA\": variablesPLC[\"LLEGADA_PEE_Flag_datos_prep_SGA\"],\n  \"LLEGADA_PEE_Matricula_palet\": variablesPLC[\"LLEGADA_PEE_Matricula_palet\"],\n\n  \"TRACKING_ELEVADOR_TC1_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_TC1_MATRICULA\"],\n  \"TRACKING_ELEVADOR_TC1_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_TC1_DESTINO\"],\n\n  \"TRACKING_ELEVADOR_EL1_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_EL1_MATRICULA\"],\n  \"TRACKING_ELEVADOR_EL1_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_EL1_DESTINO\"],\n\n  \"TRACKING_ELEVADOR_TC2_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_TC2_MATRICULA\"],\n  \"TRACKING_ELEVADOR_TC2_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_TC2_DESTINO\"],\n\n  \"TRACKING_ELEVADOR_TC3_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_TC3_MATRICULA\"],\n  \"TRACKING_ELEVADOR_TC3_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_TC3_DESTINO\"],\n\n  \"TRACKING_ELEVADOR_TC4_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_TC4_MATRICULA\"],\n  \"TRACKING_ELEVADOR_TC4_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_TC4_DESTINO\"],  \n\n  \"TRACKING_ELEVADOR_TEC1_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_TEC1_MATRICULA\"],\n  \"TRACKING_ELEVADOR_TEC1_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_TEC1_DESTINO\"], \n\n  \"TRACKING_ELEVADOR_TEC2_MATRICULA\": variablesPLC[\"TRACKING_ELEVADOR_TEC2_MATRICULA\"],\n  \"TRACKING_ELEVADOR_TEC2_DESTINO\": variablesPLC[\"TRACKING_ELEVADOR_TEC2_DESTINO\"],\n//status instalacion\n  \"INTERFACE_DATOS_STATUS_INSTALACION_MARCHA\": variablesPLC[\"INTERFACE_DATOS_STATUS_INSTALACION_MARCHA\"],\n  \"INDICATIVO_VIDA_SGA\": variablesPLC[\"INDICATIVO_VIDA_SGA\"],\n  \"INDICATIVO_VIDA_PLC\": variablesPLC[\"INDICATIVO_VIDA_PLC\"],\n//status puente\n  \"INTERFACE_DATOS_STATUS_PUENTE_OCUPACION\": variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_OCUPACION\"],\n  \"INTERFACE_DATOS_STATUS_PUENTE_ESTADO\": variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_ESTADO\"],\n  \"INTERFACE_DATOS_STATUS_PUENTE_SITUACION\": variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_SITUACION\"],\n  \"INTERFACE_DATOS_STATUS_PUENTE_POSICION\": variablesPLC[\"INTERFACE_DATOS_STATUS_PUENTE_POSICION\"], \n\n  \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroPES\" al payload\nmsg.payload = nuevoRegistroPES;\n\n// Almacena el objeto \"nuevoRegistroPES\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"nuevoRegistroPES\", nuevoRegistroPES);\n\n// Ahora, puedes acceder a \"nuevoRegistroPES\" en otros nodos utilizando flow.get(\"nuevoRegistroPES\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "30b816b9ca757e7c"
            ]
        ]
    },
    {
        "id": "30b816b9ca757e7c",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 240,
        "wires": []
    },
    {
        "id": "06153aa04d30d829",
        "type": "s7 control",
        "z": "5f07b2ace243eb3a",
        "endpoint": "2f783281dc55418a",
        "function": "trigger",
        "name": "",
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "7529976f462d944b"
            ]
        ]
    },
    {
        "id": "7529976f462d944b",
        "type": "s7 control",
        "z": "5f07b2ace243eb3a",
        "endpoint": "d41610ee1fc6122f",
        "function": "trigger",
        "name": "",
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "f858a6d447e47edd"
            ]
        ]
    },
    {
        "id": "f858a6d447e47edd",
        "type": "s7 control",
        "z": "5f07b2ace243eb3a",
        "endpoint": "13e7e4e191212b6f",
        "function": "trigger",
        "name": "",
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "0ca4bf827a53c579"
            ]
        ]
    },
    {
        "id": "0ca4bf827a53c579",
        "type": "s7 control",
        "z": "5f07b2ace243eb3a",
        "endpoint": "fb206c814b3d2fe5",
        "function": "trigger",
        "name": "",
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "6a22b59d87fe1ce6"
            ]
        ]
    },
    {
        "id": "3c590a4d0ca7178b",
        "type": "inject",
        "z": "5f07b2ace243eb3a",
        "name": "5Seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 850,
        "y": 80,
        "wires": [
            [
                "06153aa04d30d829"
            ]
        ]
    },
    {
        "id": "d2618a745c319594",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "cfe81a06cf24641b",
        "mode": "all",
        "variable": "AUTO_MANUL_PASILLOS",
        "diff": false,
        "name": "GEN",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "b8152491466111f4"
            ]
        ]
    },
    {
        "id": "b8152491466111f4",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Leer las variables del PLC almacenadas en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC\nvar nuevoRegistroSCADA = {\n  \"Ubicacion\": \"SCADA\",  // Puedes cambiar esta ubicación según sea necesario\n  \"S_AUT_7MAN_BM692\": variablesPLC[\"S.AUT.7MAN BM692\"],\n\n  \"AUT_CARRO_BM693\": variablesPLC[\"AUT_CARRO_BM693\"],\n  \"MAN_CARRO_BM693\": variablesPLC[\"MAN_CARRO_BM693\"],\n  \n  // Mesas de Entrada\n  \"STATUS_MESAS_ENTRADA_UNO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.UNO\"],\n  \"STATUS_MESAS_ENTRADA_DOS\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.DOS\"],\n  \"STATUS_MESAS_ENTRADA_TRES\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.TRES\"],\n  \"STATUS_MESAS_ENTRADA_CUATRO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.CUATRO\"],\n  \"STATUS_MESAS_ENTRADA_CINCO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.CINCO\"],\n  \"STATUS_MESAS_ENTRADA_SEIS\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.SEIS\"],\n  \"STATUS_MESAS_ENTRADA_SIETE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.SIETE\"],\n  \"STATUS_MESAS_ENTRADA_OCHO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.OCHO\"],\n  \"STATUS_MESAS_ENTRADA_NUEVE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.NUEVE\"],\n  \"STATUS_MESAS_ENTRADA_DIEZ\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.DIEZ\"],\n  \"STATUS_MESAS_ENTRADA_ONCE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.ONCE\"],\n  \"STATUS_MESAS_ENTRADA_DOCE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_ENTRADA.DOCE\"],\n  \n  // Mesas de Salida\n  \"STATUS_MESAS_SALIDA_UNO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.UNO\"],\n  \"STATUS_MESAS_SALIDA_DOS\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.DOS\"],\n  \"STATUS_MESAS_SALIDA_TRES\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.TRES\"],\n  \"STATUS_MESAS_SALIDA_CUATRO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.CUATRO\"],\n  \"STATUS_MESAS_SALIDA_CINCO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.CINCO\"],\n  \"STATUS_MESAS_SALIDA_SEIS\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.SEIS\"],\n  \"STATUS_MESAS_SALIDA_SIETE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.SIETE\"],\n  \"STATUS_MESAS_SALIDA_OCHO\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.OCHO\"],\n  \"STATUS_MESAS_SALIDA_NUEVE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.NUEVE\"],\n  \"STATUS_MESAS_SALIDA_DIEZ\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.DIEZ\"],\n  \"STATUS_MESAS_SALIDA_ONCE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.ONCE\"],\n  \"STATUS_MESAS_SALIDA_DOCE\": variablesPLC[\"INTERFACE_SCADA.STATUS_MESAS_SALIDA.DOCE\"],\n  \n  //FOTOCELULAS\n   \"FOT_PRES_TA29_PIS1_REJ1\": variablesPLC[\"FOT_PRES_TA29_PIS1_REJ1\"],\n   \"FOT_FINAL_TA29_PIS1_REJ1\": variablesPLC[\"FOT_FINAL_TA29_PIS1_REJ1\"],\n   \"FOT_FINAL_TA34\": variablesPLC[\"FOT_FINAL_TA34\"],\n   \"FOT_PRES_TA35_PIS2\": variablesPLC[\"FOT_PRES_TA35_PIS2\"],\n   \n   \"PUP1_S11_MAN\": variablesPLC[\"PUP1_S11_MAN\"],\n   \"PUP1_S11_AUTO\": variablesPLC[\"PUP1_S11_AUTO\"],\n   \"PUP2_S11_MAN\": variablesPLC[\"PUP2_S11_MAN\"],\n   \"PUP2_S11_AUTO\": variablesPLC[\"PUP2_S11_AUTO\"],\n   \"PUP3_S11_MAN\": variablesPLC[\"PUP3_S11_MAN\"],\n   \"PUP3_S11_AUTO\": variablesPLC[\"PUP3_S11_AUTO\"],\n   \"FOT_FINAL_PIS3\": variablesPLC[\"FOT_FINAL_PIS3\"],\n   \n   \"AUT_MAN_BM692_PIS1_2\": variablesPLC[\"AUT_MAN_BM692_PIS1_2\"],\n   \"LLEGADA_PIS2_MATRICULA_PALET\": variablesPLC[\"LLEGADA_PIS2_MATRICULA_PALET\"],\n   \"LLEGADA_PIS2_DATOS_PREPARADOS\": variablesPLC[\"LLEGADA_PIS2_DATOS_PREPARADOS\"],\n\n  \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroSCADA\" al payload\nmsg.payload = nuevoRegistroSCADA;\n\n// Almacena el objeto \"nuevoRegistroSCADA\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"nuevoRegistroSCADA\", nuevoRegistroSCADA);\n\n// Ahora, puedes acceder a \"nuevoRegistroSCADA\" en otros nodos utilizando flow.get(\"nuevoRegistroSCADA\");\nreturn msg;\n\n\n// Indicativos de Vida\t\t\n//DB100.DBW    0\tINTERFACE_DATOS_INDICATIVOS_VIDA_SGA\t 0..65.535\n////DB100.DBW    4\tINTERFACE_DATOS_INDICATIVOS_VIDA_PLC\t 0..65.535\n// Status Instalación\t\t\n//DB100.DBB   10\tINTERFACE_DATOS_STATUS_INSTALACION_MARCHA\t0 = PARADA  1 = EN MARCHA\n///////////////// Status Puente\t\t\n//DB100.DBB   40\tINTERFACE_DATOS_STATUS_PUENTE_OCUPACION\t0 = LIBRE   1 = OCUPADO\n//DB100.DBB   41\tINTERFACE_DATOS_STATUS_PUENTE_ESTADO\t0 = OK   1 = AVERÍA\n//DB100.DBB   42\tINTERFACE_DATOS_STATUS_PUENTE_SITUACION\t0 = PARADO   1 = EN MOVIMIENTO\n//DB100.DBB   43\tINTERFACE_DATOS_STATUS_PUENTE_POSICION\t1..12\n// Status Carro\t\t\n//DB100.DBB   50\tINTERFACE_DATOS_STATUS_CARRO_ESTADO\t0 = ERROR ENT.   1 = ERROR SAL.   2 = CORREC.ENT.   3 = CORREC.SAL.   4 = CARRO OK\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "cfab6c6e8c97aff7"
            ]
        ]
    },
    {
        "id": "cfab6c6e8c97aff7",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "6a22b59d87fe1ce6",
        "type": "s7 control",
        "z": "5f07b2ace243eb3a",
        "endpoint": "cfe81a06cf24641b",
        "function": "trigger",
        "name": "",
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "c9244c71eb084ff0"
            ]
        ]
    },
    {
        "id": "584c0e2b398ab1d6",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "7592a6fd0d123d02",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "TrackMesas",
        "x": 90,
        "y": 360,
        "wires": [
            [
                "619e2d37c447f451"
            ]
        ]
    },
    {
        "id": "619e2d37c447f451",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Leer las variables del PLC almacenadas en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC para TrackMesas (Parte 1)\nvar nuevoRegistroTrackMesasParte1 = {\n    \"Ubicacion\": \"TrackMesas\",  // Puedes cambiar esta ubicación según sea necesario\n\n    // Asignar las variables con nombres nuevos\n    \"Datos_TC37\": variablesPLC[\"TC37\"],\n    \"MesaEntrada_1_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_1_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_1_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_1_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_2_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_2_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_2_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_2_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_3_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_3_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_3_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_3_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_4_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_4_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_4_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_4_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_5_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_5_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_5_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_5_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_6_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_6_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_6_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_6_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_7_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_7_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_7_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_7_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_8_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_8_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_8_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_8_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_9_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_9_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_9_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_9_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_10_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_10_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_10_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_10_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_11_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_11_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_11_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_11_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_12_Posición_1_Recogida_Traslo\": variablesPLC[\"MesaEntrada_12_Posición_1_Recogida_Traslo\"],\n    \"MesaSalida_12_Posición_2_Entrega_Traslo\": variablesPLC[\"MesaSalida_12_Posición_2_Entrega_Traslo\"],\n    \"MesaEntrada_1_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_1_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_1_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_1_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_2_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_2_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_2_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_2_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_3_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_3_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_3_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_3_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_4_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_4_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_4_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_4_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_5_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_5_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_5_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_5_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_6_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_6_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_6_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_6_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_7_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_7_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_7_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_7_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_8_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_8_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_8_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_8_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_9_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_9_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_9_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_9_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_10_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_10_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_10_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_10_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_11_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_11_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_11_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_11_Posición_1_Recogida_Carro\"],\n    \"MesaEntrada_12_Posición_2_Entrega_Carro\": variablesPLC[\"MesaEntrada_12_Posición_2_Entrega_Carro\"],\n    \"MesaSalida_12_Posición_1_Recogida_Carro\": variablesPLC[\"MesaSalida_12_Posición_1_Recogida_Carro\"],\n    \"Datos_CTF36\": variablesPLC[\"CTF36\"],\n    \"FOT_PRES_TC37\": variablesPLC[\"FOT_PRES_TC37\"],\n    \"F_ACUM_LLE_TC37\": variablesPLC[\"F_ACUM_LLE_TC37\"],\n    \"FOT_PRES_TC38\": variablesPLC[\"FOT_PRES_TC38\"],\n    \"F_FINAL_TC38\": variablesPLC[\"F_FINAL_TC38\"],\n     \"FOT_PRES_TC39\": variablesPLC[\"FOT_PRES_TC39\"],\n    \"F_ACUM_LLE_TC39\": variablesPLC[\"F_ACUM_LLE_TC39\"],\n    \"FOT_PRES_TC40\": variablesPLC[\"FOT_PRES_TC40\"],\n    \"F_FINAL_TC40\": variablesPLC[\"F_FINAL_TC40\"],\n    \"FOT_PRES_TC41\": variablesPLC[\"FOT_PRES_TC41\"],\n    \"F_ACUM_LLE_TC41\": variablesPLC[\"F_ACUM_LLE_TC41\"],\n    \"FOT_PRES_TC42\": variablesPLC[\"FOT_PRES_TC42\"],\n    \"F_FINAL_TC42\": variablesPLC[\"F_FINAL_TC42\"],\n     \"FOT_PRES_TC43\": variablesPLC[\"FOT_PRES_TC43\"],\n    \"F_ACUM_LLE_TC43\": variablesPLC[\"F_ACUM_LLE_TC43\"],\n    \"FOT_PRES_TC44\": variablesPLC[\"FOT_PRES_TC44\"],\n    \"F_FINAL_TC44\": variablesPLC[\"F_FINAL_TC44\"],\n    \"FOT_PRES_TC45\": variablesPLC[\"FOT_PRES_TC45\"],\n    \"F_ACUM_LLE_TC45\": variablesPLC[\"F_ACUM_LLE_TC45\"],\n    \"FOT_PRES_TC46\": variablesPLC[\"FOT_PRES_TC46\"],\n    \"F_FINAL_TC46\": variablesPLC[\"F_FINAL_TC46\"],\n     \"FOT_PRES_TC47\": variablesPLC[\"FOT_PRES_TC47\"],\n    \"F_ACUM_LLE_TC47\": variablesPLC[\"F_ACUM_LLE_TC47\"],\n    \"FOT_PRES_TC48\": variablesPLC[\"FOT_PRES_TC48\"],\n    \"F_FINAL_TC48\": variablesPLC[\"F_FINAL_TC48\"],\n    \"FOT_PRES_TC49\": variablesPLC[\"FOT_PRES_TC49\"],\n    \"F_ACUM_LLE_TC49\": variablesPLC[\"F_ACUM_LLE_TC49\"],\n    \"FOT_PRES_TC50\": variablesPLC[\"FOT_PRES_TC50\"],\n    \"F_FINAL_TC50\": variablesPLC[\"F_FINAL_TC50\"],\n     \"FOT_PRES_TC51\": variablesPLC[\"FOT_PRES_TC51\"],\n    \"F_ACUM_LLE_TC51\": variablesPLC[\"F_ACUM_LLE_TC51\"],\n    \"FOT_PRES_TC52\": variablesPLC[\"FOT_PRES_TC52\"],\n    \"F_FINAL_TC52\": variablesPLC[\"F_FINAL_TC52\"],   \n    \"FOT_PRES_TC53\": variablesPLC[\"FOT_PRES_TC53\"],\n    \"F_ACUM_LLE_TC53\": variablesPLC[\"F_ACUM_LLE_TC53\"],\n    \"FOT_PRES_TC54\": variablesPLC[\"FOT_PRES_TC54\"],\n    \"F_FINAL_TC54\": variablesPLC[\"F_FINAL_TC54\"],\n     \"FOT_PRES_TC55\": variablesPLC[\"FOT_PRES_TC55\"],\n    \"F_ACUM_LLE_TC55\": variablesPLC[\"F_ACUM_LLE_TC55\"],\n    \"FOT_PRES_TC56\": variablesPLC[\"FOT_PRES_TC56\"],\n    \"F_FINAL_TC56\": variablesPLC[\"F_FINAL_TC56\"],\n    \"FOT_PRES_TC57\": variablesPLC[\"FOT_PRES_TC57\"],\n    \"F_ACUM_LLE_TC57\": variablesPLC[\"F_ACUM_LLE_TC57\"],\n    \"FOT_PRES_TC58\": variablesPLC[\"FOT_PRES_TC58\"],\n    \"F_FINAL_TC58\": variablesPLC[\"F_FINAL_TC58\"],\n     \"FOT_PRES_TC59\": variablesPLC[\"FOT_PRES_TC59\"],\n    \"F_ACUM_LLE_TC59\": variablesPLC[\"F_ACUM_LLE_TC59\"],\n    \"FOT_PRES_TC60\": variablesPLC[\"FOT_PRES_TC60\"],\n    \"F_FINAL_TC61\": variablesPLC[\"F_FINAL_TC61\"], \n    \n    \n    \n    \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroTrackMesasParte1\" al payload\nmsg.payload = nuevoRegistroTrackMesasParte1;\n\n// Almacena el objeto \"nuevoRegistroTrackMesasParte1\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"nuevoRegistroTrackMesasParte1\", nuevoRegistroTrackMesasParte1);\n\n// Ahora, puedes acceder a \"nuevoRegistroTrackMesasParte1\" en otros nodos utilizando flow.get(\"nuevoRegistroTrackMesasParte1\");\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "fa55277c677fa392"
            ]
        ]
    },
    {
        "id": "fa55277c677fa392",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 360,
        "wires": []
    },
    {
        "id": "c9244c71eb084ff0",
        "type": "s7 control",
        "z": "5f07b2ace243eb3a",
        "endpoint": "7592a6fd0d123d02",
        "function": "trigger",
        "name": "",
        "x": 1050,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "72905520e1c605be",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "endpoint": "d0328f3805f55057",
        "mode": "all",
        "variable": "CL_PIE",
        "diff": false,
        "name": "PLC_1200",
        "x": 80,
        "y": 460,
        "wires": [
            [
                "0544284559c291c4",
                "35924b3eca99413e"
            ]
        ]
    },
    {
        "id": "0544284559c291c4",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Leer las variables del PLC almacenadas en msg.payload\nvar variablesPLC = msg.payload;\n\nlet CL_PIE = variablesPLC[\"CL_PIE\"];\n\n\n// Almacena el objeto \"nuevoRegistroTrackMesasParte1\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"CL_PIE\", CL_PIE);\n\n msg.payload =  global.get(\"CL_PIE\" );\n\n \n// Ahora, puedes acceder a \"nuevoRegistroTrackMesasParte1\" en otros nodos utilizando flow.get(\"nuevoRegistroTrackMesasParte1\");\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "e1e83b67912d52ef"
            ]
        ]
    },
    {
        "id": "e1e83b67912d52ef",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 460,
        "wires": []
    },
    {
        "id": "db21e5692676d44a",
        "type": "comment",
        "z": "5f07b2ace243eb3a",
        "name": "INTERFACE_DATOS_STATUS_INSTALACION_MARCHA",
        "info": "// Indicativos de Vida\t\t\nDB100.DBW    0\tINTERFACE_DATOS_INDICATIVOS_VIDA_SGA\t 0..65.535\nDB100.DBW    4\tINTERFACE_DATOS_INDICATIVOS_VIDA_PLC\t 0..65.535\n// Status Instalación\t\t\nDB100.DBB   10\tINTERFACE_DATOS_STATUS_INSTALACION_MARCHA\t0=PARADA  1=EN MARCHA\n// Status Puente\t\t\nDB100.DBB   40\tINTERFACE_DATOS_STATUS_PUENTE_OCUPACION\t0=LIBRE   1=OCUPADO\nDB100.DBB   41\tINTERFACE_DATOS_STATUS_PUENTE_ESTADO\t0=OK   1=AVERÍA\nDB100.DBB   42\tINTERFACE_DATOS_STATUS_PUENTE_SITUACION\t0=PARADO   1=EN MOVIMIENTO\nDB100.DBB   43\tINTERFACE_DATOS_STATUS_PUENTE_POSICION\t1..12\n// Status Carro\t\t\nDB100.DBB   50\tINTERFACE_DATOS_STATUS_CARRO_ESTADO\t0=ERROR ENT.   1=ERROR SAL.   2=CORREC. ENT.   3=CORREC.SAL.   4=CARRO OK\n",
        "x": 1430,
        "y": 480,
        "wires": []
    },
    {
        "id": "35924b3eca99413e",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "name": "Procesar datos ",
        "func": "// Leer las variables del PLC almacenadas en msg.payload\nvar variablesPLC = msg.payload;\nvar fechaHoraActual = new Date().toISOString(); // Obtiene la fecha y hora actual en formato ISO8601\n\n// Crea un objeto JSON que contiene todas las variables leídas desde el PLC para TrackMesas (Parte 1)\nvar GESTION_GALIBO = {\n    \"Ubicacion\": \"PLC_1200\",  // Puedes cambiar esta ubicación según sea necesario\n\n    // Asignar las variables con nombres nuevos\n\n    \"ACTIVAR-MECALUX\": variablesPLC[\"ACTIVAR-MECALUX\"],\n    \"BIT_VIDA\": variablesPLC[\"BIT_VIDA\"],\n    \"FALLO_ESCANER\": variablesPLC[\"FALLO_ESCANER\"],\n    \"FALLO_GALIBO_TACO_D\": variablesPLC[\"FALLO_GALIBO_TACO_D\"],\n    \"FALLO_GALIBO_PALA_D\": variablesPLC[\"FALLO_GALIBO_PALA_D\"],\n    \"FALLO_GALIBO_TACO_C\": variablesPLC[\"FALLO_GALIBO_TACO_C\"],\n    \"FALLO_GALIBO_PALA_I\": variablesPLC[\"FALLO_GALIBO_PALA_I\"],\n    \"FALLO_GALIBO_TACO_I\": variablesPLC[\"FALLO_GALIBO_TACO_I\"],\n    \"FALLO_GALIBO_LATERAL_D\": variablesPLC[\"FALLO_GALIBO_LATERAL_D\"],\n    \"FALLO_GALIBO_LATERAL_I\": variablesPLC[\"FALLO_GALIBO_LATERAL_I\"],\n    \"FALLO_GALIBO_POSTERIOR\": variablesPLC[\"FALLO_GALIBO_POSTERIOR\"],\n    \"FALLO_GALIBO_FRONTAL\": variablesPLC[\"FALLO_GALIBO_FRONTAL\"],\n    \"FALLO_GALIBO_PALLET_VACIO\": variablesPLC[\"FALLO_GALIBO_PALLET_VACIO\"],\n    \"MEC_ACTIVADO\": variablesPLC[\"MEC_ACTIVADO\"],\n    \"INDICATIVO_VIDA_1200\": variablesPLC[\"INDICATIVO_VIDA_1200\"],    \n    \"PRODUCCION_MEC\": variablesPLC[\"PRODUCCION_MEC\"],     \n    \"MESA24_RECHAZO\": variablesPLC[\"MESA24_RECHAZO\"],     \n    \"RESET_MESA23\": variablesPLC[\"RESET_MESA23\"], \n    \"MESA24_TO_SILO\": variablesPLC[\"MESA24_TO_SILO\"],\n    \"ReLANZAR_EVENTO_PIE1\": variablesPLC[\"ReLANZAR_EVENTO_PIE1\"],\n    \n\n    \n    \n    \n    \"fecha_hora\": fechaHoraActual // Fecha y hora actual en formato ISO8601\n};\n\n// Asigna el objeto \"nuevoRegistroTrackMesasParte1\" al payload\nmsg.payload = GESTION_GALIBO;\n\n// Almacena el objeto \"nuevoRegistroTrackMesasParte1\" en la propiedad \"flow\" de Node-RED\nglobal.set(\"GESTION_GALIBO\", GESTION_GALIBO);\n\n// Ahora, puedes acceder a \"nuevoRegistroTrackMesasParte1\" en otros nodos utilizando flow.get(\"nuevoRegistroTrackMesasParte1\");\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "19b705ba706b957d"
            ]
        ]
    },
    {
        "id": "19b705ba706b957d",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "36a73bb7c8a3cd87",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "endpoint": "d41610ee1fc6122f",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "carro_db112",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "2944cf17cab4ed0d"
            ]
        ]
    },
    {
        "id": "2944cf17cab4ed0d",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Procesar datos ",
        "func": "// Supongamos que las variables se encuentran en msg.payload\nconst variablesPLC = msg.payload;\nconst fechaHoraActual = new Date().toISOString(); // Fecha en formato ISO8601\n\n// Creamos el objeto con todas las variables del CT (Carro Transferidor)\nconst ct_status = {\n  \"Status_Conectado\": variablesPLC[\"Status_Conectado\"],\n  \"Status_Defecto\": variablesPLC[\"Status_Defecto\"],\n  \"Status_Automatico\": variablesPLC[\"Status_Automatico\"],\n  \"Status_Semiautomatico\": variablesPLC[\"Status_Semiautomatico\"],\n  \"Status_Manual\": variablesPLC[\"Status_Manual\"],\n  \"Status_Emergencia_puerta_armario\": variablesPLC[\"Status_Emergencia_puerta_armario\"],\n  \"Status_Con_datos\": variablesPLC[\"Status_Con_datos\"],\n  \"Autorizacion_de_transferencia_desde_TC26\": variablesPLC[\"Autorizacion_de_transferencia_desde_TC26\"],\n  \"Fin_de_transferencia_desde_TC26\": variablesPLC[\"Fin_de_transferencia_desde_TC26\"],\n  \"Peticion_de_transferencia_desde_TC30\": variablesPLC[\"Peticion_de_transferencia_desde_TC30\"],\n  \"Acuse_de_orden_recibida\": variablesPLC[\"Acuse_de_orden_recibida\"],\n  \"Matricula_paleta_en_transportador_de_entrada\": variablesPLC[\"Matricula_paleta_en_transportador_de_entrada\"],\n  \"Matricula_paleta_en_transportador_de_salida\": variablesPLC[\"Matricula_paleta_en_transportador_de_salida\"],\n  \"Pasillo_destino\": variablesPLC[\"Pasillo_destino\"],\n  \"Ciclo_de_trabajo\": variablesPLC[\"Ciclo_de_trabajo\"],\n  \"Numero_de_pasillo_actual\": variablesPLC[\"Numero_de_pasillo_actual\"],\n  \"Estado_carro\": variablesPLC[\"Estado_carro\"],\n  \"Defecto_Error_de_comunicacion\": variablesPLC[\"Defecto_Error_de_comunicacion\"],\n  \"Defecto_Emergencia_armario_carro\": variablesPLC[\"Defecto_Emergencia_armario_carro\"],\n  \"Defecto_Anomalia_variador\": variablesPLC[\"Defecto_Anomalia_variador\"],\n  \"Defecto_Anomalia_motor_traslacion\": variablesPLC[\"Defecto_Anomalia_motor_traslacion\"],\n  \"Defecto_Anomalia_motor_entrada\": variablesPLC[\"Defecto_Anomalia_motor_entrada\"],\n  \"Defecto_Anomalia_motor_salida\": variablesPLC[\"Defecto_Anomalia_motor_salida\"],\n  \"Defecto_Final_de_carrera_pasillo_1\": variablesPLC[\"Defecto__Final_de_carrera_pasillo_1\"],\n  \"Defecto_Final_de_carrera_pasillo_12\": variablesPLC[\"Defecto__Final_de_carrera_pasillo_12\"],\n  \"Defecto_Paleta_descentrada_en_transfer_de_entrada\": variablesPLC[\"Defecto_Paleta_descentrada_en_transfer_de_entrada\"],\n  \"Defecto_Paleta_descentrada_en_transfer_de_salida\": variablesPLC[\"Defecto__Paleta_descentrada_en_transfer_de_salida\"],\n  \"Visualizacion_Centraje_traslacion_adelante\": variablesPLC[\"Visualizacion_Centraje_traslacion_adelante\"],\n  \"Visualizacion_Centraje_traslacion_atras\": variablesPLC[\"Visualizacion_Centraje_traslacion_atras\"],\n  \"Visualizacion_Presencia_delantera_de_paleta_en_entrada\": variablesPLC[\"Visualizacion_Presencia_delantera_de_paleta_en_entrada\"],\n  \"Visualizacion_Presencia_trasera_de_paleta_en_entrada\": variablesPLC[\"Visualizacion_Presencia_trasera_de_paleta_en_entrada\"],\n  \"Visualizacion_Presencia_delantera_de_paleta_en_salida\": variablesPLC[\"Visualizacion_Presencia_delantera_de_paleta_en_salida\"],\n  \"Visualizacion_Presencia_trasera_de_paleta_en_salida\": variablesPLC[\"Visualizacion_Presencia_trasera_de_paleta_en_salida\"],\n  \"Visualizacion_Marcha_traslacion_adelante\": variablesPLC[\"Visualizacion_Marcha_traslacion_adelante\"],\n  \"Visualizacion_Marcha_traslacion_atras\": variablesPLC[\"Visualizacion_Marcha_traslacion_atras\"],\n  \"Visualizacion_Motor_traslacion_parado\": variablesPLC[\"Visualizacion_Motor_traslacion_parado\"],\n  \"Visualizacion_Centraje_traslacion\": variablesPLC[\"Visualizacion_Centraje_traslacion\"],\n  \"Visualizacion_Marcha_transportador_entrada\": variablesPLC[\"Visualizacion_Marcha_transportador_entrada\"],\n  \"Visualizacion_Marcha_transportador_salida\": variablesPLC[\"Visualizacion_Marcha_transportador_salida\"],\n  \"Visualizacion_Defecto_traslacion\": variablesPLC[\"Visualizacion_Defecto_traslacion_\"],\n  \"Visualizacion_Defecto_transportador\": variablesPLC[\"Visualizacion__Defecto_transportador\"],\n  \"timestamp\": fechaHoraActual\n};\n\n// Almacenar en la variable global\nglobal.set(\"ct_status_db112\", ct_status);\n\n// También lo pasamos como msg.payload si deseas ver en debug\nmsg.payload = ct_status;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 640,
        "wires": [
            [
                "a866a4c6d9fd4362"
            ]
        ]
    },
    {
        "id": "a866a4c6d9fd4362",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 640,
        "wires": []
    },
    {
        "id": "e6ab52b28e6f7036",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "endpoint": "b8e70c21ca6844bf",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "db111_alarmas",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "8695d19e392fb30c",
                "012916af938f8367",
                "dad77b3b92ed70cf"
            ]
        ]
    },
    {
        "id": "8695d19e392fb30c",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Procesar datos tlv1",
        "func": "const plc = msg.payload;\nconst fechaHoraActual = new Date().toISOString();\n\nconst alarmas_status_tlv1 = {\n  // Alarmas TLV1\n  EMERGENCIA_GENERAL_TLV1: plc[\"EMERGENCIA_GENERAL_TLV1\"],\n  PUERTA_CABINA_ABIERTA_TLV1: plc[\"PUERTA_CABINA_ABIERTA_TLV1\"],\n  EXCESO_RECORRIDO_ADELANTE_TLV1: plc[\"EXCESO_RECORRIDO_ADELANTE_TLV1\"],\n  EXCESO_RECORRIDO_ATRAS_TLV1: plc[\"EXCESO_RECORRIDO_ATRAS_TLV1\"],\n  EXCESO_RECORRIDO_SUBIDA_TLV1: plc[\"EXCESO_RECORRIDO_SUBIDA_TLV1\"],\n  EXCESO_RECORRIDO_BAJADA_TLV1: plc[\"EXCESO_RECORRIDO_BAJADA_TLV1\"],\n  PARACAIDAS_ELEVACION_TLV1: plc[\"PARACAIDAS_ELEVACION_TLV1\"],\n  CABLES_FLOJOS_ELEVACION_TLV1: plc[\"CABLES_FLOJOS_ELEVACION_TLV1\"],\n  PROTECCION_CONVERTIDOR_TRASLACION_TLV1: plc[\"PROTECCION_CONVERTIDOR_TRASLACION_TLV1\"],\n  PROTECCION_CONVERTIDOR_ELEVACION_TLV1: plc[\"PROTECCION_CONVERTIDOR_ELEVACION_TLV1\"],\n  PROTECCION_CONVERTIDOR_HORQUILLAS_TLV1: plc[\"PROTECCION_CONVERTIDOR_HORQUILLAS_TLV1\"],\n  PROTECCION_MOTOR_TRASLACION_TLV1: plc[\"PROTECCION_MOTOR_TRASLACION_TLV1\"],\n  PROTECCION_MOTOR_ELEVACION_TLV1: plc[\"PROTECCION_MOTOR_ELEVACION_TLV1\"],\n  PROTECCION_MOTOR_HORQUILLAS_TLV1: plc[\"PROTECCION_MOTOR_HORQUILLAS_TLV1\"],\n  DEFECTO_CONVERTIDOR_ELEVACION_TLV1: plc[\"DEFECTO_CONVERTIDOR_ELEVACION_TLV1\"],\n  DEFECTO_CONVERTIDOR_HORQUILLAS_TLV1: plc[\"DEFECTO_CONVERTIDOR_HORQUILLAS_TLV1\"],\n  EXCESO_VELOCIDAD_TRASLACION_TLV1: plc[\"EXCESO_VELOCIDAD_TRASLACION_TLV1\"],\n  DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV1: plc[\"DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV1\"],\n  DEFECTO_GIRO_TRASLACION_TLV1: plc[\"DEFECTO_GIRO_TRASLACION_TLV1\"],\n  DEFECTO_GIRO_ELEVACION_TLV1: plc[\"DEFECTO_GIRO_ELEVACION_TLV1\"],\n  DEFECTO_GIRO_HORQUILLAS_TLV1: plc[\"DEFECTO_GIRO_HORQUILLAS_TLV1\"],\n  TIEMPO_CENTRAJE_TRASLACION_TLV1: plc[\"TIEMPO_CENTRAJE_TRASLACION_TLV1\"],\n  TIEMPO_CENTRAJE_ELEVACION_TLV1: plc[\"TIEMPO_CENTRAJE_ELEVACION_TLV1\"],\n  TIEMPO_CICLO_HORQUILLAS_TLV1: plc[\"TIEMPO_CICLO_HORQUILLAS_TLV1\"],\n  TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV1: plc[\"TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV1\"],\n  DEFECTO_DETECTORES_TRASLACION_TLV1: plc[\"DEFECTO_DETECTORES_TRASLACION_TLV1\"],\n  DEFECTO_DETECTORES_ELEVACION_TLV1: plc[\"DEFECTO_DETECTORES_ELEVACION_TLV1\"],\n  DEFECTO_DETECTORES_HORQUILLAS_TLV1: plc[\"DEFECTO_DETECTORES_HORQUILLAS_TLV1\"],\n  DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV1: plc[\"DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV1\"],\n  DEFECTO_IMPUL_ENCODER_TRASLACION_TLV1: plc[\"DEFECTO_IMPUL_ENCODER_TRASLACION_TLV1\"],\n  DEFECTO_IMPUL_ENCODER_ELEVACION_TLV1: plc[\"DEFECTO_IMPUL_ENCODER_ELEVACION_TLV1\"],\n  DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV1: plc[\"DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV1\"],\n  CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV1: plc[\"CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV1\"],\n  CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV1: plc[\"CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV1\"],\n  DEFECTO_COMUNICACION_RED_NEC_L1_TLV1: plc[\"DEFECTO_COMUNICACION_RED_NEC_L1_TLV1\"],\n  DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV1: plc[\"DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV1\"],\n  DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV1: plc[\"DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV1\"],\n  DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV1: plc[\"DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV1\"],\n  DEFECTO_DE_GALIBO_TLV1: plc[\"DEFECTO_DE_GALIBO_TLV1\"],\n  DEFECTO_PRESENCIA_DE_PALETA_TLV1: plc[\"DEFECTO_PRESENCIA_DE_PALETA_TLV1\"],\n  DEF_FOTOCELULAS_PALPADORAS_TLV1: plc[\"DEF_FOTOCELULAS_PALPADORAS_TLV1\"],\n  DEF_FOTOC_PUENTE_ENCARADO_TLV1: plc[\"DEF_FOTOC_PUENTE_ENCARADO_TLV1\"],\n  PASILLO_FUERA_DE_SERVICIO_TLV1: plc[\"PASILLO_FUERA_DE_SERVICIO_TLV1\"],\n  DEF_NR_DE_PASILLO_TLV1: plc[\"DEF_NR_DE_PASILLO_TLV1\"],\n  DEFECTO_TENSION_24VCC_TLV1: plc[\"DEFECTO_TENSION_24VCC_TLV1\"],\n  DEFECTO_TENSION_FRENOS_220_VCA_TLV1: plc[\"DEFECTO_TENSION_FRENOS_(220_VCA)_TLV1\"],\n  DEF_DESTINO_INCORRECTO_TLV1: plc[\"DEF_DESTINO_INCORRECTO_TLV1\"],\n  PETICION_AYUDA_A_MANTENIMIENTO_TLV1: plc[\"PETICION_AYUDA_A_MANTENIMIENTO_TLV1\"],\n  DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV1: plc[\"DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV1\"],\n  DEFECTO_NUMERO_DE_ESCLAVO_TLV1: plc[\"DEFECTO_NUMERO_DE_ESCLAVO_TLV1\"],\n  ERROR_DEPOSITO_TLV1: plc[\"ERROR_DEPOSITO_TLV1\"],\n  ERROR_EXTRACCION_TLV1: plc[\"ERROR_EXTRACCION_TLV1\"],\n\n  // Puedes continuar con los campos TLV2 y CT si lo deseas...\n\n  timestamp: fechaHoraActual\n};\n\n// Guardar en global\nglobal.set(\"alarmas_status_tlv1\", alarmas_status_tlv1);\n\n// Enviar para debug\nmsg.payload = alarmas_status_tlv1;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 720,
        "wires": [
            [
                "4a5152a8d1a0ca37"
            ]
        ]
    },
    {
        "id": "4a5152a8d1a0ca37",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 720,
        "wires": []
    },
    {
        "id": "012916af938f8367",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Procesar datos tlv2",
        "func": "const plc = msg.payload;\nconst fechaHoraActual = new Date().toISOString();\n\nconst alarmas_status_tlv2 = {\n  // Alarmas TLV2\n  EMERGENCIA_GENERAL_TLV2: plc[\"EMERGENCIA_GENERAL_TLV2\"],\n  PUERTA_CABINA_ABIERTA_TLV2: plc[\"PUERTA_CABINA_ABIERTA_TLV2\"],\n  EXCESO_RECORRIDO_ADELANTE_TLV2: plc[\"EXCESO_RECORRIDO_ADELANTE_TLV2\"],\n  EXCESO_RECORRIDO_ATRAS_TLV2: plc[\"EXCESO_RECORRIDO_ATRAS_TLV2\"],\n  EXCESO_RECORRIDO_SUBIDA_TLV2: plc[\"EXCESO_RECORRIDO_SUBIDA_TLV2\"],\n  EXCESO_RECORRIDO_BAJADA_TLV2: plc[\"EXCESO_RECORRIDO_BAJADA_TLV2\"],\n  PARACAIDAS_ELEVACION_TLV2: plc[\"PARACAIDAS_ELEVACION_TLV2\"],\n  CABLES_FLOJOS_ELEVACION_TLV2: plc[\"CABLES_FLOJOS_ELEVACION_TLV2\"],\n  PROTECCION_CONVERTIDOR_TRASLACION_TLV2: plc[\"PROTECCION_CONVERTIDOR_TRASLACION_TLV2\"],\n  PROTECCION_CONVERTIDOR_ELEVACION_TLV2: plc[\"PROTECCION_CONVERTIDOR_ELEVACION_TLV2\"],\n  PROTECCION_CONVERTIDOR_HORQUILLAS_TLV2: plc[\"PROTECCION_CONVERTIDOR_HORQUILLAS_TLV2\"],\n  PROTECCION_MOTOR_TRASLACION_TLV2: plc[\"PROTECCION_MOTOR_TRASLACION_TLV2\"],\n  PROTECCION_MOTOR_ELEVACION_TLV2: plc[\"PROTECCION_MOTOR_ELEVACION_TLV2\"],\n  PROTECCION_MOTOR_HORQUILLAS_TLV2: plc[\"PROTECCION_MOTOR_HORQUILLAS_TLV2\"],\n  DEFECTO_CONVERTIDOR_ELEVACION_TLV2: plc[\"DEFECTO_CONVERTIDOR_ELEVACION_TLV2\"],\n  DEFECTO_CONVERTIDOR_HORQUILLAS_TLV2: plc[\"DEFECTO_CONVERTIDOR_HORQUILLAS_TLV2\"],\n  EXCESO_VELOCIDAD_TRASLACION_TLV2: plc[\"EXCESO_VELOCIDAD_TRASLACION_TLV2\"],\n  DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV2: plc[\"DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV2\"],\n  DEFECTO_GIRO_TRASLACION_TLV2: plc[\"DEFECTO_GIRO_TRASLACION_TLV2\"],\n  DEFECTO_GIRO_ELEVACION_TLV2: plc[\"DEFECTO_GIRO_ELEVACION_TLV2\"],\n  DEFECTO_GIRO_HORQUILLAS_TLV2: plc[\"DEFECTO_GIRO_HORQUILLAS_TLV2\"],\n  TIEMPO_CENTRAJE_TRASLACION_TLV2: plc[\"TIEMPO_CENTRAJE_TRASLACION_TLV2\"],\n  TIEMPO_CENTRAJE_ELEVACION_TLV2: plc[\"TIEMPO_CENTRAJE_ELEVACION_TLV2\"],\n  TIEMPO_CICLO_HORQUILLAS_TLV2: plc[\"TIEMPO_CICLO_HORQUILLAS_TLV2\"],\n  TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV2: plc[\"TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV2\"],\n  DEFECTO_DETECTORES_TRASLACION_TLV2: plc[\"DEFECTO_DETECTORES_TRASLACION_TLV2\"],\n  DEFECTO_DETECTORES_ELEVACION_TLV2: plc[\"DEFECTO_DETECTORES_ELEVACION_TLV2\"],\n  DEFECTO_DETECTORES_HORQUILLAS_TLV2: plc[\"DEFECTO_DETECTORES_HORQUILLAS_TLV2\"],\n  DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV2: plc[\"DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV2\"],\n  DEFECTO_IMPUL_ENCODER_TRASLACION_TLV2: plc[\"DEFECTO_IMPUL_ENCODER_TRASLACION_TLV2\"],\n  DEFECTO_IMPUL_ENCODER_ELEVACION_TLV2: plc[\"DEFECTO_IMPUL_ENCODER_ELEVACION_TLV2\"],\n  DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV2: plc[\"DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV2\"],\n  CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV2: plc[\"CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV2\"],\n  CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV2: plc[\"CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV2\"],\n  DEFECTO_COMUNICACION_RED_NEC_L1_TLV2: plc[\"DEFECTO_COMUNICACION_RED_NEC_L1_TLV2\"],\n  DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV2: plc[\"DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV2\"],\n  DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV2: plc[\"DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV2\"],\n  DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV2: plc[\"DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV2\"],\n  DEFECTO_DE_GALIBO_TLV2: plc[\"DEFECTO_DE_GALIBO_TLV2\"],\n  DEFECTO_PRESENCIA_DE_PALETA_TLV2: plc[\"DEFECTO_PRESENCIA_DE_PALETA_TLV2\"],\n  DEF_FOTOCELULAS_PALPADORAS_TLV2: plc[\"DEF_FOTOCELULAS_PALPADORAS_TLV2\"],\n  DEF_FOTOC_PUENTE_ENCARADO_TLV2: plc[\"DEF_FOTOC_PUENTE_ENCARADO_TLV2\"],\n  PASILLO_FUERA_DE_SERVICIO_TLV2: plc[\"PASILLO_FUERA_DE_SERVICIO_TLV2\"],\n  DEF_NR_DE_PASILLO_TLV2: plc[\"DEF_NR_DE_PASILLO_TLV2\"],\n  DEFECTO_TENSION_24VCC_TLV2: plc[\"DEFECTO_TENSION_24VCC_TLV2\"],\n  DEFECTO_TENSION_FRENOS_220_VCA_TLV2: plc[\"DEFECTO_TENSION_FRENOS_(220_VCA)_TLV2\"],\n  DEF_DESTINO_INCORRECTO_TLV2: plc[\"DEF_DESTINO_INCORRECTO_TLV2\"],\n  PETICION_AYUDA_A_MANTENIMIENTO_TLV2: plc[\"PETICION_AYUDA_A_MANTENIMIENTO_TLV2\"],\n  DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV2: plc[\"DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV2\"],\n  DEFECTO_NUMERO_DE_ESCLAVO_TLV2: plc[\"DEFECTO_NUMERO_DE_ESCLAVO_TLV2\"],\n  ERROR_DEPOSITO_TLV2: plc[\"ERROR_DEPOSITO_TLV2\"],\n  ERROR_EXTRACCION_TLV2: plc[\"ERROR_EXTRACCION_TLV2\"],\n\n  // Puedes continuar con los campos TLV2 y CT si lo deseas...\n\n  timestamp: fechaHoraActual\n};\n\n// Guardar en global\nglobal.set(\"alarmas_status_tlv2\", alarmas_status_tlv2);\n\n// Enviar para debug\nmsg.payload = alarmas_status_tlv2;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 760,
        "wires": [
            [
                "41fc0d5d9e08d1e5"
            ]
        ]
    },
    {
        "id": "41fc0d5d9e08d1e5",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 760,
        "wires": []
    },
    {
        "id": "dad77b3b92ed70cf",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Procesar datos carro",
        "func": "const plc = msg.payload;\nconst fechaHoraActual = new Date().toISOString();\n\nconst alarmas_status_ct = {\n  Defecto_Error_de_comunicacion_ct: plc[\"Defecto_Error_de_comunicacion_ct\"],\n  Defecto_Emergencia_armario_carro_ct: plc[\"Defecto_Emergencia_armario_carro_ct\"],\n  Defecto_Anomalia_variador_ct: plc[\"Defecto_Anomalia_variador_ct\"],\n  Defecto_Anomalia_motor_traslacion_ct: plc[\"Defecto_Anomalia_motor_traslacion_ct\"],\n  Defecto_Anomalia_motor_entrada_ct: plc[\"Defecto_Anomalia_motor_entrada_ct\"],\n  Defecto_Anomalia_motor_salida_ct: plc[\"Defecto_Anomalia_motor_salida_ct\"],\n  Defecto_Final_de_carrera_pasillo_1_ct: plc[\"Defecto__Final_de_carrera_pasillo_1_ct\"],\n  Defecto_Final_de_carrera_pasillo_12_ct: plc[\"Defecto__Final_de_carrera_pasillo_12_ct\"],\n  Defecto_Paleta_descentrada_en_transfer_de_entrada_ct: plc[\"Defecto_Paleta_descentrada_en_transfer_de_entrada_ct\"],\n  Defecto_Paleta_descentrada_en_transfer_de_salida_ct: plc[\"Defecto__Paleta_descentrada_en_transfer_de_salida_ct\"],\n  Defecto_Limite_inferior_lectura_encoder_ct: plc[\"Defecto__Limite_inferior_lectura_encoder_ct\"],\n  Defecto_Limite_superior_lectura_encoder_ct: plc[\"Defecto__Limite_superior_lectura_encoder_ct\"],\n  Defecto_Tiempo_de_transferencia_de_mesa_de_salida_a_carro_ct: plc[\"Defecto__Tiempo_de_transferencia_de_mesa_de_salida_a_carro_ct\"],\n  Defecto_Telemetro_ct: plc[\"Defecto__Telemetro_ct\"],\n  Defecto_Tiempo_de_entrada_ct: plc[\"Defecto_Tiempo_de_entrada_ct\"],\n  Defecto_Tiempo_de_salida_ct: plc[\"Defecto_Tiempo_de_salida_ct\"],\n  Defecto_Paleta_en_entrada_sin_codigo_ct: plc[\"Defecto_Paleta_en_entrada_sin_codigo_ct\"],\n  Defecto_Paleta_en_salida_sin_codigo_ct: plc[\"Defecto_Paleta_en_salida_sin_codigo_ct\"],\n\n  timestamp: fechaHoraActual\n};\n\n// Guardar en global\nglobal.set(\"alarmas_status_ct\", alarmas_status_ct);\n\n// Retornar para debug\nmsg.payload = alarmas_status_ct;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 800,
        "wires": [
            [
                "b7cd4d60c1753713"
            ]
        ]
    },
    {
        "id": "b7cd4d60c1753713",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "4ee55933d4ec604a",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "endpoint": "42c2cf5947e34f32",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "alarmasPT",
        "x": 180,
        "y": 880,
        "wires": [
            [
                "f45c6cc282679955"
            ]
        ]
    },
    {
        "id": "f45c6cc282679955",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Procesar datos ",
        "func": "const plc = msg.payload;  // Suponemos que los datos del PLC vienen aquí\nconst fechaHoraActual = new Date().toISOString();  // Fecha y hora actuales\n\n// Construir el objeto con las variables del puente\nconst alarmas_status_pt = {\n  EMERGENCIA_PUENTE_DE_TRANSBORDO: plc[\"EMERGENCIA_PUENTE_DE_TRANSBORDO\"],\n  EXCESO_DE_RECORRIDO_ADELANTE_PUENTE: plc[\"EXCESO_DE_RECORRIDO_ADELANTE_PUENTE\"],\n  EXCESO_DE_RECORRIDO_ATRAS_PUENTE: plc[\"EXCESO_DE_RECORRIDO_ATRAS_PUENTE\"],\n  PROTECCION_VARIADOR_TRASLACION_PUENTE: plc[\"PROTECCION_VARIADOR_TRASLACION_PUENTE\"],\n  PROTECCION_MOTOR_TRASLACION_PUENTE: plc[\"PROTECCION_MOTOR_TRASLACION_PUENTE\"],\n  PROTECCION_MOTOR_ENCLAVAMIENTO_PUENTE: plc[\"PROTECCION_MOTOR_ENCLAVAMIENTO_PUENTE\"],\n  PROTECCION_FRENOS: plc[\"PROTECCION_FRENOS\"],\n\n  DEFECTO_VARIADOR_TRASLACION_PUENTE: plc[\"DEFECTO_VARIADOR_TRASLACION_PUENTE\"],\n  EXCESO_DE_VELOCIDAD_PUENTE: plc[\"EXCESO_DE_VELOCIDAD_PUENTE\"],\n  DEFECTO_FOTOCELULA_GALIBO_PUENTE: plc[\"DEFECTO_FOTOCELULA_GALIBO_PUENTE\"],\n  TIEMPO_CICLO_TRASLACION_PUENTE: plc[\"TIEMPO_CICLO_TRASLACION_PUENTE\"],\n  TIEMPO_CICLO_ENCLAVAMIENTO_PUENTE: plc[\"TIEMPO_CICLO_ENCLAVAMIENTO_PUENTE\"],\n  DEFECTO_DETECTORES_TRASLACION_PUENTE: plc[\"DEFECTO_DETECTORES_TRASLACION_PUENTE\"],\n  DEFECTO_DETECTORES_ENCLAVAMIENTO_PUENTE: plc[\"DEFECTO_DETECTORES_ENCLAVAMIENTO_PUENTE\"],\n\n  timestamp: fechaHoraActual\n};\n\n// Guardar el objeto globalmente\nglobal.set(\"alarmas_status_pt\", alarmas_status_pt);\n\n// También enviarlo para debug si se desea\nmsg.payload = alarmas_status_pt;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 880,
        "wires": [
            [
                "f179e511dc546d01"
            ]
        ]
    },
    {
        "id": "f179e511dc546d01",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Ver registro procesado",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 880,
        "wires": []
    },
    {
        "id": "f8bf0a47dcd1d859",
        "type": "s7 in",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "endpoint": "1696f0b4e417f1ed",
        "mode": "all",
        "variable": "INTERFACE_TLV1.STATUS_TLV1.AUTOMATICO",
        "diff": false,
        "name": "alarmasELV1",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "f4881ac7005c970e"
            ]
        ]
    },
    {
        "id": "f4881ac7005c970e",
        "type": "function",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Procesar datos ",
        "func": "const plc = msg.payload;\nconst fechaHoraActual = new Date().toISOString();\n\nconst alarmas_status_elv1 = {\n  // TC1\n  TC1_Defecto_Guardamotor_Variador: plc[\"TC1:_Defecto_de_Guardamotor/Variador\"],\n  TC1_Defecto_Tiempo_Transferencia_Entrada: plc[\"TC1:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  TC1_Defecto_Tiempo_Transferencia_Salida: plc[\"TC1:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  TC1_Defecto_Falta_presencia: plc[\"TC1:_Defecto_Falta_de_presencia\"],\n  TC1_Defecto_Presencia_inesperada: plc[\"TC1:_Defecto_Presencia_inesperada\"],\n\n  // EL1_1\n  EL1_1_Defecto_Tiempo_Transferencia_Entrada: plc[\"EL1_1:_Defecto_Tiempo_de_Transferencia_entrada\"],\n  EL1_1_Defecto_Tiempo_Maniobra: plc[\"EL1_1:_Defecto_Tiempo_de_Maniobra\"],\n  EL1_1_Defecto_Presencia_Inesperada: plc[\"EL1_1:_Defecto_de_Presencia_Inesperada\"],\n  EL1_1_Defecto_Falta_Presencia: plc[\"EL1_1:_Defecto_de_Falta_de_Presencia\"],\n  EL1_1_Defecto_Simultaneidad_Detectores: plc[\"EL1_1:_Defecto_Simultaneidad_de_Detectores\"],\n  EL1_1_Defecto_Guardamotor_Transportador_Cadenas: plc[\"EL1_1:_Defecto_de_Guardamotor/Variador_transportador_cadenas\"],\n  EL1_1_Defecto_Tiempo_Transferencia_Salida: plc[\"EL1_1:_Defecto_Tiempo_de_Transferencia_salida\"],\n\n  // EL1_2\n  EL1_2_Defecto_Sin_Referencia_Posicion: plc[\"EL1_2:_Defecto_sin_referencia_de_posicion\"],\n  EL1_2_Defecto_Tiempo_Maniobra: plc[\"EL1_2:_Defecto_Tiempo_de_Maniobra\"],\n  EL1_2_Defecto_Variador: plc[\"EL1_2:_Defecto_de_Variador\"],\n  EL1_2_Defecto_Falta_Presencia: plc[\"EL1_2:_Defecto_de_Falta_de_Presencia\"],\n  EL1_2_Defecto_Simultaneidad_Detectores: plc[\"EL1_2:_Defecto_Simultaneidad_de_Detectores\"],\n  EL1_2_Defecto_Guardamotor_Elevacion: plc[\"EL1_2:_Defecto_de_Guardamotor_elevacion\"],\n  EL1_2_Defecto_Busqueda_Posicion: plc[\"EL1_2:_Defecto_busqueda_de_posicion\"],\n  EL1_2_Defecto_Puerta_Abierta_Arriba: plc[\"EL1_2:_Defecto_puerta_abierta_arriba\"],\n\n  // EL1_3\n  EL1_3_Defecto_Puerta_Abierta_Abajo: plc[\"EL1_3:_Defecto_puerta_abierta_abajo\"],\n  EL1_3_Defecto_Tiempo_Maniobra: plc[\"EL1_3:_Defecto_Tiempo_de_Maniobra\"],\n  EL1_3_Defecto_Presencia_Inesperada: plc[\"EL1_3:_Defecto_de_Presencia_Inesperada\"],\n  EL1_3_Defecto_Falta_Presencia: plc[\"EL1_3:_Defecto_de_Falta_de_Presencia\"],\n  EL1_3_Defecto_Simultaneidad_Detectores: plc[\"EL1_3:_Defecto_Simultaneidad_de_Detectores\"],\n  EL1_3_Defecto_Exceso_Recorrido_Arriba: plc[\"EL1_3:_Defecto_exceso_de_recorrido_arriba\"],\n  EL1_3_Defecto_Exceso_Recorrido_Abajo: plc[\"EL1_3:_Defecto_exceso_de_recorrido_abajo\"],\n\n  // TC2\n  TC2_Defecto_Guardamotor_Variador: plc[\"TC2:_Defecto_de_Guardamotor/Variador\"],\n  TC2_Defecto_Tiempo_Transferencia_Entrada: plc[\"TC2:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  TC2_Defecto_Tiempo_Transferencia_Salida: plc[\"TC2:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  TC2_Defecto_Falta_presencia: plc[\"TC2:_Defecto_Falta_de_presencia\"],\n  TC2_Defecto_Presencia_inesperada: plc[\"TC2:_Defecto_Presencia_inesperada\"],\n\n  // TC3\n  TC3_Defecto_Guardamotor_Variador: plc[\"TC3:_Defecto_de_Guardamotor/Variador\"],\n  TC3_Defecto_Tiempo_Transferencia_Entrada: plc[\"TC3:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  TC3_Defecto_Tiempo_Transferencia_Salida: plc[\"TC3:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  TC3_Defecto_Falta_presencia: plc[\"TC3:_Defecto_Falta_de_presencia\"],\n  TC3_Defecto_Presencia_inesperada: plc[\"TC3:_Defecto_Presencia_inesperada\"],\n\n  // TC4\n  TC4_Defecto_Guardamotor_Variador: plc[\"TC4:_Defecto_de_Guardamotor/Variador\"],\n  TC4_Defecto_Tiempo_Transferencia_Entrada: plc[\"TC4:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  TC4_Defecto_Tiempo_Transferencia_Salida: plc[\"TC4:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  TC4_Defecto_Falta_presencia: plc[\"TC4:_Defecto_Falta_de_presencia\"],\n  TC4_Defecto_Presencia_inesperada: plc[\"TC4:_Defecto_Presencia_inesperada\"],\n\n  // TEC1\n  TEC1_Defecto_Guardamotor_Variador: plc[\"TEC1:_Defecto_de_Guardamotor/Variador\"],\n  TEC1_Defecto_Tiempo_Transferencia_Entrada: plc[\"TEC1:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  TEC1_Defecto_Tiempo_Transferencia_Salida: plc[\"TEC1:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  TEC1_Defecto_Falta_presencia: plc[\"TEC1:_Defecto_Falta_de_presencia\"],\n  TEC1_Defecto_Presencia_inesperada: plc[\"TEC1:_Defecto_Presencia_inesperada\"],\n  TEC1_Defecto_Simultaneidad_Detectores_Elevacion: plc[\"TEC1:_Defecto_Simultaneidad_de_Detectores_elevacion\"],\n  TEC1_Defecto_Tiempo_Maniobra_Elevacion: plc[\"TEC1:_Defecto_Tiempo_de_Maniobra_elevacion\"],\n\n  // TEC2\n  TEC2_Defecto_Guardamotor_Variador: plc[\"TEC2:_Defecto_de_Guardamotor/Variador\"],\n  TEC2_Defecto_Tiempo_Transferencia_Entrada: plc[\"TEC2:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  TEC2_Defecto_Tiempo_Transferencia_Salida: plc[\"TEC2:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  TEC2_Defecto_Falta_presencia: plc[\"TEC2:_Defecto_Falta_de_presencia\"],\n  TEC2_Defecto_Presencia_inesperada: plc[\"TEC2:_Defecto_Presencia_inesperada\"],\n  TEC2_Defecto_Simultaneidad_Detectores_Elevacion: plc[\"TEC2:_Defecto_Simultaneidad_de_Detectores_elevacion\"],\n  TEC2_Defecto_Tiempo_Maniobra_Elevacion: plc[\"TEC2:_Defecto_Tiempo_de_Maniobra_elevacion\"],\n\n  // EL1-ENCL\n  EL1_ENCL_Defecto_Guardamotor_Variador: plc[\"EL1-ENCL:_Defecto_de_Guardamotor/Variador\"],\n  EL1_ENCL_Defecto_Tiempo_Transferencia_Entrada: plc[\"EL1-ENCL:_Defecto_Tiempo_de_Transferencia_Entrada\"],\n  EL1_ENCL_Defecto_Tiempo_Transferencia_Salida: plc[\"EL1-ENCL:_Defecto_Tiempo_de_Transferencia_sALIDA\"],\n  EL1_ENCL_Defecto_Falta_presencia: plc[\"EL1-ENCL:_Defecto_Falta_de_presencia\"],\n  EL1_ENCL_Defecto_Sin_Posicion_Referencia: plc[\"EL1-ENCL:_Defecto_Sin_posición_de_referencia\"],\n  EL1_ENCL_Defecto_Simultaneidad_Detectores: plc[\"EL1-ENCL:_Defecto_Simultaneidad_de_Detectores\"],\n  EL1_ENCL_Defecto_Tiempo_Maniobra: plc[\"EL1-ENCL:_Defecto_Tiempo_de_Maniobra\"],\n\n  // Transfer\n  TRANSFER_CADENA_ELEVADOR_OCUPADO: plc[\"TRANSFER_CADENA_ELEVADOR_OCUPADO\"],\n\n  // Marca de tiempo\n  timestamp: fechaHoraActual\n};\n\n// Guardar como global\nglobal.set(\"alarmas_status_elv1\", alarmas_status_elv1);\n\n// Para depuración\nmsg.payload = alarmas_status_elv1;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 960,
        "wires": [
            [
                "eb73add1b4e38550"
            ]
        ]
    },
    {
        "id": "eb73add1b4e38550",
        "type": "debug",
        "z": "5f07b2ace243eb3a",
        "g": "cc14c13b78102911",
        "name": "Ver registro procesado",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 960,
        "wires": []
    },
    {
        "id": "b5eb17bd3535b8df",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "ce5170989f15f5e9"
            ]
        ]
    },
    {
        "id": "7d97f806152b90e0",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 140,
        "wires": []
    },
    {
        "id": "72dd55ea023b1f10",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE tlv1_status",
        "func": "let v = global.get(\"nuevoRegistroTLV1\");\nmsg.topic = `\nINSERT INTO tlv1_status (\n  id,\n  tlv1_modo,\n  tlv1_ocupacion,\n  tlv1_averia,\n  tlv1_coord_x_actual,\n  tlv1_coord_y_actual,\n  tlv1_coord_z_actual,\n  tlv1_matricula_actual,\n  tlv1_pasillo_actual,\n  tlv1_orden_tipo,\n  tlv1_orden_pasillo_origen,\n  tlv1_orden_coord_x_origen,\n  tlv1_orden_coord_y_origen,\n  tlv1_orden_coord_z_origen,\n  tlv1_orden_pasillo_destino,\n  tlv1_orden_coord_x_destino,\n  tlv1_orden_coord_y_destino,\n  tlv1_orden_coord_z_destino,\n  tlv1_orden_matricula,\n  tlv1_fin_orden_estado,\n  tlv1_fin_orden_resultado,\n  timestamp\n) VALUES (\n  1,\n  ${v.AUTOMATICO},\n  ${v.OCUPACION},\n  ${v.AVERIA},\n  ${v.COORD_X_ACTUAL},\n  ${v.COORD_Y_ACTUAL},\n  ${v.COORD_Z_ACTUAL},\n  ${v.MATRICULA_ACTUAL},\n  ${v.PASILLO_ACTUAL},\n  ${v.ORDEN_TIPO},\n  ${v.PASILLO_ORIGEN},\n  ${v.COORD_X_ORIGEN},\n  ${v.COORD_Y_ORIGEN},\n  ${v.COORD_Z_ORIGEN},\n  ${v.PASILLO_DESTINO},\n  ${v.COORD_X_DESTINO},\n  ${v.COORD_Y_DESTINO},\n  ${v.COORD_Z_DESTINO},\n  ${v.MATRICULA},\n  ${v.FIN_ORDEN_ESTADO},\n  ${v.FIN_ORDEN_RESULTADO},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv1_modo = VALUES(tlv1_modo),\n  tlv1_ocupacion = VALUES(tlv1_ocupacion),\n  tlv1_averia = VALUES(tlv1_averia),\n  tlv1_coord_x_actual = VALUES(tlv1_coord_x_actual),\n  tlv1_coord_y_actual = VALUES(tlv1_coord_y_actual),\n  tlv1_coord_z_actual = VALUES(tlv1_coord_z_actual),\n  tlv1_matricula_actual = VALUES(tlv1_matricula_actual),\n  tlv1_pasillo_actual = VALUES(tlv1_pasillo_actual),\n  tlv1_orden_tipo = VALUES(tlv1_orden_tipo),\n  tlv1_orden_pasillo_origen = VALUES(tlv1_orden_pasillo_origen),\n  tlv1_orden_coord_x_origen = VALUES(tlv1_orden_coord_x_origen),\n  tlv1_orden_coord_y_origen = VALUES(tlv1_orden_coord_y_origen),\n  tlv1_orden_coord_z_origen = VALUES(tlv1_orden_coord_z_origen),\n  tlv1_orden_pasillo_destino = VALUES(tlv1_orden_pasillo_destino),\n  tlv1_orden_coord_x_destino = VALUES(tlv1_orden_coord_x_destino),\n  tlv1_orden_coord_y_destino = VALUES(tlv1_orden_coord_y_destino),\n  tlv1_orden_coord_z_destino = VALUES(tlv1_orden_coord_z_destino),\n  tlv1_orden_matricula = VALUES(tlv1_orden_matricula),\n  tlv1_fin_orden_estado = VALUES(tlv1_fin_orden_estado),\n  tlv1_fin_orden_resultado = VALUES(tlv1_fin_orden_resultado),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "b5eb17bd3535b8df"
            ]
        ]
    },
    {
        "id": "7a3017963cf6a578",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "72dd55ea023b1f10"
            ]
        ]
    },
    {
        "id": "1f06b542f8958fd8",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 220,
        "wires": [
            [
                "1488fbdccba33c35"
            ]
        ]
    },
    {
        "id": "a3e384aab817ffea",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 220,
        "wires": []
    },
    {
        "id": "1624b3eeb6583473",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE tlv2_status",
        "func": "let v = global.get(\"nuevoRegistroTLV2\");\nmsg.topic = `\nINSERT INTO tlv2_status (\n  id,\n  tlv2_modo,\n  tlv2_ocupacion,\n  tlv2_averia,\n  tlv2_coord_x_actual,\n  tlv2_coord_y_actual,\n  tlv2_coord_z_actual,\n  tlv2_matricula_actual,\n  tlv2_pasillo_actual,\n  tlv2_orden_tipo,\n  tlv2_orden_pasillo_origen,\n  tlv2_orden_coord_x_origen,\n  tlv2_orden_coord_y_origen,\n  tlv2_orden_coord_z_origen,\n  tlv2_orden_pasillo_destino,\n  tlv2_orden_coord_x_destino,\n  tlv2_orden_coord_y_destino,\n  tlv2_orden_coord_z_destino,\n  tlv2_orden_matricula,\n  tlv2_fin_orden_estado,\n  tlv2_fin_orden_resultado,\n  timestamp\n) VALUES (\n  1,\n  ${v.AUTOMATICO},\n  ${v.OCUPACION},\n  ${v.AVERIA},\n  ${v.COORD_X_ACTUAL},\n  ${v.COORD_Y_ACTUAL},\n  ${v.COORD_Z_ACTUAL},\n  ${v.MATRICULA_ACTUAL},\n  ${v.PASILLO_ACTUAL},\n  ${v.ORDEN_TIPO},\n  ${v.PASILLO_ORIGEN},\n  ${v.COORD_X_ORIGEN},\n  ${v.COORD_Y_ORIGEN},\n  ${v.COORD_Z_ORIGEN},\n  ${v.PASILLO_DESTINO},\n  ${v.COORD_X_DESTINO},\n  ${v.COORD_Y_DESTINO},\n  ${v.COORD_Z_DESTINO},\n  ${v.MATRICULA},\n  ${v.FIN_ORDEN_ESTADO},\n  ${v.FIN_ORDEN_RESULTADO},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv2_modo = VALUES(tlv2_modo),\n  tlv2_ocupacion = VALUES(tlv2_ocupacion),\n  tlv2_averia = VALUES(tlv2_averia),\n  tlv2_coord_x_actual = VALUES(tlv2_coord_x_actual),\n  tlv2_coord_y_actual = VALUES(tlv2_coord_y_actual),\n  tlv2_coord_z_actual = VALUES(tlv2_coord_z_actual),\n  tlv2_matricula_actual = VALUES(tlv2_matricula_actual),\n  tlv2_pasillo_actual = VALUES(tlv2_pasillo_actual),\n  tlv2_orden_tipo = VALUES(tlv2_orden_tipo),\n  tlv2_orden_pasillo_origen = VALUES(tlv2_orden_pasillo_origen),\n  tlv2_orden_coord_x_origen = VALUES(tlv2_orden_coord_x_origen),\n  tlv2_orden_coord_y_origen = VALUES(tlv2_orden_coord_y_origen),\n  tlv2_orden_coord_z_origen = VALUES(tlv2_orden_coord_z_origen),\n  tlv2_orden_pasillo_destino = VALUES(tlv2_orden_pasillo_destino),\n  tlv2_orden_coord_x_destino = VALUES(tlv2_orden_coord_x_destino),\n  tlv2_orden_coord_y_destino = VALUES(tlv2_orden_coord_y_destino),\n  tlv2_orden_coord_z_destino = VALUES(tlv2_orden_coord_z_destino),\n  tlv2_orden_matricula = VALUES(tlv2_orden_matricula),\n  tlv2_fin_orden_estado = VALUES(tlv2_fin_orden_estado),\n  tlv2_fin_orden_resultado = VALUES(tlv2_fin_orden_resultado),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "1f06b542f8958fd8"
            ]
        ]
    },
    {
        "id": "85063ef90e9735bc",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "1624b3eeb6583473"
            ]
        ]
    },
    {
        "id": "7ec35caf4b227d55",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 280,
        "wires": [
            [
                "5a67a9d213618333"
            ]
        ]
    },
    {
        "id": "5a67a9d213618333",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 280,
        "wires": []
    },
    {
        "id": "93dac989dfbe34b3",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE pt_status",
        "func": "let v = global.get(\"nuevoRegistroPES\");\n\nmsg.topic = `\nINSERT INTO pt_status (\n  id,\n  pt_ocupacion,\n  pt_estado,\n  pt_situacion,\n  pt_posicion,\n  timestamp\n) VALUES (\n  1,\n  ${v[\"INTERFACE_DATOS_STATUS_PUENTE_OCUPACION\"]},\n  ${v[\"INTERFACE_DATOS_STATUS_PUENTE_ESTADO\"]},\n  ${v[\"INTERFACE_DATOS_STATUS_PUENTE_SITUACION\"]},\n  '${v[\"INTERFACE_DATOS_STATUS_PUENTE_POSICION\"]}',\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  pt_ocupacion = VALUES(pt_ocupacion),\n  pt_estado = VALUES(pt_estado),\n  pt_situacion = VALUES(pt_situacion),\n  pt_posicion = VALUES(pt_posicion),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            [
                "7ec35caf4b227d55"
            ]
        ]
    },
    {
        "id": "71eb02bede26b9b6",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "93dac989dfbe34b3"
            ]
        ]
    },
    {
        "id": "33430a0e8c25d239",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep1 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet pep1_rt = variablesPLC_Mesas['MesaEntrada_1_Posición_1_Recogida_Traslo'];\nlet pep1_ec = variablesPLC_Mesas['MesaEntrada_1_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep1_ec;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep1_ec\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_pep1_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 880,
        "wires": [
            [
                "9ba2c8c6feb3c062"
            ],
            [
                "49595fcccdf8c3cb"
            ]
        ]
    },
    {
        "id": "9ba2c8c6feb3c062",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 690,
        "y": 860,
        "wires": [
            [
                "51ae45dcf78530fd"
            ]
        ]
    },
    {
        "id": "76fa8235c9e29c16",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 880,
        "wires": [
            [
                "33430a0e8c25d239"
            ]
        ]
    },
    {
        "id": "51ae45dcf78530fd",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 860,
        "wires": [
            [
                "d2a3bc1e9adcf4c1"
            ]
        ]
    },
    {
        "id": "d2a3bc1e9adcf4c1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 860,
        "wires": [
            [
                "319def3bdbbeb3b2"
            ]
        ]
    },
    {
        "id": "56edd66657bfe2c9",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 920,
        "wires": []
    },
    {
        "id": "319def3bdbbeb3b2",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "56edd66657bfe2c9"
            ]
        ]
    },
    {
        "id": "6cb04c6697f41ee1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep1 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep1_rt = variablesPLC_Mesas['MesaEntrada_1_Posición_1_Recogida_Traslo'];\nlet pep1_ec = variablesPLC_Mesas['MesaEntrada_1_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep1_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep1_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep1_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1040,
        "wires": [
            [
                "eed19bdbfa23719b"
            ],
            [
                "a1806f632da1fb21"
            ]
        ]
    },
    {
        "id": "eed19bdbfa23719b",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 670,
        "y": 1020,
        "wires": [
            [
                "807c3984ba84bfb2"
            ]
        ]
    },
    {
        "id": "13121e7412a7ad3a",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1040,
        "wires": [
            [
                "6cb04c6697f41ee1"
            ]
        ]
    },
    {
        "id": "807c3984ba84bfb2",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1020,
        "wires": [
            [
                "3483676fabe39b5e"
            ]
        ]
    },
    {
        "id": "3483676fabe39b5e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1020,
        "wires": [
            [
                "b8d794850c630e63"
            ]
        ]
    },
    {
        "id": "7b82c7491fd64c6d",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b8d794850c630e63",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1010,
        "y": 1080,
        "wires": [
            [
                "7b82c7491fd64c6d"
            ]
        ]
    },
    {
        "id": "75a9dadd711e3e83",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep2 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep2_rt = variablesPLC_Mesas['MesaEntrada_2_Posición_1_Recogida_Traslo'];\nlet pep2_ec = variablesPLC_Mesas['MesaEntrada_2_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep2_ec ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep2_ec\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep2_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1200,
        "wires": [
            [
                "730ebd4f9c53f268"
            ],
            [
                "7668d5d89ca04467"
            ]
        ]
    },
    {
        "id": "730ebd4f9c53f268",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "7195ec4ab9c53ad3"
            ]
        ]
    },
    {
        "id": "fe9d7ded11d43eb9",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1200,
        "wires": [
            [
                "75a9dadd711e3e83"
            ]
        ]
    },
    {
        "id": "7195ec4ab9c53ad3",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1180,
        "wires": [
            [
                "249cfd78b6fa9bf8"
            ]
        ]
    },
    {
        "id": "249cfd78b6fa9bf8",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1180,
        "wires": [
            [
                "db1e11698cb13bfa"
            ]
        ]
    },
    {
        "id": "116d9196b05ced9f",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1240,
        "wires": []
    },
    {
        "id": "db1e11698cb13bfa",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1030,
        "y": 1240,
        "wires": [
            [
                "116d9196b05ced9f"
            ]
        ]
    },
    {
        "id": "5217a8df723460a1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep2 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep2_rt = variablesPLC_Mesas['MesaEntrada_2_Posición_1_Recogida_Traslo'];\nlet pep2_ec = variablesPLC_Mesas['MesaEntrada_2_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep2_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep2_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep2_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1360,
        "wires": [
            [
                "7e1cf608e468634f"
            ],
            [
                "d5484cce7d5eea83"
            ]
        ]
    },
    {
        "id": "7e1cf608e468634f",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 670,
        "y": 1340,
        "wires": [
            [
                "7a13694874eab920"
            ]
        ]
    },
    {
        "id": "745e0a1c166d5f42",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "5217a8df723460a1"
            ]
        ]
    },
    {
        "id": "7a13694874eab920",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1340,
        "wires": [
            [
                "f4af8a674ca45167"
            ]
        ]
    },
    {
        "id": "f4af8a674ca45167",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1340,
        "wires": [
            [
                "2231b3db7a4e54cc"
            ]
        ]
    },
    {
        "id": "b66ca6a41fba60ab",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1400,
        "wires": []
    },
    {
        "id": "2231b3db7a4e54cc",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1050,
        "y": 1400,
        "wires": [
            [
                "b66ca6a41fba60ab"
            ]
        ]
    },
    {
        "id": "49595fcccdf8c3cb",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 920,
        "wires": [
            [
                "319def3bdbbeb3b2"
            ]
        ]
    },
    {
        "id": "a1806f632da1fb21",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "b8d794850c630e63"
            ]
        ]
    },
    {
        "id": "7668d5d89ca04467",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1240,
        "wires": [
            [
                "db1e11698cb13bfa"
            ]
        ]
    },
    {
        "id": "d5484cce7d5eea83",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1400,
        "wires": [
            [
                "2231b3db7a4e54cc"
            ]
        ]
    },
    {
        "id": "bf6865da1737bd86",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep3 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet pep3_rt = variablesPLC_Mesas['MesaEntrada_3_Posición_1_Recogida_Traslo'];\nlet pep3_ec = variablesPLC_Mesas['MesaEntrada_3_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep3_ec;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep3_ec\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_pep3_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1500,
        "wires": [
            [
                "e83f687f3832f5f8"
            ],
            [
                "ea7c897752a26362"
            ]
        ]
    },
    {
        "id": "e83f687f3832f5f8",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 650,
        "y": 1480,
        "wires": [
            [
                "baa62faf60966648"
            ]
        ]
    },
    {
        "id": "fde998a4810f695b",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1500,
        "wires": [
            [
                "bf6865da1737bd86"
            ]
        ]
    },
    {
        "id": "baa62faf60966648",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "080ecf9c865e1e81"
            ]
        ]
    },
    {
        "id": "080ecf9c865e1e81",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1480,
        "wires": [
            [
                "99c438b2a14039e8"
            ]
        ]
    },
    {
        "id": "733750c599e2cbc4",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1540,
        "wires": []
    },
    {
        "id": "99c438b2a14039e8",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 970,
        "y": 1540,
        "wires": [
            [
                "733750c599e2cbc4"
            ]
        ]
    },
    {
        "id": "aea20c5b3cb07fe6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep3 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep3_rt = variablesPLC_Mesas['MesaEntrada_3_Posición_1_Recogida_Traslo'];\nlet pep3_ec = variablesPLC_Mesas['MesaEntrada_3_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep3_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep3_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep3_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1660,
        "wires": [
            [
                "422a559bb8443735"
            ],
            [
                "267446bbbef92162"
            ]
        ]
    },
    {
        "id": "422a559bb8443735",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 1640,
        "wires": [
            [
                "91dd1a949bfd3e82"
            ]
        ]
    },
    {
        "id": "e3133cca5399fe07",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1660,
        "wires": [
            [
                "aea20c5b3cb07fe6"
            ]
        ]
    },
    {
        "id": "91dd1a949bfd3e82",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1640,
        "wires": [
            [
                "938f8846972722ed"
            ]
        ]
    },
    {
        "id": "938f8846972722ed",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1640,
        "wires": [
            [
                "19659be69e5e8be9"
            ]
        ]
    },
    {
        "id": "276b50eb2c87e3a4",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1700,
        "wires": []
    },
    {
        "id": "19659be69e5e8be9",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 970,
        "y": 1700,
        "wires": [
            [
                "276b50eb2c87e3a4"
            ]
        ]
    },
    {
        "id": "511c4c6cd78414a1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep4 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep4_rt = variablesPLC_Mesas['MesaEntrada_4_Posición_1_Recogida_Traslo'];\nlet pep4_ec = variablesPLC_Mesas['MesaEntrada_4_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep4_ec ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep4_ec\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep4_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1820,
        "wires": [
            [
                "fbb4fe37ebea38f4"
            ],
            [
                "c0a9e131595ae259"
            ]
        ]
    },
    {
        "id": "fbb4fe37ebea38f4",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 1800,
        "wires": [
            [
                "ed566fa463339029"
            ]
        ]
    },
    {
        "id": "569ecaf16ad90c33",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1820,
        "wires": [
            [
                "511c4c6cd78414a1"
            ]
        ]
    },
    {
        "id": "ed566fa463339029",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1800,
        "wires": [
            [
                "03f33c94d2c0b4c6"
            ]
        ]
    },
    {
        "id": "03f33c94d2c0b4c6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1800,
        "wires": [
            [
                "42df22b85968e370"
            ]
        ]
    },
    {
        "id": "38c87d4b3d4dce09",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1860,
        "wires": []
    },
    {
        "id": "42df22b85968e370",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 990,
        "y": 1860,
        "wires": [
            [
                "38c87d4b3d4dce09"
            ]
        ]
    },
    {
        "id": "640a6eb19cbeee57",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep4 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep4_rt = variablesPLC_Mesas['MesaEntrada_4_Posición_1_Recogida_Traslo'];\nlet pep4_ec = variablesPLC_Mesas['MesaEntrada_4_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep4_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep4_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep4_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1980,
        "wires": [
            [
                "cfe08f0d262a44d6"
            ],
            [
                "c2a9f2bf44a543c6"
            ]
        ]
    },
    {
        "id": "cfe08f0d262a44d6",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 1960,
        "wires": [
            [
                "8456e473e894afb7"
            ]
        ]
    },
    {
        "id": "bc5f156f987ebdb6",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1980,
        "wires": [
            [
                "640a6eb19cbeee57"
            ]
        ]
    },
    {
        "id": "8456e473e894afb7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1960,
        "wires": [
            [
                "2d0e6870cf0c40c5"
            ]
        ]
    },
    {
        "id": "2d0e6870cf0c40c5",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1960,
        "wires": [
            [
                "533cadf49f8e74f5"
            ]
        ]
    },
    {
        "id": "498299f60f731713",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2020,
        "wires": []
    },
    {
        "id": "533cadf49f8e74f5",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1010,
        "y": 2020,
        "wires": [
            [
                "498299f60f731713"
            ]
        ]
    },
    {
        "id": "ea7c897752a26362",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1540,
        "wires": [
            [
                "99c438b2a14039e8"
            ]
        ]
    },
    {
        "id": "267446bbbef92162",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1700,
        "wires": [
            [
                "19659be69e5e8be9"
            ]
        ]
    },
    {
        "id": "c0a9e131595ae259",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1860,
        "wires": [
            [
                "42df22b85968e370"
            ]
        ]
    },
    {
        "id": "c2a9f2bf44a543c6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2020,
        "wires": [
            [
                "533cadf49f8e74f5"
            ]
        ]
    },
    {
        "id": "c91bcc1bf08352d5",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep5 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet pep5_rt = variablesPLC_Mesas['MesaEntrada_5_Posición_1_Recogida_Traslo'];\nlet pep5_ec = variablesPLC_Mesas['MesaEntrada_5_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep5_ec;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep5_ec\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_pep5_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 880,
        "wires": [
            [
                "2ffed0fec2a108d5"
            ],
            [
                "037ff8288b3bb30a"
            ]
        ]
    },
    {
        "id": "2ffed0fec2a108d5",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2050,
        "y": 860,
        "wires": [
            [
                "cfc227c753e487a3"
            ]
        ]
    },
    {
        "id": "6a30890407f19f27",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 880,
        "wires": [
            [
                "c91bcc1bf08352d5"
            ]
        ]
    },
    {
        "id": "cfc227c753e487a3",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 860,
        "wires": [
            [
                "e00fe6fe3cc98586"
            ]
        ]
    },
    {
        "id": "e00fe6fe3cc98586",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 860,
        "wires": [
            [
                "3623ba1f82ac86d2"
            ]
        ]
    },
    {
        "id": "2c944e15bd6926a0",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 920,
        "wires": []
    },
    {
        "id": "3623ba1f82ac86d2",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2370,
        "y": 920,
        "wires": [
            [
                "2c944e15bd6926a0"
            ]
        ]
    },
    {
        "id": "79a0d3585258f820",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep5 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep5_rt = variablesPLC_Mesas['MesaEntrada_5_Posición_1_Recogida_Traslo'];\nlet pep5_ec = variablesPLC_Mesas['MesaEntrada_5_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep5_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep5_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep5_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1040,
        "wires": [
            [
                "52b00ececad15a34"
            ],
            [
                "b09a367d5439523c"
            ]
        ]
    },
    {
        "id": "52b00ececad15a34",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2030,
        "y": 1020,
        "wires": [
            [
                "173e1b20c0e894c8"
            ]
        ]
    },
    {
        "id": "6ee2e860f52bad87",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1550,
        "y": 1040,
        "wires": [
            [
                "79a0d3585258f820"
            ]
        ]
    },
    {
        "id": "173e1b20c0e894c8",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1020,
        "wires": [
            [
                "b8a0d26e84b2fc23"
            ]
        ]
    },
    {
        "id": "b8a0d26e84b2fc23",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1020,
        "wires": [
            [
                "5fc9ae5fa9503e40"
            ]
        ]
    },
    {
        "id": "b46598b9bead61b0",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5fc9ae5fa9503e40",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2370,
        "y": 1080,
        "wires": [
            [
                "b46598b9bead61b0"
            ]
        ]
    },
    {
        "id": "3235ca24c98ce2e6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep6 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep6_rt = variablesPLC_Mesas['MesaEntrada_6_Posición_1_Recogida_Traslo'];\nlet pep6_ec = variablesPLC_Mesas['MesaEntrada_6_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep6_ec ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep6_ec\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep6_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1200,
        "wires": [
            [
                "2ff1d883ad3bf8db"
            ],
            [
                "1b43ea5a5b9da319"
            ]
        ]
    },
    {
        "id": "2ff1d883ad3bf8db",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2030,
        "y": 1180,
        "wires": [
            [
                "5438e7a34cb01bd0"
            ]
        ]
    },
    {
        "id": "8b8da5520207c58c",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1550,
        "y": 1200,
        "wires": [
            [
                "3235ca24c98ce2e6"
            ]
        ]
    },
    {
        "id": "5438e7a34cb01bd0",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1180,
        "wires": [
            [
                "f028cf66e4dab436"
            ]
        ]
    },
    {
        "id": "f028cf66e4dab436",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1180,
        "wires": [
            [
                "78bd298e2e32d760"
            ]
        ]
    },
    {
        "id": "ef2cca30668055f9",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 47",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 1240,
        "wires": []
    },
    {
        "id": "78bd298e2e32d760",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2390,
        "y": 1240,
        "wires": [
            [
                "ef2cca30668055f9"
            ]
        ]
    },
    {
        "id": "dcce70bf91e1dae5",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep6 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep6_rt = variablesPLC_Mesas['MesaEntrada_6_Posición_1_Recogida_Traslo'];\nlet pep6_ec = variablesPLC_Mesas['MesaEntrada_6_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep6_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep6_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep6_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1360,
        "wires": [
            [
                "e0c9503bf7bbe32f"
            ],
            [
                "500ed92f3c64c528"
            ]
        ]
    },
    {
        "id": "e0c9503bf7bbe32f",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2030,
        "y": 1340,
        "wires": [
            [
                "9d2f758c46c45416"
            ]
        ]
    },
    {
        "id": "143d41367c744516",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1530,
        "y": 1360,
        "wires": [
            [
                "dcce70bf91e1dae5"
            ]
        ]
    },
    {
        "id": "9d2f758c46c45416",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1340,
        "wires": [
            [
                "fac72d80df76971d"
            ]
        ]
    },
    {
        "id": "fac72d80df76971d",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1340,
        "wires": [
            [
                "89614bbe3575866f"
            ]
        ]
    },
    {
        "id": "f916c14945c78e76",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 1400,
        "wires": []
    },
    {
        "id": "89614bbe3575866f",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2410,
        "y": 1400,
        "wires": [
            [
                "f916c14945c78e76"
            ]
        ]
    },
    {
        "id": "037ff8288b3bb30a",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 920,
        "wires": [
            [
                "3623ba1f82ac86d2"
            ]
        ]
    },
    {
        "id": "b09a367d5439523c",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 1080,
        "wires": [
            [
                "5fc9ae5fa9503e40"
            ]
        ]
    },
    {
        "id": "1b43ea5a5b9da319",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1240,
        "wires": [
            [
                "78bd298e2e32d760"
            ]
        ]
    },
    {
        "id": "500ed92f3c64c528",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1400,
        "wires": [
            [
                "89614bbe3575866f"
            ]
        ]
    },
    {
        "id": "6b93225b4e7b1e95",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep7 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet pep7_rt = variablesPLC_Mesas['MesaEntrada_7_Posición_1_Recogida_Traslo'];\nlet pep7_ec = variablesPLC_Mesas['MesaEntrada_7_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep7_ec;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep7_ec\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_pep7_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1500,
        "wires": [
            [
                "59688df17eb3b72e"
            ],
            [
                "0984c7d740186c01"
            ]
        ]
    },
    {
        "id": "59688df17eb3b72e",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2010,
        "y": 1480,
        "wires": [
            [
                "874cde744baa8a54"
            ]
        ]
    },
    {
        "id": "88d1ea1705540711",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1530,
        "y": 1500,
        "wires": [
            [
                "6b93225b4e7b1e95"
            ]
        ]
    },
    {
        "id": "874cde744baa8a54",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1480,
        "wires": [
            [
                "6ef0a93df36d1c52"
            ]
        ]
    },
    {
        "id": "6ef0a93df36d1c52",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 1480,
        "wires": [
            [
                "2ae6bc054314ec48"
            ]
        ]
    },
    {
        "id": "1b1d84b33a2ccb0e",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 1540,
        "wires": []
    },
    {
        "id": "2ae6bc054314ec48",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2330,
        "y": 1540,
        "wires": [
            [
                "1b1d84b33a2ccb0e"
            ]
        ]
    },
    {
        "id": "ea6ca40775cd6845",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep7 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep7_rt = variablesPLC_Mesas['MesaEntrada_7_Posición_1_Recogida_Traslo'];\nlet pep7_ec = variablesPLC_Mesas['MesaEntrada_7_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep7_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep7_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep7_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1660,
        "wires": [
            [
                "83f66fcac88a5c18"
            ],
            [
                "dac77bb9157fd379"
            ]
        ]
    },
    {
        "id": "83f66fcac88a5c18",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 1640,
        "wires": [
            [
                "a7fa47a12c0cc787"
            ]
        ]
    },
    {
        "id": "458634e0e2777a4f",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 1660,
        "wires": [
            [
                "ea6ca40775cd6845"
            ]
        ]
    },
    {
        "id": "a7fa47a12c0cc787",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1640,
        "wires": [
            [
                "473b969f4a9b0c1a"
            ]
        ]
    },
    {
        "id": "473b969f4a9b0c1a",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 1640,
        "wires": [
            [
                "74e08b23fed7759e"
            ]
        ]
    },
    {
        "id": "46e17882578fb215",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 1700,
        "wires": []
    },
    {
        "id": "74e08b23fed7759e",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2330,
        "y": 1700,
        "wires": [
            [
                "46e17882578fb215"
            ]
        ]
    },
    {
        "id": "24b6aa0c91725a56",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep8 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep8_rt = variablesPLC_Mesas['MesaEntrada_8_Posición_1_Recogida_Traslo'];\nlet pep8_ec =variablesPLC_Mesas['MesaEntrada_8_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep8_ec ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep8_ec\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep8_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1820,
        "wires": [
            [
                "66cf4547d692d113"
            ],
            [
                "684c9a2db4afdb3d"
            ]
        ]
    },
    {
        "id": "66cf4547d692d113",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 1800,
        "wires": [
            [
                "63124cebabe15baf"
            ]
        ]
    },
    {
        "id": "1004cf8f1e4af7c9",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 1820,
        "wires": [
            [
                "24b6aa0c91725a56"
            ]
        ]
    },
    {
        "id": "63124cebabe15baf",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1800,
        "wires": [
            [
                "f8736f4533d94f7d"
            ]
        ]
    },
    {
        "id": "f8736f4533d94f7d",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 1800,
        "wires": [
            [
                "fb2a3d346a797da2"
            ]
        ]
    },
    {
        "id": "981190096af30f79",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 1860,
        "wires": []
    },
    {
        "id": "fb2a3d346a797da2",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2350,
        "y": 1860,
        "wires": [
            [
                "981190096af30f79"
            ]
        ]
    },
    {
        "id": "7f15b5455de2cbea",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep8 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep8_rt = variablesPLC_Mesas['MesaEntrada_8_Posición_1_Recogida_Traslo'];\nlet pep8_ec = variablesPLC_Mesas['MesaEntrada_8_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep8_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep8_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep8_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 1980,
        "wires": [
            [
                "2b1b9c1484b0b82a"
            ],
            [
                "7bccfc4009b64a8c"
            ]
        ]
    },
    {
        "id": "2b1b9c1484b0b82a",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 1960,
        "wires": [
            [
                "c9d1c03ddf488e8e"
            ]
        ]
    },
    {
        "id": "78fcbcc01ccf802d",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1490,
        "y": 1980,
        "wires": [
            [
                "7f15b5455de2cbea"
            ]
        ]
    },
    {
        "id": "c9d1c03ddf488e8e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1960,
        "wires": [
            [
                "ab76a758a0ba02fa"
            ]
        ]
    },
    {
        "id": "ab76a758a0ba02fa",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 1960,
        "wires": [
            [
                "2fe12abfd471cecd"
            ]
        ]
    },
    {
        "id": "1b1b67ce08c5a4f9",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 2020,
        "wires": []
    },
    {
        "id": "2fe12abfd471cecd",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2370,
        "y": 2020,
        "wires": [
            [
                "1b1b67ce08c5a4f9"
            ]
        ]
    },
    {
        "id": "0984c7d740186c01",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1540,
        "wires": [
            [
                "2ae6bc054314ec48"
            ]
        ]
    },
    {
        "id": "dac77bb9157fd379",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1700,
        "wires": [
            [
                "74e08b23fed7759e"
            ]
        ]
    },
    {
        "id": "684c9a2db4afdb3d",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1860,
        "wires": [
            [
                "fb2a3d346a797da2"
            ]
        ]
    },
    {
        "id": "7bccfc4009b64a8c",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 2020,
        "wires": [
            [
                "2fe12abfd471cecd"
            ]
        ]
    },
    {
        "id": "f6f379aac7c9bc17",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp1 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp1_et = variablesPLC_Mesas['MesaSalida_1_Posición_2_Entrega_Traslo'];\nlet psp1_rc = variablesPLC_Mesas['MesaSalida_1_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp1_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp1_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp1_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2160,
        "wires": [
            [
                "4345ee3fb748500c"
            ],
            [
                "f53b7c40b8248566"
            ]
        ]
    },
    {
        "id": "4345ee3fb748500c",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 2140,
        "wires": [
            [
                "bc55bcb8807932b7"
            ]
        ]
    },
    {
        "id": "a507b3bf3bb10286",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2160,
        "wires": [
            [
                "f6f379aac7c9bc17"
            ]
        ]
    },
    {
        "id": "bc55bcb8807932b7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2140,
        "wires": [
            [
                "6cc2593d35856247"
            ]
        ]
    },
    {
        "id": "6cc2593d35856247",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2140,
        "wires": [
            [
                "77544669e7234ab4"
            ]
        ]
    },
    {
        "id": "8390984ec7a55e31",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2200,
        "wires": []
    },
    {
        "id": "77544669e7234ab4",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 2200,
        "wires": [
            [
                "8390984ec7a55e31"
            ]
        ]
    },
    {
        "id": "f53b7c40b8248566",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2200,
        "wires": [
            [
                "77544669e7234ab4"
            ]
        ]
    },
    {
        "id": "974ee5fa6b099afb",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp1 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp1_et = variablesPLC_Mesas['MesaSalida_1_Posición_2_Entrega_Traslo'];\nlet psp1_rc = variablesPLC_Mesas['MesaSalida_1_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp1_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp1_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp1_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2300,
        "wires": [
            [
                "06124886e3042677"
            ],
            [
                "a36c87a54022b749"
            ]
        ]
    },
    {
        "id": "06124886e3042677",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 2280,
        "wires": [
            [
                "a9cb37be85dac098"
            ]
        ]
    },
    {
        "id": "bc3f2337876e25b9",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2300,
        "wires": [
            [
                "974ee5fa6b099afb"
            ]
        ]
    },
    {
        "id": "a9cb37be85dac098",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2280,
        "wires": [
            [
                "c9dad9776ffec690"
            ]
        ]
    },
    {
        "id": "c9dad9776ffec690",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2280,
        "wires": [
            [
                "8fb4f2d29a9bea7d"
            ]
        ]
    },
    {
        "id": "ca50f9d8aacb28d6",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2340,
        "wires": []
    },
    {
        "id": "8fb4f2d29a9bea7d",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 2340,
        "wires": [
            [
                "ca50f9d8aacb28d6"
            ]
        ]
    },
    {
        "id": "a36c87a54022b749",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2340,
        "wires": [
            [
                "8fb4f2d29a9bea7d"
            ]
        ]
    },
    {
        "id": "0b350a4f6541b61e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp2 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp2_et = variablesPLC_Mesas['MesaSalida_2_Posición_2_Entrega_Traslo'];\nlet psp2_rc = variablesPLC_Mesas['MesaSalida_2_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp2_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp2_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp2_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2440,
        "wires": [
            [
                "e4b62a040ff460f1"
            ],
            [
                "4899ace06811ddf4"
            ]
        ]
    },
    {
        "id": "e4b62a040ff460f1",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 2420,
        "wires": [
            [
                "bde2840ea4d2781e"
            ]
        ]
    },
    {
        "id": "c21947b9cc0eedfe",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2440,
        "wires": [
            [
                "0b350a4f6541b61e"
            ]
        ]
    },
    {
        "id": "bde2840ea4d2781e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2420,
        "wires": [
            [
                "56d3bb45531369d6"
            ]
        ]
    },
    {
        "id": "56d3bb45531369d6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2420,
        "wires": [
            [
                "91ebbe49dfd48280"
            ]
        ]
    },
    {
        "id": "1aa4925f989db694",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 59",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2480,
        "wires": []
    },
    {
        "id": "91ebbe49dfd48280",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 2480,
        "wires": [
            [
                "1aa4925f989db694"
            ]
        ]
    },
    {
        "id": "4899ace06811ddf4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2480,
        "wires": [
            [
                "91ebbe49dfd48280"
            ]
        ]
    },
    {
        "id": "0328a803523367be",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp2 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp2_et = variablesPLC_Mesas['MesaSalida_2_Posición_2_Entrega_Traslo'];\nlet psp2_rc = variablesPLC_Mesas['MesaSalida_2_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp2_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp2_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp2_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2580,
        "wires": [
            [
                "3a5f76f4bf6ac7e4"
            ],
            [
                "e8b2832f25368d90"
            ]
        ]
    },
    {
        "id": "3a5f76f4bf6ac7e4",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 2560,
        "wires": [
            [
                "76c0463b7286bcc1"
            ]
        ]
    },
    {
        "id": "9096d9b4b66604e1",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2580,
        "wires": [
            [
                "0328a803523367be"
            ]
        ]
    },
    {
        "id": "76c0463b7286bcc1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2560,
        "wires": [
            [
                "733951f420df1dfe"
            ]
        ]
    },
    {
        "id": "733951f420df1dfe",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2560,
        "wires": [
            [
                "05cb96be7b2d186c"
            ]
        ]
    },
    {
        "id": "a02466c1bd2db78b",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 60",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2620,
        "wires": []
    },
    {
        "id": "05cb96be7b2d186c",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 2620,
        "wires": [
            [
                "a02466c1bd2db78b"
            ]
        ]
    },
    {
        "id": "e8b2832f25368d90",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2620,
        "wires": [
            [
                "05cb96be7b2d186c"
            ]
        ]
    },
    {
        "id": "25c7d6ff0a889584",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp3 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp3_et = variablesPLC_Mesas['MesaSalida_3_Posición_2_Entrega_Traslo'];\nlet psp3_rc = variablesPLC_Mesas['MesaSalida_3_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp3_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp3_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp3_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2740,
        "wires": [
            [
                "cbef920607196cc0"
            ],
            [
                "b9062397dc7fedf1"
            ]
        ]
    },
    {
        "id": "cbef920607196cc0",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 2720,
        "wires": [
            [
                "65f2f52200218aca"
            ]
        ]
    },
    {
        "id": "f276fcd0e9738b0e",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2740,
        "wires": [
            [
                "25c7d6ff0a889584"
            ]
        ]
    },
    {
        "id": "65f2f52200218aca",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2720,
        "wires": [
            [
                "733c2a3128603ed2"
            ]
        ]
    },
    {
        "id": "733c2a3128603ed2",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2720,
        "wires": [
            [
                "5eb31dbe98cc5e61"
            ]
        ]
    },
    {
        "id": "2ac8bf5cd2059583",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 61",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2780,
        "wires": []
    },
    {
        "id": "5eb31dbe98cc5e61",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 2780,
        "wires": [
            [
                "2ac8bf5cd2059583"
            ]
        ]
    },
    {
        "id": "b9062397dc7fedf1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2780,
        "wires": [
            [
                "5eb31dbe98cc5e61"
            ]
        ]
    },
    {
        "id": "3139530ec9819e92",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp3 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp3_et = variablesPLC_Mesas['MesaSalida_3_Posición_2_Entrega_Traslo'];\nlet psp3_rc = variablesPLC_Mesas['MesaSalida_3_Posición_3_Recogida_Carro'];\n\nconst idPLC = psp3_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp3_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp3_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2880,
        "wires": [
            [
                "f09342e28353195e"
            ],
            [
                "e526a928381633ed"
            ]
        ]
    },
    {
        "id": "f09342e28353195e",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 2860,
        "wires": [
            [
                "28df5251efc7510c"
            ]
        ]
    },
    {
        "id": "035086ac87583cf5",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2880,
        "wires": [
            [
                "3139530ec9819e92"
            ]
        ]
    },
    {
        "id": "28df5251efc7510c",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2860,
        "wires": [
            [
                "655c6399d38d8130"
            ]
        ]
    },
    {
        "id": "655c6399d38d8130",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2860,
        "wires": [
            [
                "6e7acf1039dce4cd"
            ]
        ]
    },
    {
        "id": "4f3d63a78a0dd3f8",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 62",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 2920,
        "wires": []
    },
    {
        "id": "6e7acf1039dce4cd",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 2920,
        "wires": [
            [
                "4f3d63a78a0dd3f8"
            ]
        ]
    },
    {
        "id": "e526a928381633ed",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2920,
        "wires": [
            [
                "6e7acf1039dce4cd"
            ]
        ]
    },
    {
        "id": "366d92611659eaed",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp4 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp4_et = variablesPLC_Mesas['MesaSalida_4_Posición_2_Entrega_Traslo'];\nlet psp4_rc = variablesPLC_Mesas['MesaSalida_4_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp4_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp4_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp4_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 3020,
        "wires": [
            [
                "d4a4b3e841bad384"
            ],
            [
                "ddaef77d2c1f284a"
            ]
        ]
    },
    {
        "id": "d4a4b3e841bad384",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 3000,
        "wires": [
            [
                "a61da58208c124ac"
            ]
        ]
    },
    {
        "id": "d69d5a9577722424",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3020,
        "wires": [
            [
                "366d92611659eaed"
            ]
        ]
    },
    {
        "id": "a61da58208c124ac",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3000,
        "wires": [
            [
                "51df737295a503a5"
            ]
        ]
    },
    {
        "id": "51df737295a503a5",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 3000,
        "wires": [
            [
                "746961b27957f9ae"
            ]
        ]
    },
    {
        "id": "843caecdbf120558",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 63",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 3060,
        "wires": []
    },
    {
        "id": "746961b27957f9ae",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 3060,
        "wires": [
            [
                "843caecdbf120558"
            ]
        ]
    },
    {
        "id": "ddaef77d2c1f284a",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3060,
        "wires": [
            [
                "746961b27957f9ae"
            ]
        ]
    },
    {
        "id": "2ad4d2e190f83e64",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp4 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp4_et =variablesPLC_Mesas['MesaSalida_4_Posición_2_Entrega_Traslo'];\nlet psp4_rc = variablesPLC_Mesas['MesaSalida_4_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp4_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp4_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp4_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 3160,
        "wires": [
            [
                "dd716f791f4a2283"
            ],
            [
                "199d032d0b2accbe"
            ]
        ]
    },
    {
        "id": "dd716f791f4a2283",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 3140,
        "wires": [
            [
                "146ffea65c49b46a"
            ]
        ]
    },
    {
        "id": "a9042a28ef21050c",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3160,
        "wires": [
            [
                "2ad4d2e190f83e64"
            ]
        ]
    },
    {
        "id": "146ffea65c49b46a",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3140,
        "wires": [
            [
                "3197bb306b0f3948"
            ]
        ]
    },
    {
        "id": "3197bb306b0f3948",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 3140,
        "wires": [
            [
                "8b08508838f10029"
            ]
        ]
    },
    {
        "id": "b8ffd37b803f8e84",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 64",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 3200,
        "wires": []
    },
    {
        "id": "8b08508838f10029",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 950,
        "y": 3200,
        "wires": [
            [
                "b8ffd37b803f8e84"
            ]
        ]
    },
    {
        "id": "199d032d0b2accbe",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3200,
        "wires": [
            [
                "8b08508838f10029"
            ]
        ]
    },
    {
        "id": "a4b0751acb483446",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp5 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp5_et = variablesPLC_Mesas['MesaSalida_5_Posición_2_Entrega_Traslo'];\nlet psp5_rc = variablesPLC_Mesas['MesaSalida_5_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp5_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp5_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp5_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2160,
        "wires": [
            [
                "0a98188b96017757"
            ],
            [
                "365c2cfbb5a1ee6c"
            ]
        ]
    },
    {
        "id": "0a98188b96017757",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 2140,
        "wires": [
            [
                "c12834d7668b7311"
            ]
        ]
    },
    {
        "id": "e71759fe09bc54e9",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 2160,
        "wires": [
            [
                "a4b0751acb483446"
            ]
        ]
    },
    {
        "id": "c12834d7668b7311",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2140,
        "wires": [
            [
                "e41f7c69549133ad"
            ]
        ]
    },
    {
        "id": "e41f7c69549133ad",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2140,
        "wires": [
            [
                "3ccc843455d40e31"
            ]
        ]
    },
    {
        "id": "5af37f9c9c88e0c6",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 65",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2200,
        "wires": []
    },
    {
        "id": "3ccc843455d40e31",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 2200,
        "wires": [
            [
                "5af37f9c9c88e0c6"
            ]
        ]
    },
    {
        "id": "365c2cfbb5a1ee6c",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2200,
        "wires": [
            [
                "3ccc843455d40e31"
            ]
        ]
    },
    {
        "id": "b2d4f90aa036302b",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp5 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp5_et = variablesPLC_Mesas['MesaSalida_5_Posición_2_Entrega_Traslo'];\nlet psp5_rc = variablesPLC_Mesas['MesaSalida_5_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp5_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp5_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp5_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2300,
        "wires": [
            [
                "61e708828fbf58fc"
            ],
            [
                "adcba62edf833e2f"
            ]
        ]
    },
    {
        "id": "61e708828fbf58fc",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 2280,
        "wires": [
            [
                "bd7269de3ebe59ba"
            ]
        ]
    },
    {
        "id": "494d69dcbadd46ea",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 2300,
        "wires": [
            [
                "b2d4f90aa036302b"
            ]
        ]
    },
    {
        "id": "bd7269de3ebe59ba",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2280,
        "wires": [
            [
                "224a18c8c5c62999"
            ]
        ]
    },
    {
        "id": "224a18c8c5c62999",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2280,
        "wires": [
            [
                "af63f146242163a3"
            ]
        ]
    },
    {
        "id": "4274a91e02338f31",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2340,
        "wires": []
    },
    {
        "id": "af63f146242163a3",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 2340,
        "wires": [
            [
                "4274a91e02338f31"
            ]
        ]
    },
    {
        "id": "adcba62edf833e2f",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2340,
        "wires": [
            [
                "af63f146242163a3"
            ]
        ]
    },
    {
        "id": "328d93d1e6c54db6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp6 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp6_et = variablesPLC_Mesas['MesaSalida_6_Posición_2_Entrega_Traslo'];\nlet psp6_rc = variablesPLC_Mesas['MesaSalida_6_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp6_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp6_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp6_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2440,
        "wires": [
            [
                "218d8f19249c1e25"
            ],
            [
                "f1942f3693576d93"
            ]
        ]
    },
    {
        "id": "218d8f19249c1e25",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 2420,
        "wires": [
            [
                "ae571f40bc2284c7"
            ]
        ]
    },
    {
        "id": "607cbafb5d7b9102",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 2440,
        "wires": [
            [
                "328d93d1e6c54db6"
            ]
        ]
    },
    {
        "id": "ae571f40bc2284c7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2420,
        "wires": [
            [
                "04b6cd1620f3b0a2"
            ]
        ]
    },
    {
        "id": "04b6cd1620f3b0a2",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2420,
        "wires": [
            [
                "23d3d65b2d4262fc"
            ]
        ]
    },
    {
        "id": "1bf8d5afe6f90f59",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 67",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2480,
        "wires": []
    },
    {
        "id": "23d3d65b2d4262fc",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 2480,
        "wires": [
            [
                "1bf8d5afe6f90f59"
            ]
        ]
    },
    {
        "id": "f1942f3693576d93",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2480,
        "wires": [
            [
                "23d3d65b2d4262fc"
            ]
        ]
    },
    {
        "id": "70f179cbd32aef1e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp6 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp6_et = variablesPLC_Mesas['MesaSalida_6_Posición_2_Entrega_Traslo'];\nlet psp6_rc = variablesPLC_Mesas['MesaSalida_6_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp6_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp6_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp6_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2580,
        "wires": [
            [
                "96f3b639ecfd84cb"
            ],
            [
                "2821ae869587123d"
            ]
        ]
    },
    {
        "id": "96f3b639ecfd84cb",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 2560,
        "wires": [
            [
                "2218d9fdae6937d2"
            ]
        ]
    },
    {
        "id": "e9149c53e2a7d81f",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 2580,
        "wires": [
            [
                "70f179cbd32aef1e"
            ]
        ]
    },
    {
        "id": "2218d9fdae6937d2",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2560,
        "wires": [
            [
                "ef06291cdba5101c"
            ]
        ]
    },
    {
        "id": "ef06291cdba5101c",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2560,
        "wires": [
            [
                "82327bbc119c537f"
            ]
        ]
    },
    {
        "id": "ad5aec601abf24ef",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2620,
        "wires": []
    },
    {
        "id": "82327bbc119c537f",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 2620,
        "wires": [
            [
                "ad5aec601abf24ef"
            ]
        ]
    },
    {
        "id": "2821ae869587123d",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2620,
        "wires": [
            [
                "82327bbc119c537f"
            ]
        ]
    },
    {
        "id": "b6a164a4dc8556b9",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp7 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp7_et = variablesPLC_Mesas['MesaSalida_7_Posición_2_Entrega_Traslo'];\nlet psp7_rc = variablesPLC_Mesas['MesaSalida_7_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp7_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp7_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp7_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2740,
        "wires": [
            [
                "b2d6c7a7d7905923"
            ],
            [
                "364f98118dbba380"
            ]
        ]
    },
    {
        "id": "b2d6c7a7d7905923",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 2720,
        "wires": [
            [
                "ba915ca6c8d23e20"
            ]
        ]
    },
    {
        "id": "7850be1ea1b1fa15",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 2740,
        "wires": [
            [
                "b6a164a4dc8556b9"
            ]
        ]
    },
    {
        "id": "ba915ca6c8d23e20",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2720,
        "wires": [
            [
                "47f02dec0db62fdb"
            ]
        ]
    },
    {
        "id": "47f02dec0db62fdb",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2720,
        "wires": [
            [
                "65008bc101a55cc7"
            ]
        ]
    },
    {
        "id": "abc42a645fb9804a",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2780,
        "wires": []
    },
    {
        "id": "65008bc101a55cc7",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 2780,
        "wires": [
            [
                "abc42a645fb9804a"
            ]
        ]
    },
    {
        "id": "364f98118dbba380",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2780,
        "wires": [
            [
                "65008bc101a55cc7"
            ]
        ]
    },
    {
        "id": "f5c2c5a45c9873bd",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp7 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp7_et = variablesPLC_Mesas['MesaSalida_7_Posición_2_Entrega_Traslo'];\nlet psp7_rc = variablesPLC_Mesas['MesaSalida_7_Posición_3_Recogida_Carro'];\n\nconst idPLC = psp7_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp7_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp7_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2880,
        "wires": [
            [
                "3f649fcb189a65a5"
            ],
            [
                "397bc31b90ef5d16"
            ]
        ]
    },
    {
        "id": "3f649fcb189a65a5",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 2860,
        "wires": [
            [
                "48294aa0151f0333"
            ]
        ]
    },
    {
        "id": "c52ae431c5411f15",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 2880,
        "wires": [
            [
                "f5c2c5a45c9873bd"
            ]
        ]
    },
    {
        "id": "48294aa0151f0333",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 2860,
        "wires": [
            [
                "8d7edfe6bbc24733"
            ]
        ]
    },
    {
        "id": "8d7edfe6bbc24733",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2860,
        "wires": [
            [
                "b20502597eaebea7"
            ]
        ]
    },
    {
        "id": "86d8e4250bac7ec7",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 2920,
        "wires": []
    },
    {
        "id": "b20502597eaebea7",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 2920,
        "wires": [
            [
                "86d8e4250bac7ec7"
            ]
        ]
    },
    {
        "id": "397bc31b90ef5d16",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2920,
        "wires": [
            [
                "b20502597eaebea7"
            ]
        ]
    },
    {
        "id": "818d31c23ce5b922",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp8 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp8_et = variablesPLC_Mesas['MesaSalida_8_Posición_2_Entrega_Traslo'];\nlet psp8_rc = variablesPLC_Mesas['MesaSalida_8_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp8_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp8_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp8_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 3020,
        "wires": [
            [
                "bc0e71651c52bd78"
            ],
            [
                "5b59af41c3178546"
            ]
        ]
    },
    {
        "id": "bc0e71651c52bd78",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 3000,
        "wires": [
            [
                "77b98edcf00c682b"
            ]
        ]
    },
    {
        "id": "98f4609c03adf499",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 3020,
        "wires": [
            [
                "818d31c23ce5b922"
            ]
        ]
    },
    {
        "id": "77b98edcf00c682b",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 3000,
        "wires": [
            [
                "6ccb50c9374680c7"
            ]
        ]
    },
    {
        "id": "6ccb50c9374680c7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 3000,
        "wires": [
            [
                "766fcf2cddbb05da"
            ]
        ]
    },
    {
        "id": "6778f51c2096833d",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 3060,
        "wires": []
    },
    {
        "id": "766fcf2cddbb05da",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 3060,
        "wires": [
            [
                "6778f51c2096833d"
            ]
        ]
    },
    {
        "id": "5b59af41c3178546",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3060,
        "wires": [
            [
                "766fcf2cddbb05da"
            ]
        ]
    },
    {
        "id": "024aaf86fe08e9e5",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp8 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp8_et = variablesPLC_Mesas['MesaSalida_8_Posición_2_Entrega_Traslo'];\nlet psp8_rc = variablesPLC_Mesas['MesaSalida_8_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp8_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp8_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp8_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 3160,
        "wires": [
            [
                "99e6e52726b90dd0"
            ],
            [
                "2d0acb5e69277013"
            ]
        ]
    },
    {
        "id": "99e6e52726b90dd0",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1990,
        "y": 3140,
        "wires": [
            [
                "9ca5d2295a71f11e"
            ]
        ]
    },
    {
        "id": "c531ee0d6172ee22",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 3160,
        "wires": [
            [
                "024aaf86fe08e9e5"
            ]
        ]
    },
    {
        "id": "9ca5d2295a71f11e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 3140,
        "wires": [
            [
                "e9194fc4eb707de7"
            ]
        ]
    },
    {
        "id": "e9194fc4eb707de7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 3140,
        "wires": [
            [
                "87cad84508e119f4"
            ]
        ]
    },
    {
        "id": "85574e4bb998d994",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 72",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 3200,
        "wires": []
    },
    {
        "id": "87cad84508e119f4",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 2310,
        "y": 3200,
        "wires": [
            [
                "85574e4bb998d994"
            ]
        ]
    },
    {
        "id": "2d0acb5e69277013",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3200,
        "wires": [
            [
                "87cad84508e119f4"
            ]
        ]
    },
    {
        "id": "239f06e4c822cd09",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep9 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet pep9_rt = variablesPLC_Mesas['MesaEntrada_9_Posición_1_Recogida_Traslo'];\nlet pep9_ec =  variablesPLC_Mesas['MesaEntrada_9_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep9_ec;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep9_ec\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_pep9_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 880,
        "wires": [
            [
                "a87a92ab5085e82f"
            ],
            [
                "332764a305f65b26"
            ]
        ]
    },
    {
        "id": "a87a92ab5085e82f",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3390,
        "y": 860,
        "wires": [
            [
                "c9cfb53085b0f321"
            ]
        ]
    },
    {
        "id": "70b3313b9e45f774",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2910,
        "y": 880,
        "wires": [
            [
                "239f06e4c822cd09"
            ]
        ]
    },
    {
        "id": "c9cfb53085b0f321",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 860,
        "wires": [
            [
                "593364c3628bfe43"
            ]
        ]
    },
    {
        "id": "593364c3628bfe43",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3770,
        "y": 860,
        "wires": [
            [
                "2f216805a8a0485e"
            ]
        ]
    },
    {
        "id": "0b911361ee14cbf3",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 75",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3940,
        "y": 920,
        "wires": []
    },
    {
        "id": "2f216805a8a0485e",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3710,
        "y": 920,
        "wires": [
            [
                "0b911361ee14cbf3"
            ]
        ]
    },
    {
        "id": "65ec8c333af4c98b",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep9 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep9_rt = variablesPLC_Mesas['MesaEntrada_9_Posición_1_Recogida_Traslo'];\nlet pep9_ec = variablesPLC_Mesas['MesaEntrada_9_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep9_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep9_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep9_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3140,
        "y": 1040,
        "wires": [
            [
                "20de23cf005228d5"
            ],
            [
                "405f9fa0c5e1a8b9"
            ]
        ]
    },
    {
        "id": "20de23cf005228d5",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3370,
        "y": 1020,
        "wires": [
            [
                "656d5e7dddab8e7f"
            ]
        ]
    },
    {
        "id": "eeedac0f5e256b62",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2890,
        "y": 1040,
        "wires": [
            [
                "65ec8c333af4c98b"
            ]
        ]
    },
    {
        "id": "656d5e7dddab8e7f",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1020,
        "wires": [
            [
                "668dd96a9b005026"
            ]
        ]
    },
    {
        "id": "668dd96a9b005026",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 1020,
        "wires": [
            [
                "fb08500f0de199cd"
            ]
        ]
    },
    {
        "id": "afc7361075ec1648",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 76",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3940,
        "y": 1080,
        "wires": []
    },
    {
        "id": "fb08500f0de199cd",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3710,
        "y": 1080,
        "wires": [
            [
                "afc7361075ec1648"
            ]
        ]
    },
    {
        "id": "03756416df1cc808",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep10 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep10_rt = variablesPLC_Mesas['MesaEntrada_10_Posición_1_Recogida_Traslo'];\nlet pep10_ec =  variablesPLC_Mesas['MesaEntrada_10_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep10_ec ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep10_ec\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep10_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3140,
        "y": 1200,
        "wires": [
            [
                "60a1c6f9b238886c"
            ],
            [
                "666477417a9feeea"
            ]
        ]
    },
    {
        "id": "60a1c6f9b238886c",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3370,
        "y": 1180,
        "wires": [
            [
                "f2c34263bf71dd63"
            ]
        ]
    },
    {
        "id": "e6a9c20cc6d8691c",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2890,
        "y": 1200,
        "wires": [
            [
                "03756416df1cc808"
            ]
        ]
    },
    {
        "id": "f2c34263bf71dd63",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1180,
        "wires": [
            [
                "7ea1cee994450cf4"
            ]
        ]
    },
    {
        "id": "7ea1cee994450cf4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3770,
        "y": 1180,
        "wires": [
            [
                "fbf8c8dd7701220b"
            ]
        ]
    },
    {
        "id": "84e64d499326e78c",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3940,
        "y": 1240,
        "wires": []
    },
    {
        "id": "fbf8c8dd7701220b",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3730,
        "y": 1240,
        "wires": [
            [
                "84e64d499326e78c"
            ]
        ]
    },
    {
        "id": "b88a0959ea1834d4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep10 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep10_rt = variablesPLC_Mesas['MesaEntrada_10_Posición_1_Recogida_Traslo'];\nlet pep10_ec = variablesPLC_Mesas['MesaEntrada_10_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep10_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep10_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep10_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1360,
        "wires": [
            [
                "74eec883ef4c97eb"
            ],
            [
                "69525e84e02be30e"
            ]
        ]
    },
    {
        "id": "74eec883ef4c97eb",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3370,
        "y": 1340,
        "wires": [
            [
                "bf41a3746a354b0f"
            ]
        ]
    },
    {
        "id": "4d3e8cfb1462fae6",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2870,
        "y": 1360,
        "wires": [
            [
                "b88a0959ea1834d4"
            ]
        ]
    },
    {
        "id": "bf41a3746a354b0f",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 1340,
        "wires": [
            [
                "c25469b5c0b4d322"
            ]
        ]
    },
    {
        "id": "c25469b5c0b4d322",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3770,
        "y": 1340,
        "wires": [
            [
                "c6b132ca5c716192"
            ]
        ]
    },
    {
        "id": "143118d008aeb4f7",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3940,
        "y": 1400,
        "wires": []
    },
    {
        "id": "c6b132ca5c716192",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3750,
        "y": 1400,
        "wires": [
            [
                "143118d008aeb4f7"
            ]
        ]
    },
    {
        "id": "332764a305f65b26",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 920,
        "wires": [
            [
                "2f216805a8a0485e"
            ]
        ]
    },
    {
        "id": "405f9fa0c5e1a8b9",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 1080,
        "wires": [
            [
                "fb08500f0de199cd"
            ]
        ]
    },
    {
        "id": "666477417a9feeea",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3470,
        "y": 1240,
        "wires": [
            [
                "fbf8c8dd7701220b"
            ]
        ]
    },
    {
        "id": "69525e84e02be30e",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 1400,
        "wires": [
            [
                "c6b132ca5c716192"
            ]
        ]
    },
    {
        "id": "7011787eac35666a",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep11 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet pep11_rt = variablesPLC_Mesas['MesaEntrada_11_Posición_1_Recogida_Traslo'];\nlet pep11_ec = variablesPLC_Mesas['MesaEntrada_11_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep11_ec;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep11_ec\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_pep11_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1500,
        "wires": [
            [
                "c42a146edaa649b8"
            ],
            [
                "b6b44e49580fb7c9"
            ]
        ]
    },
    {
        "id": "c42a146edaa649b8",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3350,
        "y": 1480,
        "wires": [
            [
                "0be7dce76f2aaf60"
            ]
        ]
    },
    {
        "id": "374eea9051faa41f",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2870,
        "y": 1500,
        "wires": [
            [
                "7011787eac35666a"
            ]
        ]
    },
    {
        "id": "0be7dce76f2aaf60",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3510,
        "y": 1480,
        "wires": [
            [
                "83e8043ec7349516"
            ]
        ]
    },
    {
        "id": "83e8043ec7349516",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1480,
        "wires": [
            [
                "057877d71b157d20"
            ]
        ]
    },
    {
        "id": "c3346dc7742ff968",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3900,
        "y": 1540,
        "wires": []
    },
    {
        "id": "057877d71b157d20",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3670,
        "y": 1540,
        "wires": [
            [
                "c3346dc7742ff968"
            ]
        ]
    },
    {
        "id": "4d553a25369bfa30",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep11 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep11_rt = variablesPLC_Mesas['MesaEntrada_11_Posición_1_Recogida_Traslo'];\nlet pep11_ec = variablesPLC_Mesas['MesaEntrada_11_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep11_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep11_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep11_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 1660,
        "wires": [
            [
                "fc116e8fd2db119c"
            ],
            [
                "0bbd92247d3bb958"
            ]
        ]
    },
    {
        "id": "fc116e8fd2db119c",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3330,
        "y": 1640,
        "wires": [
            [
                "7aed169847f385bb"
            ]
        ]
    },
    {
        "id": "1e15450b2114168f",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2850,
        "y": 1660,
        "wires": [
            [
                "4d553a25369bfa30"
            ]
        ]
    },
    {
        "id": "7aed169847f385bb",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3510,
        "y": 1640,
        "wires": [
            [
                "df5ae275cd7fd70b"
            ]
        ]
    },
    {
        "id": "df5ae275cd7fd70b",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3710,
        "y": 1640,
        "wires": [
            [
                "6745ad280dc23a66"
            ]
        ]
    },
    {
        "id": "81980b872a301982",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3900,
        "y": 1700,
        "wires": []
    },
    {
        "id": "6745ad280dc23a66",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3670,
        "y": 1700,
        "wires": [
            [
                "81980b872a301982"
            ]
        ]
    },
    {
        "id": "28256a5d42c55d20",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep12 entrega carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep12_rt = variablesPLC_Mesas['MesaEntrada_12_Posición_1_Recogida_Traslo'];\nlet pep12_ec =variablesPLC_Mesas['MesaEntrada_12_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep12_ec ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep12_ec\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep12_ec\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1820,
        "wires": [
            [
                "96178f5fecc8f0ad"
            ],
            [
                "a74b6bcec9af2e61"
            ]
        ]
    },
    {
        "id": "96178f5fecc8f0ad",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3330,
        "y": 1800,
        "wires": [
            [
                "c6cd433e0de0bf52"
            ]
        ]
    },
    {
        "id": "1ae1fd67b16bd727",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2850,
        "y": 1820,
        "wires": [
            [
                "28256a5d42c55d20"
            ]
        ]
    },
    {
        "id": "c6cd433e0de0bf52",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3510,
        "y": 1800,
        "wires": [
            [
                "772fe745b7b3ac73"
            ]
        ]
    },
    {
        "id": "772fe745b7b3ac73",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1800,
        "wires": [
            [
                "dacd7b61ebb01eb0"
            ]
        ]
    },
    {
        "id": "6faac8bc072a0747",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3900,
        "y": 1860,
        "wires": []
    },
    {
        "id": "dacd7b61ebb01eb0",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3690,
        "y": 1860,
        "wires": [
            [
                "6faac8bc072a0747"
            ]
        ]
    },
    {
        "id": "472a548656353d04",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "consulta pep12 recogida traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 2\nlet pep12_rt =variablesPLC_Mesas['MesaEntrada_12_Posición_1_Recogida_Traslo'];\nlet pep12_ec = variablesPLC_Mesas['MesaEntrada_12_Posición_2_Entrega_Carro'];\n\nconst idPLC = pep12_rt ;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosPIE1 WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_pep12_rt\";  // Para usar después\n    return msg;\n} else {\n    // No hay movimiento válido, devolvemos null\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, se asigna null\" });\n    msg.payload = {\n        field: \"tarea_pep12_rt\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para manejar null directamente\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 1980,
        "wires": [
            [
                "f3d12034e640511c"
            ],
            [
                "4bb07a86d29271c6"
            ]
        ]
    },
    {
        "id": "f3d12034e640511c",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3330,
        "y": 1960,
        "wires": [
            [
                "9738fbd7931f5491"
            ]
        ]
    },
    {
        "id": "d1f50d2fe1aec879",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2830,
        "y": 1980,
        "wires": [
            [
                "472a548656353d04"
            ]
        ]
    },
    {
        "id": "9738fbd7931f5491",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 1960,
        "wires": [
            [
                "3076d3fe1fcb5809"
            ]
        ]
    },
    {
        "id": "3076d3fe1fcb5809",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 1960,
        "wires": [
            [
                "e79bf0a08c4ad22c"
            ]
        ]
    },
    {
        "id": "f91dd7cb2841f658",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3920,
        "y": 2020,
        "wires": []
    },
    {
        "id": "e79bf0a08c4ad22c",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3710,
        "y": 2020,
        "wires": [
            [
                "f91dd7cb2841f658"
            ]
        ]
    },
    {
        "id": "b6b44e49580fb7c9",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1540,
        "wires": [
            [
                "057877d71b157d20"
            ]
        ]
    },
    {
        "id": "0bbd92247d3bb958",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1700,
        "wires": [
            [
                "6745ad280dc23a66"
            ]
        ]
    },
    {
        "id": "a74b6bcec9af2e61",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 1860,
        "wires": [
            [
                "dacd7b61ebb01eb0"
            ]
        ]
    },
    {
        "id": "4bb07a86d29271c6",
        "type": "function",
        "z": "db33502388dab964",
        "g": "5f01ef5b8d9e329d",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2020,
        "wires": [
            [
                "e79bf0a08c4ad22c"
            ]
        ]
    },
    {
        "id": "16e49d53e87288f7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp9 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp9_et = variablesPLC_Mesas['MesaSalida_9_Posición_2_Entrega_Traslo'];\nlet psp9_rc = variablesPLC_Mesas['MesaSalida_9_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp9_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp9_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp9_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2160,
        "wires": [
            [
                "7fba3760fe25fd10"
            ],
            [
                "24ccaeb9abe70f5a"
            ]
        ]
    },
    {
        "id": "7fba3760fe25fd10",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 2140,
        "wires": [
            [
                "0952a7708a79833f"
            ]
        ]
    },
    {
        "id": "dd41c9e91fb4bc7d",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 2160,
        "wires": [
            [
                "16e49d53e87288f7"
            ]
        ]
    },
    {
        "id": "0952a7708a79833f",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2140,
        "wires": [
            [
                "2887f1399df7f265"
            ]
        ]
    },
    {
        "id": "2887f1399df7f265",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2140,
        "wires": [
            [
                "6413533b1bcff294"
            ]
        ]
    },
    {
        "id": "12cad257f004a0dc",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2200,
        "wires": []
    },
    {
        "id": "6413533b1bcff294",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 2200,
        "wires": [
            [
                "12cad257f004a0dc"
            ]
        ]
    },
    {
        "id": "24ccaeb9abe70f5a",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2200,
        "wires": [
            [
                "6413533b1bcff294"
            ]
        ]
    },
    {
        "id": "ea08c7560a915a90",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp9 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp9_et = variablesPLC_Mesas['MesaSalida_9_Posición_2_Entrega_Traslo'];\nlet psp9_rc = variablesPLC_Mesas['MesaSalida_9_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp9_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp9_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp9_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2300,
        "wires": [
            [
                "6fc1723231ebf552"
            ],
            [
                "a1173b09ec7e45d4"
            ]
        ]
    },
    {
        "id": "6fc1723231ebf552",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 2280,
        "wires": [
            [
                "04563916d37ae2a0"
            ]
        ]
    },
    {
        "id": "1e169343e220febc",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 2300,
        "wires": [
            [
                "ea08c7560a915a90"
            ]
        ]
    },
    {
        "id": "04563916d37ae2a0",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2280,
        "wires": [
            [
                "ec2887333733c58b"
            ]
        ]
    },
    {
        "id": "ec2887333733c58b",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2280,
        "wires": [
            [
                "9863a8446d3e1e06"
            ]
        ]
    },
    {
        "id": "fce8743f8d45f6e6",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 85",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2340,
        "wires": []
    },
    {
        "id": "9863a8446d3e1e06",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 2340,
        "wires": [
            [
                "fce8743f8d45f6e6"
            ]
        ]
    },
    {
        "id": "a1173b09ec7e45d4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2340,
        "wires": [
            [
                "9863a8446d3e1e06"
            ]
        ]
    },
    {
        "id": "8a9667b3c6e79943",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp10 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp10_et = variablesPLC_Mesas['MesaSalida_10_Posición_2_Entrega_Traslo'];\nlet psp10_rc = variablesPLC_Mesas['MesaSalida_10_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp10_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp10_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp10_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 2440,
        "wires": [
            [
                "0a414c269ffdd725"
            ],
            [
                "8b6f3ffd15119f7c"
            ]
        ]
    },
    {
        "id": "0a414c269ffdd725",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 2420,
        "wires": [
            [
                "72a7d93f548c3752"
            ]
        ]
    },
    {
        "id": "bdb4a2c0a26806d7",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 2440,
        "wires": [
            [
                "8a9667b3c6e79943"
            ]
        ]
    },
    {
        "id": "72a7d93f548c3752",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2420,
        "wires": [
            [
                "ac92e34708ea3b12"
            ]
        ]
    },
    {
        "id": "ac92e34708ea3b12",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2420,
        "wires": [
            [
                "2002260079960c55"
            ]
        ]
    },
    {
        "id": "ce995f4c9465072b",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 86",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2480,
        "wires": []
    },
    {
        "id": "2002260079960c55",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 2480,
        "wires": [
            [
                "ce995f4c9465072b"
            ]
        ]
    },
    {
        "id": "8b6f3ffd15119f7c",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2480,
        "wires": [
            [
                "2002260079960c55"
            ]
        ]
    },
    {
        "id": "0d188f9106873806",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp10 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp10_et = variablesPLC_Mesas['MesaSalida_10_Posición_2_Entrega_Traslo'];\nlet psp10_rc = variablesPLC_Mesas['MesaSalida_10_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp10_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp10_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp10_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 2580,
        "wires": [
            [
                "32e3c5a705482d85"
            ],
            [
                "3bdee8666f327bfa"
            ]
        ]
    },
    {
        "id": "32e3c5a705482d85",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 2560,
        "wires": [
            [
                "2343da133129cef7"
            ]
        ]
    },
    {
        "id": "fb94a095e5ea878a",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 2580,
        "wires": [
            [
                "0d188f9106873806"
            ]
        ]
    },
    {
        "id": "2343da133129cef7",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2560,
        "wires": [
            [
                "758b76b7bcc657be"
            ]
        ]
    },
    {
        "id": "758b76b7bcc657be",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2560,
        "wires": [
            [
                "c161b3ccfadaeff5"
            ]
        ]
    },
    {
        "id": "f4ce0909cb8d50a9",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 87",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2620,
        "wires": []
    },
    {
        "id": "c161b3ccfadaeff5",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 2620,
        "wires": [
            [
                "f4ce0909cb8d50a9"
            ]
        ]
    },
    {
        "id": "3bdee8666f327bfa",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2620,
        "wires": [
            [
                "c161b3ccfadaeff5"
            ]
        ]
    },
    {
        "id": "33d818997f7f42dc",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp11 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp11_et = variablesPLC_Mesas['MesaSalida_11_Posición_2_Entrega_Traslo'];\nlet psp11_rc = variablesPLC_Mesas['MesaSalida_11_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp11_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp11_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp11_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 2740,
        "wires": [
            [
                "48c7823892c9dbc9"
            ],
            [
                "8bf3ceca6b2554fe"
            ]
        ]
    },
    {
        "id": "48c7823892c9dbc9",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 2720,
        "wires": [
            [
                "532cdd226e85a40b"
            ]
        ]
    },
    {
        "id": "e46a634d0f45eb89",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 2740,
        "wires": [
            [
                "33d818997f7f42dc"
            ]
        ]
    },
    {
        "id": "532cdd226e85a40b",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2720,
        "wires": [
            [
                "dd2040727ff779ec"
            ]
        ]
    },
    {
        "id": "dd2040727ff779ec",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2720,
        "wires": [
            [
                "5bd6ef6255bf1725"
            ]
        ]
    },
    {
        "id": "77f7be0980938860",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 88",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2780,
        "wires": []
    },
    {
        "id": "5bd6ef6255bf1725",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 2780,
        "wires": [
            [
                "77f7be0980938860"
            ]
        ]
    },
    {
        "id": "8bf3ceca6b2554fe",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2780,
        "wires": [
            [
                "5bd6ef6255bf1725"
            ]
        ]
    },
    {
        "id": "247a503b84a2dbef",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp11 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp11_et = variablesPLC_Mesas['MesaSalida_11_Posición_2_Entrega_Traslo'];\nlet psp11_rc = variablesPLC_Mesas['MesaSalida_11_Posición_3_Recogida_Carro'];\n\nconst idPLC = psp11_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp11_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp11_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 2880,
        "wires": [
            [
                "c217deab844be1c8"
            ],
            [
                "0a8cdd066a95c4de"
            ]
        ]
    },
    {
        "id": "c217deab844be1c8",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 2860,
        "wires": [
            [
                "07ceddcb119726e1"
            ]
        ]
    },
    {
        "id": "99943b6c5c948432",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 2880,
        "wires": [
            [
                "247a503b84a2dbef"
            ]
        ]
    },
    {
        "id": "07ceddcb119726e1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 2860,
        "wires": [
            [
                "604dcf974a8e5209"
            ]
        ]
    },
    {
        "id": "604dcf974a8e5209",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2860,
        "wires": [
            [
                "caeee7b727573f9e"
            ]
        ]
    },
    {
        "id": "6a15410c58243d8e",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 89",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 2920,
        "wires": []
    },
    {
        "id": "caeee7b727573f9e",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 2920,
        "wires": [
            [
                "6a15410c58243d8e"
            ]
        ]
    },
    {
        "id": "0a8cdd066a95c4de",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 2920,
        "wires": [
            [
                "caeee7b727573f9e"
            ]
        ]
    },
    {
        "id": "9f6bf3d6e82070db",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp12 recogida carro",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp12_et = variablesPLC_Mesas['MesaSalida_12_Posición_2_Entrega_Traslo'];\nlet psp12_rc = variablesPLC_Mesas['MesaSalida_12_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp12_rc;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp12_rc\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp12_rc\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 3020,
        "wires": [
            [
                "3a6335b024bdf245"
            ],
            [
                "569a2090bd9a7ea4"
            ]
        ]
    },
    {
        "id": "3a6335b024bdf245",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 3000,
        "wires": [
            [
                "448552221258cb9d"
            ]
        ]
    },
    {
        "id": "25e7dfd3f1daa39c",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 3020,
        "wires": [
            [
                "9f6bf3d6e82070db"
            ]
        ]
    },
    {
        "id": "448552221258cb9d",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 3000,
        "wires": [
            [
                "e2ed2664cfe6dfd4"
            ]
        ]
    },
    {
        "id": "e2ed2664cfe6dfd4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 3000,
        "wires": [
            [
                "34d83b4f69367d35"
            ]
        ]
    },
    {
        "id": "4f4a1bf4ec0aca43",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 90",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3840,
        "y": 3060,
        "wires": []
    },
    {
        "id": "34d83b4f69367d35",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 3060,
        "wires": [
            [
                "4f4a1bf4ec0aca43"
            ]
        ]
    },
    {
        "id": "569a2090bd9a7ea4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 3060,
        "wires": [
            [
                "34d83b4f69367d35"
            ]
        ]
    },
    {
        "id": "41979cdb143f6ae9",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "consulta psp12 entrega traslo",
        "func": "// Leer las variables del PLC almacenadas en las variables globales\nlet variablesPLC_Mesas = global.get('nuevoRegistroTrackMesasParte1');\n\n// Verificar si las variables auxiliares para las mesas están definidas\nif (typeof variablesPLC_Mesas === 'undefined' || variablesPLC_Mesas === null) {\n    node.error(\"Las variables auxiliares del PLC para las mesas no están definidas\");\n    return msg;  // Detenemos la ejecución si no están definidas\n}\n\n// Definir las variables dinámicamente para la Mesa 1\nlet psp12_et = variablesPLC_Mesas['MesaSalida_12_Posición_2_Entrega_Traslo'];\nlet psp12_rc = variablesPLC_Mesas['MesaSalida_12_Posición_1_Recogida_Carro'];\n\nconst idPLC = psp12_et;\n\nif (idPLC && idPLC !== 0) {\n    // Preparar consulta SQL para buscar el movNumber\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Consultando movNumber para ID ${idPLC}` });\n    msg.topic = `SELECT movNumber FROM movimientosTLVsPSPs WHERE id = ${idPLC} LIMIT 1`;\n    msg._tareaMesasField = \"tarea_psp12_et\";  // Para usar después\n    return msg;\n} else {\n    // Si el valor del PLC es 0, se actualiza el campo con valor 0\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"ID PLC = 0, actualizando con valor 0\" });\n    msg.payload = {\n        field: \"tarea_psp12_et\",\n        value: 0\n    };\n    return [null, msg];  // Salida secundaria para aplicar el valor 0\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 3160,
        "wires": [
            [
                "eab59507e8fa4308"
            ],
            [
                "ad5ae7b4485843f1"
            ]
        ]
    },
    {
        "id": "eab59507e8fa4308",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3290,
        "y": 3140,
        "wires": [
            [
                "f20a8762582265b4"
            ]
        ]
    },
    {
        "id": "49db4cae75d85d14",
        "type": "inject",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2810,
        "y": 3160,
        "wires": [
            [
                "41979cdb143f6ae9"
            ]
        ]
    },
    {
        "id": "f20a8762582265b4",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "parse datos",
        "func": "// msg._tareaMesasField contiene 'tarea_pep1_ec'\nconst movNumber = msg.payload[0]?.movNumber || null;\n\nmsg.payload = {\n    field: msg._tareaMesasField,\n    value: movNumber\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 3140,
        "wires": [
            [
                "bbbc078a7ed279b0"
            ]
        ]
    },
    {
        "id": "bbbc078a7ed279b0",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Armamos la sentencia de UPDATE para el id = 1\nmsg.topic = `\n  UPDATE tareas_mesas\n  SET ${field} = ${value === null ? 'NULL' : `'${value}'`}, timestamp = NOW()\n  WHERE id = 1\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 3140,
        "wires": [
            [
                "5daf4f2b6f54e4c9"
            ]
        ]
    },
    {
        "id": "44a5affb3e32714e",
        "type": "debug",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "debug 91",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3880,
        "y": 3200,
        "wires": []
    },
    {
        "id": "5daf4f2b6f54e4c9",
        "type": "mysql",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 3610,
        "y": 3200,
        "wires": [
            [
                "44a5affb3e32714e"
            ]
        ]
    },
    {
        "id": "ad5ae7b4485843f1",
        "type": "function",
        "z": "db33502388dab964",
        "g": "cb483c997eccedb1",
        "name": "UPDATE tareas_mesas ",
        "func": "const field = msg.payload.field;\nconst value = msg.payload.value;\n\n// Creamos el SQL para actualizar solo ese campo en el ID 1\nmsg.topic = `UPDATE tareas_mesas SET ${field} = ${value} WHERE id = 1`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 3200,
        "wires": [
            [
                "5daf4f2b6f54e4c9"
            ]
        ]
    },
    {
        "id": "1488fbdccba33c35",
        "type": "function",
        "z": "db33502388dab964",
        "name": "tlv2_matricula_actual ",
        "func": "msg.topic = `\nSELECT tlv2_matricula_actual \nFROM tlv2_status \nORDER BY id DESC \nLIMIT 1;\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 220,
        "wires": [
            [
                "d608d6104414178a"
            ]
        ]
    },
    {
        "id": "d608d6104414178a",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "bb422c1d0fb25ae6"
            ]
        ]
    },
    {
        "id": "bb422c1d0fb25ae6",
        "type": "function",
        "z": "db33502388dab964",
        "name": "tlv2_tarea_uma_actual ",
        "func": "// Extraemos la matrícula del resultado anterior\nconst matriculaActual = msg.payload[0]?.tlv2_matricula_actual;\n\nif (!matriculaActual || matriculaActual === 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"Matrícula no válida o es 0\" });\n    return null;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Matricula: ${matriculaActual}` });\n\n// Preparamos nueva consulta para movimientosTLVsPSPs\nmsg.topic = `\nSELECT movNumber, uma \nFROM movimientosTLVsPSPs \nWHERE id = ${matriculaActual} \nLIMIT 1;\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 220,
        "wires": [
            [
                "bee5485b81492955"
            ]
        ]
    },
    {
        "id": "bee5485b81492955",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1430,
        "y": 220,
        "wires": [
            [
                "67c5f8721e9a1c38"
            ]
        ]
    },
    {
        "id": "67c5f8721e9a1c38",
        "type": "function",
        "z": "db33502388dab964",
        "name": "update_tlv2_tarea_uma_actual ",
        "func": "const movNumber = msg.payload[0]?.movNumber || null;\nconst uma = msg.payload[0]?.uma || null;\n\n// Armamos consulta INSERT ... ON DUPLICATE KEY UPDATE\nmsg.topic = `\nINSERT INTO tlv2_status (\n  id, tlv2_tarea_actual, tlv2_uma_actual, timestamp\n) VALUES (\n  1, ${movNumber}, ${uma}, NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv2_tarea_actual = VALUES(tlv2_tarea_actual),\n  tlv2_uma_actual = VALUES(tlv2_uma_actual),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 220,
        "wires": [
            [
                "cabb438acaa62ab4"
            ]
        ]
    },
    {
        "id": "cabb438acaa62ab4",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1910,
        "y": 220,
        "wires": [
            [
                "a3e384aab817ffea"
            ]
        ]
    },
    {
        "id": "ce5170989f15f5e9",
        "type": "function",
        "z": "db33502388dab964",
        "name": "tlv1_matricula_actual ",
        "func": "msg.topic = `\nSELECT tlv1_matricula_actual \nFROM tlv1_status \nORDER BY id DESC \nLIMIT 1;\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 140,
        "wires": [
            [
                "e1b5f1433f8dfeae"
            ]
        ]
    },
    {
        "id": "e1b5f1433f8dfeae",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "a24f4a12aea667d9"
            ]
        ]
    },
    {
        "id": "a24f4a12aea667d9",
        "type": "function",
        "z": "db33502388dab964",
        "name": "tlv1_tarea_uma_actual ",
        "func": "// Extraemos la matrícula del resultado anterior\nconst matriculaActual = msg.payload[0]?.tlv1_matricula_actual;\n\nif (!matriculaActual || matriculaActual === 0) {\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"Matrícula no válida o es 0\" });\n    return null;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Matricula: ${matriculaActual}` });\n\n// Preparamos nueva consulta para movimientosTLVsPSPs\nmsg.topic = `\nSELECT movNumber, uma \nFROM movimientosTLVsPSPs \nWHERE id = ${matriculaActual} \nLIMIT 1;\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "ae87f0f54ce7fadf"
            ]
        ]
    },
    {
        "id": "ae87f0f54ce7fadf",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1430,
        "y": 140,
        "wires": [
            [
                "1401c2e6552c31c9"
            ]
        ]
    },
    {
        "id": "1401c2e6552c31c9",
        "type": "function",
        "z": "db33502388dab964",
        "name": "update_tlv1_tarea_uma_actual ",
        "func": "const movNumber = msg.payload[0]?.movNumber || null;\nconst uma = msg.payload[0]?.uma || null;\n\n// Armamos consulta INSERT ... ON DUPLICATE KEY UPDATE\nmsg.topic = `\nINSERT INTO tlv1_status (\n  id, tlv1_tarea_actual, tlv1_uma_actual, timestamp\n) VALUES (\n  1, ${movNumber}, ${uma}, NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv1_tarea_actual = VALUES(tlv1_tarea_actual),\n  tlv1_uma_actual = VALUES(tlv1_uma_actual),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 140,
        "wires": [
            [
                "46d3d8cef905faf1"
            ]
        ]
    },
    {
        "id": "46d3d8cef905faf1",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 1910,
        "y": 140,
        "wires": [
            [
                "7d97f806152b90e0"
            ]
        ]
    },
    {
        "id": "1a9cec37ed716cdc",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 340,
        "wires": [
            [
                "a778d9086a45aa1c"
            ]
        ]
    },
    {
        "id": "a778d9086a45aa1c",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 92",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 340,
        "wires": []
    },
    {
        "id": "8585900708939cc8",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE ct_status",
        "func": "const v = global.get(\"ct_status_db112\") || {};\n\n// Utilidad para asegurar valores seguros por defecto\nfunction safe(value) {\n    return typeof value === 'undefined' ? 0 : value;\n}\n\nmsg.topic = `\nINSERT INTO ct_status (\n  id,\n  ct_conectado,\n  ct_defecto,\n  ct_automatico,\n  ct_semiautomatico,\n  ct_manual,\n  ct_emergencia_puerta_armario,\n  ct_con_datos,\n  ct_autorizacion_transferencia_tc26,\n  ct_fin_transferencia_tc26,\n  ct_peticion_transferencia_tc30,\n  ct_acuse_orden_recibida,\n  ct_matricula_paleta_entrada,\n  ct_matricula_paleta_salida,\n  ct_pasillo_destino,\n  ct_ciclo_trabajo,\n  ct_numero_pasillo_actual,\n  ct_estado_carro,\n  ct_defecto_comunicacion,\n  ct_defecto_emergencia_armario,\n  ct_defecto_variador,\n  ct_defecto_motor_traslacion,\n  ct_defecto_motor_entrada,\n  ct_defecto_motor_salida,\n  ct_defecto_final_carrera_pasillo1,\n  ct_defecto_final_carrera_pasillo12,\n  ct_defecto_paleta_descentrada_entrada,\n  ct_defecto_paleta_descentrada_salida,\n  ct_vis_centraje_traslacion_adelante,\n  ct_vis_centraje_traslacion_atras,\n  ct_vis_presencia_delantera_paleta_entrada,\n  ct_vis_presencia_trasera_paleta_entrada,\n  ct_vis_presencia_delantera_paleta_salida,\n  ct_vis_presencia_trasera_paleta_salida,\n  ct_vis_marcha_traslacion_adelante,\n  ct_vis_marcha_traslacion_atras,\n  ct_vis_motor_traslacion_parado,\n  ct_vis_centraje_traslacion,\n  ct_vis_marcha_transportador_entrada,\n  ct_vis_marcha_transportador_salida,\n  ct_vis_defecto_traslacion,\n  ct_vis_defecto_transportador,\n  timestamp\n) VALUES (\n  1,\n  ${safe(v.Status_Conectado)},\n  ${safe(v.Status_Defecto)},\n  ${safe(v.Status_Automatico)},\n  ${safe(v.Status_Semiautomatico)},\n  ${safe(v.Status_Manual)},\n  ${safe(v.Status_Emergencia_puerta_armario)},\n  ${safe(v.Status_Con_datos)},\n  ${safe(v.Autorizacion_de_transferencia_desde_TC26)},\n  ${safe(v.Fin_de_transferencia_desde_TC26)},\n  ${safe(v.Peticion_de_transferencia_desde_TC30)},\n  ${safe(v.Acuse_de_orden_recibida)},\n  ${safe(v.Matricula_paleta_en_transportador_de_entrada)},\n  ${safe(v.Matricula_paleta_en_transportador_de_salida)},\n  ${safe(v.Pasillo_destino)},\n  ${safe(v.Ciclo_de_trabajo)},\n  ${safe(v.Numero_de_pasillo_actual)},\n  ${safe(v.Estado_carro)},\n  ${safe(v.Defecto_Error_de_comunicacion)},\n  ${safe(v.Defecto_Emergencia_armario_carro)},\n  ${safe(v.Defecto_Anomalia_variador)},\n  ${safe(v.Defecto_Anomalia_motor_traslacion)},\n  ${safe(v.Defecto_Anomalia_motor_entrada)},\n  ${safe(v.Defecto_Anomalia_motor_salida)},\n  ${safe(v.Defecto__Final_de_carrera_pasillo_1)},\n  ${safe(v.Defecto__Final_de_carrera_pasillo_12)},\n  ${safe(v.Defecto_Paleta_descentrada_en_transfer_de_entrada)},\n  ${safe(v.Defecto__Paleta_descentrada_en_transfer_de_salida)},\n  ${safe(v.Visualizacion_Centraje_traslacion_adelante)},\n  ${safe(v.Visualizacion_Centraje_traslacion_atras)},\n  ${safe(v.Visualizacion_Presencia_delantera_de_paleta_en_entrada)},\n  ${safe(v.Visualizacion_Presencia_trasera_de_paleta_en_entrada)},\n  ${safe(v.Visualizacion_Presencia_delantera_de_paleta_en_salida)},\n  ${safe(v.Visualizacion_Presencia_trasera_de_paleta_en_salida)},\n  ${safe(v.Visualizacion_Marcha_traslacion_adelante)},\n  ${safe(v.Visualizacion_Marcha_traslacion_atras)},\n  ${safe(v.Visualizacion_Motor_traslacion_parado)},\n  ${safe(v.Visualizacion_Centraje_traslacion)},\n  ${safe(v.Visualizacion_Marcha_transportador_entrada)},\n  ${safe(v.Visualizacion_Marcha_transportador_salida)},\n  ${safe(v.Visualizacion_Defecto_traslacion_)},\n  ${safe(v.Visualizacion__Defecto_transportador)},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  ct_conectado = VALUES(ct_conectado),\n  ct_defecto = VALUES(ct_defecto),\n  ct_automatico = VALUES(ct_automatico),\n  ct_semiautomatico = VALUES(ct_semiautomatico),\n  ct_manual = VALUES(ct_manual),\n  ct_emergencia_puerta_armario = VALUES(ct_emergencia_puerta_armario),\n  ct_con_datos = VALUES(ct_con_datos),\n  ct_autorizacion_transferencia_tc26 = VALUES(ct_autorizacion_transferencia_tc26),\n  ct_fin_transferencia_tc26 = VALUES(ct_fin_transferencia_tc26),\n  ct_peticion_transferencia_tc30 = VALUES(ct_peticion_transferencia_tc30),\n  ct_acuse_orden_recibida = VALUES(ct_acuse_orden_recibida),\n  ct_matricula_paleta_entrada = VALUES(ct_matricula_paleta_entrada),\n  ct_matricula_paleta_salida = VALUES(ct_matricula_paleta_salida),\n  ct_pasillo_destino = VALUES(ct_pasillo_destino),\n  ct_ciclo_trabajo = VALUES(ct_ciclo_trabajo),\n  ct_numero_pasillo_actual = VALUES(ct_numero_pasillo_actual),\n  ct_estado_carro = VALUES(ct_estado_carro),\n  ct_defecto_comunicacion = VALUES(ct_defecto_comunicacion),\n  ct_defecto_emergencia_armario = VALUES(ct_defecto_emergencia_armario),\n  ct_defecto_variador = VALUES(ct_defecto_variador),\n  ct_defecto_motor_traslacion = VALUES(ct_defecto_motor_traslacion),\n  ct_defecto_motor_entrada = VALUES(ct_defecto_motor_entrada),\n  ct_defecto_motor_salida = VALUES(ct_defecto_motor_salida),\n  ct_defecto_final_carrera_pasillo1 = VALUES(ct_defecto_final_carrera_pasillo1),\n  ct_defecto_final_carrera_pasillo12 = VALUES(ct_defecto_final_carrera_pasillo12),\n  ct_defecto_paleta_descentrada_entrada = VALUES(ct_defecto_paleta_descentrada_entrada),\n  ct_defecto_paleta_descentrada_salida = VALUES(ct_defecto_paleta_descentrada_salida),\n  ct_vis_centraje_traslacion_adelante = VALUES(ct_vis_centraje_traslacion_adelante),\n  ct_vis_centraje_traslacion_atras = VALUES(ct_vis_centraje_traslacion_atras),\n  ct_vis_presencia_delantera_paleta_entrada = VALUES(ct_vis_presencia_delantera_paleta_entrada),\n  ct_vis_presencia_trasera_paleta_entrada = VALUES(ct_vis_presencia_trasera_paleta_entrada),\n  ct_vis_presencia_delantera_paleta_salida = VALUES(ct_vis_presencia_delantera_paleta_salida),\n  ct_vis_presencia_trasera_paleta_salida = VALUES(ct_vis_presencia_trasera_paleta_salida),\n  ct_vis_marcha_traslacion_adelante = VALUES(ct_vis_marcha_traslacion_adelante),\n  ct_vis_marcha_traslacion_atras = VALUES(ct_vis_marcha_traslacion_atras),\n  ct_vis_motor_traslacion_parado = VALUES(ct_vis_motor_traslacion_parado),\n  ct_vis_centraje_traslacion = VALUES(ct_vis_centraje_traslacion),\n  ct_vis_marcha_transportador_entrada = VALUES(ct_vis_marcha_transportador_entrada),\n  ct_vis_marcha_transportador_salida = VALUES(ct_vis_marcha_transportador_salida),\n  ct_vis_defecto_traslacion = VALUES(ct_vis_defecto_traslacion),\n  ct_vis_defecto_transportador = VALUES(ct_vis_defecto_transportador),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "1a9cec37ed716cdc"
            ]
        ]
    },
    {
        "id": "11deddad7e95e3c6",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "8585900708939cc8"
            ]
        ]
    },
    {
        "id": "3370b20d714e9719",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "b4b640314b890f06"
            ]
        ]
    },
    {
        "id": "b4b640314b890f06",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 93",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 400,
        "wires": []
    },
    {
        "id": "a77671d2513c3fda",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE alarmas_status_tlv1",
        "func": "const v = global.get(\"alarmas_status_tlv1\");  // Asume que ya fue creado con anterioridad\nmsg.topic = `\nINSERT INTO tlv1_alarmas (\n  id,\n  tlv1_emergencia_general,\n  tlv1_puerta_cabina_abierta,\n  tlv1_exceso_recorrido_adelante,\n  tlv1_exceso_recorrido_atras,\n  tlv1_exceso_recorrido_subida,\n  tlv1_exceso_recorrido_bajada,\n  tlv1_paracaidas_elevacion,\n  tlv1_cables_flojos_elevacion,\n  tlv1_proteccion_convertidor_traslacion,\n  tlv1_proteccion_convertidor_elevacion,\n  tlv1_proteccion_convertidor_horquillas,\n  tlv1_proteccion_motor_traslacion,\n  tlv1_proteccion_motor_elevacion,\n  tlv1_proteccion_motor_horquillas,\n  tlv1_proteccion_convertidor_traslacion2,\n  tlv1_defecto_convertidor_elevacion,\n  tlv1_defecto_convertidor_horquillas,\n  tlv1_exceso_velocidad_traslacion,\n  tlv1_exceso_velocidad_elevacion,\n  tlv1_defecto_fotoceldas_centraje_horquillas,\n  tlv1_defecto_giro_traslacion,\n  tlv1_defecto_giro_elevacion,\n  tlv1_defecto_giro_horquillas,\n  tlv1_tiempo_centraje_traslacion,\n  tlv1_tiempo_centraje_elevacion,\n  tlv1_tiempo_ciclo_horquillas,\n  tlv1_tiempo_ciclo_tope_seguridad,\n  tlv1_defecto_detectores_traslacion,\n  tlv1_defecto_detectores_elevacion,\n  tlv1_defecto_detectores_horquillas,\n  tlv1_defecto_detectores_tope_seguridad,\n  tlv1_defecto_impul_encoder_traslacion,\n  tlv1_defecto_impul_encoder_elevacion,\n  tlv1_defecto_impul_encoder_horquillas,\n  tlv1_contador_impul_trasl_desfasado,\n  tlv1_contador_impul_elev_desfasado,\n  tlv1_defecto_comunicacion_red_nec_l1,\n  tlv1_defecto_fotoceldas_centraje_traslacion,\n  tlv1_defecto_detectores_lectura_pasillo,\n  tlv1_defecto_choper_frenado_elevacion,\n  tlv1_defecto_galibo,\n  tlv1_defecto_presencia_paleta,\n  tlv1_defecto_fotoceldas_palpadores,\n  tlv1_defecto_fotoc_puente_encargado,\n  tlv1_pasillo_fuera_servicio,\n  tlv1_defecto_nr_pasillo,\n  tlv1_defecto_tension_24vcc,\n  tlv1_defecto_tension_frenos_220vca,\n  tlv1_defecto_destino_incorrecto,\n  tlv1_peticion_ayuda_mantenimiento,\n  tlv1_defecto_plc_bateria,\n  tlv1_defecto_numero_esclavo,\n  tlv1_error_deposito,\n  tlv1_error_extraccion,\n  timestamp\n) VALUES (\n  1,\n  ${v.EMERGENCIA_GENERAL_TLV1},\n  ${v.PUERTA_CABINA_ABIERTA_TLV1},\n  ${v.EXCESO_RECORRIDO_ADELANTE_TLV1},\n  ${v.EXCESO_RECORRIDO_ATRAS_TLV1},\n  ${v.EXCESO_RECORRIDO_SUBIDA_TLV1},\n  ${v.EXCESO_RECORRIDO_BAJADA_TLV1},\n  ${v.PARACAIDAS_ELEVACION_TLV1},\n  ${v.CABLES_FLOJOS_ELEVACION_TLV1},\n  ${v.PROTECCION_CONVERTIDOR_TRASLACION_TLV1},\n  ${v.PROTECCION_CONVERTIDOR_ELEVACION_TLV1},\n  ${v.PROTECCION_CONVERTIDOR_HORQUILLAS_TLV1},\n  ${v.PROTECCION_MOTOR_TRASLACION_TLV1},\n  ${v.PROTECCION_MOTOR_ELEVACION_TLV1},\n  ${v.PROTECCION_MOTOR_HORQUILLAS_TLV1},\n  ${v.PROTECCION_CONVERTIDOR_TRASLACION_TLV1},\n  ${v.DEFECTO_CONVERTIDOR_ELEVACION_TLV1},\n  ${v.DEFECTO_CONVERTIDOR_HORQUILLAS_TLV1},\n  ${v.EXCESO_VELOCIDAD_TRASLACION_TLV1},\n  ${v.EXCESO_VELOCIDAD_TRASLACION_TLV1},\n  ${v.DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV1},\n  ${v.DEFECTO_GIRO_TRASLACION_TLV1},\n  ${v.DEFECTO_GIRO_ELEVACION_TLV1},\n  ${v.DEFECTO_GIRO_HORQUILLAS_TLV1},\n  ${v.TIEMPO_CENTRAJE_TRASLACION_TLV1},\n  ${v.TIEMPO_CENTRAJE_ELEVACION_TLV1},\n  ${v.TIEMPO_CICLO_HORQUILLAS_TLV1},\n  ${v.TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV1},\n  ${v.DEFECTO_DETECTORES_TRASLACION_TLV1},\n  ${v.DEFECTO_DETECTORES_ELEVACION_TLV1},\n  ${v.DEFECTO_DETECTORES_HORQUILLAS_TLV1},\n  ${v.DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV1},\n  ${v.DEFECTO_IMPUL_ENCODER_TRASLACION_TLV1},\n  ${v.DEFECTO_IMPUL_ENCODER_ELEVACION_TLV1},\n  ${v.DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV1},\n  ${v.CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV1},\n  ${v.CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV1},\n  ${v.DEFECTO_COMUNICACION_RED_NEC_L1_TLV1},\n  ${v.DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV1},\n  ${v.DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV1},\n  ${v.DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV1},\n  ${v.DEFECTO_DE_GALIBO_TLV1},\n  ${v.DEFECTO_PRESENCIA_DE_PALETA_TLV1},\n  ${v.DEF_FOTOCELULAS_PALPADORAS_TLV1},\n  ${v.DEF_FOTOC_PUENTE_ENCARADO_TLV1},\n  ${v.PASILLO_FUERA_DE_SERVICIO_TLV1},\n  ${v.DEF_NR_DE_PASILLO_TLV1},\n  ${v.DEFECTO_TENSION_24VCC_TLV1},\n  ${v.DEFECTO_TENSION_FRENOS_220_VCA_TLV1},\n  ${v.DEF_DESTINO_INCORRECTO_TLV1},\n  ${v.PETICION_AYUDA_A_MANTENIMIENTO_TLV1},\n  ${v.DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV1},\n  ${v.DEFECTO_NUMERO_DE_ESCLAVO_TLV1},\n  ${v.ERROR_DEPOSITO_TLV1},\n  ${v.ERROR_EXTRACCION_TLV1},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv1_emergencia_general = VALUES(tlv1_emergencia_general),\n  tlv1_puerta_cabina_abierta = VALUES(tlv1_puerta_cabina_abierta),\n  tlv1_exceso_recorrido_adelante = VALUES(tlv1_exceso_recorrido_adelante),\n  tlv1_exceso_recorrido_atras = VALUES(tlv1_exceso_recorrido_atras),\n  tlv1_exceso_recorrido_subida = VALUES(tlv1_exceso_recorrido_subida),\n  tlv1_exceso_recorrido_bajada = VALUES(tlv1_exceso_recorrido_bajada),\n  tlv1_paracaidas_elevacion = VALUES(tlv1_paracaidas_elevacion),\n  tlv1_cables_flojos_elevacion = VALUES(tlv1_cables_flojos_elevacion),\n  tlv1_proteccion_convertidor_traslacion = VALUES(tlv1_proteccion_convertidor_traslacion),\n  tlv1_proteccion_convertidor_elevacion = VALUES(tlv1_proteccion_convertidor_elevacion),\n  tlv1_proteccion_convertidor_horquillas = VALUES(tlv1_proteccion_convertidor_horquillas),\n  tlv1_proteccion_motor_traslacion = VALUES(tlv1_proteccion_motor_traslacion),\n  tlv1_proteccion_motor_elevacion = VALUES(tlv1_proteccion_motor_elevacion),\n  tlv1_proteccion_motor_horquillas = VALUES(tlv1_proteccion_motor_horquillas),\n  tlv1_proteccion_convertidor_traslacion2 = VALUES(tlv1_proteccion_convertidor_traslacion2),\n  tlv1_defecto_convertidor_elevacion = VALUES(tlv1_defecto_convertidor_elevacion),\n  tlv1_defecto_convertidor_horquillas = VALUES(tlv1_defecto_convertidor_horquillas),\n  tlv1_exceso_velocidad_traslacion = VALUES(tlv1_exceso_velocidad_traslacion),\n  tlv1_exceso_velocidad_elevacion = VALUES(tlv1_exceso_velocidad_elevacion),\n  tlv1_defecto_fotoceldas_centraje_horquillas = VALUES(tlv1_defecto_fotoceldas_centraje_horquillas),\n  tlv1_defecto_giro_traslacion = VALUES(tlv1_defecto_giro_traslacion),\n  tlv1_defecto_giro_elevacion = VALUES(tlv1_defecto_giro_elevacion),\n  tlv1_defecto_giro_horquillas = VALUES(tlv1_defecto_giro_horquillas),\n  tlv1_tiempo_centraje_traslacion = VALUES(tlv1_tiempo_centraje_traslacion),\n  tlv1_tiempo_centraje_elevacion = VALUES(tlv1_tiempo_centraje_elevacion),\n  tlv1_tiempo_ciclo_horquillas = VALUES(tlv1_tiempo_ciclo_horquillas),\n  tlv1_tiempo_ciclo_tope_seguridad = VALUES(tlv1_tiempo_ciclo_tope_seguridad),\n  tlv1_defecto_detectores_traslacion = VALUES(tlv1_defecto_detectores_traslacion),\n  tlv1_defecto_detectores_elevacion = VALUES(tlv1_defecto_detectores_elevacion),\n  tlv1_defecto_detectores_horquillas = VALUES(tlv1_defecto_detectores_horquillas),\n  tlv1_defecto_detectores_tope_seguridad = VALUES(tlv1_defecto_detectores_tope_seguridad),\n  tlv1_defecto_impul_encoder_traslacion = VALUES(tlv1_defecto_impul_encoder_traslacion),\n  tlv1_defecto_impul_encoder_elevacion = VALUES(tlv1_defecto_impul_encoder_elevacion),\n  tlv1_defecto_impul_encoder_horquillas = VALUES(tlv1_defecto_impul_encoder_horquillas),\n  tlv1_contador_impul_trasl_desfasado = VALUES(tlv1_contador_impul_trasl_desfasado),\n  tlv1_contador_impul_elev_desfasado = VALUES(tlv1_contador_impul_elev_desfasado),\n  tlv1_defecto_comunicacion_red_nec_l1 = VALUES(tlv1_defecto_comunicacion_red_nec_l1),\n  tlv1_defecto_fotoceldas_centraje_traslacion = VALUES(tlv1_defecto_fotoceldas_centraje_traslacion),\n  tlv1_defecto_detectores_lectura_pasillo = VALUES(tlv1_defecto_detectores_lectura_pasillo),\n  tlv1_defecto_choper_frenado_elevacion = VALUES(tlv1_defecto_choper_frenado_elevacion),\n  tlv1_defecto_galibo = VALUES(tlv1_defecto_galibo),\n  tlv1_defecto_presencia_paleta = VALUES(tlv1_defecto_presencia_paleta),\n  tlv1_defecto_fotoceldas_palpadores = VALUES(tlv1_defecto_fotoceldas_palpadores),\n  tlv1_defecto_fotoc_puente_encargado = VALUES(tlv1_defecto_fotoc_puente_encargado),\n  tlv1_pasillo_fuera_servicio = VALUES(tlv1_pasillo_fuera_servicio),\n  tlv1_defecto_nr_pasillo = VALUES(tlv1_defecto_nr_pasillo),\n  tlv1_defecto_tension_24vcc = VALUES(tlv1_defecto_tension_24vcc),\n  tlv1_defecto_tension_frenos_220vca = VALUES(tlv1_defecto_tension_frenos_220vca),\n  tlv1_defecto_destino_incorrecto = VALUES(tlv1_defecto_destino_incorrecto),\n  tlv1_peticion_ayuda_mantenimiento = VALUES(tlv1_peticion_ayuda_mantenimiento),\n  tlv1_defecto_plc_bateria = VALUES(tlv1_defecto_plc_bateria),\n  tlv1_defecto_numero_esclavo = VALUES(tlv1_defecto_numero_esclavo),\n  tlv1_error_deposito = VALUES(tlv1_error_deposito),\n  tlv1_error_extraccion = VALUES(tlv1_error_extraccion),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n\n\n\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            [
                "3370b20d714e9719"
            ]
        ]
    },
    {
        "id": "8124d41f8a3d84ac",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "a77671d2513c3fda"
            ]
        ]
    },
    {
        "id": "4e847b2c2bb81d9e",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 460,
        "wires": [
            [
                "f5ec585fe30e3c8f"
            ]
        ]
    },
    {
        "id": "f5ec585fe30e3c8f",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 102",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 460,
        "wires": []
    },
    {
        "id": "c59929b1a63b34d5",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE alarmas_status_tlv2",
        "func": "const v = global.get(\"alarmas_status_tlv2\");  // Asume que ya fue creado con anterioridad\nmsg.topic = `\nINSERT INTO tlv2_alarmas (\n  id,\n  tlv2_emergencia_general,\n  tlv2_puerta_cabina_abierta,\n  tlv2_exceso_recorrido_adelante,\n  tlv2_exceso_recorrido_atras,\n  tlv2_exceso_recorrido_subida,\n  tlv2_exceso_recorrido_bajada,\n  tlv2_paracaidas_elevacion,\n  tlv2_cables_flojos_elevacion,\n  tlv2_proteccion_convertidor_traslacion,\n  tlv2_proteccion_convertidor_elevacion,\n  tlv2_proteccion_convertidor_horquillas,\n  tlv2_proteccion_motor_traslacion,\n  tlv2_proteccion_motor_elevacion,\n  tlv2_proteccion_motor_horquillas,\n  tlv2_proteccion_convertidor_traslacion2,\n  tlv2_defecto_convertidor_elevacion,\n  tlv2_defecto_convertidor_horquillas,\n  tlv2_exceso_velocidad_traslacion,\n  tlv2_exceso_velocidad_elevacion,\n  tlv2_defecto_fotoceldas_centraje_horquillas,\n  tlv2_defecto_giro_traslacion,\n  tlv2_defecto_giro_elevacion,\n  tlv2_defecto_giro_horquillas,\n  tlv2_tiempo_centraje_traslacion,\n  tlv2_tiempo_centraje_elevacion,\n  tlv2_tiempo_ciclo_horquillas,\n  tlv2_tiempo_ciclo_tope_seguridad,\n  tlv2_defecto_detectores_traslacion,\n  tlv2_defecto_detectores_elevacion,\n  tlv2_defecto_detectores_horquillas,\n  tlv2_defecto_detectores_tope_seguridad,\n  tlv2_defecto_impul_encoder_traslacion,\n  tlv2_defecto_impul_encoder_elevacion,\n  tlv2_defecto_impul_encoder_horquillas,\n  tlv2_contador_impul_trasl_desfasado,\n  tlv2_contador_impul_elev_desfasado,\n  tlv2_defecto_comunicacion_red_nec_l1,\n  tlv2_defecto_fotoceldas_centraje_traslacion,\n  tlv2_defecto_detectores_lectura_pasillo,\n  tlv2_defecto_choper_frenado_elevacion,\n  tlv2_defecto_galibo,\n  tlv2_defecto_presencia_paleta,\n  tlv2_defecto_fotoceldas_palpadores,\n  tlv2_defecto_fotoc_puente_encargado,\n  tlv2_pasillo_fuera_servicio,\n  tlv2_defecto_nr_pasillo,\n  tlv2_defecto_tension_24vcc,\n  tlv2_defecto_tension_frenos_220vca,\n  tlv2_defecto_destino_incorrecto,\n  tlv2_peticion_ayuda_mantenimiento,\n  tlv2_defecto_plc_bateria,\n  tlv2_defecto_numero_esclavo,\n  tlv2_error_deposito,\n  tlv2_error_extraccion,\n  timestamp\n) VALUES (\n  1,\n  ${v.EMERGENCIA_GENERAL_TLV2},\n  ${v.PUERTA_CABINA_ABIERTA_TLV2},\n  ${v.EXCESO_RECORRIDO_ADELANTE_TLV2},\n  ${v.EXCESO_RECORRIDO_ATRAS_TLV2},\n  ${v.EXCESO_RECORRIDO_SUBIDA_TLV2},\n  ${v.EXCESO_RECORRIDO_BAJADA_TLV2},\n  ${v.PARACAIDAS_ELEVACION_TLV2},\n  ${v.CABLES_FLOJOS_ELEVACION_TLV2},\n  ${v.PROTECCION_CONVERTIDOR_TRASLACION_TLV2},\n  ${v.PROTECCION_CONVERTIDOR_ELEVACION_TLV2},\n  ${v.PROTECCION_CONVERTIDOR_HORQUILLAS_TLV2},\n  ${v.PROTECCION_MOTOR_TRASLACION_TLV2},\n  ${v.PROTECCION_MOTOR_ELEVACION_TLV2},\n  ${v.PROTECCION_MOTOR_HORQUILLAS_TLV2},\n  ${v.PROTECCION_CONVERTIDOR_TRASLACION_TLV2},\n  ${v.DEFECTO_CONVERTIDOR_ELEVACION_TLV2},\n  ${v.DEFECTO_CONVERTIDOR_HORQUILLAS_TLV2},\n  ${v.EXCESO_VELOCIDAD_TRASLACION_TLV2},\n  ${v.EXCESO_VELOCIDAD_TRASLACION_TLV2},\n  ${v.DEFECTO_FOTOCELULAS_DE_CENTRAJE_HORQUILLAS_TLV2},\n  ${v.DEFECTO_GIRO_TRASLACION_TLV2},\n  ${v.DEFECTO_GIRO_ELEVACION_TLV2},\n  ${v.DEFECTO_GIRO_HORQUILLAS_TLV2},\n  ${v.TIEMPO_CENTRAJE_TRASLACION_TLV2},\n  ${v.TIEMPO_CENTRAJE_ELEVACION_TLV2},\n  ${v.TIEMPO_CICLO_HORQUILLAS_TLV2},\n  ${v.TIEMPO_CICLO_TOPE_DE_SEGURIDAD_TLV2},\n  ${v.DEFECTO_DETECTORES_TRASLACION_TLV2},\n  ${v.DEFECTO_DETECTORES_ELEVACION_TLV2},\n  ${v.DEFECTO_DETECTORES_HORQUILLAS_TLV2},\n  ${v.DEFECTO_DETECTORES_TOPE_DE_SEGURIDAD_TLV2},\n  ${v.DEFECTO_IMPUL_ENCODER_TRASLACION_TLV2},\n  ${v.DEFECTO_IMPUL_ENCODER_ELEVACION_TLV2},\n  ${v.DEFECTO_IMPUL_ENCODER_HORQUILLAS_TLV2},\n  ${v.CONTADOR_IMPUL_ENC_TRASL_DESFASADO_TLV2},\n  ${v.CONTADOR_IMPUL_ENC_ELEV_DESFASADO_TLV2},\n  ${v.DEFECTO_COMUNICACION_RED_NEC_L1_TLV2},\n  ${v.DEFECTO_FOTOCELULAS_CENTRAJE_TRASLACION_TLV2},\n  ${v.DEFECTOS_DETECTORES_LECTURA_PASILLO_TLV2},\n  ${v.DEFECTO_CHOPER_DE_FRENADO_ELEVACION_TLV2},\n  ${v.DEFECTO_DE_GALIBO_TLV2},\n  ${v.DEFECTO_PRESENCIA_DE_PALETA_TLV2},\n  ${v.DEF_FOTOCELULAS_PALPADORAS_TLV2},\n  ${v.DEF_FOTOC_PUENTE_ENCARADO_TLV2},\n  ${v.PASILLO_FUERA_DE_SERVICIO_TLV2},\n  ${v.DEF_NR_DE_PASILLO_TLV2},\n  ${v.DEFECTO_TENSION_24VCC_TLV2},\n  ${v.DEFECTO_TENSION_FRENOS_220_VCA_TLV2},\n  ${v.DEF_DESTINO_INCORRECTO_TLV2},\n  ${v.PETICION_AYUDA_A_MANTENIMIENTO_TLV2},\n  ${v.DEFECTO_PLC_DETECTO_BATERIA_PLC_TLV2},\n  ${v.DEFECTO_NUMERO_DE_ESCLAVO_TLV2},\n  ${v.ERROR_DEPOSITO_TLV2},\n  ${v.ERROR_EXTRACCION_TLV2},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  tlv2_emergencia_general = VALUES(tlv2_emergencia_general),\n  tlv2_puerta_cabina_abierta = VALUES(tlv2_puerta_cabina_abierta),\n  tlv2_exceso_recorrido_adelante = VALUES(tlv2_exceso_recorrido_adelante),\n  tlv2_exceso_recorrido_atras = VALUES(tlv2_exceso_recorrido_atras),\n  tlv2_exceso_recorrido_subida = VALUES(tlv2_exceso_recorrido_subida),\n  tlv2_exceso_recorrido_bajada = VALUES(tlv2_exceso_recorrido_bajada),\n  tlv2_paracaidas_elevacion = VALUES(tlv2_paracaidas_elevacion),\n  tlv2_cables_flojos_elevacion = VALUES(tlv2_cables_flojos_elevacion),\n  tlv2_proteccion_convertidor_traslacion = VALUES(tlv2_proteccion_convertidor_traslacion),\n  tlv2_proteccion_convertidor_elevacion = VALUES(tlv2_proteccion_convertidor_elevacion),\n  tlv2_proteccion_convertidor_horquillas = VALUES(tlv2_proteccion_convertidor_horquillas),\n  tlv2_proteccion_motor_traslacion = VALUES(tlv2_proteccion_motor_traslacion),\n  tlv2_proteccion_motor_elevacion = VALUES(tlv2_proteccion_motor_elevacion),\n  tlv2_proteccion_motor_horquillas = VALUES(tlv2_proteccion_motor_horquillas),\n  tlv2_proteccion_convertidor_traslacion2 = VALUES(tlv2_proteccion_convertidor_traslacion2),\n  tlv2_defecto_convertidor_elevacion = VALUES(tlv2_defecto_convertidor_elevacion),\n  tlv2_defecto_convertidor_horquillas = VALUES(tlv2_defecto_convertidor_horquillas),\n  tlv2_exceso_velocidad_traslacion = VALUES(tlv2_exceso_velocidad_traslacion),\n  tlv2_exceso_velocidad_elevacion = VALUES(tlv2_exceso_velocidad_elevacion),\n  tlv2_defecto_fotoceldas_centraje_horquillas = VALUES(tlv2_defecto_fotoceldas_centraje_horquillas),\n  tlv2_defecto_giro_traslacion = VALUES(tlv2_defecto_giro_traslacion),\n  tlv2_defecto_giro_elevacion = VALUES(tlv2_defecto_giro_elevacion),\n  tlv2_defecto_giro_horquillas = VALUES(tlv2_defecto_giro_horquillas),\n  tlv2_tiempo_centraje_traslacion = VALUES(tlv2_tiempo_centraje_traslacion),\n  tlv2_tiempo_centraje_elevacion = VALUES(tlv2_tiempo_centraje_elevacion),\n  tlv2_tiempo_ciclo_horquillas = VALUES(tlv2_tiempo_ciclo_horquillas),\n  tlv2_tiempo_ciclo_tope_seguridad = VALUES(tlv2_tiempo_ciclo_tope_seguridad),\n  tlv2_defecto_detectores_traslacion = VALUES(tlv2_defecto_detectores_traslacion),\n  tlv2_defecto_detectores_elevacion = VALUES(tlv2_defecto_detectores_elevacion),\n  tlv2_defecto_detectores_horquillas = VALUES(tlv2_defecto_detectores_horquillas),\n  tlv2_defecto_detectores_tope_seguridad = VALUES(tlv2_defecto_detectores_tope_seguridad),\n  tlv2_defecto_impul_encoder_traslacion = VALUES(tlv2_defecto_impul_encoder_traslacion),\n  tlv2_defecto_impul_encoder_elevacion = VALUES(tlv2_defecto_impul_encoder_elevacion),\n  tlv2_defecto_impul_encoder_horquillas = VALUES(tlv2_defecto_impul_encoder_horquillas),\n  tlv2_contador_impul_trasl_desfasado = VALUES(tlv2_contador_impul_trasl_desfasado),\n  tlv2_contador_impul_elev_desfasado = VALUES(tlv2_contador_impul_elev_desfasado),\n  tlv2_defecto_comunicacion_red_nec_l1 = VALUES(tlv2_defecto_comunicacion_red_nec_l1),\n  tlv2_defecto_fotoceldas_centraje_traslacion = VALUES(tlv2_defecto_fotoceldas_centraje_traslacion),\n  tlv2_defecto_detectores_lectura_pasillo = VALUES(tlv2_defecto_detectores_lectura_pasillo),\n  tlv2_defecto_choper_frenado_elevacion = VALUES(tlv2_defecto_choper_frenado_elevacion),\n  tlv2_defecto_galibo = VALUES(tlv2_defecto_galibo),\n  tlv2_defecto_presencia_paleta = VALUES(tlv2_defecto_presencia_paleta),\n  tlv2_defecto_fotoceldas_palpadores = VALUES(tlv2_defecto_fotoceldas_palpadores),\n  tlv2_defecto_fotoc_puente_encargado = VALUES(tlv2_defecto_fotoc_puente_encargado),\n  tlv2_pasillo_fuera_servicio = VALUES(tlv2_pasillo_fuera_servicio),\n  tlv2_defecto_nr_pasillo = VALUES(tlv2_defecto_nr_pasillo),\n  tlv2_defecto_tension_24vcc = VALUES(tlv2_defecto_tension_24vcc),\n  tlv2_defecto_tension_frenos_220vca = VALUES(tlv2_defecto_tension_frenos_220vca),\n  tlv2_defecto_destino_incorrecto = VALUES(tlv2_defecto_destino_incorrecto),\n  tlv2_peticion_ayuda_mantenimiento = VALUES(tlv2_peticion_ayuda_mantenimiento),\n  tlv2_defecto_plc_bateria = VALUES(tlv2_defecto_plc_bateria),\n  tlv2_defecto_numero_esclavo = VALUES(tlv2_defecto_numero_esclavo),\n  tlv2_error_deposito = VALUES(tlv2_error_deposito),\n  tlv2_error_extraccion = VALUES(tlv2_error_extraccion),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n\n\n\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "4e847b2c2bb81d9e"
            ]
        ]
    },
    {
        "id": "bade85f7c4355744",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "c59929b1a63b34d5"
            ]
        ]
    },
    {
        "id": "34f03bfb0ee3a3f3",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "01743b9c26e371c1"
            ]
        ]
    },
    {
        "id": "01743b9c26e371c1",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 103",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 520,
        "wires": []
    },
    {
        "id": "a0e641db4cf3066f",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE alarmas_status_ct",
        "func": "const v = global.get(\"alarmas_status_ct\");  // o usa msg.payload si prefieres\nmsg.topic = `\nINSERT INTO ct_alarmas (\n  id,\n  ct_defecto_error_comunicacion,\n  ct_defecto_emergencia_armario_carro,\n  ct_defecto_anomalia_variador,\n  ct_defecto_anomalia_motor_traslacion,\n  ct_defecto_anomalia_motor_entrada,\n  ct_defecto_anomalia_motor_salida,\n  ct_defecto_final_carrera_pasillo1,\n  ct_defecto_final_carrera_pasillo12,\n  ct_defecto_paleta_descentrada_entrada,\n  ct_defecto_paleta_descentrada_salida,\n  ct_defecto_limite_superior_lectura_encoder,\n  ct_defecto_limite_inferior_lectura_encoder,\n  ct_defecto_tiempo_transferencia_mesa_salida,\n  ct_defecto_telemetro,\n  ct_defecto_tiempo_entrada,\n  ct_defecto_tiempo_salida,\n  ct_defecto_paleta_entrada_sin_codigo,\n  ct_defecto_paleta_salida_sin_codigo,\n  timestamp\n) VALUES (\n  1,\n  ${v.Defecto_Error_de_comunicacion_ct},\n  ${v.Defecto_Emergencia_armario_carro_ct},\n  ${v.Defecto_Anomalia_variador_ct},\n  ${v.Defecto_Anomalia_motor_traslacion_ct},\n  ${v.Defecto_Anomalia_motor_entrada_ct},\n  ${v.Defecto_Anomalia_motor_salida_ct},\n  ${v.Defecto_Final_de_carrera_pasillo_1_ct},\n  ${v.Defecto_Final_de_carrera_pasillo_12_ct},\n  ${v.Defecto_Paleta_descentrada_en_transfer_de_entrada_ct},\n  ${v.Defecto_Paleta_descentrada_en_transfer_de_salida_ct},\n  ${v.Defecto_Limite_superior_lectura_encoder_ct},\n  ${v.Defecto_Limite_inferior_lectura_encoder_ct},\n  ${v.Defecto_Tiempo_de_transferencia_de_mesa_de_salida_a_carro_ct},\n  ${v.Defecto_Telemetro_ct},\n  ${v.Defecto_Tiempo_de_entrada_ct},\n  ${v.Defecto_Tiempo_de_salida_ct},\n  ${v.Defecto_Paleta_en_entrada_sin_codigo_ct},\n  ${v.Defecto_Paleta_en_salida_sin_codigo_ct},\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  ct_defecto_error_comunicacion = VALUES(ct_defecto_error_comunicacion),\n  ct_defecto_emergencia_armario_carro = VALUES(ct_defecto_emergencia_armario_carro),\n  ct_defecto_anomalia_variador = VALUES(ct_defecto_anomalia_variador),\n  ct_defecto_anomalia_motor_traslacion = VALUES(ct_defecto_anomalia_motor_traslacion),\n  ct_defecto_anomalia_motor_entrada = VALUES(ct_defecto_anomalia_motor_entrada),\n  ct_defecto_anomalia_motor_salida = VALUES(ct_defecto_anomalia_motor_salida),\n  ct_defecto_final_carrera_pasillo1 = VALUES(ct_defecto_final_carrera_pasillo1),\n  ct_defecto_final_carrera_pasillo12 = VALUES(ct_defecto_final_carrera_pasillo12),\n  ct_defecto_paleta_descentrada_entrada = VALUES(ct_defecto_paleta_descentrada_entrada),\n  ct_defecto_paleta_descentrada_salida = VALUES(ct_defecto_paleta_descentrada_salida),\n  ct_defecto_limite_superior_lectura_encoder = VALUES(ct_defecto_limite_superior_lectura_encoder),\n  ct_defecto_limite_inferior_lectura_encoder = VALUES(ct_defecto_limite_inferior_lectura_encoder),\n  ct_defecto_tiempo_transferencia_mesa_salida = VALUES(ct_defecto_tiempo_transferencia_mesa_salida),\n  ct_defecto_telemetro = VALUES(ct_defecto_telemetro),\n  ct_defecto_tiempo_entrada = VALUES(ct_defecto_tiempo_entrada),\n  ct_defecto_tiempo_salida = VALUES(ct_defecto_tiempo_salida),\n  ct_defecto_paleta_entrada_sin_codigo = VALUES(ct_defecto_paleta_entrada_sin_codigo),\n  ct_defecto_paleta_salida_sin_codigo = VALUES(ct_defecto_paleta_salida_sin_codigo),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "34f03bfb0ee3a3f3"
            ]
        ]
    },
    {
        "id": "08687df88f92d486",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "a0e641db4cf3066f"
            ]
        ]
    },
    {
        "id": "24852952f68ea75b",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 580,
        "wires": [
            [
                "988801a524d4d489"
            ]
        ]
    },
    {
        "id": "988801a524d4d489",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 104",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 580,
        "wires": []
    },
    {
        "id": "5e942bf84edd6921",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE alarmas_status_pt",
        "func": "const alarmas = global.get(\"alarmas_status_pt\");\nconst fechaHoraActual = new Date().toISOString();\n\nmsg.topic = `\nINSERT INTO pt_alarmas (\n  id,\n  emergencia_puente_transbordo,\n  exceso_recorrido_adelante_puente,\n  exceso_recorrido_atras_puente,               \n  proteccion_variador_traslacion_puente,    \n  proteccion_motor_traslacion_puente,\n  proteccion_motor_enclavamiento_puente,\n  proteccion_frenos,\n  defecto_variador_traslacion_puente,\n  exceso_velocidad_puente,\n  defecto_fotocelula_galibo_puente,\n  tiempo_ciclo_traslacion_puente,\n  tiempo_ciclo_enclavamiento_puente,\n  defecto_detectores_traslacion_puente,\n  defecto_detectores_enclavamiento_puente,\n  timestamp\n) VALUES (\n  1,\n  ${alarmas.EMERGENCIA_PUENTE_DE_TRANSBORDO || 0},\n  ${alarmas.EXCESO_DE_RECORRIDO_ADELANTE_PUENTE || 0},\n  ${alarmas.EXCESO_DE_RECORRIDO_ATRAS_PUENTE || 0},\n  ${alarmas.PROTECCION_VARIADOR_TRASLACION_PUENTE || 0},\n  ${alarmas.PROTECCION_MOTOR_TRASLACION_PUENTE || 0},\n  ${alarmas.PROTECCION_MOTOR_ENCLAVAMIENTO_PUENTE || 0},\n  ${alarmas.PROTECCION_FRENOS || 0},\n  ${alarmas.DEFECTO_VARIADOR_TRASLACION_PUENTE || 0},\n  ${alarmas.EXCESO_DE_VELOCIDAD_PUENTE || 0},\n  ${alarmas.DEFECTO_FOTOCELULA_GALIBO_PUENTE || 0},\n  ${alarmas.TIEMPO_CICLO_TRASLACION_PUENTE || 0},\n  ${alarmas.TIEMPO_CICLO_ENCLAVAMIENTO_PUENTE || 0},\n  ${alarmas.DEFECTO_DETECTORES_TRASLACION_PUENTE || 0},\n  ${alarmas.DEFECTO_DETECTORES_ENCLAVAMIENTO_PUENTE || 0},    \n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  emergencia_puente_transbordo = VALUES(emergencia_puente_transbordo),\n  exceso_recorrido_adelante_puente = VALUES(exceso_recorrido_adelante_puente),\n  exceso_recorrido_atras_puente = VALUES(exceso_recorrido_atras_puente),\n  proteccion_variador_traslacion_puente = VALUES(proteccion_variador_traslacion_puente),\n  proteccion_motor_traslacion_puente = VALUES(proteccion_motor_traslacion_puente),\n  proteccion_motor_enclavamiento_puente = VALUES(proteccion_motor_enclavamiento_puente),\n  proteccion_frenos = VALUES(proteccion_frenos),\n  defecto_variador_traslacion_puente = VALUES(defecto_variador_traslacion_puente),\n  exceso_velocidad_puente = VALUES(exceso_velocidad_puente),\n  defecto_fotocelula_galibo_puente = VALUES(defecto_fotocelula_galibo_puente),\n  tiempo_ciclo_traslacion_puente = VALUES(tiempo_ciclo_traslacion_puente),\n  tiempo_ciclo_enclavamiento_puente = VALUES(tiempo_ciclo_enclavamiento_puente),\n  defecto_detectores_traslacion_puente = VALUES(defecto_detectores_traslacion_puente),\n  defecto_detectores_enclavamiento_puente = VALUES(defecto_detectores_enclavamiento_puente),\n  timestamp = VALUES(timestamp);\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "24852952f68ea75b"
            ]
        ]
    },
    {
        "id": "e0e113431d2f8ba5",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "5e942bf84edd6921"
            ]
        ]
    },
    {
        "id": "355528beaf90f5db",
        "type": "mysql",
        "z": "db33502388dab964",
        "mydb": "519a750abc1e67ac",
        "name": "",
        "x": 630,
        "y": 640,
        "wires": [
            [
                "867ef3c9cd528bd3"
            ]
        ]
    },
    {
        "id": "867ef3c9cd528bd3",
        "type": "debug",
        "z": "db33502388dab964",
        "name": "debug 105",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 640,
        "wires": []
    },
    {
        "id": "ef4e5566926a8edf",
        "type": "function",
        "z": "db33502388dab964",
        "name": "UPDATE alarmas_status_elv1",
        "func": "let v = global.get(\"alarmas_status_elv1\"); \n\nmsg.topic = `\nINSERT INTO elv1_alarmas (\n  id,\n  tc1_defecto_guardamotor_variador,\n  tc1_defecto_tiempo_transferencia_entrada,\n  tc1_defecto_tiempo_transferencia_salida,\n  tc1_defecto_falta_presencia,\n  tc1_defecto_presencia_inesperada,\n  elv1_1_defecto_tiempo_transferencia_entrada,\n  elv1_1_defecto_tiempo_maniobra,\n  elv1_1_defecto_presencia_inesperada,\n  elv1_1_defecto_falta_presencia,\n  elv1_1_defecto_simultaneidad_detectores,\n  elv1_1_defecto_guardamotor_variador_transportador,\n  elv1_1_defecto_tiempo_transferencia_salida,\n  elv1_2_defecto_tiempo_maniobra,\n  elv1_2_defecto_variador,\n  elv1_2_defecto_falta_presencia,\n  elv1_2_defecto_simultaneidad_detectores,\n  elv1_2_defecto_guardamotor_elevacion,\n  elv1_2_defecto_busqueda_posicion,\n  elv1_2_defecto_puerta_abierta_arriba,\n  elv1_3_defecto_puerta_abierta_abajo,\n  elv1_3_defecto_tiempo_maniobra,\n  elv1_3_defecto_presencia_inesperada,\n  elv1_3_defecto_falta_presencia,\n  elv1_3_defecto_simultaneidad_detectores,\n  elv1_3_defecto_exceso_recorrido_arriba,\n  elv1_3_defecto_exceso_recorrido_abajo,\n  tc2_defecto_guardamotor_variador,\n  tc2_defecto_tiempo_transferencia_entrada,\n  tc2_defecto_tiempo_transferencia_salida,\n  tc2_defecto_falta_presencia,\n  tc2_defecto_presencia_inesperada,\n  tc3_defecto_guardamotor_variador,\n  tc3_defecto_tiempo_transferencia_entrada,\n  tc3_defecto_tiempo_transferencia_salida,\n  tc3_defecto_falta_presencia,\n  tc3_defecto_presencia_inesperada,\n  tc4_defecto_guardamotor_variador,\n  tc4_defecto_tiempo_transferencia_entrada,\n  tc4_defecto_tiempo_transferencia_salida,\n  tc4_defecto_falta_presencia,\n  tc4_defecto_presencia_inesperada,\n  tec1_defecto_guardamotor_variador,\n  tec1_defecto_tiempo_transferencia_entrada,\n  tec1_defecto_tiempo_transferencia_salida,\n  tec1_defecto_falta_presencia,\n  tec1_defecto_presencia_inesperada,\n  tec1_defecto_simultaneidad_detectores_elevacion,\n  tec2_defecto_guardamotor_variador,\n  tec2_defecto_tiempo_transferencia_entrada,\n  tec2_defecto_tiempo_transferencia_salida,\n  tec2_defecto_falta_presencia,\n  tec2_defecto_presencia_inesperada,\n  tec2_defecto_simultaneidad_detectores_elevacion,\n  tec2_defecto_tiempo_maniobra_elevacion,\n  elv1_enc1_defecto_guardamotor_variador,\n  elv1_enc1_defecto_tiempo_transferencia_entrada,\n  elv1_enc1_defecto_tiempo_transferencia_salida,\n  elv1_enc1_defecto_falta_presencia,\n  elv1_enc1_defecto_simultaneidad_detectores,\n  elv1_enc1_defecto_tiempo_maniobra,\n  transfer_cadena_elevador_ocupado,\n  timestamp\n) VALUES (\n  1,\n  ${+v.TC1_Defecto_Guardamotor_Variador},\n  ${+v.TC1_Defecto_Tiempo_Transferencia_Entrada},\n  ${+v.TC1_Defecto_Tiempo_Transferencia_Salida},\n  ${+v.TC1_Defecto_Falta_presencia},\n  ${+v.TC1_Defecto_Presencia_inesperada},\n  \n  ${v.EL1_1_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.EL1_1_Defecto_Tiempo_Maniobra},\n  ${v.EL1_1_Defecto_Presencia_Inesperada},\n  ${v.EL1_1_Defecto_Falta_Presencia},\n  ${v.EL1_1_Defecto_Simultaneidad_Detectores},\n  ${v.EL1_1_Defecto_Guardamotor_Transportador_Cadenas},\n  ${v.EL1_1_Defecto_Tiempo_Transferencia_Salida},\n  \n  ${v.EL1_2_Defecto_Tiempo_Maniobra},\n  ${v.EL1_2_Defecto_Variador},\n  ${v.EL1_2_Defecto_Falta_Presencia},\n  ${v.EL1_2_Defecto_Simultaneidad_Detectores},\n  ${v.EL1_2_Defecto_Guardamotor_Elevacion},\n  ${v.EL1_2_Defecto_Busqueda_Posicion},\n  ${v.EL1_2_Defecto_Puerta_Abierta_Arriba},\n  \n  ${v.EL1_3_Defecto_Puerta_Abierta_Abajo},\n  ${v.EL1_3_Defecto_Tiempo_Maniobra},\n  ${v.EL1_3_Defecto_Presencia_Inesperada},\n  ${v.EL1_3_Defecto_Falta_Presencia},\n  ${v.EL1_3_Defecto_Simultaneidad_Detectores},\n  ${v.EL1_3_Defecto_Exceso_Recorrido_Arriba},\n  ${v.EL1_3_Defecto_Exceso_Recorrido_Abajo},\n  \n  ${v.TC2_Defecto_Guardamotor_Variador},\n  ${v.TC2_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.TC2_Defecto_Tiempo_Transferencia_Salida},\n  ${v.TC2_Defecto_Falta_presencia},\n  ${v.TC2_Defecto_Presencia_inesperada},\n  \n  ${v.TC3_Defecto_Guardamotor_Variador},\n  ${v.TC3_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.TC3_Defecto_Tiempo_Transferencia_Salida},\n  ${v.TC3_Defecto_Falta_presencia},\n  ${v.TC3_Defecto_Presencia_inesperada},\n\n  ${v.TC4_Defecto_Guardamotor_Variador},\n  ${v.TC4_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.TC4_Defecto_Tiempo_Transferencia_Salida},\n  ${v.TC4_Defecto_Falta_presencia},\n  ${v.TC4_Defecto_Presencia_inesperada},\n\n  ${v.TEC1_Defecto_Guardamotor_Variador},\n  ${v.TEC1_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.TEC1_Defecto_Tiempo_Transferencia_Salida},\n  ${v.TEC1_Defecto_Falta_presencia},\n  ${v.TEC1_Defecto_Presencia_inesperada},\n  ${v.TEC1_Defecto_Simultaneidad_Detectores_Elevacion},\n\n  ${v.TEC2_Defecto_Guardamotor_Variador},\n  ${v.TEC2_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.TEC2_Defecto_Tiempo_Transferencia_Salida},\n  ${v.TEC2_Defecto_Falta_presencia},\n  ${v.TEC2_Defecto_Presencia_inesperada},\n  ${v.TEC2_Defecto_Simultaneidad_Detectores_Elevacion},\n  ${v.TEC2_Defecto_Tiempo_Maniobra_Elevacion},\n\n  ${v.EL1_ENCL_Defecto_Guardamotor_Variador},\n  ${v.EL1_ENCL_Defecto_Tiempo_Transferencia_Entrada},\n  ${v.EL1_ENCL_Defecto_Tiempo_Transferencia_Salida},\n  ${v.EL1_ENCL_Defecto_Falta_presencia},\n  ${v.EL1_ENCL_Defecto_Simultaneidad_Detectores},\n  ${v.EL1_ENCL_Defecto_Tiempo_Maniobra},\n\n  ${v.TRANSFER_CADENA_ELEVADOR_OCUPADO},\n   NOW()\n)\nON DUPLICATE KEY UPDATE\n  tc1_defecto_guardamotor_variador = VALUES(tc1_defecto_guardamotor_variador),\n  tc1_defecto_tiempo_transferencia_entrada = VALUES(tc1_defecto_tiempo_transferencia_entrada),\n  tc1_defecto_tiempo_transferencia_salida = VALUES(tc1_defecto_tiempo_transferencia_salida),\n  tc1_defecto_falta_presencia = VALUES(tc1_defecto_falta_presencia),\n  tc1_defecto_presencia_inesperada = VALUES(tc1_defecto_presencia_inesperada),\n  elv1_1_defecto_tiempo_transferencia_entrada = VALUES(elv1_1_defecto_tiempo_transferencia_entrada),\n  elv1_1_defecto_tiempo_maniobra = VALUES(elv1_1_defecto_tiempo_maniobra),\n  elv1_1_defecto_presencia_inesperada = VALUES(elv1_1_defecto_presencia_inesperada),\n  elv1_1_defecto_falta_presencia = VALUES(elv1_1_defecto_falta_presencia),\n  elv1_1_defecto_simultaneidad_detectores = VALUES(elv1_1_defecto_simultaneidad_detectores),\n  elv1_1_defecto_guardamotor_variador_transportador = VALUES(elv1_1_defecto_guardamotor_variador_transportador),\n  elv1_1_defecto_tiempo_transferencia_salida = VALUES(elv1_1_defecto_tiempo_transferencia_salida),\n  elv1_1_defecto_busqueda_posicion = VALUES(elv1_1_defecto_busqueda_posicion),\n  elv1_2_defecto_tiempo_maniobra = VALUES(elv1_2_defecto_tiempo_maniobra),\n  elv1_2_defecto_variador = VALUES(elv1_2_defecto_variador),\n  elv1_2_defecto_falta_presencia = VALUES(elv1_2_defecto_falta_presencia),\n  elv1_2_defecto_simultaneidad_detectores = VALUES(elv1_2_defecto_simultaneidad_detectores),\n  elv1_2_defecto_guardamotor_elevacion = VALUES(elv1_2_defecto_guardamotor_elevacion),\n  elv1_2_defecto_busqueda_posicion = VALUES(elv1_2_defecto_busqueda_posicion),\n  elv1_2_defecto_puerta_abierta_arriba = VALUES(elv1_2_defecto_puerta_abierta_arriba),\n  elv1_3_defecto_puerta_abierta_abajo = VALUES(elv1_3_defecto_puerta_abierta_abajo),\n  elv1_3_defecto_tiempo_maniobra = VALUES(elv1_3_defecto_tiempo_maniobra),\n  elv1_3_defecto_presencia_inesperada = VALUES(elv1_3_defecto_presencia_inesperada),\n  elv1_3_defecto_falta_presencia = VALUES(elv1_3_defecto_falta_presencia),\n  elv1_3_defecto_simultaneidad_detectores = VALUES(elv1_3_defecto_simultaneidad_detectores),\n  elv1_3_defecto_exceso_recorrido_arriba = VALUES(elv1_3_defecto_exceso_recorrido_arriba),\n  elv1_3_defecto_exceso_recorrido_abajo = VALUES(elv1_3_defecto_exceso_recorrido_abajo),\n  tc2_defecto_guardamotor_variador = VALUES(tc2_defecto_guardamotor_variador),\n  tc2_defecto_tiempo_transferencia_entrada = VALUES(tc2_defecto_tiempo_transferencia_entrada),\n  tc2_defecto_tiempo_transferencia_salida = VALUES(tc2_defecto_tiempo_transferencia_salida),\n  tc2_defecto_falta_presencia = VALUES(tc2_defecto_falta_presencia),\n  tc2_defecto_presencia_inesperada = VALUES(tc2_defecto_presencia_inesperada),\n  tc3_defecto_guardamotor_variador = VALUES(tc3_defecto_guardamotor_variador),\n  tc3_defecto_tiempo_transferencia_entrada = VALUES(tc3_defecto_tiempo_transferencia_entrada),\n  tc3_defecto_tiempo_transferencia_salida = VALUES(tc3_defecto_tiempo_transferencia_salida),\n  tc3_defecto_falta_presencia = VALUES(tc3_defecto_falta_presencia),\n  tc3_defecto_presencia_inesperada = VALUES(tc3_defecto_presencia_inesperada),\n  tc4_defecto_guardamotor_variador = VALUES(tc4_defecto_guardamotor_variador),\n  tc4_defecto_tiempo_transferencia_entrada = VALUES(tc4_defecto_tiempo_transferencia_entrada),\n  tc4_defecto_tiempo_transferencia_salida = VALUES(tc4_defecto_tiempo_transferencia_salida),\n  tc4_defecto_falta_presencia = VALUES(tc4_defecto_falta_presencia),\n  tc4_defecto_presencia_inesperada = VALUES(tc4_defecto_presencia_inesperada),\n  tec1_defecto_guardamotor_variador = VALUES(tec1_defecto_guardamotor_variador),\n  tec1_defecto_tiempo_transferencia_entrada = VALUES(tec1_defecto_tiempo_transferencia_entrada),\n  tec1_defecto_tiempo_transferencia_salida = VALUES(tec1_defecto_tiempo_transferencia_salida),\n  tec1_defecto_falta_presencia = VALUES(tec1_defecto_falta_presencia),\n  tec1_defecto_presencia_inesperada = VALUES(tec1_defecto_presencia_inesperada),\n  tec1_defecto_simultaneidad_detectores_elevacion = VALUES(tec1_defecto_simultaneidad_detectores_elevacion),\n  tec2_defecto_guardamotor_variador = VALUES(tec2_defecto_guardamotor_variador),\n  tec2_defecto_tiempo_transferencia_entrada = VALUES(tec2_defecto_tiempo_transferencia_entrada),\n  tec2_defecto_tiempo_transferencia_salida = VALUES(tec2_defecto_tiempo_transferencia_salida),\n  tec2_defecto_falta_presencia = VALUES(tec2_defecto_falta_presencia),\n  tec2_defecto_presencia_inesperada = VALUES(tec2_defecto_presencia_inesperada),\n  tec2_defecto_simultaneidad_detectores_elevacion = VALUES(tec2_defecto_simultaneidad_detectores_elevacion),\n  tec2_defecto_tiempo_maniobra_elevacion = VALUES(tec2_defecto_tiempo_maniobra_elevacion),\n  elv1_enc1_defecto_guardamotor_variador = VALUES(elv1_enc1_defecto_guardamotor_variador),\n  elv1_enc1_defecto_tiempo_transferencia_entrada = VALUES(elv1_enc1_defecto_tiempo_transferencia_entrada),\n  elv1_enc1_defecto_tiempo_transferencia_salida = VALUES(elv1_enc1_defecto_tiempo_transferencia_salida),\n  elv1_enc1_defecto_falta_presencia = VALUES(elv1_enc1_defecto_falta_presencia),\n  elv1_enc1_defecto_simultaneidad_detectores = VALUES(elv1_enc1_defecto_simultaneidad_detectores),\n  elv1_enc1_defecto_tiempo_maniobra = VALUES(elv1_enc1_defecto_tiempo_maniobra),\n  transfer_cadena_elevador_ocupado = VALUES(transfer_cadena_elevador_ocupado),\n  timestamp = VALUES(timestamp);\n\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            [
                "355528beaf90f5db"
            ]
        ]
    },
    {
        "id": "773358fd11dce15e",
        "type": "inject",
        "z": "db33502388dab964",
        "name": "5seg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 640,
        "wires": [
            [
                "ef4e5566926a8edf"
            ]
        ]
    }
]